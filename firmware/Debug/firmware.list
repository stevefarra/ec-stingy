
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007258  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08007310  08007310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007414  08007414  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007414  08007414  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007414  08007414  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007414  08007414  00017414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007418  08007418  00017418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800741c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002784  20000074  08007490  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200027f8  08007490  000227f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012518  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a5  00000000  00000000  000325b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00034960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  000358e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176db  00000000  00000000  00036788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128ad  00000000  00000000  0004de63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098622  00000000  00000000  00060710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8d32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e40  00000000  00000000  000f8d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080072f8 	.word	0x080072f8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	080072f8 	.word	0x080072f8

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__aeabi_cdrcmple>:
 8000410:	4684      	mov	ip, r0
 8000412:	0010      	movs	r0, r2
 8000414:	4662      	mov	r2, ip
 8000416:	468c      	mov	ip, r1
 8000418:	0019      	movs	r1, r3
 800041a:	4663      	mov	r3, ip
 800041c:	e000      	b.n	8000420 <__aeabi_cdcmpeq>
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__aeabi_cdcmpeq>:
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000422:	f000 fc35 	bl	8000c90 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	d401      	bmi.n	800042e <__aeabi_cdcmpeq+0xe>
 800042a:	2100      	movs	r1, #0
 800042c:	42c8      	cmn	r0, r1
 800042e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000430 <__aeabi_dcmpeq>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 fb85 	bl	8000b40 <__eqdf2>
 8000436:	4240      	negs	r0, r0
 8000438:	3001      	adds	r0, #1
 800043a:	bd10      	pop	{r4, pc}

0800043c <__aeabi_dcmplt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fc27 	bl	8000c90 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	db01      	blt.n	800044a <__aeabi_dcmplt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_dcmple>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fc1d 	bl	8000c90 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dd01      	ble.n	800045e <__aeabi_dcmple+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmpgt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fbad 	bl	8000bc4 <__gedf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dc01      	bgt.n	8000472 <__aeabi_dcmpgt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpge>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fba3 	bl	8000bc4 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	da01      	bge.n	8000486 <__aeabi_dcmpge+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_d2uiz>:
 800048c:	b570      	push	{r4, r5, r6, lr}
 800048e:	2200      	movs	r2, #0
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <__aeabi_d2uiz+0x38>)
 8000492:	0004      	movs	r4, r0
 8000494:	000d      	movs	r5, r1
 8000496:	f7ff ffef 	bl	8000478 <__aeabi_dcmpge>
 800049a:	2800      	cmp	r0, #0
 800049c:	d104      	bne.n	80004a8 <__aeabi_d2uiz+0x1c>
 800049e:	0020      	movs	r0, r4
 80004a0:	0029      	movs	r1, r5
 80004a2:	f001 fa57 	bl	8001954 <__aeabi_d2iz>
 80004a6:	bd70      	pop	{r4, r5, r6, pc}
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <__aeabi_d2uiz+0x38>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	0020      	movs	r0, r4
 80004ae:	0029      	movs	r1, r5
 80004b0:	f000 febe 	bl	8001230 <__aeabi_dsub>
 80004b4:	f001 fa4e 	bl	8001954 <__aeabi_d2iz>
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	061b      	lsls	r3, r3, #24
 80004bc:	469c      	mov	ip, r3
 80004be:	4460      	add	r0, ip
 80004c0:	e7f1      	b.n	80004a6 <__aeabi_d2uiz+0x1a>
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	41e00000 	.word	0x41e00000

080004c8 <__aeabi_dadd>:
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	464f      	mov	r7, r9
 80004cc:	4646      	mov	r6, r8
 80004ce:	46d6      	mov	lr, sl
 80004d0:	000d      	movs	r5, r1
 80004d2:	0004      	movs	r4, r0
 80004d4:	b5c0      	push	{r6, r7, lr}
 80004d6:	001f      	movs	r7, r3
 80004d8:	0011      	movs	r1, r2
 80004da:	0328      	lsls	r0, r5, #12
 80004dc:	0f62      	lsrs	r2, r4, #29
 80004de:	0a40      	lsrs	r0, r0, #9
 80004e0:	4310      	orrs	r0, r2
 80004e2:	007a      	lsls	r2, r7, #1
 80004e4:	0d52      	lsrs	r2, r2, #21
 80004e6:	00e3      	lsls	r3, r4, #3
 80004e8:	033c      	lsls	r4, r7, #12
 80004ea:	4691      	mov	r9, r2
 80004ec:	0a64      	lsrs	r4, r4, #9
 80004ee:	0ffa      	lsrs	r2, r7, #31
 80004f0:	0f4f      	lsrs	r7, r1, #29
 80004f2:	006e      	lsls	r6, r5, #1
 80004f4:	4327      	orrs	r7, r4
 80004f6:	4692      	mov	sl, r2
 80004f8:	46b8      	mov	r8, r7
 80004fa:	0d76      	lsrs	r6, r6, #21
 80004fc:	0fed      	lsrs	r5, r5, #31
 80004fe:	00c9      	lsls	r1, r1, #3
 8000500:	4295      	cmp	r5, r2
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x3e>
 8000504:	e099      	b.n	800063a <__aeabi_dadd+0x172>
 8000506:	464c      	mov	r4, r9
 8000508:	1b34      	subs	r4, r6, r4
 800050a:	46a4      	mov	ip, r4
 800050c:	2c00      	cmp	r4, #0
 800050e:	dc00      	bgt.n	8000512 <__aeabi_dadd+0x4a>
 8000510:	e07c      	b.n	800060c <__aeabi_dadd+0x144>
 8000512:	464a      	mov	r2, r9
 8000514:	2a00      	cmp	r2, #0
 8000516:	d100      	bne.n	800051a <__aeabi_dadd+0x52>
 8000518:	e0b8      	b.n	800068c <__aeabi_dadd+0x1c4>
 800051a:	4ac5      	ldr	r2, [pc, #788]	; (8000830 <__aeabi_dadd+0x368>)
 800051c:	4296      	cmp	r6, r2
 800051e:	d100      	bne.n	8000522 <__aeabi_dadd+0x5a>
 8000520:	e11c      	b.n	800075c <__aeabi_dadd+0x294>
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	003c      	movs	r4, r7
 8000526:	0412      	lsls	r2, r2, #16
 8000528:	4314      	orrs	r4, r2
 800052a:	46a0      	mov	r8, r4
 800052c:	4662      	mov	r2, ip
 800052e:	2a38      	cmp	r2, #56	; 0x38
 8000530:	dd00      	ble.n	8000534 <__aeabi_dadd+0x6c>
 8000532:	e161      	b.n	80007f8 <__aeabi_dadd+0x330>
 8000534:	2a1f      	cmp	r2, #31
 8000536:	dd00      	ble.n	800053a <__aeabi_dadd+0x72>
 8000538:	e1cc      	b.n	80008d4 <__aeabi_dadd+0x40c>
 800053a:	4664      	mov	r4, ip
 800053c:	2220      	movs	r2, #32
 800053e:	1b12      	subs	r2, r2, r4
 8000540:	4644      	mov	r4, r8
 8000542:	4094      	lsls	r4, r2
 8000544:	000f      	movs	r7, r1
 8000546:	46a1      	mov	r9, r4
 8000548:	4664      	mov	r4, ip
 800054a:	4091      	lsls	r1, r2
 800054c:	40e7      	lsrs	r7, r4
 800054e:	464c      	mov	r4, r9
 8000550:	1e4a      	subs	r2, r1, #1
 8000552:	4191      	sbcs	r1, r2
 8000554:	433c      	orrs	r4, r7
 8000556:	4642      	mov	r2, r8
 8000558:	4321      	orrs	r1, r4
 800055a:	4664      	mov	r4, ip
 800055c:	40e2      	lsrs	r2, r4
 800055e:	1a80      	subs	r0, r0, r2
 8000560:	1a5c      	subs	r4, r3, r1
 8000562:	42a3      	cmp	r3, r4
 8000564:	419b      	sbcs	r3, r3
 8000566:	425f      	negs	r7, r3
 8000568:	1bc7      	subs	r7, r0, r7
 800056a:	023b      	lsls	r3, r7, #8
 800056c:	d400      	bmi.n	8000570 <__aeabi_dadd+0xa8>
 800056e:	e0d0      	b.n	8000712 <__aeabi_dadd+0x24a>
 8000570:	027f      	lsls	r7, r7, #9
 8000572:	0a7f      	lsrs	r7, r7, #9
 8000574:	2f00      	cmp	r7, #0
 8000576:	d100      	bne.n	800057a <__aeabi_dadd+0xb2>
 8000578:	e0ff      	b.n	800077a <__aeabi_dadd+0x2b2>
 800057a:	0038      	movs	r0, r7
 800057c:	f001 fa76 	bl	8001a6c <__clzsi2>
 8000580:	0001      	movs	r1, r0
 8000582:	3908      	subs	r1, #8
 8000584:	2320      	movs	r3, #32
 8000586:	0022      	movs	r2, r4
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	408f      	lsls	r7, r1
 800058c:	40da      	lsrs	r2, r3
 800058e:	408c      	lsls	r4, r1
 8000590:	4317      	orrs	r7, r2
 8000592:	42b1      	cmp	r1, r6
 8000594:	da00      	bge.n	8000598 <__aeabi_dadd+0xd0>
 8000596:	e0ff      	b.n	8000798 <__aeabi_dadd+0x2d0>
 8000598:	1b89      	subs	r1, r1, r6
 800059a:	1c4b      	adds	r3, r1, #1
 800059c:	2b1f      	cmp	r3, #31
 800059e:	dd00      	ble.n	80005a2 <__aeabi_dadd+0xda>
 80005a0:	e0a8      	b.n	80006f4 <__aeabi_dadd+0x22c>
 80005a2:	2220      	movs	r2, #32
 80005a4:	0039      	movs	r1, r7
 80005a6:	1ad2      	subs	r2, r2, r3
 80005a8:	0020      	movs	r0, r4
 80005aa:	4094      	lsls	r4, r2
 80005ac:	4091      	lsls	r1, r2
 80005ae:	40d8      	lsrs	r0, r3
 80005b0:	1e62      	subs	r2, r4, #1
 80005b2:	4194      	sbcs	r4, r2
 80005b4:	40df      	lsrs	r7, r3
 80005b6:	2600      	movs	r6, #0
 80005b8:	4301      	orrs	r1, r0
 80005ba:	430c      	orrs	r4, r1
 80005bc:	0763      	lsls	r3, r4, #29
 80005be:	d009      	beq.n	80005d4 <__aeabi_dadd+0x10c>
 80005c0:	230f      	movs	r3, #15
 80005c2:	4023      	ands	r3, r4
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d005      	beq.n	80005d4 <__aeabi_dadd+0x10c>
 80005c8:	1d23      	adds	r3, r4, #4
 80005ca:	42a3      	cmp	r3, r4
 80005cc:	41a4      	sbcs	r4, r4
 80005ce:	4264      	negs	r4, r4
 80005d0:	193f      	adds	r7, r7, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	023b      	lsls	r3, r7, #8
 80005d6:	d400      	bmi.n	80005da <__aeabi_dadd+0x112>
 80005d8:	e09e      	b.n	8000718 <__aeabi_dadd+0x250>
 80005da:	4b95      	ldr	r3, [pc, #596]	; (8000830 <__aeabi_dadd+0x368>)
 80005dc:	3601      	adds	r6, #1
 80005de:	429e      	cmp	r6, r3
 80005e0:	d100      	bne.n	80005e4 <__aeabi_dadd+0x11c>
 80005e2:	e0b7      	b.n	8000754 <__aeabi_dadd+0x28c>
 80005e4:	4a93      	ldr	r2, [pc, #588]	; (8000834 <__aeabi_dadd+0x36c>)
 80005e6:	08e4      	lsrs	r4, r4, #3
 80005e8:	4017      	ands	r7, r2
 80005ea:	077b      	lsls	r3, r7, #29
 80005ec:	0571      	lsls	r1, r6, #21
 80005ee:	027f      	lsls	r7, r7, #9
 80005f0:	4323      	orrs	r3, r4
 80005f2:	0b3f      	lsrs	r7, r7, #12
 80005f4:	0d4a      	lsrs	r2, r1, #21
 80005f6:	0512      	lsls	r2, r2, #20
 80005f8:	433a      	orrs	r2, r7
 80005fa:	07ed      	lsls	r5, r5, #31
 80005fc:	432a      	orrs	r2, r5
 80005fe:	0018      	movs	r0, r3
 8000600:	0011      	movs	r1, r2
 8000602:	bce0      	pop	{r5, r6, r7}
 8000604:	46ba      	mov	sl, r7
 8000606:	46b1      	mov	r9, r6
 8000608:	46a8      	mov	r8, r5
 800060a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060c:	2c00      	cmp	r4, #0
 800060e:	d04b      	beq.n	80006a8 <__aeabi_dadd+0x1e0>
 8000610:	464c      	mov	r4, r9
 8000612:	1ba4      	subs	r4, r4, r6
 8000614:	46a4      	mov	ip, r4
 8000616:	2e00      	cmp	r6, #0
 8000618:	d000      	beq.n	800061c <__aeabi_dadd+0x154>
 800061a:	e123      	b.n	8000864 <__aeabi_dadd+0x39c>
 800061c:	0004      	movs	r4, r0
 800061e:	431c      	orrs	r4, r3
 8000620:	d100      	bne.n	8000624 <__aeabi_dadd+0x15c>
 8000622:	e1af      	b.n	8000984 <__aeabi_dadd+0x4bc>
 8000624:	4662      	mov	r2, ip
 8000626:	1e54      	subs	r4, r2, #1
 8000628:	2a01      	cmp	r2, #1
 800062a:	d100      	bne.n	800062e <__aeabi_dadd+0x166>
 800062c:	e215      	b.n	8000a5a <__aeabi_dadd+0x592>
 800062e:	4d80      	ldr	r5, [pc, #512]	; (8000830 <__aeabi_dadd+0x368>)
 8000630:	45ac      	cmp	ip, r5
 8000632:	d100      	bne.n	8000636 <__aeabi_dadd+0x16e>
 8000634:	e1c8      	b.n	80009c8 <__aeabi_dadd+0x500>
 8000636:	46a4      	mov	ip, r4
 8000638:	e11b      	b.n	8000872 <__aeabi_dadd+0x3aa>
 800063a:	464a      	mov	r2, r9
 800063c:	1ab2      	subs	r2, r6, r2
 800063e:	4694      	mov	ip, r2
 8000640:	2a00      	cmp	r2, #0
 8000642:	dc00      	bgt.n	8000646 <__aeabi_dadd+0x17e>
 8000644:	e0ac      	b.n	80007a0 <__aeabi_dadd+0x2d8>
 8000646:	464a      	mov	r2, r9
 8000648:	2a00      	cmp	r2, #0
 800064a:	d043      	beq.n	80006d4 <__aeabi_dadd+0x20c>
 800064c:	4a78      	ldr	r2, [pc, #480]	; (8000830 <__aeabi_dadd+0x368>)
 800064e:	4296      	cmp	r6, r2
 8000650:	d100      	bne.n	8000654 <__aeabi_dadd+0x18c>
 8000652:	e1af      	b.n	80009b4 <__aeabi_dadd+0x4ec>
 8000654:	2280      	movs	r2, #128	; 0x80
 8000656:	003c      	movs	r4, r7
 8000658:	0412      	lsls	r2, r2, #16
 800065a:	4314      	orrs	r4, r2
 800065c:	46a0      	mov	r8, r4
 800065e:	4662      	mov	r2, ip
 8000660:	2a38      	cmp	r2, #56	; 0x38
 8000662:	dc67      	bgt.n	8000734 <__aeabi_dadd+0x26c>
 8000664:	2a1f      	cmp	r2, #31
 8000666:	dc00      	bgt.n	800066a <__aeabi_dadd+0x1a2>
 8000668:	e15f      	b.n	800092a <__aeabi_dadd+0x462>
 800066a:	4647      	mov	r7, r8
 800066c:	3a20      	subs	r2, #32
 800066e:	40d7      	lsrs	r7, r2
 8000670:	4662      	mov	r2, ip
 8000672:	2a20      	cmp	r2, #32
 8000674:	d005      	beq.n	8000682 <__aeabi_dadd+0x1ba>
 8000676:	4664      	mov	r4, ip
 8000678:	2240      	movs	r2, #64	; 0x40
 800067a:	1b12      	subs	r2, r2, r4
 800067c:	4644      	mov	r4, r8
 800067e:	4094      	lsls	r4, r2
 8000680:	4321      	orrs	r1, r4
 8000682:	1e4a      	subs	r2, r1, #1
 8000684:	4191      	sbcs	r1, r2
 8000686:	000c      	movs	r4, r1
 8000688:	433c      	orrs	r4, r7
 800068a:	e057      	b.n	800073c <__aeabi_dadd+0x274>
 800068c:	003a      	movs	r2, r7
 800068e:	430a      	orrs	r2, r1
 8000690:	d100      	bne.n	8000694 <__aeabi_dadd+0x1cc>
 8000692:	e105      	b.n	80008a0 <__aeabi_dadd+0x3d8>
 8000694:	0022      	movs	r2, r4
 8000696:	3a01      	subs	r2, #1
 8000698:	2c01      	cmp	r4, #1
 800069a:	d100      	bne.n	800069e <__aeabi_dadd+0x1d6>
 800069c:	e182      	b.n	80009a4 <__aeabi_dadd+0x4dc>
 800069e:	4c64      	ldr	r4, [pc, #400]	; (8000830 <__aeabi_dadd+0x368>)
 80006a0:	45a4      	cmp	ip, r4
 80006a2:	d05b      	beq.n	800075c <__aeabi_dadd+0x294>
 80006a4:	4694      	mov	ip, r2
 80006a6:	e741      	b.n	800052c <__aeabi_dadd+0x64>
 80006a8:	4c63      	ldr	r4, [pc, #396]	; (8000838 <__aeabi_dadd+0x370>)
 80006aa:	1c77      	adds	r7, r6, #1
 80006ac:	4227      	tst	r7, r4
 80006ae:	d000      	beq.n	80006b2 <__aeabi_dadd+0x1ea>
 80006b0:	e0c4      	b.n	800083c <__aeabi_dadd+0x374>
 80006b2:	0004      	movs	r4, r0
 80006b4:	431c      	orrs	r4, r3
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d000      	beq.n	80006bc <__aeabi_dadd+0x1f4>
 80006ba:	e169      	b.n	8000990 <__aeabi_dadd+0x4c8>
 80006bc:	2c00      	cmp	r4, #0
 80006be:	d100      	bne.n	80006c2 <__aeabi_dadd+0x1fa>
 80006c0:	e1bf      	b.n	8000a42 <__aeabi_dadd+0x57a>
 80006c2:	4644      	mov	r4, r8
 80006c4:	430c      	orrs	r4, r1
 80006c6:	d000      	beq.n	80006ca <__aeabi_dadd+0x202>
 80006c8:	e1d0      	b.n	8000a6c <__aeabi_dadd+0x5a4>
 80006ca:	0742      	lsls	r2, r0, #29
 80006cc:	08db      	lsrs	r3, r3, #3
 80006ce:	4313      	orrs	r3, r2
 80006d0:	08c0      	lsrs	r0, r0, #3
 80006d2:	e029      	b.n	8000728 <__aeabi_dadd+0x260>
 80006d4:	003a      	movs	r2, r7
 80006d6:	430a      	orrs	r2, r1
 80006d8:	d100      	bne.n	80006dc <__aeabi_dadd+0x214>
 80006da:	e170      	b.n	80009be <__aeabi_dadd+0x4f6>
 80006dc:	4662      	mov	r2, ip
 80006de:	4664      	mov	r4, ip
 80006e0:	3a01      	subs	r2, #1
 80006e2:	2c01      	cmp	r4, #1
 80006e4:	d100      	bne.n	80006e8 <__aeabi_dadd+0x220>
 80006e6:	e0e0      	b.n	80008aa <__aeabi_dadd+0x3e2>
 80006e8:	4c51      	ldr	r4, [pc, #324]	; (8000830 <__aeabi_dadd+0x368>)
 80006ea:	45a4      	cmp	ip, r4
 80006ec:	d100      	bne.n	80006f0 <__aeabi_dadd+0x228>
 80006ee:	e161      	b.n	80009b4 <__aeabi_dadd+0x4ec>
 80006f0:	4694      	mov	ip, r2
 80006f2:	e7b4      	b.n	800065e <__aeabi_dadd+0x196>
 80006f4:	003a      	movs	r2, r7
 80006f6:	391f      	subs	r1, #31
 80006f8:	40ca      	lsrs	r2, r1
 80006fa:	0011      	movs	r1, r2
 80006fc:	2b20      	cmp	r3, #32
 80006fe:	d003      	beq.n	8000708 <__aeabi_dadd+0x240>
 8000700:	2240      	movs	r2, #64	; 0x40
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	409f      	lsls	r7, r3
 8000706:	433c      	orrs	r4, r7
 8000708:	1e63      	subs	r3, r4, #1
 800070a:	419c      	sbcs	r4, r3
 800070c:	2700      	movs	r7, #0
 800070e:	2600      	movs	r6, #0
 8000710:	430c      	orrs	r4, r1
 8000712:	0763      	lsls	r3, r4, #29
 8000714:	d000      	beq.n	8000718 <__aeabi_dadd+0x250>
 8000716:	e753      	b.n	80005c0 <__aeabi_dadd+0xf8>
 8000718:	46b4      	mov	ip, r6
 800071a:	08e4      	lsrs	r4, r4, #3
 800071c:	077b      	lsls	r3, r7, #29
 800071e:	4323      	orrs	r3, r4
 8000720:	08f8      	lsrs	r0, r7, #3
 8000722:	4a43      	ldr	r2, [pc, #268]	; (8000830 <__aeabi_dadd+0x368>)
 8000724:	4594      	cmp	ip, r2
 8000726:	d01d      	beq.n	8000764 <__aeabi_dadd+0x29c>
 8000728:	4662      	mov	r2, ip
 800072a:	0307      	lsls	r7, r0, #12
 800072c:	0552      	lsls	r2, r2, #21
 800072e:	0b3f      	lsrs	r7, r7, #12
 8000730:	0d52      	lsrs	r2, r2, #21
 8000732:	e760      	b.n	80005f6 <__aeabi_dadd+0x12e>
 8000734:	4644      	mov	r4, r8
 8000736:	430c      	orrs	r4, r1
 8000738:	1e62      	subs	r2, r4, #1
 800073a:	4194      	sbcs	r4, r2
 800073c:	18e4      	adds	r4, r4, r3
 800073e:	429c      	cmp	r4, r3
 8000740:	419b      	sbcs	r3, r3
 8000742:	425f      	negs	r7, r3
 8000744:	183f      	adds	r7, r7, r0
 8000746:	023b      	lsls	r3, r7, #8
 8000748:	d5e3      	bpl.n	8000712 <__aeabi_dadd+0x24a>
 800074a:	4b39      	ldr	r3, [pc, #228]	; (8000830 <__aeabi_dadd+0x368>)
 800074c:	3601      	adds	r6, #1
 800074e:	429e      	cmp	r6, r3
 8000750:	d000      	beq.n	8000754 <__aeabi_dadd+0x28c>
 8000752:	e0b5      	b.n	80008c0 <__aeabi_dadd+0x3f8>
 8000754:	0032      	movs	r2, r6
 8000756:	2700      	movs	r7, #0
 8000758:	2300      	movs	r3, #0
 800075a:	e74c      	b.n	80005f6 <__aeabi_dadd+0x12e>
 800075c:	0742      	lsls	r2, r0, #29
 800075e:	08db      	lsrs	r3, r3, #3
 8000760:	4313      	orrs	r3, r2
 8000762:	08c0      	lsrs	r0, r0, #3
 8000764:	001a      	movs	r2, r3
 8000766:	4302      	orrs	r2, r0
 8000768:	d100      	bne.n	800076c <__aeabi_dadd+0x2a4>
 800076a:	e1e1      	b.n	8000b30 <__aeabi_dadd+0x668>
 800076c:	2780      	movs	r7, #128	; 0x80
 800076e:	033f      	lsls	r7, r7, #12
 8000770:	4307      	orrs	r7, r0
 8000772:	033f      	lsls	r7, r7, #12
 8000774:	4a2e      	ldr	r2, [pc, #184]	; (8000830 <__aeabi_dadd+0x368>)
 8000776:	0b3f      	lsrs	r7, r7, #12
 8000778:	e73d      	b.n	80005f6 <__aeabi_dadd+0x12e>
 800077a:	0020      	movs	r0, r4
 800077c:	f001 f976 	bl	8001a6c <__clzsi2>
 8000780:	0001      	movs	r1, r0
 8000782:	3118      	adds	r1, #24
 8000784:	291f      	cmp	r1, #31
 8000786:	dc00      	bgt.n	800078a <__aeabi_dadd+0x2c2>
 8000788:	e6fc      	b.n	8000584 <__aeabi_dadd+0xbc>
 800078a:	3808      	subs	r0, #8
 800078c:	4084      	lsls	r4, r0
 800078e:	0027      	movs	r7, r4
 8000790:	2400      	movs	r4, #0
 8000792:	42b1      	cmp	r1, r6
 8000794:	db00      	blt.n	8000798 <__aeabi_dadd+0x2d0>
 8000796:	e6ff      	b.n	8000598 <__aeabi_dadd+0xd0>
 8000798:	4a26      	ldr	r2, [pc, #152]	; (8000834 <__aeabi_dadd+0x36c>)
 800079a:	1a76      	subs	r6, r6, r1
 800079c:	4017      	ands	r7, r2
 800079e:	e70d      	b.n	80005bc <__aeabi_dadd+0xf4>
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d02f      	beq.n	8000804 <__aeabi_dadd+0x33c>
 80007a4:	464a      	mov	r2, r9
 80007a6:	1b92      	subs	r2, r2, r6
 80007a8:	4694      	mov	ip, r2
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x2e8>
 80007ae:	e0ad      	b.n	800090c <__aeabi_dadd+0x444>
 80007b0:	4a1f      	ldr	r2, [pc, #124]	; (8000830 <__aeabi_dadd+0x368>)
 80007b2:	4591      	cmp	r9, r2
 80007b4:	d100      	bne.n	80007b8 <__aeabi_dadd+0x2f0>
 80007b6:	e10f      	b.n	80009d8 <__aeabi_dadd+0x510>
 80007b8:	2280      	movs	r2, #128	; 0x80
 80007ba:	0412      	lsls	r2, r2, #16
 80007bc:	4310      	orrs	r0, r2
 80007be:	4662      	mov	r2, ip
 80007c0:	2a38      	cmp	r2, #56	; 0x38
 80007c2:	dd00      	ble.n	80007c6 <__aeabi_dadd+0x2fe>
 80007c4:	e10f      	b.n	80009e6 <__aeabi_dadd+0x51e>
 80007c6:	2a1f      	cmp	r2, #31
 80007c8:	dd00      	ble.n	80007cc <__aeabi_dadd+0x304>
 80007ca:	e180      	b.n	8000ace <__aeabi_dadd+0x606>
 80007cc:	4664      	mov	r4, ip
 80007ce:	2220      	movs	r2, #32
 80007d0:	001e      	movs	r6, r3
 80007d2:	1b12      	subs	r2, r2, r4
 80007d4:	4667      	mov	r7, ip
 80007d6:	0004      	movs	r4, r0
 80007d8:	4093      	lsls	r3, r2
 80007da:	4094      	lsls	r4, r2
 80007dc:	40fe      	lsrs	r6, r7
 80007de:	1e5a      	subs	r2, r3, #1
 80007e0:	4193      	sbcs	r3, r2
 80007e2:	40f8      	lsrs	r0, r7
 80007e4:	4334      	orrs	r4, r6
 80007e6:	431c      	orrs	r4, r3
 80007e8:	4480      	add	r8, r0
 80007ea:	1864      	adds	r4, r4, r1
 80007ec:	428c      	cmp	r4, r1
 80007ee:	41bf      	sbcs	r7, r7
 80007f0:	427f      	negs	r7, r7
 80007f2:	464e      	mov	r6, r9
 80007f4:	4447      	add	r7, r8
 80007f6:	e7a6      	b.n	8000746 <__aeabi_dadd+0x27e>
 80007f8:	4642      	mov	r2, r8
 80007fa:	430a      	orrs	r2, r1
 80007fc:	0011      	movs	r1, r2
 80007fe:	1e4a      	subs	r2, r1, #1
 8000800:	4191      	sbcs	r1, r2
 8000802:	e6ad      	b.n	8000560 <__aeabi_dadd+0x98>
 8000804:	4c0c      	ldr	r4, [pc, #48]	; (8000838 <__aeabi_dadd+0x370>)
 8000806:	1c72      	adds	r2, r6, #1
 8000808:	4222      	tst	r2, r4
 800080a:	d000      	beq.n	800080e <__aeabi_dadd+0x346>
 800080c:	e0a1      	b.n	8000952 <__aeabi_dadd+0x48a>
 800080e:	0002      	movs	r2, r0
 8000810:	431a      	orrs	r2, r3
 8000812:	2e00      	cmp	r6, #0
 8000814:	d000      	beq.n	8000818 <__aeabi_dadd+0x350>
 8000816:	e0fa      	b.n	8000a0e <__aeabi_dadd+0x546>
 8000818:	2a00      	cmp	r2, #0
 800081a:	d100      	bne.n	800081e <__aeabi_dadd+0x356>
 800081c:	e145      	b.n	8000aaa <__aeabi_dadd+0x5e2>
 800081e:	003a      	movs	r2, r7
 8000820:	430a      	orrs	r2, r1
 8000822:	d000      	beq.n	8000826 <__aeabi_dadd+0x35e>
 8000824:	e146      	b.n	8000ab4 <__aeabi_dadd+0x5ec>
 8000826:	0742      	lsls	r2, r0, #29
 8000828:	08db      	lsrs	r3, r3, #3
 800082a:	4313      	orrs	r3, r2
 800082c:	08c0      	lsrs	r0, r0, #3
 800082e:	e77b      	b.n	8000728 <__aeabi_dadd+0x260>
 8000830:	000007ff 	.word	0x000007ff
 8000834:	ff7fffff 	.word	0xff7fffff
 8000838:	000007fe 	.word	0x000007fe
 800083c:	4647      	mov	r7, r8
 800083e:	1a5c      	subs	r4, r3, r1
 8000840:	1bc2      	subs	r2, r0, r7
 8000842:	42a3      	cmp	r3, r4
 8000844:	41bf      	sbcs	r7, r7
 8000846:	427f      	negs	r7, r7
 8000848:	46b9      	mov	r9, r7
 800084a:	0017      	movs	r7, r2
 800084c:	464a      	mov	r2, r9
 800084e:	1abf      	subs	r7, r7, r2
 8000850:	023a      	lsls	r2, r7, #8
 8000852:	d500      	bpl.n	8000856 <__aeabi_dadd+0x38e>
 8000854:	e08d      	b.n	8000972 <__aeabi_dadd+0x4aa>
 8000856:	0023      	movs	r3, r4
 8000858:	433b      	orrs	r3, r7
 800085a:	d000      	beq.n	800085e <__aeabi_dadd+0x396>
 800085c:	e68a      	b.n	8000574 <__aeabi_dadd+0xac>
 800085e:	2000      	movs	r0, #0
 8000860:	2500      	movs	r5, #0
 8000862:	e761      	b.n	8000728 <__aeabi_dadd+0x260>
 8000864:	4cb4      	ldr	r4, [pc, #720]	; (8000b38 <__aeabi_dadd+0x670>)
 8000866:	45a1      	cmp	r9, r4
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x3a4>
 800086a:	e0ad      	b.n	80009c8 <__aeabi_dadd+0x500>
 800086c:	2480      	movs	r4, #128	; 0x80
 800086e:	0424      	lsls	r4, r4, #16
 8000870:	4320      	orrs	r0, r4
 8000872:	4664      	mov	r4, ip
 8000874:	2c38      	cmp	r4, #56	; 0x38
 8000876:	dc3d      	bgt.n	80008f4 <__aeabi_dadd+0x42c>
 8000878:	4662      	mov	r2, ip
 800087a:	2c1f      	cmp	r4, #31
 800087c:	dd00      	ble.n	8000880 <__aeabi_dadd+0x3b8>
 800087e:	e0b7      	b.n	80009f0 <__aeabi_dadd+0x528>
 8000880:	2520      	movs	r5, #32
 8000882:	001e      	movs	r6, r3
 8000884:	1b2d      	subs	r5, r5, r4
 8000886:	0004      	movs	r4, r0
 8000888:	40ab      	lsls	r3, r5
 800088a:	40ac      	lsls	r4, r5
 800088c:	40d6      	lsrs	r6, r2
 800088e:	40d0      	lsrs	r0, r2
 8000890:	4642      	mov	r2, r8
 8000892:	1e5d      	subs	r5, r3, #1
 8000894:	41ab      	sbcs	r3, r5
 8000896:	4334      	orrs	r4, r6
 8000898:	1a12      	subs	r2, r2, r0
 800089a:	4690      	mov	r8, r2
 800089c:	4323      	orrs	r3, r4
 800089e:	e02c      	b.n	80008fa <__aeabi_dadd+0x432>
 80008a0:	0742      	lsls	r2, r0, #29
 80008a2:	08db      	lsrs	r3, r3, #3
 80008a4:	4313      	orrs	r3, r2
 80008a6:	08c0      	lsrs	r0, r0, #3
 80008a8:	e73b      	b.n	8000722 <__aeabi_dadd+0x25a>
 80008aa:	185c      	adds	r4, r3, r1
 80008ac:	429c      	cmp	r4, r3
 80008ae:	419b      	sbcs	r3, r3
 80008b0:	4440      	add	r0, r8
 80008b2:	425b      	negs	r3, r3
 80008b4:	18c7      	adds	r7, r0, r3
 80008b6:	2601      	movs	r6, #1
 80008b8:	023b      	lsls	r3, r7, #8
 80008ba:	d400      	bmi.n	80008be <__aeabi_dadd+0x3f6>
 80008bc:	e729      	b.n	8000712 <__aeabi_dadd+0x24a>
 80008be:	2602      	movs	r6, #2
 80008c0:	4a9e      	ldr	r2, [pc, #632]	; (8000b3c <__aeabi_dadd+0x674>)
 80008c2:	0863      	lsrs	r3, r4, #1
 80008c4:	4017      	ands	r7, r2
 80008c6:	2201      	movs	r2, #1
 80008c8:	4014      	ands	r4, r2
 80008ca:	431c      	orrs	r4, r3
 80008cc:	07fb      	lsls	r3, r7, #31
 80008ce:	431c      	orrs	r4, r3
 80008d0:	087f      	lsrs	r7, r7, #1
 80008d2:	e673      	b.n	80005bc <__aeabi_dadd+0xf4>
 80008d4:	4644      	mov	r4, r8
 80008d6:	3a20      	subs	r2, #32
 80008d8:	40d4      	lsrs	r4, r2
 80008da:	4662      	mov	r2, ip
 80008dc:	2a20      	cmp	r2, #32
 80008de:	d005      	beq.n	80008ec <__aeabi_dadd+0x424>
 80008e0:	4667      	mov	r7, ip
 80008e2:	2240      	movs	r2, #64	; 0x40
 80008e4:	1bd2      	subs	r2, r2, r7
 80008e6:	4647      	mov	r7, r8
 80008e8:	4097      	lsls	r7, r2
 80008ea:	4339      	orrs	r1, r7
 80008ec:	1e4a      	subs	r2, r1, #1
 80008ee:	4191      	sbcs	r1, r2
 80008f0:	4321      	orrs	r1, r4
 80008f2:	e635      	b.n	8000560 <__aeabi_dadd+0x98>
 80008f4:	4303      	orrs	r3, r0
 80008f6:	1e58      	subs	r0, r3, #1
 80008f8:	4183      	sbcs	r3, r0
 80008fa:	1acc      	subs	r4, r1, r3
 80008fc:	42a1      	cmp	r1, r4
 80008fe:	41bf      	sbcs	r7, r7
 8000900:	4643      	mov	r3, r8
 8000902:	427f      	negs	r7, r7
 8000904:	4655      	mov	r5, sl
 8000906:	464e      	mov	r6, r9
 8000908:	1bdf      	subs	r7, r3, r7
 800090a:	e62e      	b.n	800056a <__aeabi_dadd+0xa2>
 800090c:	0002      	movs	r2, r0
 800090e:	431a      	orrs	r2, r3
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x44c>
 8000912:	e0bd      	b.n	8000a90 <__aeabi_dadd+0x5c8>
 8000914:	4662      	mov	r2, ip
 8000916:	4664      	mov	r4, ip
 8000918:	3a01      	subs	r2, #1
 800091a:	2c01      	cmp	r4, #1
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x458>
 800091e:	e0e5      	b.n	8000aec <__aeabi_dadd+0x624>
 8000920:	4c85      	ldr	r4, [pc, #532]	; (8000b38 <__aeabi_dadd+0x670>)
 8000922:	45a4      	cmp	ip, r4
 8000924:	d058      	beq.n	80009d8 <__aeabi_dadd+0x510>
 8000926:	4694      	mov	ip, r2
 8000928:	e749      	b.n	80007be <__aeabi_dadd+0x2f6>
 800092a:	4664      	mov	r4, ip
 800092c:	2220      	movs	r2, #32
 800092e:	1b12      	subs	r2, r2, r4
 8000930:	4644      	mov	r4, r8
 8000932:	4094      	lsls	r4, r2
 8000934:	000f      	movs	r7, r1
 8000936:	46a1      	mov	r9, r4
 8000938:	4664      	mov	r4, ip
 800093a:	4091      	lsls	r1, r2
 800093c:	40e7      	lsrs	r7, r4
 800093e:	464c      	mov	r4, r9
 8000940:	1e4a      	subs	r2, r1, #1
 8000942:	4191      	sbcs	r1, r2
 8000944:	433c      	orrs	r4, r7
 8000946:	4642      	mov	r2, r8
 8000948:	430c      	orrs	r4, r1
 800094a:	4661      	mov	r1, ip
 800094c:	40ca      	lsrs	r2, r1
 800094e:	1880      	adds	r0, r0, r2
 8000950:	e6f4      	b.n	800073c <__aeabi_dadd+0x274>
 8000952:	4c79      	ldr	r4, [pc, #484]	; (8000b38 <__aeabi_dadd+0x670>)
 8000954:	42a2      	cmp	r2, r4
 8000956:	d100      	bne.n	800095a <__aeabi_dadd+0x492>
 8000958:	e6fd      	b.n	8000756 <__aeabi_dadd+0x28e>
 800095a:	1859      	adds	r1, r3, r1
 800095c:	4299      	cmp	r1, r3
 800095e:	419b      	sbcs	r3, r3
 8000960:	4440      	add	r0, r8
 8000962:	425f      	negs	r7, r3
 8000964:	19c7      	adds	r7, r0, r7
 8000966:	07fc      	lsls	r4, r7, #31
 8000968:	0849      	lsrs	r1, r1, #1
 800096a:	0016      	movs	r6, r2
 800096c:	430c      	orrs	r4, r1
 800096e:	087f      	lsrs	r7, r7, #1
 8000970:	e6cf      	b.n	8000712 <__aeabi_dadd+0x24a>
 8000972:	1acc      	subs	r4, r1, r3
 8000974:	42a1      	cmp	r1, r4
 8000976:	41bf      	sbcs	r7, r7
 8000978:	4643      	mov	r3, r8
 800097a:	427f      	negs	r7, r7
 800097c:	1a18      	subs	r0, r3, r0
 800097e:	4655      	mov	r5, sl
 8000980:	1bc7      	subs	r7, r0, r7
 8000982:	e5f7      	b.n	8000574 <__aeabi_dadd+0xac>
 8000984:	08c9      	lsrs	r1, r1, #3
 8000986:	077b      	lsls	r3, r7, #29
 8000988:	4655      	mov	r5, sl
 800098a:	430b      	orrs	r3, r1
 800098c:	08f8      	lsrs	r0, r7, #3
 800098e:	e6c8      	b.n	8000722 <__aeabi_dadd+0x25a>
 8000990:	2c00      	cmp	r4, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x4ce>
 8000994:	e081      	b.n	8000a9a <__aeabi_dadd+0x5d2>
 8000996:	4643      	mov	r3, r8
 8000998:	430b      	orrs	r3, r1
 800099a:	d115      	bne.n	80009c8 <__aeabi_dadd+0x500>
 800099c:	2080      	movs	r0, #128	; 0x80
 800099e:	2500      	movs	r5, #0
 80009a0:	0300      	lsls	r0, r0, #12
 80009a2:	e6e3      	b.n	800076c <__aeabi_dadd+0x2a4>
 80009a4:	1a5c      	subs	r4, r3, r1
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	419b      	sbcs	r3, r3
 80009aa:	1bc7      	subs	r7, r0, r7
 80009ac:	425b      	negs	r3, r3
 80009ae:	2601      	movs	r6, #1
 80009b0:	1aff      	subs	r7, r7, r3
 80009b2:	e5da      	b.n	800056a <__aeabi_dadd+0xa2>
 80009b4:	0742      	lsls	r2, r0, #29
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	4313      	orrs	r3, r2
 80009ba:	08c0      	lsrs	r0, r0, #3
 80009bc:	e6d2      	b.n	8000764 <__aeabi_dadd+0x29c>
 80009be:	0742      	lsls	r2, r0, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c0      	lsrs	r0, r0, #3
 80009c6:	e6ac      	b.n	8000722 <__aeabi_dadd+0x25a>
 80009c8:	4643      	mov	r3, r8
 80009ca:	4642      	mov	r2, r8
 80009cc:	08c9      	lsrs	r1, r1, #3
 80009ce:	075b      	lsls	r3, r3, #29
 80009d0:	4655      	mov	r5, sl
 80009d2:	430b      	orrs	r3, r1
 80009d4:	08d0      	lsrs	r0, r2, #3
 80009d6:	e6c5      	b.n	8000764 <__aeabi_dadd+0x29c>
 80009d8:	4643      	mov	r3, r8
 80009da:	4642      	mov	r2, r8
 80009dc:	075b      	lsls	r3, r3, #29
 80009de:	08c9      	lsrs	r1, r1, #3
 80009e0:	430b      	orrs	r3, r1
 80009e2:	08d0      	lsrs	r0, r2, #3
 80009e4:	e6be      	b.n	8000764 <__aeabi_dadd+0x29c>
 80009e6:	4303      	orrs	r3, r0
 80009e8:	001c      	movs	r4, r3
 80009ea:	1e63      	subs	r3, r4, #1
 80009ec:	419c      	sbcs	r4, r3
 80009ee:	e6fc      	b.n	80007ea <__aeabi_dadd+0x322>
 80009f0:	0002      	movs	r2, r0
 80009f2:	3c20      	subs	r4, #32
 80009f4:	40e2      	lsrs	r2, r4
 80009f6:	0014      	movs	r4, r2
 80009f8:	4662      	mov	r2, ip
 80009fa:	2a20      	cmp	r2, #32
 80009fc:	d003      	beq.n	8000a06 <__aeabi_dadd+0x53e>
 80009fe:	2540      	movs	r5, #64	; 0x40
 8000a00:	1aad      	subs	r5, r5, r2
 8000a02:	40a8      	lsls	r0, r5
 8000a04:	4303      	orrs	r3, r0
 8000a06:	1e58      	subs	r0, r3, #1
 8000a08:	4183      	sbcs	r3, r0
 8000a0a:	4323      	orrs	r3, r4
 8000a0c:	e775      	b.n	80008fa <__aeabi_dadd+0x432>
 8000a0e:	2a00      	cmp	r2, #0
 8000a10:	d0e2      	beq.n	80009d8 <__aeabi_dadd+0x510>
 8000a12:	003a      	movs	r2, r7
 8000a14:	430a      	orrs	r2, r1
 8000a16:	d0cd      	beq.n	80009b4 <__aeabi_dadd+0x4ec>
 8000a18:	0742      	lsls	r2, r0, #29
 8000a1a:	08db      	lsrs	r3, r3, #3
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	08c0      	lsrs	r0, r0, #3
 8000a22:	0312      	lsls	r2, r2, #12
 8000a24:	4210      	tst	r0, r2
 8000a26:	d006      	beq.n	8000a36 <__aeabi_dadd+0x56e>
 8000a28:	08fc      	lsrs	r4, r7, #3
 8000a2a:	4214      	tst	r4, r2
 8000a2c:	d103      	bne.n	8000a36 <__aeabi_dadd+0x56e>
 8000a2e:	0020      	movs	r0, r4
 8000a30:	08cb      	lsrs	r3, r1, #3
 8000a32:	077a      	lsls	r2, r7, #29
 8000a34:	4313      	orrs	r3, r2
 8000a36:	0f5a      	lsrs	r2, r3, #29
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	0752      	lsls	r2, r2, #29
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	e690      	b.n	8000764 <__aeabi_dadd+0x29c>
 8000a42:	4643      	mov	r3, r8
 8000a44:	430b      	orrs	r3, r1
 8000a46:	d100      	bne.n	8000a4a <__aeabi_dadd+0x582>
 8000a48:	e709      	b.n	800085e <__aeabi_dadd+0x396>
 8000a4a:	4643      	mov	r3, r8
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	08c9      	lsrs	r1, r1, #3
 8000a50:	075b      	lsls	r3, r3, #29
 8000a52:	4655      	mov	r5, sl
 8000a54:	430b      	orrs	r3, r1
 8000a56:	08d0      	lsrs	r0, r2, #3
 8000a58:	e666      	b.n	8000728 <__aeabi_dadd+0x260>
 8000a5a:	1acc      	subs	r4, r1, r3
 8000a5c:	42a1      	cmp	r1, r4
 8000a5e:	4189      	sbcs	r1, r1
 8000a60:	1a3f      	subs	r7, r7, r0
 8000a62:	4249      	negs	r1, r1
 8000a64:	4655      	mov	r5, sl
 8000a66:	2601      	movs	r6, #1
 8000a68:	1a7f      	subs	r7, r7, r1
 8000a6a:	e57e      	b.n	800056a <__aeabi_dadd+0xa2>
 8000a6c:	4642      	mov	r2, r8
 8000a6e:	1a5c      	subs	r4, r3, r1
 8000a70:	1a87      	subs	r7, r0, r2
 8000a72:	42a3      	cmp	r3, r4
 8000a74:	4192      	sbcs	r2, r2
 8000a76:	4252      	negs	r2, r2
 8000a78:	1abf      	subs	r7, r7, r2
 8000a7a:	023a      	lsls	r2, r7, #8
 8000a7c:	d53d      	bpl.n	8000afa <__aeabi_dadd+0x632>
 8000a7e:	1acc      	subs	r4, r1, r3
 8000a80:	42a1      	cmp	r1, r4
 8000a82:	4189      	sbcs	r1, r1
 8000a84:	4643      	mov	r3, r8
 8000a86:	4249      	negs	r1, r1
 8000a88:	1a1f      	subs	r7, r3, r0
 8000a8a:	4655      	mov	r5, sl
 8000a8c:	1a7f      	subs	r7, r7, r1
 8000a8e:	e595      	b.n	80005bc <__aeabi_dadd+0xf4>
 8000a90:	077b      	lsls	r3, r7, #29
 8000a92:	08c9      	lsrs	r1, r1, #3
 8000a94:	430b      	orrs	r3, r1
 8000a96:	08f8      	lsrs	r0, r7, #3
 8000a98:	e643      	b.n	8000722 <__aeabi_dadd+0x25a>
 8000a9a:	4644      	mov	r4, r8
 8000a9c:	08db      	lsrs	r3, r3, #3
 8000a9e:	430c      	orrs	r4, r1
 8000aa0:	d130      	bne.n	8000b04 <__aeabi_dadd+0x63c>
 8000aa2:	0742      	lsls	r2, r0, #29
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	08c0      	lsrs	r0, r0, #3
 8000aa8:	e65c      	b.n	8000764 <__aeabi_dadd+0x29c>
 8000aaa:	077b      	lsls	r3, r7, #29
 8000aac:	08c9      	lsrs	r1, r1, #3
 8000aae:	430b      	orrs	r3, r1
 8000ab0:	08f8      	lsrs	r0, r7, #3
 8000ab2:	e639      	b.n	8000728 <__aeabi_dadd+0x260>
 8000ab4:	185c      	adds	r4, r3, r1
 8000ab6:	429c      	cmp	r4, r3
 8000ab8:	419b      	sbcs	r3, r3
 8000aba:	4440      	add	r0, r8
 8000abc:	425b      	negs	r3, r3
 8000abe:	18c7      	adds	r7, r0, r3
 8000ac0:	023b      	lsls	r3, r7, #8
 8000ac2:	d400      	bmi.n	8000ac6 <__aeabi_dadd+0x5fe>
 8000ac4:	e625      	b.n	8000712 <__aeabi_dadd+0x24a>
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <__aeabi_dadd+0x674>)
 8000ac8:	2601      	movs	r6, #1
 8000aca:	401f      	ands	r7, r3
 8000acc:	e621      	b.n	8000712 <__aeabi_dadd+0x24a>
 8000ace:	0004      	movs	r4, r0
 8000ad0:	3a20      	subs	r2, #32
 8000ad2:	40d4      	lsrs	r4, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	2a20      	cmp	r2, #32
 8000ad8:	d004      	beq.n	8000ae4 <__aeabi_dadd+0x61c>
 8000ada:	2240      	movs	r2, #64	; 0x40
 8000adc:	4666      	mov	r6, ip
 8000ade:	1b92      	subs	r2, r2, r6
 8000ae0:	4090      	lsls	r0, r2
 8000ae2:	4303      	orrs	r3, r0
 8000ae4:	1e5a      	subs	r2, r3, #1
 8000ae6:	4193      	sbcs	r3, r2
 8000ae8:	431c      	orrs	r4, r3
 8000aea:	e67e      	b.n	80007ea <__aeabi_dadd+0x322>
 8000aec:	185c      	adds	r4, r3, r1
 8000aee:	428c      	cmp	r4, r1
 8000af0:	4189      	sbcs	r1, r1
 8000af2:	4440      	add	r0, r8
 8000af4:	4249      	negs	r1, r1
 8000af6:	1847      	adds	r7, r0, r1
 8000af8:	e6dd      	b.n	80008b6 <__aeabi_dadd+0x3ee>
 8000afa:	0023      	movs	r3, r4
 8000afc:	433b      	orrs	r3, r7
 8000afe:	d100      	bne.n	8000b02 <__aeabi_dadd+0x63a>
 8000b00:	e6ad      	b.n	800085e <__aeabi_dadd+0x396>
 8000b02:	e606      	b.n	8000712 <__aeabi_dadd+0x24a>
 8000b04:	0744      	lsls	r4, r0, #29
 8000b06:	4323      	orrs	r3, r4
 8000b08:	2480      	movs	r4, #128	; 0x80
 8000b0a:	08c0      	lsrs	r0, r0, #3
 8000b0c:	0324      	lsls	r4, r4, #12
 8000b0e:	4220      	tst	r0, r4
 8000b10:	d008      	beq.n	8000b24 <__aeabi_dadd+0x65c>
 8000b12:	4642      	mov	r2, r8
 8000b14:	08d6      	lsrs	r6, r2, #3
 8000b16:	4226      	tst	r6, r4
 8000b18:	d104      	bne.n	8000b24 <__aeabi_dadd+0x65c>
 8000b1a:	4655      	mov	r5, sl
 8000b1c:	0030      	movs	r0, r6
 8000b1e:	08cb      	lsrs	r3, r1, #3
 8000b20:	0751      	lsls	r1, r2, #29
 8000b22:	430b      	orrs	r3, r1
 8000b24:	0f5a      	lsrs	r2, r3, #29
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	08db      	lsrs	r3, r3, #3
 8000b2a:	0752      	lsls	r2, r2, #29
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	e619      	b.n	8000764 <__aeabi_dadd+0x29c>
 8000b30:	2300      	movs	r3, #0
 8000b32:	4a01      	ldr	r2, [pc, #4]	; (8000b38 <__aeabi_dadd+0x670>)
 8000b34:	001f      	movs	r7, r3
 8000b36:	e55e      	b.n	80005f6 <__aeabi_dadd+0x12e>
 8000b38:	000007ff 	.word	0x000007ff
 8000b3c:	ff7fffff 	.word	0xff7fffff

08000b40 <__eqdf2>:
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	464e      	mov	r6, r9
 8000b44:	4645      	mov	r5, r8
 8000b46:	46de      	mov	lr, fp
 8000b48:	4657      	mov	r7, sl
 8000b4a:	4690      	mov	r8, r2
 8000b4c:	b5e0      	push	{r5, r6, r7, lr}
 8000b4e:	0017      	movs	r7, r2
 8000b50:	031a      	lsls	r2, r3, #12
 8000b52:	0b12      	lsrs	r2, r2, #12
 8000b54:	0005      	movs	r5, r0
 8000b56:	4684      	mov	ip, r0
 8000b58:	4819      	ldr	r0, [pc, #100]	; (8000bc0 <__eqdf2+0x80>)
 8000b5a:	030e      	lsls	r6, r1, #12
 8000b5c:	004c      	lsls	r4, r1, #1
 8000b5e:	4691      	mov	r9, r2
 8000b60:	005a      	lsls	r2, r3, #1
 8000b62:	0fdb      	lsrs	r3, r3, #31
 8000b64:	469b      	mov	fp, r3
 8000b66:	0b36      	lsrs	r6, r6, #12
 8000b68:	0d64      	lsrs	r4, r4, #21
 8000b6a:	0fc9      	lsrs	r1, r1, #31
 8000b6c:	0d52      	lsrs	r2, r2, #21
 8000b6e:	4284      	cmp	r4, r0
 8000b70:	d019      	beq.n	8000ba6 <__eqdf2+0x66>
 8000b72:	4282      	cmp	r2, r0
 8000b74:	d010      	beq.n	8000b98 <__eqdf2+0x58>
 8000b76:	2001      	movs	r0, #1
 8000b78:	4294      	cmp	r4, r2
 8000b7a:	d10e      	bne.n	8000b9a <__eqdf2+0x5a>
 8000b7c:	454e      	cmp	r6, r9
 8000b7e:	d10c      	bne.n	8000b9a <__eqdf2+0x5a>
 8000b80:	2001      	movs	r0, #1
 8000b82:	45c4      	cmp	ip, r8
 8000b84:	d109      	bne.n	8000b9a <__eqdf2+0x5a>
 8000b86:	4559      	cmp	r1, fp
 8000b88:	d017      	beq.n	8000bba <__eqdf2+0x7a>
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	d105      	bne.n	8000b9a <__eqdf2+0x5a>
 8000b8e:	0030      	movs	r0, r6
 8000b90:	4328      	orrs	r0, r5
 8000b92:	1e43      	subs	r3, r0, #1
 8000b94:	4198      	sbcs	r0, r3
 8000b96:	e000      	b.n	8000b9a <__eqdf2+0x5a>
 8000b98:	2001      	movs	r0, #1
 8000b9a:	bcf0      	pop	{r4, r5, r6, r7}
 8000b9c:	46bb      	mov	fp, r7
 8000b9e:	46b2      	mov	sl, r6
 8000ba0:	46a9      	mov	r9, r5
 8000ba2:	46a0      	mov	r8, r4
 8000ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba6:	0033      	movs	r3, r6
 8000ba8:	2001      	movs	r0, #1
 8000baa:	432b      	orrs	r3, r5
 8000bac:	d1f5      	bne.n	8000b9a <__eqdf2+0x5a>
 8000bae:	42a2      	cmp	r2, r4
 8000bb0:	d1f3      	bne.n	8000b9a <__eqdf2+0x5a>
 8000bb2:	464b      	mov	r3, r9
 8000bb4:	433b      	orrs	r3, r7
 8000bb6:	d1f0      	bne.n	8000b9a <__eqdf2+0x5a>
 8000bb8:	e7e2      	b.n	8000b80 <__eqdf2+0x40>
 8000bba:	2000      	movs	r0, #0
 8000bbc:	e7ed      	b.n	8000b9a <__eqdf2+0x5a>
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	000007ff 	.word	0x000007ff

08000bc4 <__gedf2>:
 8000bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc6:	4647      	mov	r7, r8
 8000bc8:	46ce      	mov	lr, r9
 8000bca:	0004      	movs	r4, r0
 8000bcc:	0018      	movs	r0, r3
 8000bce:	0016      	movs	r6, r2
 8000bd0:	031b      	lsls	r3, r3, #12
 8000bd2:	0b1b      	lsrs	r3, r3, #12
 8000bd4:	4d2d      	ldr	r5, [pc, #180]	; (8000c8c <__gedf2+0xc8>)
 8000bd6:	004a      	lsls	r2, r1, #1
 8000bd8:	4699      	mov	r9, r3
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	0043      	lsls	r3, r0, #1
 8000bde:	030f      	lsls	r7, r1, #12
 8000be0:	46a4      	mov	ip, r4
 8000be2:	46b0      	mov	r8, r6
 8000be4:	0b3f      	lsrs	r7, r7, #12
 8000be6:	0d52      	lsrs	r2, r2, #21
 8000be8:	0fc9      	lsrs	r1, r1, #31
 8000bea:	0d5b      	lsrs	r3, r3, #21
 8000bec:	0fc0      	lsrs	r0, r0, #31
 8000bee:	42aa      	cmp	r2, r5
 8000bf0:	d021      	beq.n	8000c36 <__gedf2+0x72>
 8000bf2:	42ab      	cmp	r3, r5
 8000bf4:	d013      	beq.n	8000c1e <__gedf2+0x5a>
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d122      	bne.n	8000c40 <__gedf2+0x7c>
 8000bfa:	433c      	orrs	r4, r7
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <__gedf2+0x42>
 8000c00:	464d      	mov	r5, r9
 8000c02:	432e      	orrs	r6, r5
 8000c04:	d022      	beq.n	8000c4c <__gedf2+0x88>
 8000c06:	2c00      	cmp	r4, #0
 8000c08:	d010      	beq.n	8000c2c <__gedf2+0x68>
 8000c0a:	4281      	cmp	r1, r0
 8000c0c:	d022      	beq.n	8000c54 <__gedf2+0x90>
 8000c0e:	2002      	movs	r0, #2
 8000c10:	3901      	subs	r1, #1
 8000c12:	4008      	ands	r0, r1
 8000c14:	3801      	subs	r0, #1
 8000c16:	bcc0      	pop	{r6, r7}
 8000c18:	46b9      	mov	r9, r7
 8000c1a:	46b0      	mov	r8, r6
 8000c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c1e:	464d      	mov	r5, r9
 8000c20:	432e      	orrs	r6, r5
 8000c22:	d129      	bne.n	8000c78 <__gedf2+0xb4>
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	d1f0      	bne.n	8000c0a <__gedf2+0x46>
 8000c28:	433c      	orrs	r4, r7
 8000c2a:	d1ee      	bne.n	8000c0a <__gedf2+0x46>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d1f2      	bne.n	8000c16 <__gedf2+0x52>
 8000c30:	2001      	movs	r0, #1
 8000c32:	4240      	negs	r0, r0
 8000c34:	e7ef      	b.n	8000c16 <__gedf2+0x52>
 8000c36:	003d      	movs	r5, r7
 8000c38:	4325      	orrs	r5, r4
 8000c3a:	d11d      	bne.n	8000c78 <__gedf2+0xb4>
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d0ee      	beq.n	8000c1e <__gedf2+0x5a>
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1e2      	bne.n	8000c0a <__gedf2+0x46>
 8000c44:	464c      	mov	r4, r9
 8000c46:	4326      	orrs	r6, r4
 8000c48:	d1df      	bne.n	8000c0a <__gedf2+0x46>
 8000c4a:	e7e0      	b.n	8000c0e <__gedf2+0x4a>
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	2c00      	cmp	r4, #0
 8000c50:	d0e1      	beq.n	8000c16 <__gedf2+0x52>
 8000c52:	e7dc      	b.n	8000c0e <__gedf2+0x4a>
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dc0a      	bgt.n	8000c6e <__gedf2+0xaa>
 8000c58:	dbe8      	blt.n	8000c2c <__gedf2+0x68>
 8000c5a:	454f      	cmp	r7, r9
 8000c5c:	d8d7      	bhi.n	8000c0e <__gedf2+0x4a>
 8000c5e:	d00e      	beq.n	8000c7e <__gedf2+0xba>
 8000c60:	2000      	movs	r0, #0
 8000c62:	454f      	cmp	r7, r9
 8000c64:	d2d7      	bcs.n	8000c16 <__gedf2+0x52>
 8000c66:	2900      	cmp	r1, #0
 8000c68:	d0e2      	beq.n	8000c30 <__gedf2+0x6c>
 8000c6a:	0008      	movs	r0, r1
 8000c6c:	e7d3      	b.n	8000c16 <__gedf2+0x52>
 8000c6e:	4243      	negs	r3, r0
 8000c70:	4158      	adcs	r0, r3
 8000c72:	0040      	lsls	r0, r0, #1
 8000c74:	3801      	subs	r0, #1
 8000c76:	e7ce      	b.n	8000c16 <__gedf2+0x52>
 8000c78:	2002      	movs	r0, #2
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	e7cb      	b.n	8000c16 <__gedf2+0x52>
 8000c7e:	45c4      	cmp	ip, r8
 8000c80:	d8c5      	bhi.n	8000c0e <__gedf2+0x4a>
 8000c82:	2000      	movs	r0, #0
 8000c84:	45c4      	cmp	ip, r8
 8000c86:	d2c6      	bcs.n	8000c16 <__gedf2+0x52>
 8000c88:	e7ed      	b.n	8000c66 <__gedf2+0xa2>
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	000007ff 	.word	0x000007ff

08000c90 <__ledf2>:
 8000c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c92:	4647      	mov	r7, r8
 8000c94:	46ce      	mov	lr, r9
 8000c96:	0004      	movs	r4, r0
 8000c98:	0018      	movs	r0, r3
 8000c9a:	0016      	movs	r6, r2
 8000c9c:	031b      	lsls	r3, r3, #12
 8000c9e:	0b1b      	lsrs	r3, r3, #12
 8000ca0:	4d2c      	ldr	r5, [pc, #176]	; (8000d54 <__ledf2+0xc4>)
 8000ca2:	004a      	lsls	r2, r1, #1
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	0043      	lsls	r3, r0, #1
 8000caa:	030f      	lsls	r7, r1, #12
 8000cac:	46a4      	mov	ip, r4
 8000cae:	46b0      	mov	r8, r6
 8000cb0:	0b3f      	lsrs	r7, r7, #12
 8000cb2:	0d52      	lsrs	r2, r2, #21
 8000cb4:	0fc9      	lsrs	r1, r1, #31
 8000cb6:	0d5b      	lsrs	r3, r3, #21
 8000cb8:	0fc0      	lsrs	r0, r0, #31
 8000cba:	42aa      	cmp	r2, r5
 8000cbc:	d00d      	beq.n	8000cda <__ledf2+0x4a>
 8000cbe:	42ab      	cmp	r3, r5
 8000cc0:	d010      	beq.n	8000ce4 <__ledf2+0x54>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	d127      	bne.n	8000d16 <__ledf2+0x86>
 8000cc6:	433c      	orrs	r4, r7
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d111      	bne.n	8000cf0 <__ledf2+0x60>
 8000ccc:	464d      	mov	r5, r9
 8000cce:	432e      	orrs	r6, r5
 8000cd0:	d10e      	bne.n	8000cf0 <__ledf2+0x60>
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	2c00      	cmp	r4, #0
 8000cd6:	d015      	beq.n	8000d04 <__ledf2+0x74>
 8000cd8:	e00e      	b.n	8000cf8 <__ledf2+0x68>
 8000cda:	003d      	movs	r5, r7
 8000cdc:	4325      	orrs	r5, r4
 8000cde:	d110      	bne.n	8000d02 <__ledf2+0x72>
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d118      	bne.n	8000d16 <__ledf2+0x86>
 8000ce4:	464d      	mov	r5, r9
 8000ce6:	432e      	orrs	r6, r5
 8000ce8:	d10b      	bne.n	8000d02 <__ledf2+0x72>
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	d102      	bne.n	8000cf4 <__ledf2+0x64>
 8000cee:	433c      	orrs	r4, r7
 8000cf0:	2c00      	cmp	r4, #0
 8000cf2:	d00b      	beq.n	8000d0c <__ledf2+0x7c>
 8000cf4:	4281      	cmp	r1, r0
 8000cf6:	d014      	beq.n	8000d22 <__ledf2+0x92>
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	3901      	subs	r1, #1
 8000cfc:	4008      	ands	r0, r1
 8000cfe:	3801      	subs	r0, #1
 8000d00:	e000      	b.n	8000d04 <__ledf2+0x74>
 8000d02:	2002      	movs	r0, #2
 8000d04:	bcc0      	pop	{r6, r7}
 8000d06:	46b9      	mov	r9, r7
 8000d08:	46b0      	mov	r8, r6
 8000d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	d1f9      	bne.n	8000d04 <__ledf2+0x74>
 8000d10:	2001      	movs	r0, #1
 8000d12:	4240      	negs	r0, r0
 8000d14:	e7f6      	b.n	8000d04 <__ledf2+0x74>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1ec      	bne.n	8000cf4 <__ledf2+0x64>
 8000d1a:	464c      	mov	r4, r9
 8000d1c:	4326      	orrs	r6, r4
 8000d1e:	d1e9      	bne.n	8000cf4 <__ledf2+0x64>
 8000d20:	e7ea      	b.n	8000cf8 <__ledf2+0x68>
 8000d22:	429a      	cmp	r2, r3
 8000d24:	dd04      	ble.n	8000d30 <__ledf2+0xa0>
 8000d26:	4243      	negs	r3, r0
 8000d28:	4158      	adcs	r0, r3
 8000d2a:	0040      	lsls	r0, r0, #1
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	e7e9      	b.n	8000d04 <__ledf2+0x74>
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbeb      	blt.n	8000d0c <__ledf2+0x7c>
 8000d34:	454f      	cmp	r7, r9
 8000d36:	d8df      	bhi.n	8000cf8 <__ledf2+0x68>
 8000d38:	d006      	beq.n	8000d48 <__ledf2+0xb8>
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	454f      	cmp	r7, r9
 8000d3e:	d2e1      	bcs.n	8000d04 <__ledf2+0x74>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	d0e5      	beq.n	8000d10 <__ledf2+0x80>
 8000d44:	0008      	movs	r0, r1
 8000d46:	e7dd      	b.n	8000d04 <__ledf2+0x74>
 8000d48:	45c4      	cmp	ip, r8
 8000d4a:	d8d5      	bhi.n	8000cf8 <__ledf2+0x68>
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	45c4      	cmp	ip, r8
 8000d50:	d2d8      	bcs.n	8000d04 <__ledf2+0x74>
 8000d52:	e7f5      	b.n	8000d40 <__ledf2+0xb0>
 8000d54:	000007ff 	.word	0x000007ff

08000d58 <__aeabi_dmul>:
 8000d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5a:	4657      	mov	r7, sl
 8000d5c:	464e      	mov	r6, r9
 8000d5e:	4645      	mov	r5, r8
 8000d60:	46de      	mov	lr, fp
 8000d62:	b5e0      	push	{r5, r6, r7, lr}
 8000d64:	4698      	mov	r8, r3
 8000d66:	030c      	lsls	r4, r1, #12
 8000d68:	004b      	lsls	r3, r1, #1
 8000d6a:	0006      	movs	r6, r0
 8000d6c:	4692      	mov	sl, r2
 8000d6e:	b087      	sub	sp, #28
 8000d70:	0b24      	lsrs	r4, r4, #12
 8000d72:	0d5b      	lsrs	r3, r3, #21
 8000d74:	0fcf      	lsrs	r7, r1, #31
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d100      	bne.n	8000d7c <__aeabi_dmul+0x24>
 8000d7a:	e15c      	b.n	8001036 <__aeabi_dmul+0x2de>
 8000d7c:	4ad9      	ldr	r2, [pc, #868]	; (80010e4 <__aeabi_dmul+0x38c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d100      	bne.n	8000d84 <__aeabi_dmul+0x2c>
 8000d82:	e175      	b.n	8001070 <__aeabi_dmul+0x318>
 8000d84:	0f42      	lsrs	r2, r0, #29
 8000d86:	00e4      	lsls	r4, r4, #3
 8000d88:	4314      	orrs	r4, r2
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	0412      	lsls	r2, r2, #16
 8000d8e:	4314      	orrs	r4, r2
 8000d90:	4ad5      	ldr	r2, [pc, #852]	; (80010e8 <__aeabi_dmul+0x390>)
 8000d92:	00c5      	lsls	r5, r0, #3
 8000d94:	4694      	mov	ip, r2
 8000d96:	4463      	add	r3, ip
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	4699      	mov	r9, r3
 8000d9e:	469b      	mov	fp, r3
 8000da0:	4643      	mov	r3, r8
 8000da2:	4642      	mov	r2, r8
 8000da4:	031e      	lsls	r6, r3, #12
 8000da6:	0fd2      	lsrs	r2, r2, #31
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4650      	mov	r0, sl
 8000dac:	4690      	mov	r8, r2
 8000dae:	0b36      	lsrs	r6, r6, #12
 8000db0:	0d5b      	lsrs	r3, r3, #21
 8000db2:	d100      	bne.n	8000db6 <__aeabi_dmul+0x5e>
 8000db4:	e120      	b.n	8000ff8 <__aeabi_dmul+0x2a0>
 8000db6:	4acb      	ldr	r2, [pc, #812]	; (80010e4 <__aeabi_dmul+0x38c>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d100      	bne.n	8000dbe <__aeabi_dmul+0x66>
 8000dbc:	e162      	b.n	8001084 <__aeabi_dmul+0x32c>
 8000dbe:	49ca      	ldr	r1, [pc, #808]	; (80010e8 <__aeabi_dmul+0x390>)
 8000dc0:	0f42      	lsrs	r2, r0, #29
 8000dc2:	468c      	mov	ip, r1
 8000dc4:	9900      	ldr	r1, [sp, #0]
 8000dc6:	4463      	add	r3, ip
 8000dc8:	00f6      	lsls	r6, r6, #3
 8000dca:	468c      	mov	ip, r1
 8000dcc:	4316      	orrs	r6, r2
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	449c      	add	ip, r3
 8000dd2:	0412      	lsls	r2, r2, #16
 8000dd4:	4663      	mov	r3, ip
 8000dd6:	4316      	orrs	r6, r2
 8000dd8:	00c2      	lsls	r2, r0, #3
 8000dda:	2000      	movs	r0, #0
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	9900      	ldr	r1, [sp, #0]
 8000de0:	4643      	mov	r3, r8
 8000de2:	3101      	adds	r1, #1
 8000de4:	468c      	mov	ip, r1
 8000de6:	4649      	mov	r1, r9
 8000de8:	407b      	eors	r3, r7
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	290f      	cmp	r1, #15
 8000dee:	d826      	bhi.n	8000e3e <__aeabi_dmul+0xe6>
 8000df0:	4bbe      	ldr	r3, [pc, #760]	; (80010ec <__aeabi_dmul+0x394>)
 8000df2:	0089      	lsls	r1, r1, #2
 8000df4:	5859      	ldr	r1, [r3, r1]
 8000df6:	468f      	mov	pc, r1
 8000df8:	4643      	mov	r3, r8
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	0034      	movs	r4, r6
 8000dfe:	0015      	movs	r5, r2
 8000e00:	4683      	mov	fp, r0
 8000e02:	465b      	mov	r3, fp
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d016      	beq.n	8000e36 <__aeabi_dmul+0xde>
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_dmul+0xb6>
 8000e0c:	e203      	b.n	8001216 <__aeabi_dmul+0x4be>
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d000      	beq.n	8000e14 <__aeabi_dmul+0xbc>
 8000e12:	e0cd      	b.n	8000fb0 <__aeabi_dmul+0x258>
 8000e14:	2200      	movs	r2, #0
 8000e16:	2400      	movs	r4, #0
 8000e18:	2500      	movs	r5, #0
 8000e1a:	9b01      	ldr	r3, [sp, #4]
 8000e1c:	0512      	lsls	r2, r2, #20
 8000e1e:	4322      	orrs	r2, r4
 8000e20:	07db      	lsls	r3, r3, #31
 8000e22:	431a      	orrs	r2, r3
 8000e24:	0028      	movs	r0, r5
 8000e26:	0011      	movs	r1, r2
 8000e28:	b007      	add	sp, #28
 8000e2a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e2c:	46bb      	mov	fp, r7
 8000e2e:	46b2      	mov	sl, r6
 8000e30:	46a9      	mov	r9, r5
 8000e32:	46a0      	mov	r8, r4
 8000e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e36:	2400      	movs	r4, #0
 8000e38:	2500      	movs	r5, #0
 8000e3a:	4aaa      	ldr	r2, [pc, #680]	; (80010e4 <__aeabi_dmul+0x38c>)
 8000e3c:	e7ed      	b.n	8000e1a <__aeabi_dmul+0xc2>
 8000e3e:	0c28      	lsrs	r0, r5, #16
 8000e40:	042d      	lsls	r5, r5, #16
 8000e42:	0c2d      	lsrs	r5, r5, #16
 8000e44:	002b      	movs	r3, r5
 8000e46:	0c11      	lsrs	r1, r2, #16
 8000e48:	0412      	lsls	r2, r2, #16
 8000e4a:	0c12      	lsrs	r2, r2, #16
 8000e4c:	4353      	muls	r3, r2
 8000e4e:	4698      	mov	r8, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	002f      	movs	r7, r5
 8000e54:	4343      	muls	r3, r0
 8000e56:	4699      	mov	r9, r3
 8000e58:	434f      	muls	r7, r1
 8000e5a:	444f      	add	r7, r9
 8000e5c:	46bb      	mov	fp, r7
 8000e5e:	4647      	mov	r7, r8
 8000e60:	000b      	movs	r3, r1
 8000e62:	0c3f      	lsrs	r7, r7, #16
 8000e64:	46ba      	mov	sl, r7
 8000e66:	4343      	muls	r3, r0
 8000e68:	44da      	add	sl, fp
 8000e6a:	9302      	str	r3, [sp, #8]
 8000e6c:	45d1      	cmp	r9, sl
 8000e6e:	d904      	bls.n	8000e7a <__aeabi_dmul+0x122>
 8000e70:	2780      	movs	r7, #128	; 0x80
 8000e72:	027f      	lsls	r7, r7, #9
 8000e74:	46b9      	mov	r9, r7
 8000e76:	444b      	add	r3, r9
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	4653      	mov	r3, sl
 8000e7c:	0c1b      	lsrs	r3, r3, #16
 8000e7e:	469b      	mov	fp, r3
 8000e80:	4653      	mov	r3, sl
 8000e82:	041f      	lsls	r7, r3, #16
 8000e84:	4643      	mov	r3, r8
 8000e86:	041b      	lsls	r3, r3, #16
 8000e88:	0c1b      	lsrs	r3, r3, #16
 8000e8a:	4698      	mov	r8, r3
 8000e8c:	003b      	movs	r3, r7
 8000e8e:	4443      	add	r3, r8
 8000e90:	9304      	str	r3, [sp, #16]
 8000e92:	0c33      	lsrs	r3, r6, #16
 8000e94:	0436      	lsls	r6, r6, #16
 8000e96:	0c36      	lsrs	r6, r6, #16
 8000e98:	4698      	mov	r8, r3
 8000e9a:	0033      	movs	r3, r6
 8000e9c:	4343      	muls	r3, r0
 8000e9e:	4699      	mov	r9, r3
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	4343      	muls	r3, r0
 8000ea4:	002f      	movs	r7, r5
 8000ea6:	469a      	mov	sl, r3
 8000ea8:	4643      	mov	r3, r8
 8000eaa:	4377      	muls	r7, r6
 8000eac:	435d      	muls	r5, r3
 8000eae:	0c38      	lsrs	r0, r7, #16
 8000eb0:	444d      	add	r5, r9
 8000eb2:	1945      	adds	r5, r0, r5
 8000eb4:	45a9      	cmp	r9, r5
 8000eb6:	d903      	bls.n	8000ec0 <__aeabi_dmul+0x168>
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	025b      	lsls	r3, r3, #9
 8000ebc:	4699      	mov	r9, r3
 8000ebe:	44ca      	add	sl, r9
 8000ec0:	043f      	lsls	r7, r7, #16
 8000ec2:	0c28      	lsrs	r0, r5, #16
 8000ec4:	0c3f      	lsrs	r7, r7, #16
 8000ec6:	042d      	lsls	r5, r5, #16
 8000ec8:	19ed      	adds	r5, r5, r7
 8000eca:	0c27      	lsrs	r7, r4, #16
 8000ecc:	0424      	lsls	r4, r4, #16
 8000ece:	0c24      	lsrs	r4, r4, #16
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	0020      	movs	r0, r4
 8000ed4:	4350      	muls	r0, r2
 8000ed6:	437a      	muls	r2, r7
 8000ed8:	4691      	mov	r9, r2
 8000eda:	003a      	movs	r2, r7
 8000edc:	4453      	add	r3, sl
 8000ede:	9305      	str	r3, [sp, #20]
 8000ee0:	0c03      	lsrs	r3, r0, #16
 8000ee2:	469a      	mov	sl, r3
 8000ee4:	434a      	muls	r2, r1
 8000ee6:	4361      	muls	r1, r4
 8000ee8:	4449      	add	r1, r9
 8000eea:	4451      	add	r1, sl
 8000eec:	44ab      	add	fp, r5
 8000eee:	4589      	cmp	r9, r1
 8000ef0:	d903      	bls.n	8000efa <__aeabi_dmul+0x1a2>
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	025b      	lsls	r3, r3, #9
 8000ef6:	4699      	mov	r9, r3
 8000ef8:	444a      	add	r2, r9
 8000efa:	0400      	lsls	r0, r0, #16
 8000efc:	0c0b      	lsrs	r3, r1, #16
 8000efe:	0c00      	lsrs	r0, r0, #16
 8000f00:	0409      	lsls	r1, r1, #16
 8000f02:	1809      	adds	r1, r1, r0
 8000f04:	0020      	movs	r0, r4
 8000f06:	4699      	mov	r9, r3
 8000f08:	4643      	mov	r3, r8
 8000f0a:	4370      	muls	r0, r6
 8000f0c:	435c      	muls	r4, r3
 8000f0e:	437e      	muls	r6, r7
 8000f10:	435f      	muls	r7, r3
 8000f12:	0c03      	lsrs	r3, r0, #16
 8000f14:	4698      	mov	r8, r3
 8000f16:	19a4      	adds	r4, r4, r6
 8000f18:	4444      	add	r4, r8
 8000f1a:	444a      	add	r2, r9
 8000f1c:	9703      	str	r7, [sp, #12]
 8000f1e:	42a6      	cmp	r6, r4
 8000f20:	d904      	bls.n	8000f2c <__aeabi_dmul+0x1d4>
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	025b      	lsls	r3, r3, #9
 8000f26:	4698      	mov	r8, r3
 8000f28:	4447      	add	r7, r8
 8000f2a:	9703      	str	r7, [sp, #12]
 8000f2c:	0423      	lsls	r3, r4, #16
 8000f2e:	9e02      	ldr	r6, [sp, #8]
 8000f30:	469a      	mov	sl, r3
 8000f32:	9b05      	ldr	r3, [sp, #20]
 8000f34:	445e      	add	r6, fp
 8000f36:	4698      	mov	r8, r3
 8000f38:	42ae      	cmp	r6, r5
 8000f3a:	41ad      	sbcs	r5, r5
 8000f3c:	1876      	adds	r6, r6, r1
 8000f3e:	428e      	cmp	r6, r1
 8000f40:	4189      	sbcs	r1, r1
 8000f42:	0400      	lsls	r0, r0, #16
 8000f44:	0c00      	lsrs	r0, r0, #16
 8000f46:	4450      	add	r0, sl
 8000f48:	4440      	add	r0, r8
 8000f4a:	426d      	negs	r5, r5
 8000f4c:	1947      	adds	r7, r0, r5
 8000f4e:	46b8      	mov	r8, r7
 8000f50:	4693      	mov	fp, r2
 8000f52:	4249      	negs	r1, r1
 8000f54:	4689      	mov	r9, r1
 8000f56:	44c3      	add	fp, r8
 8000f58:	44d9      	add	r9, fp
 8000f5a:	4298      	cmp	r0, r3
 8000f5c:	4180      	sbcs	r0, r0
 8000f5e:	45a8      	cmp	r8, r5
 8000f60:	41ad      	sbcs	r5, r5
 8000f62:	4593      	cmp	fp, r2
 8000f64:	4192      	sbcs	r2, r2
 8000f66:	4589      	cmp	r9, r1
 8000f68:	4189      	sbcs	r1, r1
 8000f6a:	426d      	negs	r5, r5
 8000f6c:	4240      	negs	r0, r0
 8000f6e:	4328      	orrs	r0, r5
 8000f70:	0c24      	lsrs	r4, r4, #16
 8000f72:	4252      	negs	r2, r2
 8000f74:	4249      	negs	r1, r1
 8000f76:	430a      	orrs	r2, r1
 8000f78:	9b03      	ldr	r3, [sp, #12]
 8000f7a:	1900      	adds	r0, r0, r4
 8000f7c:	1880      	adds	r0, r0, r2
 8000f7e:	18c7      	adds	r7, r0, r3
 8000f80:	464b      	mov	r3, r9
 8000f82:	0ddc      	lsrs	r4, r3, #23
 8000f84:	9b04      	ldr	r3, [sp, #16]
 8000f86:	0275      	lsls	r5, r6, #9
 8000f88:	431d      	orrs	r5, r3
 8000f8a:	1e6a      	subs	r2, r5, #1
 8000f8c:	4195      	sbcs	r5, r2
 8000f8e:	464b      	mov	r3, r9
 8000f90:	0df6      	lsrs	r6, r6, #23
 8000f92:	027f      	lsls	r7, r7, #9
 8000f94:	4335      	orrs	r5, r6
 8000f96:	025a      	lsls	r2, r3, #9
 8000f98:	433c      	orrs	r4, r7
 8000f9a:	4315      	orrs	r5, r2
 8000f9c:	01fb      	lsls	r3, r7, #7
 8000f9e:	d400      	bmi.n	8000fa2 <__aeabi_dmul+0x24a>
 8000fa0:	e11c      	b.n	80011dc <__aeabi_dmul+0x484>
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	086a      	lsrs	r2, r5, #1
 8000fa6:	400d      	ands	r5, r1
 8000fa8:	4315      	orrs	r5, r2
 8000faa:	07e2      	lsls	r2, r4, #31
 8000fac:	4315      	orrs	r5, r2
 8000fae:	0864      	lsrs	r4, r4, #1
 8000fb0:	494f      	ldr	r1, [pc, #316]	; (80010f0 <__aeabi_dmul+0x398>)
 8000fb2:	4461      	add	r1, ip
 8000fb4:	2900      	cmp	r1, #0
 8000fb6:	dc00      	bgt.n	8000fba <__aeabi_dmul+0x262>
 8000fb8:	e0b0      	b.n	800111c <__aeabi_dmul+0x3c4>
 8000fba:	076b      	lsls	r3, r5, #29
 8000fbc:	d009      	beq.n	8000fd2 <__aeabi_dmul+0x27a>
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	402a      	ands	r2, r5
 8000fc2:	2a04      	cmp	r2, #4
 8000fc4:	d005      	beq.n	8000fd2 <__aeabi_dmul+0x27a>
 8000fc6:	1d2a      	adds	r2, r5, #4
 8000fc8:	42aa      	cmp	r2, r5
 8000fca:	41ad      	sbcs	r5, r5
 8000fcc:	426d      	negs	r5, r5
 8000fce:	1964      	adds	r4, r4, r5
 8000fd0:	0015      	movs	r5, r2
 8000fd2:	01e3      	lsls	r3, r4, #7
 8000fd4:	d504      	bpl.n	8000fe0 <__aeabi_dmul+0x288>
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	4a46      	ldr	r2, [pc, #280]	; (80010f4 <__aeabi_dmul+0x39c>)
 8000fda:	00c9      	lsls	r1, r1, #3
 8000fdc:	4014      	ands	r4, r2
 8000fde:	4461      	add	r1, ip
 8000fe0:	4a45      	ldr	r2, [pc, #276]	; (80010f8 <__aeabi_dmul+0x3a0>)
 8000fe2:	4291      	cmp	r1, r2
 8000fe4:	dd00      	ble.n	8000fe8 <__aeabi_dmul+0x290>
 8000fe6:	e726      	b.n	8000e36 <__aeabi_dmul+0xde>
 8000fe8:	0762      	lsls	r2, r4, #29
 8000fea:	08ed      	lsrs	r5, r5, #3
 8000fec:	0264      	lsls	r4, r4, #9
 8000fee:	0549      	lsls	r1, r1, #21
 8000ff0:	4315      	orrs	r5, r2
 8000ff2:	0b24      	lsrs	r4, r4, #12
 8000ff4:	0d4a      	lsrs	r2, r1, #21
 8000ff6:	e710      	b.n	8000e1a <__aeabi_dmul+0xc2>
 8000ff8:	4652      	mov	r2, sl
 8000ffa:	4332      	orrs	r2, r6
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dmul+0x2a8>
 8000ffe:	e07f      	b.n	8001100 <__aeabi_dmul+0x3a8>
 8001000:	2e00      	cmp	r6, #0
 8001002:	d100      	bne.n	8001006 <__aeabi_dmul+0x2ae>
 8001004:	e0dc      	b.n	80011c0 <__aeabi_dmul+0x468>
 8001006:	0030      	movs	r0, r6
 8001008:	f000 fd30 	bl	8001a6c <__clzsi2>
 800100c:	0002      	movs	r2, r0
 800100e:	3a0b      	subs	r2, #11
 8001010:	231d      	movs	r3, #29
 8001012:	0001      	movs	r1, r0
 8001014:	1a9b      	subs	r3, r3, r2
 8001016:	4652      	mov	r2, sl
 8001018:	3908      	subs	r1, #8
 800101a:	40da      	lsrs	r2, r3
 800101c:	408e      	lsls	r6, r1
 800101e:	4316      	orrs	r6, r2
 8001020:	4652      	mov	r2, sl
 8001022:	408a      	lsls	r2, r1
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	4935      	ldr	r1, [pc, #212]	; (80010fc <__aeabi_dmul+0x3a4>)
 8001028:	1a18      	subs	r0, r3, r0
 800102a:	0003      	movs	r3, r0
 800102c:	468c      	mov	ip, r1
 800102e:	4463      	add	r3, ip
 8001030:	2000      	movs	r0, #0
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	e6d3      	b.n	8000dde <__aeabi_dmul+0x86>
 8001036:	0025      	movs	r5, r4
 8001038:	4305      	orrs	r5, r0
 800103a:	d04a      	beq.n	80010d2 <__aeabi_dmul+0x37a>
 800103c:	2c00      	cmp	r4, #0
 800103e:	d100      	bne.n	8001042 <__aeabi_dmul+0x2ea>
 8001040:	e0b0      	b.n	80011a4 <__aeabi_dmul+0x44c>
 8001042:	0020      	movs	r0, r4
 8001044:	f000 fd12 	bl	8001a6c <__clzsi2>
 8001048:	0001      	movs	r1, r0
 800104a:	0002      	movs	r2, r0
 800104c:	390b      	subs	r1, #11
 800104e:	231d      	movs	r3, #29
 8001050:	0010      	movs	r0, r2
 8001052:	1a5b      	subs	r3, r3, r1
 8001054:	0031      	movs	r1, r6
 8001056:	0035      	movs	r5, r6
 8001058:	3808      	subs	r0, #8
 800105a:	4084      	lsls	r4, r0
 800105c:	40d9      	lsrs	r1, r3
 800105e:	4085      	lsls	r5, r0
 8001060:	430c      	orrs	r4, r1
 8001062:	4826      	ldr	r0, [pc, #152]	; (80010fc <__aeabi_dmul+0x3a4>)
 8001064:	1a83      	subs	r3, r0, r2
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469b      	mov	fp, r3
 800106e:	e697      	b.n	8000da0 <__aeabi_dmul+0x48>
 8001070:	0005      	movs	r5, r0
 8001072:	4325      	orrs	r5, r4
 8001074:	d126      	bne.n	80010c4 <__aeabi_dmul+0x36c>
 8001076:	2208      	movs	r2, #8
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2302      	movs	r3, #2
 800107c:	2400      	movs	r4, #0
 800107e:	4691      	mov	r9, r2
 8001080:	469b      	mov	fp, r3
 8001082:	e68d      	b.n	8000da0 <__aeabi_dmul+0x48>
 8001084:	4652      	mov	r2, sl
 8001086:	9b00      	ldr	r3, [sp, #0]
 8001088:	4332      	orrs	r2, r6
 800108a:	d110      	bne.n	80010ae <__aeabi_dmul+0x356>
 800108c:	4915      	ldr	r1, [pc, #84]	; (80010e4 <__aeabi_dmul+0x38c>)
 800108e:	2600      	movs	r6, #0
 8001090:	468c      	mov	ip, r1
 8001092:	4463      	add	r3, ip
 8001094:	4649      	mov	r1, r9
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2302      	movs	r3, #2
 800109a:	4319      	orrs	r1, r3
 800109c:	4689      	mov	r9, r1
 800109e:	2002      	movs	r0, #2
 80010a0:	e69d      	b.n	8000dde <__aeabi_dmul+0x86>
 80010a2:	465b      	mov	r3, fp
 80010a4:	9701      	str	r7, [sp, #4]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d000      	beq.n	80010ac <__aeabi_dmul+0x354>
 80010aa:	e6ad      	b.n	8000e08 <__aeabi_dmul+0xb0>
 80010ac:	e6c3      	b.n	8000e36 <__aeabi_dmul+0xde>
 80010ae:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <__aeabi_dmul+0x38c>)
 80010b0:	2003      	movs	r0, #3
 80010b2:	4694      	mov	ip, r2
 80010b4:	4463      	add	r3, ip
 80010b6:	464a      	mov	r2, r9
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2303      	movs	r3, #3
 80010bc:	431a      	orrs	r2, r3
 80010be:	4691      	mov	r9, r2
 80010c0:	4652      	mov	r2, sl
 80010c2:	e68c      	b.n	8000dde <__aeabi_dmul+0x86>
 80010c4:	220c      	movs	r2, #12
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2303      	movs	r3, #3
 80010ca:	0005      	movs	r5, r0
 80010cc:	4691      	mov	r9, r2
 80010ce:	469b      	mov	fp, r3
 80010d0:	e666      	b.n	8000da0 <__aeabi_dmul+0x48>
 80010d2:	2304      	movs	r3, #4
 80010d4:	4699      	mov	r9, r3
 80010d6:	2300      	movs	r3, #0
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	2400      	movs	r4, #0
 80010de:	469b      	mov	fp, r3
 80010e0:	e65e      	b.n	8000da0 <__aeabi_dmul+0x48>
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	000007ff 	.word	0x000007ff
 80010e8:	fffffc01 	.word	0xfffffc01
 80010ec:	08007318 	.word	0x08007318
 80010f0:	000003ff 	.word	0x000003ff
 80010f4:	feffffff 	.word	0xfeffffff
 80010f8:	000007fe 	.word	0x000007fe
 80010fc:	fffffc0d 	.word	0xfffffc0d
 8001100:	4649      	mov	r1, r9
 8001102:	2301      	movs	r3, #1
 8001104:	4319      	orrs	r1, r3
 8001106:	4689      	mov	r9, r1
 8001108:	2600      	movs	r6, #0
 800110a:	2001      	movs	r0, #1
 800110c:	e667      	b.n	8000dde <__aeabi_dmul+0x86>
 800110e:	2300      	movs	r3, #0
 8001110:	2480      	movs	r4, #128	; 0x80
 8001112:	2500      	movs	r5, #0
 8001114:	4a43      	ldr	r2, [pc, #268]	; (8001224 <__aeabi_dmul+0x4cc>)
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	0324      	lsls	r4, r4, #12
 800111a:	e67e      	b.n	8000e1a <__aeabi_dmul+0xc2>
 800111c:	2001      	movs	r0, #1
 800111e:	1a40      	subs	r0, r0, r1
 8001120:	2838      	cmp	r0, #56	; 0x38
 8001122:	dd00      	ble.n	8001126 <__aeabi_dmul+0x3ce>
 8001124:	e676      	b.n	8000e14 <__aeabi_dmul+0xbc>
 8001126:	281f      	cmp	r0, #31
 8001128:	dd5b      	ble.n	80011e2 <__aeabi_dmul+0x48a>
 800112a:	221f      	movs	r2, #31
 800112c:	0023      	movs	r3, r4
 800112e:	4252      	negs	r2, r2
 8001130:	1a51      	subs	r1, r2, r1
 8001132:	40cb      	lsrs	r3, r1
 8001134:	0019      	movs	r1, r3
 8001136:	2820      	cmp	r0, #32
 8001138:	d003      	beq.n	8001142 <__aeabi_dmul+0x3ea>
 800113a:	4a3b      	ldr	r2, [pc, #236]	; (8001228 <__aeabi_dmul+0x4d0>)
 800113c:	4462      	add	r2, ip
 800113e:	4094      	lsls	r4, r2
 8001140:	4325      	orrs	r5, r4
 8001142:	1e6a      	subs	r2, r5, #1
 8001144:	4195      	sbcs	r5, r2
 8001146:	002a      	movs	r2, r5
 8001148:	430a      	orrs	r2, r1
 800114a:	2107      	movs	r1, #7
 800114c:	000d      	movs	r5, r1
 800114e:	2400      	movs	r4, #0
 8001150:	4015      	ands	r5, r2
 8001152:	4211      	tst	r1, r2
 8001154:	d05b      	beq.n	800120e <__aeabi_dmul+0x4b6>
 8001156:	210f      	movs	r1, #15
 8001158:	2400      	movs	r4, #0
 800115a:	4011      	ands	r1, r2
 800115c:	2904      	cmp	r1, #4
 800115e:	d053      	beq.n	8001208 <__aeabi_dmul+0x4b0>
 8001160:	1d11      	adds	r1, r2, #4
 8001162:	4291      	cmp	r1, r2
 8001164:	4192      	sbcs	r2, r2
 8001166:	4252      	negs	r2, r2
 8001168:	18a4      	adds	r4, r4, r2
 800116a:	000a      	movs	r2, r1
 800116c:	0223      	lsls	r3, r4, #8
 800116e:	d54b      	bpl.n	8001208 <__aeabi_dmul+0x4b0>
 8001170:	2201      	movs	r2, #1
 8001172:	2400      	movs	r4, #0
 8001174:	2500      	movs	r5, #0
 8001176:	e650      	b.n	8000e1a <__aeabi_dmul+0xc2>
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	031b      	lsls	r3, r3, #12
 800117c:	421c      	tst	r4, r3
 800117e:	d009      	beq.n	8001194 <__aeabi_dmul+0x43c>
 8001180:	421e      	tst	r6, r3
 8001182:	d107      	bne.n	8001194 <__aeabi_dmul+0x43c>
 8001184:	4333      	orrs	r3, r6
 8001186:	031c      	lsls	r4, r3, #12
 8001188:	4643      	mov	r3, r8
 800118a:	0015      	movs	r5, r2
 800118c:	0b24      	lsrs	r4, r4, #12
 800118e:	4a25      	ldr	r2, [pc, #148]	; (8001224 <__aeabi_dmul+0x4cc>)
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	e642      	b.n	8000e1a <__aeabi_dmul+0xc2>
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	0312      	lsls	r2, r2, #12
 8001198:	4314      	orrs	r4, r2
 800119a:	0324      	lsls	r4, r4, #12
 800119c:	4a21      	ldr	r2, [pc, #132]	; (8001224 <__aeabi_dmul+0x4cc>)
 800119e:	0b24      	lsrs	r4, r4, #12
 80011a0:	9701      	str	r7, [sp, #4]
 80011a2:	e63a      	b.n	8000e1a <__aeabi_dmul+0xc2>
 80011a4:	f000 fc62 	bl	8001a6c <__clzsi2>
 80011a8:	0001      	movs	r1, r0
 80011aa:	0002      	movs	r2, r0
 80011ac:	3115      	adds	r1, #21
 80011ae:	3220      	adds	r2, #32
 80011b0:	291c      	cmp	r1, #28
 80011b2:	dc00      	bgt.n	80011b6 <__aeabi_dmul+0x45e>
 80011b4:	e74b      	b.n	800104e <__aeabi_dmul+0x2f6>
 80011b6:	0034      	movs	r4, r6
 80011b8:	3808      	subs	r0, #8
 80011ba:	2500      	movs	r5, #0
 80011bc:	4084      	lsls	r4, r0
 80011be:	e750      	b.n	8001062 <__aeabi_dmul+0x30a>
 80011c0:	f000 fc54 	bl	8001a6c <__clzsi2>
 80011c4:	0003      	movs	r3, r0
 80011c6:	001a      	movs	r2, r3
 80011c8:	3215      	adds	r2, #21
 80011ca:	3020      	adds	r0, #32
 80011cc:	2a1c      	cmp	r2, #28
 80011ce:	dc00      	bgt.n	80011d2 <__aeabi_dmul+0x47a>
 80011d0:	e71e      	b.n	8001010 <__aeabi_dmul+0x2b8>
 80011d2:	4656      	mov	r6, sl
 80011d4:	3b08      	subs	r3, #8
 80011d6:	2200      	movs	r2, #0
 80011d8:	409e      	lsls	r6, r3
 80011da:	e723      	b.n	8001024 <__aeabi_dmul+0x2cc>
 80011dc:	9b00      	ldr	r3, [sp, #0]
 80011de:	469c      	mov	ip, r3
 80011e0:	e6e6      	b.n	8000fb0 <__aeabi_dmul+0x258>
 80011e2:	4912      	ldr	r1, [pc, #72]	; (800122c <__aeabi_dmul+0x4d4>)
 80011e4:	0022      	movs	r2, r4
 80011e6:	4461      	add	r1, ip
 80011e8:	002e      	movs	r6, r5
 80011ea:	408d      	lsls	r5, r1
 80011ec:	408a      	lsls	r2, r1
 80011ee:	40c6      	lsrs	r6, r0
 80011f0:	1e69      	subs	r1, r5, #1
 80011f2:	418d      	sbcs	r5, r1
 80011f4:	4332      	orrs	r2, r6
 80011f6:	432a      	orrs	r2, r5
 80011f8:	40c4      	lsrs	r4, r0
 80011fa:	0753      	lsls	r3, r2, #29
 80011fc:	d0b6      	beq.n	800116c <__aeabi_dmul+0x414>
 80011fe:	210f      	movs	r1, #15
 8001200:	4011      	ands	r1, r2
 8001202:	2904      	cmp	r1, #4
 8001204:	d1ac      	bne.n	8001160 <__aeabi_dmul+0x408>
 8001206:	e7b1      	b.n	800116c <__aeabi_dmul+0x414>
 8001208:	0765      	lsls	r5, r4, #29
 800120a:	0264      	lsls	r4, r4, #9
 800120c:	0b24      	lsrs	r4, r4, #12
 800120e:	08d2      	lsrs	r2, r2, #3
 8001210:	4315      	orrs	r5, r2
 8001212:	2200      	movs	r2, #0
 8001214:	e601      	b.n	8000e1a <__aeabi_dmul+0xc2>
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	0312      	lsls	r2, r2, #12
 800121a:	4314      	orrs	r4, r2
 800121c:	0324      	lsls	r4, r4, #12
 800121e:	4a01      	ldr	r2, [pc, #4]	; (8001224 <__aeabi_dmul+0x4cc>)
 8001220:	0b24      	lsrs	r4, r4, #12
 8001222:	e5fa      	b.n	8000e1a <__aeabi_dmul+0xc2>
 8001224:	000007ff 	.word	0x000007ff
 8001228:	0000043e 	.word	0x0000043e
 800122c:	0000041e 	.word	0x0000041e

08001230 <__aeabi_dsub>:
 8001230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001232:	4657      	mov	r7, sl
 8001234:	464e      	mov	r6, r9
 8001236:	4645      	mov	r5, r8
 8001238:	46de      	mov	lr, fp
 800123a:	b5e0      	push	{r5, r6, r7, lr}
 800123c:	001e      	movs	r6, r3
 800123e:	0017      	movs	r7, r2
 8001240:	004a      	lsls	r2, r1, #1
 8001242:	030b      	lsls	r3, r1, #12
 8001244:	0d52      	lsrs	r2, r2, #21
 8001246:	0a5b      	lsrs	r3, r3, #9
 8001248:	4690      	mov	r8, r2
 800124a:	0f42      	lsrs	r2, r0, #29
 800124c:	431a      	orrs	r2, r3
 800124e:	0fcd      	lsrs	r5, r1, #31
 8001250:	4ccd      	ldr	r4, [pc, #820]	; (8001588 <__aeabi_dsub+0x358>)
 8001252:	0331      	lsls	r1, r6, #12
 8001254:	00c3      	lsls	r3, r0, #3
 8001256:	4694      	mov	ip, r2
 8001258:	0070      	lsls	r0, r6, #1
 800125a:	0f7a      	lsrs	r2, r7, #29
 800125c:	0a49      	lsrs	r1, r1, #9
 800125e:	00ff      	lsls	r7, r7, #3
 8001260:	469a      	mov	sl, r3
 8001262:	46b9      	mov	r9, r7
 8001264:	0d40      	lsrs	r0, r0, #21
 8001266:	0ff6      	lsrs	r6, r6, #31
 8001268:	4311      	orrs	r1, r2
 800126a:	42a0      	cmp	r0, r4
 800126c:	d100      	bne.n	8001270 <__aeabi_dsub+0x40>
 800126e:	e0b1      	b.n	80013d4 <__aeabi_dsub+0x1a4>
 8001270:	2201      	movs	r2, #1
 8001272:	4056      	eors	r6, r2
 8001274:	46b3      	mov	fp, r6
 8001276:	42b5      	cmp	r5, r6
 8001278:	d100      	bne.n	800127c <__aeabi_dsub+0x4c>
 800127a:	e088      	b.n	800138e <__aeabi_dsub+0x15e>
 800127c:	4642      	mov	r2, r8
 800127e:	1a12      	subs	r2, r2, r0
 8001280:	2a00      	cmp	r2, #0
 8001282:	dc00      	bgt.n	8001286 <__aeabi_dsub+0x56>
 8001284:	e0ae      	b.n	80013e4 <__aeabi_dsub+0x1b4>
 8001286:	2800      	cmp	r0, #0
 8001288:	d100      	bne.n	800128c <__aeabi_dsub+0x5c>
 800128a:	e0c1      	b.n	8001410 <__aeabi_dsub+0x1e0>
 800128c:	48be      	ldr	r0, [pc, #760]	; (8001588 <__aeabi_dsub+0x358>)
 800128e:	4580      	cmp	r8, r0
 8001290:	d100      	bne.n	8001294 <__aeabi_dsub+0x64>
 8001292:	e151      	b.n	8001538 <__aeabi_dsub+0x308>
 8001294:	2080      	movs	r0, #128	; 0x80
 8001296:	0400      	lsls	r0, r0, #16
 8001298:	4301      	orrs	r1, r0
 800129a:	2a38      	cmp	r2, #56	; 0x38
 800129c:	dd00      	ble.n	80012a0 <__aeabi_dsub+0x70>
 800129e:	e17b      	b.n	8001598 <__aeabi_dsub+0x368>
 80012a0:	2a1f      	cmp	r2, #31
 80012a2:	dd00      	ble.n	80012a6 <__aeabi_dsub+0x76>
 80012a4:	e1ee      	b.n	8001684 <__aeabi_dsub+0x454>
 80012a6:	2020      	movs	r0, #32
 80012a8:	003e      	movs	r6, r7
 80012aa:	1a80      	subs	r0, r0, r2
 80012ac:	000c      	movs	r4, r1
 80012ae:	40d6      	lsrs	r6, r2
 80012b0:	40d1      	lsrs	r1, r2
 80012b2:	4087      	lsls	r7, r0
 80012b4:	4662      	mov	r2, ip
 80012b6:	4084      	lsls	r4, r0
 80012b8:	1a52      	subs	r2, r2, r1
 80012ba:	1e78      	subs	r0, r7, #1
 80012bc:	4187      	sbcs	r7, r0
 80012be:	4694      	mov	ip, r2
 80012c0:	4334      	orrs	r4, r6
 80012c2:	4327      	orrs	r7, r4
 80012c4:	1bdc      	subs	r4, r3, r7
 80012c6:	42a3      	cmp	r3, r4
 80012c8:	419b      	sbcs	r3, r3
 80012ca:	4662      	mov	r2, ip
 80012cc:	425b      	negs	r3, r3
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	4699      	mov	r9, r3
 80012d2:	464b      	mov	r3, r9
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	d400      	bmi.n	80012da <__aeabi_dsub+0xaa>
 80012d8:	e118      	b.n	800150c <__aeabi_dsub+0x2dc>
 80012da:	464b      	mov	r3, r9
 80012dc:	0258      	lsls	r0, r3, #9
 80012de:	0a43      	lsrs	r3, r0, #9
 80012e0:	4699      	mov	r9, r3
 80012e2:	464b      	mov	r3, r9
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d100      	bne.n	80012ea <__aeabi_dsub+0xba>
 80012e8:	e137      	b.n	800155a <__aeabi_dsub+0x32a>
 80012ea:	4648      	mov	r0, r9
 80012ec:	f000 fbbe 	bl	8001a6c <__clzsi2>
 80012f0:	0001      	movs	r1, r0
 80012f2:	3908      	subs	r1, #8
 80012f4:	2320      	movs	r3, #32
 80012f6:	0022      	movs	r2, r4
 80012f8:	4648      	mov	r0, r9
 80012fa:	1a5b      	subs	r3, r3, r1
 80012fc:	40da      	lsrs	r2, r3
 80012fe:	4088      	lsls	r0, r1
 8001300:	408c      	lsls	r4, r1
 8001302:	4643      	mov	r3, r8
 8001304:	4310      	orrs	r0, r2
 8001306:	4588      	cmp	r8, r1
 8001308:	dd00      	ble.n	800130c <__aeabi_dsub+0xdc>
 800130a:	e136      	b.n	800157a <__aeabi_dsub+0x34a>
 800130c:	1ac9      	subs	r1, r1, r3
 800130e:	1c4b      	adds	r3, r1, #1
 8001310:	2b1f      	cmp	r3, #31
 8001312:	dd00      	ble.n	8001316 <__aeabi_dsub+0xe6>
 8001314:	e0ea      	b.n	80014ec <__aeabi_dsub+0x2bc>
 8001316:	2220      	movs	r2, #32
 8001318:	0026      	movs	r6, r4
 800131a:	1ad2      	subs	r2, r2, r3
 800131c:	0001      	movs	r1, r0
 800131e:	4094      	lsls	r4, r2
 8001320:	40de      	lsrs	r6, r3
 8001322:	40d8      	lsrs	r0, r3
 8001324:	2300      	movs	r3, #0
 8001326:	4091      	lsls	r1, r2
 8001328:	1e62      	subs	r2, r4, #1
 800132a:	4194      	sbcs	r4, r2
 800132c:	4681      	mov	r9, r0
 800132e:	4698      	mov	r8, r3
 8001330:	4331      	orrs	r1, r6
 8001332:	430c      	orrs	r4, r1
 8001334:	0763      	lsls	r3, r4, #29
 8001336:	d009      	beq.n	800134c <__aeabi_dsub+0x11c>
 8001338:	230f      	movs	r3, #15
 800133a:	4023      	ands	r3, r4
 800133c:	2b04      	cmp	r3, #4
 800133e:	d005      	beq.n	800134c <__aeabi_dsub+0x11c>
 8001340:	1d23      	adds	r3, r4, #4
 8001342:	42a3      	cmp	r3, r4
 8001344:	41a4      	sbcs	r4, r4
 8001346:	4264      	negs	r4, r4
 8001348:	44a1      	add	r9, r4
 800134a:	001c      	movs	r4, r3
 800134c:	464b      	mov	r3, r9
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	d400      	bmi.n	8001354 <__aeabi_dsub+0x124>
 8001352:	e0de      	b.n	8001512 <__aeabi_dsub+0x2e2>
 8001354:	4641      	mov	r1, r8
 8001356:	4b8c      	ldr	r3, [pc, #560]	; (8001588 <__aeabi_dsub+0x358>)
 8001358:	3101      	adds	r1, #1
 800135a:	4299      	cmp	r1, r3
 800135c:	d100      	bne.n	8001360 <__aeabi_dsub+0x130>
 800135e:	e0e7      	b.n	8001530 <__aeabi_dsub+0x300>
 8001360:	464b      	mov	r3, r9
 8001362:	488a      	ldr	r0, [pc, #552]	; (800158c <__aeabi_dsub+0x35c>)
 8001364:	08e4      	lsrs	r4, r4, #3
 8001366:	4003      	ands	r3, r0
 8001368:	0018      	movs	r0, r3
 800136a:	0549      	lsls	r1, r1, #21
 800136c:	075b      	lsls	r3, r3, #29
 800136e:	0240      	lsls	r0, r0, #9
 8001370:	4323      	orrs	r3, r4
 8001372:	0d4a      	lsrs	r2, r1, #21
 8001374:	0b04      	lsrs	r4, r0, #12
 8001376:	0512      	lsls	r2, r2, #20
 8001378:	07ed      	lsls	r5, r5, #31
 800137a:	4322      	orrs	r2, r4
 800137c:	432a      	orrs	r2, r5
 800137e:	0018      	movs	r0, r3
 8001380:	0011      	movs	r1, r2
 8001382:	bcf0      	pop	{r4, r5, r6, r7}
 8001384:	46bb      	mov	fp, r7
 8001386:	46b2      	mov	sl, r6
 8001388:	46a9      	mov	r9, r5
 800138a:	46a0      	mov	r8, r4
 800138c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800138e:	4642      	mov	r2, r8
 8001390:	1a12      	subs	r2, r2, r0
 8001392:	2a00      	cmp	r2, #0
 8001394:	dd52      	ble.n	800143c <__aeabi_dsub+0x20c>
 8001396:	2800      	cmp	r0, #0
 8001398:	d100      	bne.n	800139c <__aeabi_dsub+0x16c>
 800139a:	e09c      	b.n	80014d6 <__aeabi_dsub+0x2a6>
 800139c:	45a0      	cmp	r8, r4
 800139e:	d100      	bne.n	80013a2 <__aeabi_dsub+0x172>
 80013a0:	e0ca      	b.n	8001538 <__aeabi_dsub+0x308>
 80013a2:	2080      	movs	r0, #128	; 0x80
 80013a4:	0400      	lsls	r0, r0, #16
 80013a6:	4301      	orrs	r1, r0
 80013a8:	2a38      	cmp	r2, #56	; 0x38
 80013aa:	dd00      	ble.n	80013ae <__aeabi_dsub+0x17e>
 80013ac:	e149      	b.n	8001642 <__aeabi_dsub+0x412>
 80013ae:	2a1f      	cmp	r2, #31
 80013b0:	dc00      	bgt.n	80013b4 <__aeabi_dsub+0x184>
 80013b2:	e197      	b.n	80016e4 <__aeabi_dsub+0x4b4>
 80013b4:	0010      	movs	r0, r2
 80013b6:	000e      	movs	r6, r1
 80013b8:	3820      	subs	r0, #32
 80013ba:	40c6      	lsrs	r6, r0
 80013bc:	2a20      	cmp	r2, #32
 80013be:	d004      	beq.n	80013ca <__aeabi_dsub+0x19a>
 80013c0:	2040      	movs	r0, #64	; 0x40
 80013c2:	1a82      	subs	r2, r0, r2
 80013c4:	4091      	lsls	r1, r2
 80013c6:	430f      	orrs	r7, r1
 80013c8:	46b9      	mov	r9, r7
 80013ca:	464c      	mov	r4, r9
 80013cc:	1e62      	subs	r2, r4, #1
 80013ce:	4194      	sbcs	r4, r2
 80013d0:	4334      	orrs	r4, r6
 80013d2:	e13a      	b.n	800164a <__aeabi_dsub+0x41a>
 80013d4:	000a      	movs	r2, r1
 80013d6:	433a      	orrs	r2, r7
 80013d8:	d028      	beq.n	800142c <__aeabi_dsub+0x1fc>
 80013da:	46b3      	mov	fp, r6
 80013dc:	42b5      	cmp	r5, r6
 80013de:	d02b      	beq.n	8001438 <__aeabi_dsub+0x208>
 80013e0:	4a6b      	ldr	r2, [pc, #428]	; (8001590 <__aeabi_dsub+0x360>)
 80013e2:	4442      	add	r2, r8
 80013e4:	2a00      	cmp	r2, #0
 80013e6:	d05d      	beq.n	80014a4 <__aeabi_dsub+0x274>
 80013e8:	4642      	mov	r2, r8
 80013ea:	4644      	mov	r4, r8
 80013ec:	1a82      	subs	r2, r0, r2
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	d000      	beq.n	80013f4 <__aeabi_dsub+0x1c4>
 80013f2:	e0f5      	b.n	80015e0 <__aeabi_dsub+0x3b0>
 80013f4:	4665      	mov	r5, ip
 80013f6:	431d      	orrs	r5, r3
 80013f8:	d100      	bne.n	80013fc <__aeabi_dsub+0x1cc>
 80013fa:	e19c      	b.n	8001736 <__aeabi_dsub+0x506>
 80013fc:	1e55      	subs	r5, r2, #1
 80013fe:	2a01      	cmp	r2, #1
 8001400:	d100      	bne.n	8001404 <__aeabi_dsub+0x1d4>
 8001402:	e1fb      	b.n	80017fc <__aeabi_dsub+0x5cc>
 8001404:	4c60      	ldr	r4, [pc, #384]	; (8001588 <__aeabi_dsub+0x358>)
 8001406:	42a2      	cmp	r2, r4
 8001408:	d100      	bne.n	800140c <__aeabi_dsub+0x1dc>
 800140a:	e1bd      	b.n	8001788 <__aeabi_dsub+0x558>
 800140c:	002a      	movs	r2, r5
 800140e:	e0f0      	b.n	80015f2 <__aeabi_dsub+0x3c2>
 8001410:	0008      	movs	r0, r1
 8001412:	4338      	orrs	r0, r7
 8001414:	d100      	bne.n	8001418 <__aeabi_dsub+0x1e8>
 8001416:	e0c3      	b.n	80015a0 <__aeabi_dsub+0x370>
 8001418:	1e50      	subs	r0, r2, #1
 800141a:	2a01      	cmp	r2, #1
 800141c:	d100      	bne.n	8001420 <__aeabi_dsub+0x1f0>
 800141e:	e1a8      	b.n	8001772 <__aeabi_dsub+0x542>
 8001420:	4c59      	ldr	r4, [pc, #356]	; (8001588 <__aeabi_dsub+0x358>)
 8001422:	42a2      	cmp	r2, r4
 8001424:	d100      	bne.n	8001428 <__aeabi_dsub+0x1f8>
 8001426:	e087      	b.n	8001538 <__aeabi_dsub+0x308>
 8001428:	0002      	movs	r2, r0
 800142a:	e736      	b.n	800129a <__aeabi_dsub+0x6a>
 800142c:	2201      	movs	r2, #1
 800142e:	4056      	eors	r6, r2
 8001430:	46b3      	mov	fp, r6
 8001432:	42b5      	cmp	r5, r6
 8001434:	d000      	beq.n	8001438 <__aeabi_dsub+0x208>
 8001436:	e721      	b.n	800127c <__aeabi_dsub+0x4c>
 8001438:	4a55      	ldr	r2, [pc, #340]	; (8001590 <__aeabi_dsub+0x360>)
 800143a:	4442      	add	r2, r8
 800143c:	2a00      	cmp	r2, #0
 800143e:	d100      	bne.n	8001442 <__aeabi_dsub+0x212>
 8001440:	e0b5      	b.n	80015ae <__aeabi_dsub+0x37e>
 8001442:	4642      	mov	r2, r8
 8001444:	4644      	mov	r4, r8
 8001446:	1a82      	subs	r2, r0, r2
 8001448:	2c00      	cmp	r4, #0
 800144a:	d100      	bne.n	800144e <__aeabi_dsub+0x21e>
 800144c:	e138      	b.n	80016c0 <__aeabi_dsub+0x490>
 800144e:	4e4e      	ldr	r6, [pc, #312]	; (8001588 <__aeabi_dsub+0x358>)
 8001450:	42b0      	cmp	r0, r6
 8001452:	d100      	bne.n	8001456 <__aeabi_dsub+0x226>
 8001454:	e1de      	b.n	8001814 <__aeabi_dsub+0x5e4>
 8001456:	2680      	movs	r6, #128	; 0x80
 8001458:	4664      	mov	r4, ip
 800145a:	0436      	lsls	r6, r6, #16
 800145c:	4334      	orrs	r4, r6
 800145e:	46a4      	mov	ip, r4
 8001460:	2a38      	cmp	r2, #56	; 0x38
 8001462:	dd00      	ble.n	8001466 <__aeabi_dsub+0x236>
 8001464:	e196      	b.n	8001794 <__aeabi_dsub+0x564>
 8001466:	2a1f      	cmp	r2, #31
 8001468:	dd00      	ble.n	800146c <__aeabi_dsub+0x23c>
 800146a:	e224      	b.n	80018b6 <__aeabi_dsub+0x686>
 800146c:	2620      	movs	r6, #32
 800146e:	1ab4      	subs	r4, r6, r2
 8001470:	46a2      	mov	sl, r4
 8001472:	4664      	mov	r4, ip
 8001474:	4656      	mov	r6, sl
 8001476:	40b4      	lsls	r4, r6
 8001478:	46a1      	mov	r9, r4
 800147a:	001c      	movs	r4, r3
 800147c:	464e      	mov	r6, r9
 800147e:	40d4      	lsrs	r4, r2
 8001480:	4326      	orrs	r6, r4
 8001482:	0034      	movs	r4, r6
 8001484:	4656      	mov	r6, sl
 8001486:	40b3      	lsls	r3, r6
 8001488:	1e5e      	subs	r6, r3, #1
 800148a:	41b3      	sbcs	r3, r6
 800148c:	431c      	orrs	r4, r3
 800148e:	4663      	mov	r3, ip
 8001490:	40d3      	lsrs	r3, r2
 8001492:	18c9      	adds	r1, r1, r3
 8001494:	19e4      	adds	r4, r4, r7
 8001496:	42bc      	cmp	r4, r7
 8001498:	41bf      	sbcs	r7, r7
 800149a:	427f      	negs	r7, r7
 800149c:	46b9      	mov	r9, r7
 800149e:	4680      	mov	r8, r0
 80014a0:	4489      	add	r9, r1
 80014a2:	e0d8      	b.n	8001656 <__aeabi_dsub+0x426>
 80014a4:	4640      	mov	r0, r8
 80014a6:	4c3b      	ldr	r4, [pc, #236]	; (8001594 <__aeabi_dsub+0x364>)
 80014a8:	3001      	adds	r0, #1
 80014aa:	4220      	tst	r0, r4
 80014ac:	d000      	beq.n	80014b0 <__aeabi_dsub+0x280>
 80014ae:	e0b4      	b.n	800161a <__aeabi_dsub+0x3ea>
 80014b0:	4640      	mov	r0, r8
 80014b2:	2800      	cmp	r0, #0
 80014b4:	d000      	beq.n	80014b8 <__aeabi_dsub+0x288>
 80014b6:	e144      	b.n	8001742 <__aeabi_dsub+0x512>
 80014b8:	4660      	mov	r0, ip
 80014ba:	4318      	orrs	r0, r3
 80014bc:	d100      	bne.n	80014c0 <__aeabi_dsub+0x290>
 80014be:	e190      	b.n	80017e2 <__aeabi_dsub+0x5b2>
 80014c0:	0008      	movs	r0, r1
 80014c2:	4338      	orrs	r0, r7
 80014c4:	d000      	beq.n	80014c8 <__aeabi_dsub+0x298>
 80014c6:	e1aa      	b.n	800181e <__aeabi_dsub+0x5ee>
 80014c8:	4661      	mov	r1, ip
 80014ca:	08db      	lsrs	r3, r3, #3
 80014cc:	0749      	lsls	r1, r1, #29
 80014ce:	430b      	orrs	r3, r1
 80014d0:	4661      	mov	r1, ip
 80014d2:	08cc      	lsrs	r4, r1, #3
 80014d4:	e027      	b.n	8001526 <__aeabi_dsub+0x2f6>
 80014d6:	0008      	movs	r0, r1
 80014d8:	4338      	orrs	r0, r7
 80014da:	d061      	beq.n	80015a0 <__aeabi_dsub+0x370>
 80014dc:	1e50      	subs	r0, r2, #1
 80014de:	2a01      	cmp	r2, #1
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dsub+0x2b4>
 80014e2:	e139      	b.n	8001758 <__aeabi_dsub+0x528>
 80014e4:	42a2      	cmp	r2, r4
 80014e6:	d027      	beq.n	8001538 <__aeabi_dsub+0x308>
 80014e8:	0002      	movs	r2, r0
 80014ea:	e75d      	b.n	80013a8 <__aeabi_dsub+0x178>
 80014ec:	0002      	movs	r2, r0
 80014ee:	391f      	subs	r1, #31
 80014f0:	40ca      	lsrs	r2, r1
 80014f2:	0011      	movs	r1, r2
 80014f4:	2b20      	cmp	r3, #32
 80014f6:	d003      	beq.n	8001500 <__aeabi_dsub+0x2d0>
 80014f8:	2240      	movs	r2, #64	; 0x40
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	4098      	lsls	r0, r3
 80014fe:	4304      	orrs	r4, r0
 8001500:	1e63      	subs	r3, r4, #1
 8001502:	419c      	sbcs	r4, r3
 8001504:	2300      	movs	r3, #0
 8001506:	4699      	mov	r9, r3
 8001508:	4698      	mov	r8, r3
 800150a:	430c      	orrs	r4, r1
 800150c:	0763      	lsls	r3, r4, #29
 800150e:	d000      	beq.n	8001512 <__aeabi_dsub+0x2e2>
 8001510:	e712      	b.n	8001338 <__aeabi_dsub+0x108>
 8001512:	464b      	mov	r3, r9
 8001514:	464a      	mov	r2, r9
 8001516:	08e4      	lsrs	r4, r4, #3
 8001518:	075b      	lsls	r3, r3, #29
 800151a:	4323      	orrs	r3, r4
 800151c:	08d4      	lsrs	r4, r2, #3
 800151e:	4642      	mov	r2, r8
 8001520:	4919      	ldr	r1, [pc, #100]	; (8001588 <__aeabi_dsub+0x358>)
 8001522:	428a      	cmp	r2, r1
 8001524:	d00e      	beq.n	8001544 <__aeabi_dsub+0x314>
 8001526:	0324      	lsls	r4, r4, #12
 8001528:	0552      	lsls	r2, r2, #21
 800152a:	0b24      	lsrs	r4, r4, #12
 800152c:	0d52      	lsrs	r2, r2, #21
 800152e:	e722      	b.n	8001376 <__aeabi_dsub+0x146>
 8001530:	000a      	movs	r2, r1
 8001532:	2400      	movs	r4, #0
 8001534:	2300      	movs	r3, #0
 8001536:	e71e      	b.n	8001376 <__aeabi_dsub+0x146>
 8001538:	08db      	lsrs	r3, r3, #3
 800153a:	4662      	mov	r2, ip
 800153c:	0752      	lsls	r2, r2, #29
 800153e:	4313      	orrs	r3, r2
 8001540:	4662      	mov	r2, ip
 8001542:	08d4      	lsrs	r4, r2, #3
 8001544:	001a      	movs	r2, r3
 8001546:	4322      	orrs	r2, r4
 8001548:	d100      	bne.n	800154c <__aeabi_dsub+0x31c>
 800154a:	e1fc      	b.n	8001946 <__aeabi_dsub+0x716>
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	0312      	lsls	r2, r2, #12
 8001550:	4314      	orrs	r4, r2
 8001552:	0324      	lsls	r4, r4, #12
 8001554:	4a0c      	ldr	r2, [pc, #48]	; (8001588 <__aeabi_dsub+0x358>)
 8001556:	0b24      	lsrs	r4, r4, #12
 8001558:	e70d      	b.n	8001376 <__aeabi_dsub+0x146>
 800155a:	0020      	movs	r0, r4
 800155c:	f000 fa86 	bl	8001a6c <__clzsi2>
 8001560:	0001      	movs	r1, r0
 8001562:	3118      	adds	r1, #24
 8001564:	291f      	cmp	r1, #31
 8001566:	dc00      	bgt.n	800156a <__aeabi_dsub+0x33a>
 8001568:	e6c4      	b.n	80012f4 <__aeabi_dsub+0xc4>
 800156a:	3808      	subs	r0, #8
 800156c:	4084      	lsls	r4, r0
 800156e:	4643      	mov	r3, r8
 8001570:	0020      	movs	r0, r4
 8001572:	2400      	movs	r4, #0
 8001574:	4588      	cmp	r8, r1
 8001576:	dc00      	bgt.n	800157a <__aeabi_dsub+0x34a>
 8001578:	e6c8      	b.n	800130c <__aeabi_dsub+0xdc>
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <__aeabi_dsub+0x35c>)
 800157c:	1a5b      	subs	r3, r3, r1
 800157e:	4010      	ands	r0, r2
 8001580:	4698      	mov	r8, r3
 8001582:	4681      	mov	r9, r0
 8001584:	e6d6      	b.n	8001334 <__aeabi_dsub+0x104>
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	000007ff 	.word	0x000007ff
 800158c:	ff7fffff 	.word	0xff7fffff
 8001590:	fffff801 	.word	0xfffff801
 8001594:	000007fe 	.word	0x000007fe
 8001598:	430f      	orrs	r7, r1
 800159a:	1e7a      	subs	r2, r7, #1
 800159c:	4197      	sbcs	r7, r2
 800159e:	e691      	b.n	80012c4 <__aeabi_dsub+0x94>
 80015a0:	4661      	mov	r1, ip
 80015a2:	08db      	lsrs	r3, r3, #3
 80015a4:	0749      	lsls	r1, r1, #29
 80015a6:	430b      	orrs	r3, r1
 80015a8:	4661      	mov	r1, ip
 80015aa:	08cc      	lsrs	r4, r1, #3
 80015ac:	e7b8      	b.n	8001520 <__aeabi_dsub+0x2f0>
 80015ae:	4640      	mov	r0, r8
 80015b0:	4cd3      	ldr	r4, [pc, #844]	; (8001900 <__aeabi_dsub+0x6d0>)
 80015b2:	3001      	adds	r0, #1
 80015b4:	4220      	tst	r0, r4
 80015b6:	d000      	beq.n	80015ba <__aeabi_dsub+0x38a>
 80015b8:	e0a2      	b.n	8001700 <__aeabi_dsub+0x4d0>
 80015ba:	4640      	mov	r0, r8
 80015bc:	2800      	cmp	r0, #0
 80015be:	d000      	beq.n	80015c2 <__aeabi_dsub+0x392>
 80015c0:	e101      	b.n	80017c6 <__aeabi_dsub+0x596>
 80015c2:	4660      	mov	r0, ip
 80015c4:	4318      	orrs	r0, r3
 80015c6:	d100      	bne.n	80015ca <__aeabi_dsub+0x39a>
 80015c8:	e15e      	b.n	8001888 <__aeabi_dsub+0x658>
 80015ca:	0008      	movs	r0, r1
 80015cc:	4338      	orrs	r0, r7
 80015ce:	d000      	beq.n	80015d2 <__aeabi_dsub+0x3a2>
 80015d0:	e15f      	b.n	8001892 <__aeabi_dsub+0x662>
 80015d2:	4661      	mov	r1, ip
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	0749      	lsls	r1, r1, #29
 80015d8:	430b      	orrs	r3, r1
 80015da:	4661      	mov	r1, ip
 80015dc:	08cc      	lsrs	r4, r1, #3
 80015de:	e7a2      	b.n	8001526 <__aeabi_dsub+0x2f6>
 80015e0:	4dc8      	ldr	r5, [pc, #800]	; (8001904 <__aeabi_dsub+0x6d4>)
 80015e2:	42a8      	cmp	r0, r5
 80015e4:	d100      	bne.n	80015e8 <__aeabi_dsub+0x3b8>
 80015e6:	e0cf      	b.n	8001788 <__aeabi_dsub+0x558>
 80015e8:	2580      	movs	r5, #128	; 0x80
 80015ea:	4664      	mov	r4, ip
 80015ec:	042d      	lsls	r5, r5, #16
 80015ee:	432c      	orrs	r4, r5
 80015f0:	46a4      	mov	ip, r4
 80015f2:	2a38      	cmp	r2, #56	; 0x38
 80015f4:	dc56      	bgt.n	80016a4 <__aeabi_dsub+0x474>
 80015f6:	2a1f      	cmp	r2, #31
 80015f8:	dd00      	ble.n	80015fc <__aeabi_dsub+0x3cc>
 80015fa:	e0d1      	b.n	80017a0 <__aeabi_dsub+0x570>
 80015fc:	2520      	movs	r5, #32
 80015fe:	001e      	movs	r6, r3
 8001600:	1aad      	subs	r5, r5, r2
 8001602:	4664      	mov	r4, ip
 8001604:	40ab      	lsls	r3, r5
 8001606:	40ac      	lsls	r4, r5
 8001608:	40d6      	lsrs	r6, r2
 800160a:	1e5d      	subs	r5, r3, #1
 800160c:	41ab      	sbcs	r3, r5
 800160e:	4334      	orrs	r4, r6
 8001610:	4323      	orrs	r3, r4
 8001612:	4664      	mov	r4, ip
 8001614:	40d4      	lsrs	r4, r2
 8001616:	1b09      	subs	r1, r1, r4
 8001618:	e049      	b.n	80016ae <__aeabi_dsub+0x47e>
 800161a:	4660      	mov	r0, ip
 800161c:	1bdc      	subs	r4, r3, r7
 800161e:	1a46      	subs	r6, r0, r1
 8001620:	42a3      	cmp	r3, r4
 8001622:	4180      	sbcs	r0, r0
 8001624:	4240      	negs	r0, r0
 8001626:	4681      	mov	r9, r0
 8001628:	0030      	movs	r0, r6
 800162a:	464e      	mov	r6, r9
 800162c:	1b80      	subs	r0, r0, r6
 800162e:	4681      	mov	r9, r0
 8001630:	0200      	lsls	r0, r0, #8
 8001632:	d476      	bmi.n	8001722 <__aeabi_dsub+0x4f2>
 8001634:	464b      	mov	r3, r9
 8001636:	4323      	orrs	r3, r4
 8001638:	d000      	beq.n	800163c <__aeabi_dsub+0x40c>
 800163a:	e652      	b.n	80012e2 <__aeabi_dsub+0xb2>
 800163c:	2400      	movs	r4, #0
 800163e:	2500      	movs	r5, #0
 8001640:	e771      	b.n	8001526 <__aeabi_dsub+0x2f6>
 8001642:	4339      	orrs	r1, r7
 8001644:	000c      	movs	r4, r1
 8001646:	1e62      	subs	r2, r4, #1
 8001648:	4194      	sbcs	r4, r2
 800164a:	18e4      	adds	r4, r4, r3
 800164c:	429c      	cmp	r4, r3
 800164e:	419b      	sbcs	r3, r3
 8001650:	425b      	negs	r3, r3
 8001652:	4463      	add	r3, ip
 8001654:	4699      	mov	r9, r3
 8001656:	464b      	mov	r3, r9
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	d400      	bmi.n	800165e <__aeabi_dsub+0x42e>
 800165c:	e756      	b.n	800150c <__aeabi_dsub+0x2dc>
 800165e:	2301      	movs	r3, #1
 8001660:	469c      	mov	ip, r3
 8001662:	4ba8      	ldr	r3, [pc, #672]	; (8001904 <__aeabi_dsub+0x6d4>)
 8001664:	44e0      	add	r8, ip
 8001666:	4598      	cmp	r8, r3
 8001668:	d038      	beq.n	80016dc <__aeabi_dsub+0x4ac>
 800166a:	464b      	mov	r3, r9
 800166c:	48a6      	ldr	r0, [pc, #664]	; (8001908 <__aeabi_dsub+0x6d8>)
 800166e:	2201      	movs	r2, #1
 8001670:	4003      	ands	r3, r0
 8001672:	0018      	movs	r0, r3
 8001674:	0863      	lsrs	r3, r4, #1
 8001676:	4014      	ands	r4, r2
 8001678:	431c      	orrs	r4, r3
 800167a:	07c3      	lsls	r3, r0, #31
 800167c:	431c      	orrs	r4, r3
 800167e:	0843      	lsrs	r3, r0, #1
 8001680:	4699      	mov	r9, r3
 8001682:	e657      	b.n	8001334 <__aeabi_dsub+0x104>
 8001684:	0010      	movs	r0, r2
 8001686:	000e      	movs	r6, r1
 8001688:	3820      	subs	r0, #32
 800168a:	40c6      	lsrs	r6, r0
 800168c:	2a20      	cmp	r2, #32
 800168e:	d004      	beq.n	800169a <__aeabi_dsub+0x46a>
 8001690:	2040      	movs	r0, #64	; 0x40
 8001692:	1a82      	subs	r2, r0, r2
 8001694:	4091      	lsls	r1, r2
 8001696:	430f      	orrs	r7, r1
 8001698:	46b9      	mov	r9, r7
 800169a:	464f      	mov	r7, r9
 800169c:	1e7a      	subs	r2, r7, #1
 800169e:	4197      	sbcs	r7, r2
 80016a0:	4337      	orrs	r7, r6
 80016a2:	e60f      	b.n	80012c4 <__aeabi_dsub+0x94>
 80016a4:	4662      	mov	r2, ip
 80016a6:	431a      	orrs	r2, r3
 80016a8:	0013      	movs	r3, r2
 80016aa:	1e5a      	subs	r2, r3, #1
 80016ac:	4193      	sbcs	r3, r2
 80016ae:	1afc      	subs	r4, r7, r3
 80016b0:	42a7      	cmp	r7, r4
 80016b2:	41bf      	sbcs	r7, r7
 80016b4:	427f      	negs	r7, r7
 80016b6:	1bcb      	subs	r3, r1, r7
 80016b8:	4699      	mov	r9, r3
 80016ba:	465d      	mov	r5, fp
 80016bc:	4680      	mov	r8, r0
 80016be:	e608      	b.n	80012d2 <__aeabi_dsub+0xa2>
 80016c0:	4666      	mov	r6, ip
 80016c2:	431e      	orrs	r6, r3
 80016c4:	d100      	bne.n	80016c8 <__aeabi_dsub+0x498>
 80016c6:	e0be      	b.n	8001846 <__aeabi_dsub+0x616>
 80016c8:	1e56      	subs	r6, r2, #1
 80016ca:	2a01      	cmp	r2, #1
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dsub+0x4a0>
 80016ce:	e109      	b.n	80018e4 <__aeabi_dsub+0x6b4>
 80016d0:	4c8c      	ldr	r4, [pc, #560]	; (8001904 <__aeabi_dsub+0x6d4>)
 80016d2:	42a2      	cmp	r2, r4
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dsub+0x4a8>
 80016d6:	e119      	b.n	800190c <__aeabi_dsub+0x6dc>
 80016d8:	0032      	movs	r2, r6
 80016da:	e6c1      	b.n	8001460 <__aeabi_dsub+0x230>
 80016dc:	4642      	mov	r2, r8
 80016de:	2400      	movs	r4, #0
 80016e0:	2300      	movs	r3, #0
 80016e2:	e648      	b.n	8001376 <__aeabi_dsub+0x146>
 80016e4:	2020      	movs	r0, #32
 80016e6:	000c      	movs	r4, r1
 80016e8:	1a80      	subs	r0, r0, r2
 80016ea:	003e      	movs	r6, r7
 80016ec:	4087      	lsls	r7, r0
 80016ee:	4084      	lsls	r4, r0
 80016f0:	40d6      	lsrs	r6, r2
 80016f2:	1e78      	subs	r0, r7, #1
 80016f4:	4187      	sbcs	r7, r0
 80016f6:	40d1      	lsrs	r1, r2
 80016f8:	4334      	orrs	r4, r6
 80016fa:	433c      	orrs	r4, r7
 80016fc:	448c      	add	ip, r1
 80016fe:	e7a4      	b.n	800164a <__aeabi_dsub+0x41a>
 8001700:	4a80      	ldr	r2, [pc, #512]	; (8001904 <__aeabi_dsub+0x6d4>)
 8001702:	4290      	cmp	r0, r2
 8001704:	d100      	bne.n	8001708 <__aeabi_dsub+0x4d8>
 8001706:	e0e9      	b.n	80018dc <__aeabi_dsub+0x6ac>
 8001708:	19df      	adds	r7, r3, r7
 800170a:	429f      	cmp	r7, r3
 800170c:	419b      	sbcs	r3, r3
 800170e:	4461      	add	r1, ip
 8001710:	425b      	negs	r3, r3
 8001712:	18c9      	adds	r1, r1, r3
 8001714:	07cc      	lsls	r4, r1, #31
 8001716:	087f      	lsrs	r7, r7, #1
 8001718:	084b      	lsrs	r3, r1, #1
 800171a:	4699      	mov	r9, r3
 800171c:	4680      	mov	r8, r0
 800171e:	433c      	orrs	r4, r7
 8001720:	e6f4      	b.n	800150c <__aeabi_dsub+0x2dc>
 8001722:	1afc      	subs	r4, r7, r3
 8001724:	42a7      	cmp	r7, r4
 8001726:	41bf      	sbcs	r7, r7
 8001728:	4663      	mov	r3, ip
 800172a:	427f      	negs	r7, r7
 800172c:	1ac9      	subs	r1, r1, r3
 800172e:	1bcb      	subs	r3, r1, r7
 8001730:	4699      	mov	r9, r3
 8001732:	465d      	mov	r5, fp
 8001734:	e5d5      	b.n	80012e2 <__aeabi_dsub+0xb2>
 8001736:	08ff      	lsrs	r7, r7, #3
 8001738:	074b      	lsls	r3, r1, #29
 800173a:	465d      	mov	r5, fp
 800173c:	433b      	orrs	r3, r7
 800173e:	08cc      	lsrs	r4, r1, #3
 8001740:	e6ee      	b.n	8001520 <__aeabi_dsub+0x2f0>
 8001742:	4662      	mov	r2, ip
 8001744:	431a      	orrs	r2, r3
 8001746:	d000      	beq.n	800174a <__aeabi_dsub+0x51a>
 8001748:	e082      	b.n	8001850 <__aeabi_dsub+0x620>
 800174a:	000b      	movs	r3, r1
 800174c:	433b      	orrs	r3, r7
 800174e:	d11b      	bne.n	8001788 <__aeabi_dsub+0x558>
 8001750:	2480      	movs	r4, #128	; 0x80
 8001752:	2500      	movs	r5, #0
 8001754:	0324      	lsls	r4, r4, #12
 8001756:	e6f9      	b.n	800154c <__aeabi_dsub+0x31c>
 8001758:	19dc      	adds	r4, r3, r7
 800175a:	429c      	cmp	r4, r3
 800175c:	419b      	sbcs	r3, r3
 800175e:	4461      	add	r1, ip
 8001760:	4689      	mov	r9, r1
 8001762:	425b      	negs	r3, r3
 8001764:	4499      	add	r9, r3
 8001766:	464b      	mov	r3, r9
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	d444      	bmi.n	80017f6 <__aeabi_dsub+0x5c6>
 800176c:	2301      	movs	r3, #1
 800176e:	4698      	mov	r8, r3
 8001770:	e6cc      	b.n	800150c <__aeabi_dsub+0x2dc>
 8001772:	1bdc      	subs	r4, r3, r7
 8001774:	4662      	mov	r2, ip
 8001776:	42a3      	cmp	r3, r4
 8001778:	419b      	sbcs	r3, r3
 800177a:	1a51      	subs	r1, r2, r1
 800177c:	425b      	negs	r3, r3
 800177e:	1acb      	subs	r3, r1, r3
 8001780:	4699      	mov	r9, r3
 8001782:	2301      	movs	r3, #1
 8001784:	4698      	mov	r8, r3
 8001786:	e5a4      	b.n	80012d2 <__aeabi_dsub+0xa2>
 8001788:	08ff      	lsrs	r7, r7, #3
 800178a:	074b      	lsls	r3, r1, #29
 800178c:	465d      	mov	r5, fp
 800178e:	433b      	orrs	r3, r7
 8001790:	08cc      	lsrs	r4, r1, #3
 8001792:	e6d7      	b.n	8001544 <__aeabi_dsub+0x314>
 8001794:	4662      	mov	r2, ip
 8001796:	431a      	orrs	r2, r3
 8001798:	0014      	movs	r4, r2
 800179a:	1e63      	subs	r3, r4, #1
 800179c:	419c      	sbcs	r4, r3
 800179e:	e679      	b.n	8001494 <__aeabi_dsub+0x264>
 80017a0:	0015      	movs	r5, r2
 80017a2:	4664      	mov	r4, ip
 80017a4:	3d20      	subs	r5, #32
 80017a6:	40ec      	lsrs	r4, r5
 80017a8:	46a0      	mov	r8, r4
 80017aa:	2a20      	cmp	r2, #32
 80017ac:	d005      	beq.n	80017ba <__aeabi_dsub+0x58a>
 80017ae:	2540      	movs	r5, #64	; 0x40
 80017b0:	4664      	mov	r4, ip
 80017b2:	1aaa      	subs	r2, r5, r2
 80017b4:	4094      	lsls	r4, r2
 80017b6:	4323      	orrs	r3, r4
 80017b8:	469a      	mov	sl, r3
 80017ba:	4654      	mov	r4, sl
 80017bc:	1e63      	subs	r3, r4, #1
 80017be:	419c      	sbcs	r4, r3
 80017c0:	4643      	mov	r3, r8
 80017c2:	4323      	orrs	r3, r4
 80017c4:	e773      	b.n	80016ae <__aeabi_dsub+0x47e>
 80017c6:	4662      	mov	r2, ip
 80017c8:	431a      	orrs	r2, r3
 80017ca:	d023      	beq.n	8001814 <__aeabi_dsub+0x5e4>
 80017cc:	000a      	movs	r2, r1
 80017ce:	433a      	orrs	r2, r7
 80017d0:	d000      	beq.n	80017d4 <__aeabi_dsub+0x5a4>
 80017d2:	e0a0      	b.n	8001916 <__aeabi_dsub+0x6e6>
 80017d4:	4662      	mov	r2, ip
 80017d6:	08db      	lsrs	r3, r3, #3
 80017d8:	0752      	lsls	r2, r2, #29
 80017da:	4313      	orrs	r3, r2
 80017dc:	4662      	mov	r2, ip
 80017de:	08d4      	lsrs	r4, r2, #3
 80017e0:	e6b0      	b.n	8001544 <__aeabi_dsub+0x314>
 80017e2:	000b      	movs	r3, r1
 80017e4:	433b      	orrs	r3, r7
 80017e6:	d100      	bne.n	80017ea <__aeabi_dsub+0x5ba>
 80017e8:	e728      	b.n	800163c <__aeabi_dsub+0x40c>
 80017ea:	08ff      	lsrs	r7, r7, #3
 80017ec:	074b      	lsls	r3, r1, #29
 80017ee:	465d      	mov	r5, fp
 80017f0:	433b      	orrs	r3, r7
 80017f2:	08cc      	lsrs	r4, r1, #3
 80017f4:	e697      	b.n	8001526 <__aeabi_dsub+0x2f6>
 80017f6:	2302      	movs	r3, #2
 80017f8:	4698      	mov	r8, r3
 80017fa:	e736      	b.n	800166a <__aeabi_dsub+0x43a>
 80017fc:	1afc      	subs	r4, r7, r3
 80017fe:	42a7      	cmp	r7, r4
 8001800:	41bf      	sbcs	r7, r7
 8001802:	4663      	mov	r3, ip
 8001804:	427f      	negs	r7, r7
 8001806:	1ac9      	subs	r1, r1, r3
 8001808:	1bcb      	subs	r3, r1, r7
 800180a:	4699      	mov	r9, r3
 800180c:	2301      	movs	r3, #1
 800180e:	465d      	mov	r5, fp
 8001810:	4698      	mov	r8, r3
 8001812:	e55e      	b.n	80012d2 <__aeabi_dsub+0xa2>
 8001814:	074b      	lsls	r3, r1, #29
 8001816:	08ff      	lsrs	r7, r7, #3
 8001818:	433b      	orrs	r3, r7
 800181a:	08cc      	lsrs	r4, r1, #3
 800181c:	e692      	b.n	8001544 <__aeabi_dsub+0x314>
 800181e:	1bdc      	subs	r4, r3, r7
 8001820:	4660      	mov	r0, ip
 8001822:	42a3      	cmp	r3, r4
 8001824:	41b6      	sbcs	r6, r6
 8001826:	1a40      	subs	r0, r0, r1
 8001828:	4276      	negs	r6, r6
 800182a:	1b80      	subs	r0, r0, r6
 800182c:	4681      	mov	r9, r0
 800182e:	0200      	lsls	r0, r0, #8
 8001830:	d560      	bpl.n	80018f4 <__aeabi_dsub+0x6c4>
 8001832:	1afc      	subs	r4, r7, r3
 8001834:	42a7      	cmp	r7, r4
 8001836:	41bf      	sbcs	r7, r7
 8001838:	4663      	mov	r3, ip
 800183a:	427f      	negs	r7, r7
 800183c:	1ac9      	subs	r1, r1, r3
 800183e:	1bcb      	subs	r3, r1, r7
 8001840:	4699      	mov	r9, r3
 8001842:	465d      	mov	r5, fp
 8001844:	e576      	b.n	8001334 <__aeabi_dsub+0x104>
 8001846:	08ff      	lsrs	r7, r7, #3
 8001848:	074b      	lsls	r3, r1, #29
 800184a:	433b      	orrs	r3, r7
 800184c:	08cc      	lsrs	r4, r1, #3
 800184e:	e667      	b.n	8001520 <__aeabi_dsub+0x2f0>
 8001850:	000a      	movs	r2, r1
 8001852:	08db      	lsrs	r3, r3, #3
 8001854:	433a      	orrs	r2, r7
 8001856:	d100      	bne.n	800185a <__aeabi_dsub+0x62a>
 8001858:	e66f      	b.n	800153a <__aeabi_dsub+0x30a>
 800185a:	4662      	mov	r2, ip
 800185c:	0752      	lsls	r2, r2, #29
 800185e:	4313      	orrs	r3, r2
 8001860:	4662      	mov	r2, ip
 8001862:	08d4      	lsrs	r4, r2, #3
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	0312      	lsls	r2, r2, #12
 8001868:	4214      	tst	r4, r2
 800186a:	d007      	beq.n	800187c <__aeabi_dsub+0x64c>
 800186c:	08c8      	lsrs	r0, r1, #3
 800186e:	4210      	tst	r0, r2
 8001870:	d104      	bne.n	800187c <__aeabi_dsub+0x64c>
 8001872:	465d      	mov	r5, fp
 8001874:	0004      	movs	r4, r0
 8001876:	08fb      	lsrs	r3, r7, #3
 8001878:	0749      	lsls	r1, r1, #29
 800187a:	430b      	orrs	r3, r1
 800187c:	0f5a      	lsrs	r2, r3, #29
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	0752      	lsls	r2, r2, #29
 8001884:	4313      	orrs	r3, r2
 8001886:	e65d      	b.n	8001544 <__aeabi_dsub+0x314>
 8001888:	074b      	lsls	r3, r1, #29
 800188a:	08ff      	lsrs	r7, r7, #3
 800188c:	433b      	orrs	r3, r7
 800188e:	08cc      	lsrs	r4, r1, #3
 8001890:	e649      	b.n	8001526 <__aeabi_dsub+0x2f6>
 8001892:	19dc      	adds	r4, r3, r7
 8001894:	429c      	cmp	r4, r3
 8001896:	419b      	sbcs	r3, r3
 8001898:	4461      	add	r1, ip
 800189a:	4689      	mov	r9, r1
 800189c:	425b      	negs	r3, r3
 800189e:	4499      	add	r9, r3
 80018a0:	464b      	mov	r3, r9
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	d400      	bmi.n	80018a8 <__aeabi_dsub+0x678>
 80018a6:	e631      	b.n	800150c <__aeabi_dsub+0x2dc>
 80018a8:	464a      	mov	r2, r9
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <__aeabi_dsub+0x6d8>)
 80018ac:	401a      	ands	r2, r3
 80018ae:	2301      	movs	r3, #1
 80018b0:	4691      	mov	r9, r2
 80018b2:	4698      	mov	r8, r3
 80018b4:	e62a      	b.n	800150c <__aeabi_dsub+0x2dc>
 80018b6:	0016      	movs	r6, r2
 80018b8:	4664      	mov	r4, ip
 80018ba:	3e20      	subs	r6, #32
 80018bc:	40f4      	lsrs	r4, r6
 80018be:	46a0      	mov	r8, r4
 80018c0:	2a20      	cmp	r2, #32
 80018c2:	d005      	beq.n	80018d0 <__aeabi_dsub+0x6a0>
 80018c4:	2640      	movs	r6, #64	; 0x40
 80018c6:	4664      	mov	r4, ip
 80018c8:	1ab2      	subs	r2, r6, r2
 80018ca:	4094      	lsls	r4, r2
 80018cc:	4323      	orrs	r3, r4
 80018ce:	469a      	mov	sl, r3
 80018d0:	4654      	mov	r4, sl
 80018d2:	1e63      	subs	r3, r4, #1
 80018d4:	419c      	sbcs	r4, r3
 80018d6:	4643      	mov	r3, r8
 80018d8:	431c      	orrs	r4, r3
 80018da:	e5db      	b.n	8001494 <__aeabi_dsub+0x264>
 80018dc:	0002      	movs	r2, r0
 80018de:	2400      	movs	r4, #0
 80018e0:	2300      	movs	r3, #0
 80018e2:	e548      	b.n	8001376 <__aeabi_dsub+0x146>
 80018e4:	19dc      	adds	r4, r3, r7
 80018e6:	42bc      	cmp	r4, r7
 80018e8:	41bf      	sbcs	r7, r7
 80018ea:	4461      	add	r1, ip
 80018ec:	4689      	mov	r9, r1
 80018ee:	427f      	negs	r7, r7
 80018f0:	44b9      	add	r9, r7
 80018f2:	e738      	b.n	8001766 <__aeabi_dsub+0x536>
 80018f4:	464b      	mov	r3, r9
 80018f6:	4323      	orrs	r3, r4
 80018f8:	d100      	bne.n	80018fc <__aeabi_dsub+0x6cc>
 80018fa:	e69f      	b.n	800163c <__aeabi_dsub+0x40c>
 80018fc:	e606      	b.n	800150c <__aeabi_dsub+0x2dc>
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	000007fe 	.word	0x000007fe
 8001904:	000007ff 	.word	0x000007ff
 8001908:	ff7fffff 	.word	0xff7fffff
 800190c:	08ff      	lsrs	r7, r7, #3
 800190e:	074b      	lsls	r3, r1, #29
 8001910:	433b      	orrs	r3, r7
 8001912:	08cc      	lsrs	r4, r1, #3
 8001914:	e616      	b.n	8001544 <__aeabi_dsub+0x314>
 8001916:	4662      	mov	r2, ip
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	0752      	lsls	r2, r2, #29
 800191c:	4313      	orrs	r3, r2
 800191e:	4662      	mov	r2, ip
 8001920:	08d4      	lsrs	r4, r2, #3
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	0312      	lsls	r2, r2, #12
 8001926:	4214      	tst	r4, r2
 8001928:	d007      	beq.n	800193a <__aeabi_dsub+0x70a>
 800192a:	08c8      	lsrs	r0, r1, #3
 800192c:	4210      	tst	r0, r2
 800192e:	d104      	bne.n	800193a <__aeabi_dsub+0x70a>
 8001930:	465d      	mov	r5, fp
 8001932:	0004      	movs	r4, r0
 8001934:	08fb      	lsrs	r3, r7, #3
 8001936:	0749      	lsls	r1, r1, #29
 8001938:	430b      	orrs	r3, r1
 800193a:	0f5a      	lsrs	r2, r3, #29
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	0752      	lsls	r2, r2, #29
 8001940:	08db      	lsrs	r3, r3, #3
 8001942:	4313      	orrs	r3, r2
 8001944:	e5fe      	b.n	8001544 <__aeabi_dsub+0x314>
 8001946:	2300      	movs	r3, #0
 8001948:	4a01      	ldr	r2, [pc, #4]	; (8001950 <__aeabi_dsub+0x720>)
 800194a:	001c      	movs	r4, r3
 800194c:	e513      	b.n	8001376 <__aeabi_dsub+0x146>
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	000007ff 	.word	0x000007ff

08001954 <__aeabi_d2iz>:
 8001954:	000a      	movs	r2, r1
 8001956:	b530      	push	{r4, r5, lr}
 8001958:	4c13      	ldr	r4, [pc, #76]	; (80019a8 <__aeabi_d2iz+0x54>)
 800195a:	0053      	lsls	r3, r2, #1
 800195c:	0309      	lsls	r1, r1, #12
 800195e:	0005      	movs	r5, r0
 8001960:	0b09      	lsrs	r1, r1, #12
 8001962:	2000      	movs	r0, #0
 8001964:	0d5b      	lsrs	r3, r3, #21
 8001966:	0fd2      	lsrs	r2, r2, #31
 8001968:	42a3      	cmp	r3, r4
 800196a:	dd04      	ble.n	8001976 <__aeabi_d2iz+0x22>
 800196c:	480f      	ldr	r0, [pc, #60]	; (80019ac <__aeabi_d2iz+0x58>)
 800196e:	4283      	cmp	r3, r0
 8001970:	dd02      	ble.n	8001978 <__aeabi_d2iz+0x24>
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <__aeabi_d2iz+0x5c>)
 8001974:	18d0      	adds	r0, r2, r3
 8001976:	bd30      	pop	{r4, r5, pc}
 8001978:	2080      	movs	r0, #128	; 0x80
 800197a:	0340      	lsls	r0, r0, #13
 800197c:	4301      	orrs	r1, r0
 800197e:	480d      	ldr	r0, [pc, #52]	; (80019b4 <__aeabi_d2iz+0x60>)
 8001980:	1ac0      	subs	r0, r0, r3
 8001982:	281f      	cmp	r0, #31
 8001984:	dd08      	ble.n	8001998 <__aeabi_d2iz+0x44>
 8001986:	480c      	ldr	r0, [pc, #48]	; (80019b8 <__aeabi_d2iz+0x64>)
 8001988:	1ac3      	subs	r3, r0, r3
 800198a:	40d9      	lsrs	r1, r3
 800198c:	000b      	movs	r3, r1
 800198e:	4258      	negs	r0, r3
 8001990:	2a00      	cmp	r2, #0
 8001992:	d1f0      	bne.n	8001976 <__aeabi_d2iz+0x22>
 8001994:	0018      	movs	r0, r3
 8001996:	e7ee      	b.n	8001976 <__aeabi_d2iz+0x22>
 8001998:	4c08      	ldr	r4, [pc, #32]	; (80019bc <__aeabi_d2iz+0x68>)
 800199a:	40c5      	lsrs	r5, r0
 800199c:	46a4      	mov	ip, r4
 800199e:	4463      	add	r3, ip
 80019a0:	4099      	lsls	r1, r3
 80019a2:	000b      	movs	r3, r1
 80019a4:	432b      	orrs	r3, r5
 80019a6:	e7f2      	b.n	800198e <__aeabi_d2iz+0x3a>
 80019a8:	000003fe 	.word	0x000003fe
 80019ac:	0000041d 	.word	0x0000041d
 80019b0:	7fffffff 	.word	0x7fffffff
 80019b4:	00000433 	.word	0x00000433
 80019b8:	00000413 	.word	0x00000413
 80019bc:	fffffbed 	.word	0xfffffbed

080019c0 <__aeabi_i2d>:
 80019c0:	b570      	push	{r4, r5, r6, lr}
 80019c2:	2800      	cmp	r0, #0
 80019c4:	d016      	beq.n	80019f4 <__aeabi_i2d+0x34>
 80019c6:	17c3      	asrs	r3, r0, #31
 80019c8:	18c5      	adds	r5, r0, r3
 80019ca:	405d      	eors	r5, r3
 80019cc:	0fc4      	lsrs	r4, r0, #31
 80019ce:	0028      	movs	r0, r5
 80019d0:	f000 f84c 	bl	8001a6c <__clzsi2>
 80019d4:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <__aeabi_i2d+0x5c>)
 80019d6:	1a12      	subs	r2, r2, r0
 80019d8:	280a      	cmp	r0, #10
 80019da:	dc16      	bgt.n	8001a0a <__aeabi_i2d+0x4a>
 80019dc:	0003      	movs	r3, r0
 80019de:	002e      	movs	r6, r5
 80019e0:	3315      	adds	r3, #21
 80019e2:	409e      	lsls	r6, r3
 80019e4:	230b      	movs	r3, #11
 80019e6:	1a18      	subs	r0, r3, r0
 80019e8:	40c5      	lsrs	r5, r0
 80019ea:	0552      	lsls	r2, r2, #21
 80019ec:	032d      	lsls	r5, r5, #12
 80019ee:	0b2d      	lsrs	r5, r5, #12
 80019f0:	0d53      	lsrs	r3, r2, #21
 80019f2:	e003      	b.n	80019fc <__aeabi_i2d+0x3c>
 80019f4:	2400      	movs	r4, #0
 80019f6:	2300      	movs	r3, #0
 80019f8:	2500      	movs	r5, #0
 80019fa:	2600      	movs	r6, #0
 80019fc:	051b      	lsls	r3, r3, #20
 80019fe:	432b      	orrs	r3, r5
 8001a00:	07e4      	lsls	r4, r4, #31
 8001a02:	4323      	orrs	r3, r4
 8001a04:	0030      	movs	r0, r6
 8001a06:	0019      	movs	r1, r3
 8001a08:	bd70      	pop	{r4, r5, r6, pc}
 8001a0a:	380b      	subs	r0, #11
 8001a0c:	4085      	lsls	r5, r0
 8001a0e:	0552      	lsls	r2, r2, #21
 8001a10:	032d      	lsls	r5, r5, #12
 8001a12:	2600      	movs	r6, #0
 8001a14:	0b2d      	lsrs	r5, r5, #12
 8001a16:	0d53      	lsrs	r3, r2, #21
 8001a18:	e7f0      	b.n	80019fc <__aeabi_i2d+0x3c>
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	0000041e 	.word	0x0000041e

08001a20 <__aeabi_ui2d>:
 8001a20:	b510      	push	{r4, lr}
 8001a22:	1e04      	subs	r4, r0, #0
 8001a24:	d010      	beq.n	8001a48 <__aeabi_ui2d+0x28>
 8001a26:	f000 f821 	bl	8001a6c <__clzsi2>
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <__aeabi_ui2d+0x48>)
 8001a2c:	1a1b      	subs	r3, r3, r0
 8001a2e:	280a      	cmp	r0, #10
 8001a30:	dc11      	bgt.n	8001a56 <__aeabi_ui2d+0x36>
 8001a32:	220b      	movs	r2, #11
 8001a34:	0021      	movs	r1, r4
 8001a36:	1a12      	subs	r2, r2, r0
 8001a38:	40d1      	lsrs	r1, r2
 8001a3a:	3015      	adds	r0, #21
 8001a3c:	030a      	lsls	r2, r1, #12
 8001a3e:	055b      	lsls	r3, r3, #21
 8001a40:	4084      	lsls	r4, r0
 8001a42:	0b12      	lsrs	r2, r2, #12
 8001a44:	0d5b      	lsrs	r3, r3, #21
 8001a46:	e001      	b.n	8001a4c <__aeabi_ui2d+0x2c>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	051b      	lsls	r3, r3, #20
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	0020      	movs	r0, r4
 8001a52:	0019      	movs	r1, r3
 8001a54:	bd10      	pop	{r4, pc}
 8001a56:	0022      	movs	r2, r4
 8001a58:	380b      	subs	r0, #11
 8001a5a:	4082      	lsls	r2, r0
 8001a5c:	055b      	lsls	r3, r3, #21
 8001a5e:	0312      	lsls	r2, r2, #12
 8001a60:	2400      	movs	r4, #0
 8001a62:	0b12      	lsrs	r2, r2, #12
 8001a64:	0d5b      	lsrs	r3, r3, #21
 8001a66:	e7f1      	b.n	8001a4c <__aeabi_ui2d+0x2c>
 8001a68:	0000041e 	.word	0x0000041e

08001a6c <__clzsi2>:
 8001a6c:	211c      	movs	r1, #28
 8001a6e:	2301      	movs	r3, #1
 8001a70:	041b      	lsls	r3, r3, #16
 8001a72:	4298      	cmp	r0, r3
 8001a74:	d301      	bcc.n	8001a7a <__clzsi2+0xe>
 8001a76:	0c00      	lsrs	r0, r0, #16
 8001a78:	3910      	subs	r1, #16
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	4298      	cmp	r0, r3
 8001a7e:	d301      	bcc.n	8001a84 <__clzsi2+0x18>
 8001a80:	0a00      	lsrs	r0, r0, #8
 8001a82:	3908      	subs	r1, #8
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	4298      	cmp	r0, r3
 8001a88:	d301      	bcc.n	8001a8e <__clzsi2+0x22>
 8001a8a:	0900      	lsrs	r0, r0, #4
 8001a8c:	3904      	subs	r1, #4
 8001a8e:	a202      	add	r2, pc, #8	; (adr r2, 8001a98 <__clzsi2+0x2c>)
 8001a90:	5c10      	ldrb	r0, [r2, r0]
 8001a92:	1840      	adds	r0, r0, r1
 8001a94:	4770      	bx	lr
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	02020304 	.word	0x02020304
 8001a9c:	01010101 	.word	0x01010101
	...

08001aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// Initializing the RR averages
	for (i = 0; i < 8; i++)
 8001aae:	4b77      	ldr	r3, [pc, #476]	; (8001c8c <main+0x1e4>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e010      	b.n	8001ad8 <main+0x30>
	{
		rr1[i] = 0;
 8001ab6:	4b75      	ldr	r3, [pc, #468]	; (8001c8c <main+0x1e4>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b75      	ldr	r3, [pc, #468]	; (8001c90 <main+0x1e8>)
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	2100      	movs	r1, #0
 8001ac0:	50d1      	str	r1, [r2, r3]
		rr2[i] = 0;
 8001ac2:	4b72      	ldr	r3, [pc, #456]	; (8001c8c <main+0x1e4>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <main+0x1ec>)
 8001ac8:	0092      	lsls	r2, r2, #2
 8001aca:	2100      	movs	r1, #0
 8001acc:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 8; i++)
 8001ace:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <main+0x1e4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <main+0x1e4>)
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	4b6c      	ldr	r3, [pc, #432]	; (8001c8c <main+0x1e4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b07      	cmp	r3, #7
 8001ade:	d9ea      	bls.n	8001ab6 <main+0xe>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ae0:	f001 fe8a 	bl	80037f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ae4:	f001 faec 	bl	80030c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ae8:	f001 fc26 	bl	8003338 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001aec:	f001 fb30 	bl	8003150 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001af0:	f001 fbd4 	bl	800329c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001af4:	f001 fb96 	bl	8003224 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  init_loop_counter();
 8001af8:	f001 fc82 	bl	8003400 <init_loop_counter>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (loop_triggered()) {
 8001afc:	f001 fc94 	bl	8003428 <loop_triggered>
 8001b00:	1e03      	subs	r3, r0, #0
 8001b02:	d0fb      	beq.n	8001afc <main+0x54>
		  reset_loop_counter();
 8001b04:	f001 fca6 	bl	8003454 <reset_loop_counter>

		  // Debug
		  HAL_GPIO_TogglePin(DEBUG_GPIO_Port, DEBUG_Pin);
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	00da      	lsls	r2, r3, #3
 8001b0c:	23a0      	movs	r3, #160	; 0xa0
 8001b0e:	05db      	lsls	r3, r3, #23
 8001b10:	0011      	movs	r1, r2
 8001b12:	0018      	movs	r0, r3
 8001b14:	f003 f88f 	bl	8004c36 <HAL_GPIO_TogglePin>

		  // Test if the buffers are full.
		  // If they are, shift them, discarding the oldest sample and adding the new one at the end.
		  // Else, just put the newest sample in the next free position.
		  // Update 'current' so that the program knows where's the newest sample.
		  if (sample >= BUFFSIZE)
 8001b18:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <main+0x1f0>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2396      	movs	r3, #150	; 0x96
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d369      	bcc.n	8001bf8 <main+0x150>
		  {
		  	for (i = 0; i < BUFFSIZE - 1; i++)
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <main+0x1e4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e05c      	b.n	8001be6 <main+0x13e>
		  	{
		  		signal[i] = signal[i+1];
 8001b2c:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <main+0x1e4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	1c59      	adds	r1, r3, #1
 8001b32:	4b56      	ldr	r3, [pc, #344]	; (8001c8c <main+0x1e4>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <main+0x1f4>)
 8001b38:	0049      	lsls	r1, r1, #1
 8001b3a:	5ac9      	ldrh	r1, [r1, r3]
 8001b3c:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <main+0x1f4>)
 8001b3e:	0052      	lsls	r2, r2, #1
 8001b40:	52d1      	strh	r1, [r2, r3]
		  		dcblock[i] = dcblock[i+1];
 8001b42:	4b52      	ldr	r3, [pc, #328]	; (8001c8c <main+0x1e4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	1c59      	adds	r1, r3, #1
 8001b48:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <main+0x1e4>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b54      	ldr	r3, [pc, #336]	; (8001ca0 <main+0x1f8>)
 8001b4e:	0049      	lsls	r1, r1, #1
 8001b50:	5ac9      	ldrh	r1, [r1, r3]
 8001b52:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <main+0x1f8>)
 8001b54:	0052      	lsls	r2, r2, #1
 8001b56:	52d1      	strh	r1, [r2, r3]
		  		lowpass[i] = lowpass[i+1];
 8001b58:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <main+0x1e4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	1c59      	adds	r1, r3, #1
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <main+0x1e4>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <main+0x1fc>)
 8001b64:	0049      	lsls	r1, r1, #1
 8001b66:	5ac9      	ldrh	r1, [r1, r3]
 8001b68:	4b4e      	ldr	r3, [pc, #312]	; (8001ca4 <main+0x1fc>)
 8001b6a:	0052      	lsls	r2, r2, #1
 8001b6c:	52d1      	strh	r1, [r2, r3]
		  		highpass[i] = highpass[i+1];
 8001b6e:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <main+0x1e4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	1c59      	adds	r1, r3, #1
 8001b74:	4b45      	ldr	r3, [pc, #276]	; (8001c8c <main+0x1e4>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b4b      	ldr	r3, [pc, #300]	; (8001ca8 <main+0x200>)
 8001b7a:	0049      	lsls	r1, r1, #1
 8001b7c:	5ac9      	ldrh	r1, [r1, r3]
 8001b7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ca8 <main+0x200>)
 8001b80:	0052      	lsls	r2, r2, #1
 8001b82:	52d1      	strh	r1, [r2, r3]
		  		derivative[i] = derivative[i+1];
 8001b84:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <main+0x1e4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	1c59      	adds	r1, r3, #1
 8001b8a:	4b40      	ldr	r3, [pc, #256]	; (8001c8c <main+0x1e4>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b47      	ldr	r3, [pc, #284]	; (8001cac <main+0x204>)
 8001b90:	0049      	lsls	r1, r1, #1
 8001b92:	5ac9      	ldrh	r1, [r1, r3]
 8001b94:	4b45      	ldr	r3, [pc, #276]	; (8001cac <main+0x204>)
 8001b96:	0052      	lsls	r2, r2, #1
 8001b98:	52d1      	strh	r1, [r2, r3]
		  		squared[i] = squared[i+1];
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	; (8001c8c <main+0x1e4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	1c59      	adds	r1, r3, #1
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <main+0x1e4>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <main+0x208>)
 8001ba6:	0049      	lsls	r1, r1, #1
 8001ba8:	5ac9      	ldrh	r1, [r1, r3]
 8001baa:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <main+0x208>)
 8001bac:	0052      	lsls	r2, r2, #1
 8001bae:	52d1      	strh	r1, [r2, r3]
		  		integral[i] = integral[i+1];
 8001bb0:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <main+0x1e4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	1c59      	adds	r1, r3, #1
 8001bb6:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <main+0x1e4>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <main+0x20c>)
 8001bbc:	0049      	lsls	r1, r1, #1
 8001bbe:	5ac9      	ldrh	r1, [r1, r3]
 8001bc0:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <main+0x20c>)
 8001bc2:	0052      	lsls	r2, r2, #1
 8001bc4:	52d1      	strh	r1, [r2, r3]
		  		outputSignal[i] = outputSignal[i+1];
 8001bc6:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <main+0x1e4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	1c59      	adds	r1, r3, #1
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <main+0x1e4>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <main+0x210>)
 8001bd2:	0049      	lsls	r1, r1, #1
 8001bd4:	5ac9      	ldrh	r1, [r1, r3]
 8001bd6:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <main+0x210>)
 8001bd8:	0052      	lsls	r2, r2, #1
 8001bda:	52d1      	strh	r1, [r2, r3]
		  	for (i = 0; i < BUFFSIZE - 1; i++)
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <main+0x1e4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <main+0x1e4>)
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <main+0x1e4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a34      	ldr	r2, [pc, #208]	; (8001cbc <main+0x214>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d99d      	bls.n	8001b2c <main+0x84>
		  	}
		  	current = BUFFSIZE - 1;
 8001bf0:	4b33      	ldr	r3, [pc, #204]	; (8001cc0 <main+0x218>)
 8001bf2:	4a34      	ldr	r2, [pc, #208]	; (8001cc4 <main+0x21c>)
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	e004      	b.n	8001c02 <main+0x15a>
		  }
		  else
		  {
		  	current = sample;
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <main+0x1f0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	001a      	movs	r2, r3
 8001bfe:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <main+0x218>)
 8001c00:	601a      	str	r2, [r3, #0]
		  }
		  signal[current] = input();
 8001c02:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <main+0x218>)
 8001c04:	681c      	ldr	r4, [r3, #0]
 8001c06:	f001 fc35 	bl	8003474 <input>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <main+0x1f4>)
 8001c10:	0062      	lsls	r2, r4, #1
 8001c12:	52d1      	strh	r1, [r2, r3]

		  // If no sample was read, stop processing!
		  if (signal[current] == NOSAMPLE)
		  	break;
		  sample++; // Update sample counter
 8001c14:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <main+0x1f0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <main+0x1f0>)
 8001c1c:	601a      	str	r2, [r3, #0]

		  // DC Block filter
		  // This was not proposed on the original paper.
		  // It is not necessary and can be removed if your sensor or database has no DC noise.
		  if (current >= 1)
 8001c1e:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <main+0x218>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	dd54      	ble.n	8001cd0 <main+0x228>
		  	dcblock[current] = signal[current] - signal[current-1] + 0.995*dcblock[current-1];
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <main+0x218>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <main+0x1f4>)
 8001c2c:	0052      	lsls	r2, r2, #1
 8001c2e:	5ad3      	ldrh	r3, [r2, r3]
 8001c30:	0019      	movs	r1, r3
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <main+0x218>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	1e5a      	subs	r2, r3, #1
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <main+0x1f4>)
 8001c3a:	0052      	lsls	r2, r2, #1
 8001c3c:	5ad3      	ldrh	r3, [r2, r3]
 8001c3e:	1acb      	subs	r3, r1, r3
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff febd 	bl	80019c0 <__aeabi_i2d>
 8001c46:	0004      	movs	r4, r0
 8001c48:	000d      	movs	r5, r1
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <main+0x218>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	1e5a      	subs	r2, r3, #1
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <main+0x1f8>)
 8001c52:	0052      	lsls	r2, r2, #1
 8001c54:	5ad3      	ldrh	r3, [r2, r3]
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7ff feb2 	bl	80019c0 <__aeabi_i2d>
 8001c5c:	4a1a      	ldr	r2, [pc, #104]	; (8001cc8 <main+0x220>)
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <main+0x224>)
 8001c60:	f7ff f87a 	bl	8000d58 <__aeabi_dmul>
 8001c64:	0002      	movs	r2, r0
 8001c66:	000b      	movs	r3, r1
 8001c68:	0020      	movs	r0, r4
 8001c6a:	0029      	movs	r1, r5
 8001c6c:	f7fe fc2c 	bl	80004c8 <__aeabi_dadd>
 8001c70:	0002      	movs	r2, r0
 8001c72:	000b      	movs	r3, r1
 8001c74:	4912      	ldr	r1, [pc, #72]	; (8001cc0 <main+0x218>)
 8001c76:	680c      	ldr	r4, [r1, #0]
 8001c78:	0010      	movs	r0, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	f7fe fc06 	bl	800048c <__aeabi_d2uiz>
 8001c80:	0003      	movs	r3, r0
 8001c82:	b299      	uxth	r1, r3
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <main+0x1f8>)
 8001c86:	0062      	lsls	r2, r4, #1
 8001c88:	52d1      	strh	r1, [r2, r3]
 8001c8a:	e027      	b.n	8001cdc <main+0x234>
 8001c8c:	200027ac 	.word	0x200027ac
 8001c90:	20002758 	.word	0x20002758
 8001c94:	20002778 	.word	0x20002778
 8001c98:	200027b4 	.word	0x200027b4
 8001c9c:	200001d8 	.word	0x200001d8
 8001ca0:	20000688 	.word	0x20000688
 8001ca4:	20000b38 	.word	0x20000b38
 8001ca8:	20000fe8 	.word	0x20000fe8
 8001cac:	20001498 	.word	0x20001498
 8001cb0:	20001948 	.word	0x20001948
 8001cb4:	20001df8 	.word	0x20001df8
 8001cb8:	200022a8 	.word	0x200022a8
 8001cbc:	00000256 	.word	0x00000256
 8001cc0:	200027c4 	.word	0x200027c4
 8001cc4:	00000257 	.word	0x00000257
 8001cc8:	3d70a3d7 	.word	0x3d70a3d7
 8001ccc:	3fefd70a 	.word	0x3fefd70a
		  else
		  	dcblock[current] = 0;
 8001cd0:	4bc4      	ldr	r3, [pc, #784]	; (8001fe4 <main+0x53c>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4bc4      	ldr	r3, [pc, #784]	; (8001fe8 <main+0x540>)
 8001cd6:	0052      	lsls	r2, r2, #1
 8001cd8:	2100      	movs	r1, #0
 8001cda:	52d1      	strh	r1, [r2, r3]

		  // Low Pass filter
		  // Implemented as proposed by the original paper.
		  // y(nT) = 2y(nT - T) - y(nT - 2T) + x(nT) - 2x(nT - 6T) + x(nT - 12T)
		  // Can be removed if your signal was previously filtered, or replaced by a different filter.
		  lowpass[current] = dcblock[current];
 8001cdc:	4bc1      	ldr	r3, [pc, #772]	; (8001fe4 <main+0x53c>)
 8001cde:	6819      	ldr	r1, [r3, #0]
 8001ce0:	4bc0      	ldr	r3, [pc, #768]	; (8001fe4 <main+0x53c>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4bc0      	ldr	r3, [pc, #768]	; (8001fe8 <main+0x540>)
 8001ce6:	0049      	lsls	r1, r1, #1
 8001ce8:	5ac9      	ldrh	r1, [r1, r3]
 8001cea:	4bc0      	ldr	r3, [pc, #768]	; (8001fec <main+0x544>)
 8001cec:	0052      	lsls	r2, r2, #1
 8001cee:	52d1      	strh	r1, [r2, r3]
		  if (current >= 1)
 8001cf0:	4bbc      	ldr	r3, [pc, #752]	; (8001fe4 <main+0x53c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	dd13      	ble.n	8001d20 <main+0x278>
		  	lowpass[current] += 2*lowpass[current-1];
 8001cf8:	4bba      	ldr	r3, [pc, #744]	; (8001fe4 <main+0x53c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4bbb      	ldr	r3, [pc, #748]	; (8001fec <main+0x544>)
 8001cfe:	0052      	lsls	r2, r2, #1
 8001d00:	5ad0      	ldrh	r0, [r2, r3]
 8001d02:	4bb8      	ldr	r3, [pc, #736]	; (8001fe4 <main+0x53c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	1e5a      	subs	r2, r3, #1
 8001d08:	4bb8      	ldr	r3, [pc, #736]	; (8001fec <main+0x544>)
 8001d0a:	0052      	lsls	r2, r2, #1
 8001d0c:	5ad3      	ldrh	r3, [r2, r3]
 8001d0e:	18db      	adds	r3, r3, r3
 8001d10:	b299      	uxth	r1, r3
 8001d12:	4bb4      	ldr	r3, [pc, #720]	; (8001fe4 <main+0x53c>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	1843      	adds	r3, r0, r1
 8001d18:	b299      	uxth	r1, r3
 8001d1a:	4bb4      	ldr	r3, [pc, #720]	; (8001fec <main+0x544>)
 8001d1c:	0052      	lsls	r2, r2, #1
 8001d1e:	52d1      	strh	r1, [r2, r3]
		  if (current >= 2)
 8001d20:	4bb0      	ldr	r3, [pc, #704]	; (8001fe4 <main+0x53c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	dd11      	ble.n	8001d4c <main+0x2a4>
		  	lowpass[current] -= lowpass[current-2];
 8001d28:	4bae      	ldr	r3, [pc, #696]	; (8001fe4 <main+0x53c>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4baf      	ldr	r3, [pc, #700]	; (8001fec <main+0x544>)
 8001d2e:	0052      	lsls	r2, r2, #1
 8001d30:	5ad0      	ldrh	r0, [r2, r3]
 8001d32:	4bac      	ldr	r3, [pc, #688]	; (8001fe4 <main+0x53c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	1e9a      	subs	r2, r3, #2
 8001d38:	4bac      	ldr	r3, [pc, #688]	; (8001fec <main+0x544>)
 8001d3a:	0052      	lsls	r2, r2, #1
 8001d3c:	5ad1      	ldrh	r1, [r2, r3]
 8001d3e:	4ba9      	ldr	r3, [pc, #676]	; (8001fe4 <main+0x53c>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	1a43      	subs	r3, r0, r1
 8001d44:	b299      	uxth	r1, r3
 8001d46:	4ba9      	ldr	r3, [pc, #676]	; (8001fec <main+0x544>)
 8001d48:	0052      	lsls	r2, r2, #1
 8001d4a:	52d1      	strh	r1, [r2, r3]
		  if (current >= 6)
 8001d4c:	4ba5      	ldr	r3, [pc, #660]	; (8001fe4 <main+0x53c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	dd13      	ble.n	8001d7c <main+0x2d4>
		  	lowpass[current] -= 2*dcblock[current-6];
 8001d54:	4ba3      	ldr	r3, [pc, #652]	; (8001fe4 <main+0x53c>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4ba4      	ldr	r3, [pc, #656]	; (8001fec <main+0x544>)
 8001d5a:	0052      	lsls	r2, r2, #1
 8001d5c:	5ad0      	ldrh	r0, [r2, r3]
 8001d5e:	4ba1      	ldr	r3, [pc, #644]	; (8001fe4 <main+0x53c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	1f9a      	subs	r2, r3, #6
 8001d64:	4ba0      	ldr	r3, [pc, #640]	; (8001fe8 <main+0x540>)
 8001d66:	0052      	lsls	r2, r2, #1
 8001d68:	5ad3      	ldrh	r3, [r2, r3]
 8001d6a:	18db      	adds	r3, r3, r3
 8001d6c:	b299      	uxth	r1, r3
 8001d6e:	4b9d      	ldr	r3, [pc, #628]	; (8001fe4 <main+0x53c>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	1a43      	subs	r3, r0, r1
 8001d74:	b299      	uxth	r1, r3
 8001d76:	4b9d      	ldr	r3, [pc, #628]	; (8001fec <main+0x544>)
 8001d78:	0052      	lsls	r2, r2, #1
 8001d7a:	52d1      	strh	r1, [r2, r3]
		  if (current >= 12)
 8001d7c:	4b99      	ldr	r3, [pc, #612]	; (8001fe4 <main+0x53c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b0b      	cmp	r3, #11
 8001d82:	dd12      	ble.n	8001daa <main+0x302>
		  	lowpass[current] += dcblock[current-12];
 8001d84:	4b97      	ldr	r3, [pc, #604]	; (8001fe4 <main+0x53c>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b98      	ldr	r3, [pc, #608]	; (8001fec <main+0x544>)
 8001d8a:	0052      	lsls	r2, r2, #1
 8001d8c:	5ad0      	ldrh	r0, [r2, r3]
 8001d8e:	4b95      	ldr	r3, [pc, #596]	; (8001fe4 <main+0x53c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3b0c      	subs	r3, #12
 8001d94:	001a      	movs	r2, r3
 8001d96:	4b94      	ldr	r3, [pc, #592]	; (8001fe8 <main+0x540>)
 8001d98:	0052      	lsls	r2, r2, #1
 8001d9a:	5ad1      	ldrh	r1, [r2, r3]
 8001d9c:	4b91      	ldr	r3, [pc, #580]	; (8001fe4 <main+0x53c>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	1843      	adds	r3, r0, r1
 8001da2:	b299      	uxth	r1, r3
 8001da4:	4b91      	ldr	r3, [pc, #580]	; (8001fec <main+0x544>)
 8001da6:	0052      	lsls	r2, r2, #1
 8001da8:	52d1      	strh	r1, [r2, r3]

		  // High Pass filter
		  // Implemented as proposed by the original paper.
		  // y(nT) = 32x(nT - 16T) - [y(nT - T) + x(nT) - x(nT - 32T)]
		  // Can be removed if your signal was previously filtered, or replaced by a different filter.
		  highpass[current] = -lowpass[current];
 8001daa:	4b8e      	ldr	r3, [pc, #568]	; (8001fe4 <main+0x53c>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4b8f      	ldr	r3, [pc, #572]	; (8001fec <main+0x544>)
 8001db0:	0052      	lsls	r2, r2, #1
 8001db2:	5ad1      	ldrh	r1, [r2, r3]
 8001db4:	4b8b      	ldr	r3, [pc, #556]	; (8001fe4 <main+0x53c>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	1c0b      	adds	r3, r1, #0
 8001dba:	425b      	negs	r3, r3
 8001dbc:	b299      	uxth	r1, r3
 8001dbe:	4b8c      	ldr	r3, [pc, #560]	; (8001ff0 <main+0x548>)
 8001dc0:	0052      	lsls	r2, r2, #1
 8001dc2:	52d1      	strh	r1, [r2, r3]
		  if (current >= 1)
 8001dc4:	4b87      	ldr	r3, [pc, #540]	; (8001fe4 <main+0x53c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dd11      	ble.n	8001df0 <main+0x348>
		  	highpass[current] -= highpass[current-1];
 8001dcc:	4b85      	ldr	r3, [pc, #532]	; (8001fe4 <main+0x53c>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b87      	ldr	r3, [pc, #540]	; (8001ff0 <main+0x548>)
 8001dd2:	0052      	lsls	r2, r2, #1
 8001dd4:	5ad0      	ldrh	r0, [r2, r3]
 8001dd6:	4b83      	ldr	r3, [pc, #524]	; (8001fe4 <main+0x53c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	1e5a      	subs	r2, r3, #1
 8001ddc:	4b84      	ldr	r3, [pc, #528]	; (8001ff0 <main+0x548>)
 8001dde:	0052      	lsls	r2, r2, #1
 8001de0:	5ad1      	ldrh	r1, [r2, r3]
 8001de2:	4b80      	ldr	r3, [pc, #512]	; (8001fe4 <main+0x53c>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	1a43      	subs	r3, r0, r1
 8001de8:	b299      	uxth	r1, r3
 8001dea:	4b81      	ldr	r3, [pc, #516]	; (8001ff0 <main+0x548>)
 8001dec:	0052      	lsls	r2, r2, #1
 8001dee:	52d1      	strh	r1, [r2, r3]
		  if (current >= 16)
 8001df0:	4b7c      	ldr	r3, [pc, #496]	; (8001fe4 <main+0x53c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	dd14      	ble.n	8001e22 <main+0x37a>
		  	highpass[current] += 32*lowpass[current-16];
 8001df8:	4b7a      	ldr	r3, [pc, #488]	; (8001fe4 <main+0x53c>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b7c      	ldr	r3, [pc, #496]	; (8001ff0 <main+0x548>)
 8001dfe:	0052      	lsls	r2, r2, #1
 8001e00:	5ad0      	ldrh	r0, [r2, r3]
 8001e02:	4b78      	ldr	r3, [pc, #480]	; (8001fe4 <main+0x53c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	3b10      	subs	r3, #16
 8001e08:	001a      	movs	r2, r3
 8001e0a:	4b78      	ldr	r3, [pc, #480]	; (8001fec <main+0x544>)
 8001e0c:	0052      	lsls	r2, r2, #1
 8001e0e:	5ad3      	ldrh	r3, [r2, r3]
 8001e10:	015b      	lsls	r3, r3, #5
 8001e12:	b299      	uxth	r1, r3
 8001e14:	4b73      	ldr	r3, [pc, #460]	; (8001fe4 <main+0x53c>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	1843      	adds	r3, r0, r1
 8001e1a:	b299      	uxth	r1, r3
 8001e1c:	4b74      	ldr	r3, [pc, #464]	; (8001ff0 <main+0x548>)
 8001e1e:	0052      	lsls	r2, r2, #1
 8001e20:	52d1      	strh	r1, [r2, r3]
		  if (current >= 32)
 8001e22:	4b70      	ldr	r3, [pc, #448]	; (8001fe4 <main+0x53c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b1f      	cmp	r3, #31
 8001e28:	dd12      	ble.n	8001e50 <main+0x3a8>
		  	highpass[current] += lowpass[current-32];
 8001e2a:	4b6e      	ldr	r3, [pc, #440]	; (8001fe4 <main+0x53c>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b70      	ldr	r3, [pc, #448]	; (8001ff0 <main+0x548>)
 8001e30:	0052      	lsls	r2, r2, #1
 8001e32:	5ad0      	ldrh	r0, [r2, r3]
 8001e34:	4b6b      	ldr	r3, [pc, #428]	; (8001fe4 <main+0x53c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3b20      	subs	r3, #32
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	4b6b      	ldr	r3, [pc, #428]	; (8001fec <main+0x544>)
 8001e3e:	0052      	lsls	r2, r2, #1
 8001e40:	5ad1      	ldrh	r1, [r2, r3]
 8001e42:	4b68      	ldr	r3, [pc, #416]	; (8001fe4 <main+0x53c>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	1843      	adds	r3, r0, r1
 8001e48:	b299      	uxth	r1, r3
 8001e4a:	4b69      	ldr	r3, [pc, #420]	; (8001ff0 <main+0x548>)
 8001e4c:	0052      	lsls	r2, r2, #1
 8001e4e:	52d1      	strh	r1, [r2, r3]
		  // Derivative filter
		  // This is an alternative implementation, the central difference method.
		  // f'(a) = [f(a+h) - f(a-h)]/2h
		  // The original formula used by Pan-Tompkins was:
		  // y(nT) = (1/8T)[-x(nT - 2T) - 2x(nT - T) + 2x(nT + T) + x(nT + 2T)]
		  derivative[current] = highpass[current];
 8001e50:	4b64      	ldr	r3, [pc, #400]	; (8001fe4 <main+0x53c>)
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	4b63      	ldr	r3, [pc, #396]	; (8001fe4 <main+0x53c>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b65      	ldr	r3, [pc, #404]	; (8001ff0 <main+0x548>)
 8001e5a:	0049      	lsls	r1, r1, #1
 8001e5c:	5ac9      	ldrh	r1, [r1, r3]
 8001e5e:	4b65      	ldr	r3, [pc, #404]	; (8001ff4 <main+0x54c>)
 8001e60:	0052      	lsls	r2, r2, #1
 8001e62:	52d1      	strh	r1, [r2, r3]
		  if (current > 0)
 8001e64:	4b5f      	ldr	r3, [pc, #380]	; (8001fe4 <main+0x53c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	dd11      	ble.n	8001e90 <main+0x3e8>
		  	derivative[current] -= highpass[current-1];
 8001e6c:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <main+0x53c>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b60      	ldr	r3, [pc, #384]	; (8001ff4 <main+0x54c>)
 8001e72:	0052      	lsls	r2, r2, #1
 8001e74:	5ad0      	ldrh	r0, [r2, r3]
 8001e76:	4b5b      	ldr	r3, [pc, #364]	; (8001fe4 <main+0x53c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	1e5a      	subs	r2, r3, #1
 8001e7c:	4b5c      	ldr	r3, [pc, #368]	; (8001ff0 <main+0x548>)
 8001e7e:	0052      	lsls	r2, r2, #1
 8001e80:	5ad1      	ldrh	r1, [r2, r3]
 8001e82:	4b58      	ldr	r3, [pc, #352]	; (8001fe4 <main+0x53c>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	1a43      	subs	r3, r0, r1
 8001e88:	b299      	uxth	r1, r3
 8001e8a:	4b5a      	ldr	r3, [pc, #360]	; (8001ff4 <main+0x54c>)
 8001e8c:	0052      	lsls	r2, r2, #1
 8001e8e:	52d1      	strh	r1, [r2, r3]

		  // This just squares the derivative, to get rid of negative values and emphasize high frequencies.
		  // y(nT) = [x(nT)]^2.
		  squared[current] = derivative[current]*derivative[current];
 8001e90:	4b54      	ldr	r3, [pc, #336]	; (8001fe4 <main+0x53c>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b57      	ldr	r3, [pc, #348]	; (8001ff4 <main+0x54c>)
 8001e96:	0052      	lsls	r2, r2, #1
 8001e98:	5ad1      	ldrh	r1, [r2, r3]
 8001e9a:	4b52      	ldr	r3, [pc, #328]	; (8001fe4 <main+0x53c>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4b55      	ldr	r3, [pc, #340]	; (8001ff4 <main+0x54c>)
 8001ea0:	0052      	lsls	r2, r2, #1
 8001ea2:	5ad0      	ldrh	r0, [r2, r3]
 8001ea4:	4b4f      	ldr	r3, [pc, #316]	; (8001fe4 <main+0x53c>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	434b      	muls	r3, r1
 8001eac:	b299      	uxth	r1, r3
 8001eae:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <main+0x550>)
 8001eb0:	0052      	lsls	r2, r2, #1
 8001eb2:	52d1      	strh	r1, [r2, r3]
		  // Moving-Window Integration
		  // Implemented as proposed by the original paper.
		  // y(nT) = (1/N)[x(nT - (N - 1)T) + x(nT - (N - 2)T) + ... x(nT)]
		  // WINDOWSIZE, in samples, must be defined so that the window is ~150ms.

		  integral[current] = 0;
 8001eb4:	4b4b      	ldr	r3, [pc, #300]	; (8001fe4 <main+0x53c>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <main+0x554>)
 8001eba:	0052      	lsls	r2, r2, #1
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	52d1      	strh	r1, [r2, r3]
		  for (i = 0; i < WINDOWSIZE; i++)
 8001ec0:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <main+0x558>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e021      	b.n	8001f0c <main+0x464>
		  {
		  	if (current >= (dataType)i)
 8001ec8:	4b4d      	ldr	r3, [pc, #308]	; (8002000 <main+0x558>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	001a      	movs	r2, r3
 8001ed0:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <main+0x53c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	dc1e      	bgt.n	8001f16 <main+0x46e>
		  		integral[current] += squared[current - i];
 8001ed8:	4b42      	ldr	r3, [pc, #264]	; (8001fe4 <main+0x53c>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <main+0x554>)
 8001ede:	0052      	lsls	r2, r2, #1
 8001ee0:	5ad0      	ldrh	r0, [r2, r3]
 8001ee2:	4b40      	ldr	r3, [pc, #256]	; (8001fe4 <main+0x53c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	001a      	movs	r2, r3
 8001ee8:	4b45      	ldr	r3, [pc, #276]	; (8002000 <main+0x558>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1ad2      	subs	r2, r2, r3
 8001eee:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <main+0x550>)
 8001ef0:	0052      	lsls	r2, r2, #1
 8001ef2:	5ad1      	ldrh	r1, [r2, r3]
 8001ef4:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <main+0x53c>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	1843      	adds	r3, r0, r1
 8001efa:	b299      	uxth	r1, r3
 8001efc:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <main+0x554>)
 8001efe:	0052      	lsls	r2, r2, #1
 8001f00:	52d1      	strh	r1, [r2, r3]
		  for (i = 0; i < WINDOWSIZE; i++)
 8001f02:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <main+0x558>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <main+0x558>)
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	4b3c      	ldr	r3, [pc, #240]	; (8002000 <main+0x558>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b13      	cmp	r3, #19
 8001f12:	d9d9      	bls.n	8001ec8 <main+0x420>
 8001f14:	e000      	b.n	8001f18 <main+0x470>
		  	else
		  		break;
 8001f16:	46c0      	nop			; (mov r8, r8)
		  }
		  integral[current] /= (dataType)i;
 8001f18:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <main+0x53c>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <main+0x554>)
 8001f1e:	0052      	lsls	r2, r2, #1
 8001f20:	5ad2      	ldrh	r2, [r2, r3]
 8001f22:	4b37      	ldr	r3, [pc, #220]	; (8002000 <main+0x558>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b299      	uxth	r1, r3
 8001f28:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <main+0x53c>)
 8001f2a:	681c      	ldr	r4, [r3, #0]
 8001f2c:	0010      	movs	r0, r2
 8001f2e:	f7fe f8f9 	bl	8000124 <__udivsi3>
 8001f32:	0003      	movs	r3, r0
 8001f34:	b299      	uxth	r1, r3
 8001f36:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <main+0x554>)
 8001f38:	0062      	lsls	r2, r4, #1
 8001f3a:	52d1      	strh	r1, [r2, r3]

		  qrs = false;
 8001f3c:	4b31      	ldr	r3, [pc, #196]	; (8002004 <main+0x55c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]

		  // If the current signal is above one of the thresholds (integral or filtered signal), it's a peak candidate.
		  if (integral[current] >= threshold_i1 || highpass[current] >= threshold_f1)
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <main+0x53c>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <main+0x554>)
 8001f48:	0052      	lsls	r2, r2, #1
 8001f4a:	5ad2      	ldrh	r2, [r2, r3]
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <main+0x560>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d208      	bcs.n	8001f66 <main+0x4be>
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <main+0x53c>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <main+0x548>)
 8001f5a:	0052      	lsls	r2, r2, #1
 8001f5c:	5ad2      	ldrh	r2, [r2, r3]
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	; (800200c <main+0x564>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d30d      	bcc.n	8001f82 <main+0x4da>
		  {
		  	peak_i = integral[current];
 8001f66:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <main+0x53c>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <main+0x554>)
 8001f6c:	0052      	lsls	r2, r2, #1
 8001f6e:	5ad2      	ldrh	r2, [r2, r3]
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <main+0x568>)
 8001f72:	801a      	strh	r2, [r3, #0]
		  	peak_f = highpass[current];
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <main+0x53c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <main+0x548>)
 8001f7a:	0052      	lsls	r2, r2, #1
 8001f7c:	5ad2      	ldrh	r2, [r2, r3]
 8001f7e:	4b25      	ldr	r3, [pc, #148]	; (8002014 <main+0x56c>)
 8001f80:	801a      	strh	r2, [r3, #0]
		  }

		  // If both the integral and the signal are above their thresholds, they're probably signal peaks.
		  if ((integral[current] >= threshold_i1) && (highpass[current] >= threshold_f1))
 8001f82:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <main+0x53c>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <main+0x554>)
 8001f88:	0052      	lsls	r2, r2, #1
 8001f8a:	5ad2      	ldrh	r2, [r2, r3]
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <main+0x560>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d200      	bcs.n	8001f96 <main+0x4ee>
 8001f94:	e32a      	b.n	80025ec <main+0xb44>
 8001f96:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <main+0x53c>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <main+0x548>)
 8001f9c:	0052      	lsls	r2, r2, #1
 8001f9e:	5ad2      	ldrh	r2, [r2, r3]
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <main+0x564>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d200      	bcs.n	8001faa <main+0x502>
 8001fa8:	e320      	b.n	80025ec <main+0xb44>
		  {
		  	// There's a 200ms latency. If the new peak respects this condition, we can keep testing.
		  	if (sample > lastQRS + FS/5)
 8001faa:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <main+0x570>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3348      	adds	r3, #72	; 0x48
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	; (800201c <main+0x574>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d300      	bcc.n	8001fbc <main+0x514>
 8001fba:	e234      	b.n	8002426 <main+0x97e>
		  	{
		  		// If it respects the 200ms latency, but it doesn't respect the 360ms latency, we check the slope.
		  		if (sample <= lastQRS + (long unsigned int)(0.36*FS))
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <main+0x570>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3381      	adds	r3, #129	; 0x81
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	4b15      	ldr	r3, [pc, #84]	; (800201c <main+0x574>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d200      	bcs.n	8001fce <main+0x526>
 8001fcc:	e11a      	b.n	8002204 <main+0x75c>
		  		{
		  			// The squared slope is "M" shaped. So we have to check nearby samples to make sure we're really looking
		  			// at its peak value, rather than a low one.
		  			currentSlope = 0;
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <main+0x578>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
		  			for (j = current - 10; j <= current; j++)
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <main+0x53c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3b0a      	subs	r3, #10
 8001fda:	001a      	movs	r2, r3
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <main+0x57c>)
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e039      	b.n	8002056 <main+0x5ae>
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	200027c4 	.word	0x200027c4
 8001fe8:	20000688 	.word	0x20000688
 8001fec:	20000b38 	.word	0x20000b38
 8001ff0:	20000fe8 	.word	0x20000fe8
 8001ff4:	20001498 	.word	0x20001498
 8001ff8:	20001948 	.word	0x20001948
 8001ffc:	20001df8 	.word	0x20001df8
 8002000:	200027ac 	.word	0x200027ac
 8002004:	200027dc 	.word	0x200027dc
 8002008:	200027cc 	.word	0x200027cc
 800200c:	200027d0 	.word	0x200027d0
 8002010:	200027c8 	.word	0x200027c8
 8002014:	200027ca 	.word	0x200027ca
 8002018:	200027b8 	.word	0x200027b8
 800201c:	200027b4 	.word	0x200027b4
 8002020:	200027c0 	.word	0x200027c0
 8002024:	200027b0 	.word	0x200027b0
		  				if (squared[j] > currentSlope)
 8002028:	4b7b      	ldr	r3, [pc, #492]	; (8002218 <main+0x770>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b7b      	ldr	r3, [pc, #492]	; (800221c <main+0x774>)
 800202e:	0052      	lsls	r2, r2, #1
 8002030:	5ad3      	ldrh	r3, [r2, r3]
 8002032:	001a      	movs	r2, r3
 8002034:	4b7a      	ldr	r3, [pc, #488]	; (8002220 <main+0x778>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d907      	bls.n	800204c <main+0x5a4>
		  					currentSlope = squared[j];
 800203c:	4b76      	ldr	r3, [pc, #472]	; (8002218 <main+0x770>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b76      	ldr	r3, [pc, #472]	; (800221c <main+0x774>)
 8002042:	0052      	lsls	r2, r2, #1
 8002044:	5ad3      	ldrh	r3, [r2, r3]
 8002046:	001a      	movs	r2, r3
 8002048:	4b75      	ldr	r3, [pc, #468]	; (8002220 <main+0x778>)
 800204a:	601a      	str	r2, [r3, #0]
		  			for (j = current - 10; j <= current; j++)
 800204c:	4b72      	ldr	r3, [pc, #456]	; (8002218 <main+0x770>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	4b71      	ldr	r3, [pc, #452]	; (8002218 <main+0x770>)
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	4b70      	ldr	r3, [pc, #448]	; (8002218 <main+0x770>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b72      	ldr	r3, [pc, #456]	; (8002224 <main+0x77c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d9e2      	bls.n	8002028 <main+0x580>

		  			if (currentSlope <= (dataType)(lastSlope/2))
 8002062:	4b71      	ldr	r3, [pc, #452]	; (8002228 <main+0x780>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	085b      	lsrs	r3, r3, #1
 8002068:	b29b      	uxth	r3, r3
 800206a:	001a      	movs	r2, r3
 800206c:	4b6c      	ldr	r3, [pc, #432]	; (8002220 <main+0x778>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d303      	bcc.n	800207c <main+0x5d4>
		  			{
		  				qrs = false;
 8002074:	4b6d      	ldr	r3, [pc, #436]	; (800222c <main+0x784>)
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e2b7      	b.n	80025ec <main+0xb44>
		  			}

		  			else
		  			{
		  				spk_i = 0.125*peak_i + 0.875*spk_i;
 800207c:	4b6c      	ldr	r3, [pc, #432]	; (8002230 <main+0x788>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff fc9d 	bl	80019c0 <__aeabi_i2d>
 8002086:	2200      	movs	r2, #0
 8002088:	23ff      	movs	r3, #255	; 0xff
 800208a:	059b      	lsls	r3, r3, #22
 800208c:	f7fe fe64 	bl	8000d58 <__aeabi_dmul>
 8002090:	0002      	movs	r2, r0
 8002092:	000b      	movs	r3, r1
 8002094:	0014      	movs	r4, r2
 8002096:	001d      	movs	r5, r3
 8002098:	4b66      	ldr	r3, [pc, #408]	; (8002234 <main+0x78c>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff fc8f 	bl	80019c0 <__aeabi_i2d>
 80020a2:	2200      	movs	r2, #0
 80020a4:	4b64      	ldr	r3, [pc, #400]	; (8002238 <main+0x790>)
 80020a6:	f7fe fe57 	bl	8000d58 <__aeabi_dmul>
 80020aa:	0002      	movs	r2, r0
 80020ac:	000b      	movs	r3, r1
 80020ae:	0020      	movs	r0, r4
 80020b0:	0029      	movs	r1, r5
 80020b2:	f7fe fa09 	bl	80004c8 <__aeabi_dadd>
 80020b6:	0002      	movs	r2, r0
 80020b8:	000b      	movs	r3, r1
 80020ba:	0010      	movs	r0, r2
 80020bc:	0019      	movs	r1, r3
 80020be:	f7fe f9e5 	bl	800048c <__aeabi_d2uiz>
 80020c2:	0003      	movs	r3, r0
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b5b      	ldr	r3, [pc, #364]	; (8002234 <main+0x78c>)
 80020c8:	801a      	strh	r2, [r3, #0]
		  				threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80020ca:	4b5c      	ldr	r3, [pc, #368]	; (800223c <main+0x794>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f7ff fc76 	bl	80019c0 <__aeabi_i2d>
 80020d4:	0004      	movs	r4, r0
 80020d6:	000d      	movs	r5, r1
 80020d8:	4b56      	ldr	r3, [pc, #344]	; (8002234 <main+0x78c>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	001a      	movs	r2, r3
 80020de:	4b57      	ldr	r3, [pc, #348]	; (800223c <main+0x794>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7ff fc6b 	bl	80019c0 <__aeabi_i2d>
 80020ea:	2200      	movs	r2, #0
 80020ec:	4b54      	ldr	r3, [pc, #336]	; (8002240 <main+0x798>)
 80020ee:	f7fe fe33 	bl	8000d58 <__aeabi_dmul>
 80020f2:	0002      	movs	r2, r0
 80020f4:	000b      	movs	r3, r1
 80020f6:	0020      	movs	r0, r4
 80020f8:	0029      	movs	r1, r5
 80020fa:	f7fe f9e5 	bl	80004c8 <__aeabi_dadd>
 80020fe:	0002      	movs	r2, r0
 8002100:	000b      	movs	r3, r1
 8002102:	0010      	movs	r0, r2
 8002104:	0019      	movs	r1, r3
 8002106:	f7fe f9c1 	bl	800048c <__aeabi_d2uiz>
 800210a:	0003      	movs	r3, r0
 800210c:	b29a      	uxth	r2, r3
 800210e:	4b4d      	ldr	r3, [pc, #308]	; (8002244 <main+0x79c>)
 8002110:	801a      	strh	r2, [r3, #0]
		  				threshold_i2 = 0.5*threshold_i1;
 8002112:	4b4c      	ldr	r3, [pc, #304]	; (8002244 <main+0x79c>)
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	0018      	movs	r0, r3
 8002118:	f7ff fc52 	bl	80019c0 <__aeabi_i2d>
 800211c:	2200      	movs	r2, #0
 800211e:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <main+0x7a0>)
 8002120:	f7fe fe1a 	bl	8000d58 <__aeabi_dmul>
 8002124:	0002      	movs	r2, r0
 8002126:	000b      	movs	r3, r1
 8002128:	0010      	movs	r0, r2
 800212a:	0019      	movs	r1, r3
 800212c:	f7fe f9ae 	bl	800048c <__aeabi_d2uiz>
 8002130:	0003      	movs	r3, r0
 8002132:	b29a      	uxth	r2, r3
 8002134:	4b45      	ldr	r3, [pc, #276]	; (800224c <main+0x7a4>)
 8002136:	801a      	strh	r2, [r3, #0]

		  				spk_f = 0.125*peak_f + 0.875*spk_f;
 8002138:	4b45      	ldr	r3, [pc, #276]	; (8002250 <main+0x7a8>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	0018      	movs	r0, r3
 800213e:	f7ff fc3f 	bl	80019c0 <__aeabi_i2d>
 8002142:	2200      	movs	r2, #0
 8002144:	23ff      	movs	r3, #255	; 0xff
 8002146:	059b      	lsls	r3, r3, #22
 8002148:	f7fe fe06 	bl	8000d58 <__aeabi_dmul>
 800214c:	0002      	movs	r2, r0
 800214e:	000b      	movs	r3, r1
 8002150:	0014      	movs	r4, r2
 8002152:	001d      	movs	r5, r3
 8002154:	4b3f      	ldr	r3, [pc, #252]	; (8002254 <main+0x7ac>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	0018      	movs	r0, r3
 800215a:	f7ff fc31 	bl	80019c0 <__aeabi_i2d>
 800215e:	2200      	movs	r2, #0
 8002160:	4b35      	ldr	r3, [pc, #212]	; (8002238 <main+0x790>)
 8002162:	f7fe fdf9 	bl	8000d58 <__aeabi_dmul>
 8002166:	0002      	movs	r2, r0
 8002168:	000b      	movs	r3, r1
 800216a:	0020      	movs	r0, r4
 800216c:	0029      	movs	r1, r5
 800216e:	f7fe f9ab 	bl	80004c8 <__aeabi_dadd>
 8002172:	0002      	movs	r2, r0
 8002174:	000b      	movs	r3, r1
 8002176:	0010      	movs	r0, r2
 8002178:	0019      	movs	r1, r3
 800217a:	f7fe f987 	bl	800048c <__aeabi_d2uiz>
 800217e:	0003      	movs	r3, r0
 8002180:	b29a      	uxth	r2, r3
 8002182:	4b34      	ldr	r3, [pc, #208]	; (8002254 <main+0x7ac>)
 8002184:	801a      	strh	r2, [r3, #0]
		  				threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002186:	4b34      	ldr	r3, [pc, #208]	; (8002258 <main+0x7b0>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	0018      	movs	r0, r3
 800218c:	f7ff fc18 	bl	80019c0 <__aeabi_i2d>
 8002190:	0004      	movs	r4, r0
 8002192:	000d      	movs	r5, r1
 8002194:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <main+0x7ac>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	001a      	movs	r2, r3
 800219a:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <main+0x7b0>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff fc0d 	bl	80019c0 <__aeabi_i2d>
 80021a6:	2200      	movs	r2, #0
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <main+0x798>)
 80021aa:	f7fe fdd5 	bl	8000d58 <__aeabi_dmul>
 80021ae:	0002      	movs	r2, r0
 80021b0:	000b      	movs	r3, r1
 80021b2:	0020      	movs	r0, r4
 80021b4:	0029      	movs	r1, r5
 80021b6:	f7fe f987 	bl	80004c8 <__aeabi_dadd>
 80021ba:	0002      	movs	r2, r0
 80021bc:	000b      	movs	r3, r1
 80021be:	0010      	movs	r0, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	f7fe f963 	bl	800048c <__aeabi_d2uiz>
 80021c6:	0003      	movs	r3, r0
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	4b24      	ldr	r3, [pc, #144]	; (800225c <main+0x7b4>)
 80021cc:	801a      	strh	r2, [r3, #0]
		  				threshold_f2 = 0.5*threshold_f1;
 80021ce:	4b23      	ldr	r3, [pc, #140]	; (800225c <main+0x7b4>)
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7ff fbf4 	bl	80019c0 <__aeabi_i2d>
 80021d8:	2200      	movs	r2, #0
 80021da:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <main+0x7a0>)
 80021dc:	f7fe fdbc 	bl	8000d58 <__aeabi_dmul>
 80021e0:	0002      	movs	r2, r0
 80021e2:	000b      	movs	r3, r1
 80021e4:	0010      	movs	r0, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	f7fe f950 	bl	800048c <__aeabi_d2uiz>
 80021ec:	0003      	movs	r3, r0
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <main+0x7b8>)
 80021f2:	801a      	strh	r2, [r3, #0]

		  				lastSlope = currentSlope;
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <main+0x778>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <main+0x780>)
 80021fa:	601a      	str	r2, [r3, #0]
		  				qrs = true;
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <main+0x784>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	e1f3      	b.n	80025ec <main+0xb44>
		  			}
		  		}
		  		// If it was above both thresholds and respects both latency periods, it certainly is a R peak.
		  		else
		  		{
		  			currentSlope = 0;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <main+0x778>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
		  			for (j = current - 10; j <= current; j++)
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <main+0x77c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3b0a      	subs	r3, #10
 8002210:	001a      	movs	r2, r3
 8002212:	4b01      	ldr	r3, [pc, #4]	; (8002218 <main+0x770>)
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	e03c      	b.n	8002292 <main+0x7ea>
 8002218:	200027b0 	.word	0x200027b0
 800221c:	20001948 	.word	0x20001948
 8002220:	200027c0 	.word	0x200027c0
 8002224:	200027c4 	.word	0x200027c4
 8002228:	200027bc 	.word	0x200027bc
 800222c:	200027dc 	.word	0x200027dc
 8002230:	200027c8 	.word	0x200027c8
 8002234:	200027d4 	.word	0x200027d4
 8002238:	3fec0000 	.word	0x3fec0000
 800223c:	200027d8 	.word	0x200027d8
 8002240:	3fd00000 	.word	0x3fd00000
 8002244:	200027cc 	.word	0x200027cc
 8002248:	3fe00000 	.word	0x3fe00000
 800224c:	200027ce 	.word	0x200027ce
 8002250:	200027ca 	.word	0x200027ca
 8002254:	200027d6 	.word	0x200027d6
 8002258:	200027da 	.word	0x200027da
 800225c:	200027d0 	.word	0x200027d0
 8002260:	200027d2 	.word	0x200027d2
		  				if (squared[j] > currentSlope)
 8002264:	4be7      	ldr	r3, [pc, #924]	; (8002604 <main+0xb5c>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4be7      	ldr	r3, [pc, #924]	; (8002608 <main+0xb60>)
 800226a:	0052      	lsls	r2, r2, #1
 800226c:	5ad3      	ldrh	r3, [r2, r3]
 800226e:	001a      	movs	r2, r3
 8002270:	4be6      	ldr	r3, [pc, #920]	; (800260c <main+0xb64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d907      	bls.n	8002288 <main+0x7e0>
		  					currentSlope = squared[j];
 8002278:	4be2      	ldr	r3, [pc, #904]	; (8002604 <main+0xb5c>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4be2      	ldr	r3, [pc, #904]	; (8002608 <main+0xb60>)
 800227e:	0052      	lsls	r2, r2, #1
 8002280:	5ad3      	ldrh	r3, [r2, r3]
 8002282:	001a      	movs	r2, r3
 8002284:	4be1      	ldr	r3, [pc, #900]	; (800260c <main+0xb64>)
 8002286:	601a      	str	r2, [r3, #0]
		  			for (j = current - 10; j <= current; j++)
 8002288:	4bde      	ldr	r3, [pc, #888]	; (8002604 <main+0xb5c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	4bdd      	ldr	r3, [pc, #884]	; (8002604 <main+0xb5c>)
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	4bdc      	ldr	r3, [pc, #880]	; (8002604 <main+0xb5c>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4bde      	ldr	r3, [pc, #888]	; (8002610 <main+0xb68>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d9e2      	bls.n	8002264 <main+0x7bc>

		  			spk_i = 0.125*peak_i + 0.875*spk_i;
 800229e:	4bdd      	ldr	r3, [pc, #884]	; (8002614 <main+0xb6c>)
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7ff fb8c 	bl	80019c0 <__aeabi_i2d>
 80022a8:	2200      	movs	r2, #0
 80022aa:	23ff      	movs	r3, #255	; 0xff
 80022ac:	059b      	lsls	r3, r3, #22
 80022ae:	f7fe fd53 	bl	8000d58 <__aeabi_dmul>
 80022b2:	0002      	movs	r2, r0
 80022b4:	000b      	movs	r3, r1
 80022b6:	0014      	movs	r4, r2
 80022b8:	001d      	movs	r5, r3
 80022ba:	4bd7      	ldr	r3, [pc, #860]	; (8002618 <main+0xb70>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	0018      	movs	r0, r3
 80022c0:	f7ff fb7e 	bl	80019c0 <__aeabi_i2d>
 80022c4:	2200      	movs	r2, #0
 80022c6:	4bd5      	ldr	r3, [pc, #852]	; (800261c <main+0xb74>)
 80022c8:	f7fe fd46 	bl	8000d58 <__aeabi_dmul>
 80022cc:	0002      	movs	r2, r0
 80022ce:	000b      	movs	r3, r1
 80022d0:	0020      	movs	r0, r4
 80022d2:	0029      	movs	r1, r5
 80022d4:	f7fe f8f8 	bl	80004c8 <__aeabi_dadd>
 80022d8:	0002      	movs	r2, r0
 80022da:	000b      	movs	r3, r1
 80022dc:	0010      	movs	r0, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	f7fe f8d4 	bl	800048c <__aeabi_d2uiz>
 80022e4:	0003      	movs	r3, r0
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	4bcb      	ldr	r3, [pc, #812]	; (8002618 <main+0xb70>)
 80022ea:	801a      	strh	r2, [r3, #0]
		  			threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80022ec:	4bcc      	ldr	r3, [pc, #816]	; (8002620 <main+0xb78>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	0018      	movs	r0, r3
 80022f2:	f7ff fb65 	bl	80019c0 <__aeabi_i2d>
 80022f6:	0004      	movs	r4, r0
 80022f8:	000d      	movs	r5, r1
 80022fa:	4bc7      	ldr	r3, [pc, #796]	; (8002618 <main+0xb70>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	001a      	movs	r2, r3
 8002300:	4bc7      	ldr	r3, [pc, #796]	; (8002620 <main+0xb78>)
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	0018      	movs	r0, r3
 8002308:	f7ff fb5a 	bl	80019c0 <__aeabi_i2d>
 800230c:	2200      	movs	r2, #0
 800230e:	4bc5      	ldr	r3, [pc, #788]	; (8002624 <main+0xb7c>)
 8002310:	f7fe fd22 	bl	8000d58 <__aeabi_dmul>
 8002314:	0002      	movs	r2, r0
 8002316:	000b      	movs	r3, r1
 8002318:	0020      	movs	r0, r4
 800231a:	0029      	movs	r1, r5
 800231c:	f7fe f8d4 	bl	80004c8 <__aeabi_dadd>
 8002320:	0002      	movs	r2, r0
 8002322:	000b      	movs	r3, r1
 8002324:	0010      	movs	r0, r2
 8002326:	0019      	movs	r1, r3
 8002328:	f7fe f8b0 	bl	800048c <__aeabi_d2uiz>
 800232c:	0003      	movs	r3, r0
 800232e:	b29a      	uxth	r2, r3
 8002330:	4bbd      	ldr	r3, [pc, #756]	; (8002628 <main+0xb80>)
 8002332:	801a      	strh	r2, [r3, #0]
		  			threshold_i2 = 0.5*threshold_i1;
 8002334:	4bbc      	ldr	r3, [pc, #752]	; (8002628 <main+0xb80>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	0018      	movs	r0, r3
 800233a:	f7ff fb41 	bl	80019c0 <__aeabi_i2d>
 800233e:	2200      	movs	r2, #0
 8002340:	4bba      	ldr	r3, [pc, #744]	; (800262c <main+0xb84>)
 8002342:	f7fe fd09 	bl	8000d58 <__aeabi_dmul>
 8002346:	0002      	movs	r2, r0
 8002348:	000b      	movs	r3, r1
 800234a:	0010      	movs	r0, r2
 800234c:	0019      	movs	r1, r3
 800234e:	f7fe f89d 	bl	800048c <__aeabi_d2uiz>
 8002352:	0003      	movs	r3, r0
 8002354:	b29a      	uxth	r2, r3
 8002356:	4bb6      	ldr	r3, [pc, #728]	; (8002630 <main+0xb88>)
 8002358:	801a      	strh	r2, [r3, #0]

		  			spk_f = 0.125*peak_f + 0.875*spk_f;
 800235a:	4bb6      	ldr	r3, [pc, #728]	; (8002634 <main+0xb8c>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	0018      	movs	r0, r3
 8002360:	f7ff fb2e 	bl	80019c0 <__aeabi_i2d>
 8002364:	2200      	movs	r2, #0
 8002366:	23ff      	movs	r3, #255	; 0xff
 8002368:	059b      	lsls	r3, r3, #22
 800236a:	f7fe fcf5 	bl	8000d58 <__aeabi_dmul>
 800236e:	0002      	movs	r2, r0
 8002370:	000b      	movs	r3, r1
 8002372:	0014      	movs	r4, r2
 8002374:	001d      	movs	r5, r3
 8002376:	4bb0      	ldr	r3, [pc, #704]	; (8002638 <main+0xb90>)
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	0018      	movs	r0, r3
 800237c:	f7ff fb20 	bl	80019c0 <__aeabi_i2d>
 8002380:	2200      	movs	r2, #0
 8002382:	4ba6      	ldr	r3, [pc, #664]	; (800261c <main+0xb74>)
 8002384:	f7fe fce8 	bl	8000d58 <__aeabi_dmul>
 8002388:	0002      	movs	r2, r0
 800238a:	000b      	movs	r3, r1
 800238c:	0020      	movs	r0, r4
 800238e:	0029      	movs	r1, r5
 8002390:	f7fe f89a 	bl	80004c8 <__aeabi_dadd>
 8002394:	0002      	movs	r2, r0
 8002396:	000b      	movs	r3, r1
 8002398:	0010      	movs	r0, r2
 800239a:	0019      	movs	r1, r3
 800239c:	f7fe f876 	bl	800048c <__aeabi_d2uiz>
 80023a0:	0003      	movs	r3, r0
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4ba4      	ldr	r3, [pc, #656]	; (8002638 <main+0xb90>)
 80023a6:	801a      	strh	r2, [r3, #0]
		  			threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80023a8:	4ba4      	ldr	r3, [pc, #656]	; (800263c <main+0xb94>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7ff fb07 	bl	80019c0 <__aeabi_i2d>
 80023b2:	0004      	movs	r4, r0
 80023b4:	000d      	movs	r5, r1
 80023b6:	4ba0      	ldr	r3, [pc, #640]	; (8002638 <main+0xb90>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	001a      	movs	r2, r3
 80023bc:	4b9f      	ldr	r3, [pc, #636]	; (800263c <main+0xb94>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	0018      	movs	r0, r3
 80023c4:	f7ff fafc 	bl	80019c0 <__aeabi_i2d>
 80023c8:	2200      	movs	r2, #0
 80023ca:	4b96      	ldr	r3, [pc, #600]	; (8002624 <main+0xb7c>)
 80023cc:	f7fe fcc4 	bl	8000d58 <__aeabi_dmul>
 80023d0:	0002      	movs	r2, r0
 80023d2:	000b      	movs	r3, r1
 80023d4:	0020      	movs	r0, r4
 80023d6:	0029      	movs	r1, r5
 80023d8:	f7fe f876 	bl	80004c8 <__aeabi_dadd>
 80023dc:	0002      	movs	r2, r0
 80023de:	000b      	movs	r3, r1
 80023e0:	0010      	movs	r0, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	f7fe f852 	bl	800048c <__aeabi_d2uiz>
 80023e8:	0003      	movs	r3, r0
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b94      	ldr	r3, [pc, #592]	; (8002640 <main+0xb98>)
 80023ee:	801a      	strh	r2, [r3, #0]
		  			threshold_f2 = 0.5*threshold_f1;
 80023f0:	4b93      	ldr	r3, [pc, #588]	; (8002640 <main+0xb98>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7ff fae3 	bl	80019c0 <__aeabi_i2d>
 80023fa:	2200      	movs	r2, #0
 80023fc:	4b8b      	ldr	r3, [pc, #556]	; (800262c <main+0xb84>)
 80023fe:	f7fe fcab 	bl	8000d58 <__aeabi_dmul>
 8002402:	0002      	movs	r2, r0
 8002404:	000b      	movs	r3, r1
 8002406:	0010      	movs	r0, r2
 8002408:	0019      	movs	r1, r3
 800240a:	f7fe f83f 	bl	800048c <__aeabi_d2uiz>
 800240e:	0003      	movs	r3, r0
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b8c      	ldr	r3, [pc, #560]	; (8002644 <main+0xb9c>)
 8002414:	801a      	strh	r2, [r3, #0]

		  			lastSlope = currentSlope;
 8002416:	4b7d      	ldr	r3, [pc, #500]	; (800260c <main+0xb64>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b8b      	ldr	r3, [pc, #556]	; (8002648 <main+0xba0>)
 800241c:	601a      	str	r2, [r3, #0]
		  			qrs = true;
 800241e:	4b8b      	ldr	r3, [pc, #556]	; (800264c <main+0xba4>)
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e0e2      	b.n	80025ec <main+0xb44>
		  		}
		  	}
		  	// If the new peak doesn't respect the 200ms latency, it's noise. Update thresholds and move on to the next sample.
		  	else
		  	{
		  		peak_i = integral[current];
 8002426:	4b7a      	ldr	r3, [pc, #488]	; (8002610 <main+0xb68>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b89      	ldr	r3, [pc, #548]	; (8002650 <main+0xba8>)
 800242c:	0052      	lsls	r2, r2, #1
 800242e:	5ad2      	ldrh	r2, [r2, r3]
 8002430:	4b78      	ldr	r3, [pc, #480]	; (8002614 <main+0xb6c>)
 8002432:	801a      	strh	r2, [r3, #0]
		  		npk_i = 0.125*peak_i + 0.875*npk_i;
 8002434:	4b77      	ldr	r3, [pc, #476]	; (8002614 <main+0xb6c>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	0018      	movs	r0, r3
 800243a:	f7ff fac1 	bl	80019c0 <__aeabi_i2d>
 800243e:	2200      	movs	r2, #0
 8002440:	23ff      	movs	r3, #255	; 0xff
 8002442:	059b      	lsls	r3, r3, #22
 8002444:	f7fe fc88 	bl	8000d58 <__aeabi_dmul>
 8002448:	0002      	movs	r2, r0
 800244a:	000b      	movs	r3, r1
 800244c:	0014      	movs	r4, r2
 800244e:	001d      	movs	r5, r3
 8002450:	4b73      	ldr	r3, [pc, #460]	; (8002620 <main+0xb78>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	0018      	movs	r0, r3
 8002456:	f7ff fab3 	bl	80019c0 <__aeabi_i2d>
 800245a:	2200      	movs	r2, #0
 800245c:	4b6f      	ldr	r3, [pc, #444]	; (800261c <main+0xb74>)
 800245e:	f7fe fc7b 	bl	8000d58 <__aeabi_dmul>
 8002462:	0002      	movs	r2, r0
 8002464:	000b      	movs	r3, r1
 8002466:	0020      	movs	r0, r4
 8002468:	0029      	movs	r1, r5
 800246a:	f7fe f82d 	bl	80004c8 <__aeabi_dadd>
 800246e:	0002      	movs	r2, r0
 8002470:	000b      	movs	r3, r1
 8002472:	0010      	movs	r0, r2
 8002474:	0019      	movs	r1, r3
 8002476:	f7fe f809 	bl	800048c <__aeabi_d2uiz>
 800247a:	0003      	movs	r3, r0
 800247c:	b29a      	uxth	r2, r3
 800247e:	4b68      	ldr	r3, [pc, #416]	; (8002620 <main+0xb78>)
 8002480:	801a      	strh	r2, [r3, #0]
		  		threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002482:	4b67      	ldr	r3, [pc, #412]	; (8002620 <main+0xb78>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	0018      	movs	r0, r3
 8002488:	f7ff fa9a 	bl	80019c0 <__aeabi_i2d>
 800248c:	0004      	movs	r4, r0
 800248e:	000d      	movs	r5, r1
 8002490:	4b61      	ldr	r3, [pc, #388]	; (8002618 <main+0xb70>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	001a      	movs	r2, r3
 8002496:	4b62      	ldr	r3, [pc, #392]	; (8002620 <main+0xb78>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	0018      	movs	r0, r3
 800249e:	f7ff fa8f 	bl	80019c0 <__aeabi_i2d>
 80024a2:	2200      	movs	r2, #0
 80024a4:	4b5f      	ldr	r3, [pc, #380]	; (8002624 <main+0xb7c>)
 80024a6:	f7fe fc57 	bl	8000d58 <__aeabi_dmul>
 80024aa:	0002      	movs	r2, r0
 80024ac:	000b      	movs	r3, r1
 80024ae:	0020      	movs	r0, r4
 80024b0:	0029      	movs	r1, r5
 80024b2:	f7fe f809 	bl	80004c8 <__aeabi_dadd>
 80024b6:	0002      	movs	r2, r0
 80024b8:	000b      	movs	r3, r1
 80024ba:	0010      	movs	r0, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	f7fd ffe5 	bl	800048c <__aeabi_d2uiz>
 80024c2:	0003      	movs	r3, r0
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b58      	ldr	r3, [pc, #352]	; (8002628 <main+0xb80>)
 80024c8:	801a      	strh	r2, [r3, #0]
		  		threshold_i2 = 0.5*threshold_i1;
 80024ca:	4b57      	ldr	r3, [pc, #348]	; (8002628 <main+0xb80>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	0018      	movs	r0, r3
 80024d0:	f7ff fa76 	bl	80019c0 <__aeabi_i2d>
 80024d4:	2200      	movs	r2, #0
 80024d6:	4b55      	ldr	r3, [pc, #340]	; (800262c <main+0xb84>)
 80024d8:	f7fe fc3e 	bl	8000d58 <__aeabi_dmul>
 80024dc:	0002      	movs	r2, r0
 80024de:	000b      	movs	r3, r1
 80024e0:	0010      	movs	r0, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	f7fd ffd2 	bl	800048c <__aeabi_d2uiz>
 80024e8:	0003      	movs	r3, r0
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <main+0xb88>)
 80024ee:	801a      	strh	r2, [r3, #0]
		  		peak_f = highpass[current];
 80024f0:	4b47      	ldr	r3, [pc, #284]	; (8002610 <main+0xb68>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b57      	ldr	r3, [pc, #348]	; (8002654 <main+0xbac>)
 80024f6:	0052      	lsls	r2, r2, #1
 80024f8:	5ad2      	ldrh	r2, [r2, r3]
 80024fa:	4b4e      	ldr	r3, [pc, #312]	; (8002634 <main+0xb8c>)
 80024fc:	801a      	strh	r2, [r3, #0]
		  		npk_f = 0.125*peak_f + 0.875*npk_f;
 80024fe:	4b4d      	ldr	r3, [pc, #308]	; (8002634 <main+0xb8c>)
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	0018      	movs	r0, r3
 8002504:	f7ff fa5c 	bl	80019c0 <__aeabi_i2d>
 8002508:	2200      	movs	r2, #0
 800250a:	23ff      	movs	r3, #255	; 0xff
 800250c:	059b      	lsls	r3, r3, #22
 800250e:	f7fe fc23 	bl	8000d58 <__aeabi_dmul>
 8002512:	0002      	movs	r2, r0
 8002514:	000b      	movs	r3, r1
 8002516:	0014      	movs	r4, r2
 8002518:	001d      	movs	r5, r3
 800251a:	4b48      	ldr	r3, [pc, #288]	; (800263c <main+0xb94>)
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	0018      	movs	r0, r3
 8002520:	f7ff fa4e 	bl	80019c0 <__aeabi_i2d>
 8002524:	2200      	movs	r2, #0
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <main+0xb74>)
 8002528:	f7fe fc16 	bl	8000d58 <__aeabi_dmul>
 800252c:	0002      	movs	r2, r0
 800252e:	000b      	movs	r3, r1
 8002530:	0020      	movs	r0, r4
 8002532:	0029      	movs	r1, r5
 8002534:	f7fd ffc8 	bl	80004c8 <__aeabi_dadd>
 8002538:	0002      	movs	r2, r0
 800253a:	000b      	movs	r3, r1
 800253c:	0010      	movs	r0, r2
 800253e:	0019      	movs	r1, r3
 8002540:	f7fd ffa4 	bl	800048c <__aeabi_d2uiz>
 8002544:	0003      	movs	r3, r0
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b3c      	ldr	r3, [pc, #240]	; (800263c <main+0xb94>)
 800254a:	801a      	strh	r2, [r3, #0]
		  		threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 800254c:	4b3b      	ldr	r3, [pc, #236]	; (800263c <main+0xb94>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	0018      	movs	r0, r3
 8002552:	f7ff fa35 	bl	80019c0 <__aeabi_i2d>
 8002556:	0004      	movs	r4, r0
 8002558:	000d      	movs	r5, r1
 800255a:	4b37      	ldr	r3, [pc, #220]	; (8002638 <main+0xb90>)
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	001a      	movs	r2, r3
 8002560:	4b36      	ldr	r3, [pc, #216]	; (800263c <main+0xb94>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	0018      	movs	r0, r3
 8002568:	f7ff fa2a 	bl	80019c0 <__aeabi_i2d>
 800256c:	2200      	movs	r2, #0
 800256e:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <main+0xb7c>)
 8002570:	f7fe fbf2 	bl	8000d58 <__aeabi_dmul>
 8002574:	0002      	movs	r2, r0
 8002576:	000b      	movs	r3, r1
 8002578:	0020      	movs	r0, r4
 800257a:	0029      	movs	r1, r5
 800257c:	f7fd ffa4 	bl	80004c8 <__aeabi_dadd>
 8002580:	0002      	movs	r2, r0
 8002582:	000b      	movs	r3, r1
 8002584:	0010      	movs	r0, r2
 8002586:	0019      	movs	r1, r3
 8002588:	f7fd ff80 	bl	800048c <__aeabi_d2uiz>
 800258c:	0003      	movs	r3, r0
 800258e:	b29a      	uxth	r2, r3
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <main+0xb98>)
 8002592:	801a      	strh	r2, [r3, #0]
		  		threshold_f2 = 0.5*threshold_f1;
 8002594:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <main+0xb98>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	0018      	movs	r0, r3
 800259a:	f7ff fa11 	bl	80019c0 <__aeabi_i2d>
 800259e:	2200      	movs	r2, #0
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <main+0xb84>)
 80025a2:	f7fe fbd9 	bl	8000d58 <__aeabi_dmul>
 80025a6:	0002      	movs	r2, r0
 80025a8:	000b      	movs	r3, r1
 80025aa:	0010      	movs	r0, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	f7fd ff6d 	bl	800048c <__aeabi_d2uiz>
 80025b2:	0003      	movs	r3, r0
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <main+0xb9c>)
 80025b8:	801a      	strh	r2, [r3, #0]
		  		qrs = false;
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <main+0xba4>)
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
		  		outputSignal[current] = qrs;
 80025c0:	4b22      	ldr	r3, [pc, #136]	; (800264c <main+0xba4>)
 80025c2:	7819      	ldrb	r1, [r3, #0]
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <main+0xb68>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	b289      	uxth	r1, r1
 80025ca:	4b23      	ldr	r3, [pc, #140]	; (8002658 <main+0xbb0>)
 80025cc:	0052      	lsls	r2, r2, #1
 80025ce:	52d1      	strh	r1, [r2, r3]
		  		if (sample > DELAY + BUFFSIZE)
 80025d0:	4b22      	ldr	r3, [pc, #136]	; (800265c <main+0xbb4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a22      	ldr	r2, [pc, #136]	; (8002660 <main+0xbb8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d801      	bhi.n	80025de <main+0xb36>
 80025da:	f000 fd40 	bl	800305e <main+0x15b6>
		  			output(outputSignal[0]);
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <main+0xbb0>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 ff68 	bl	80034b8 <output>
		  		continue;
 80025e8:	f000 fd39 	bl	800305e <main+0x15b6>
		  	}

		  }

		  // If a R-peak was detected, the RR-averages must be updated.
		  if (qrs)
 80025ec:	4b17      	ldr	r3, [pc, #92]	; (800264c <main+0xba4>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d100      	bne.n	80025f6 <main+0xb4e>
 80025f4:	e12a      	b.n	800284c <main+0xda4>
		  {
		  	// Add the newest RR-interval to the buffer and get the new average.
		  	rravg1 = 0;
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <main+0xbbc>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
		  	for (i = 0; i < 7; i++)
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <main+0xbc0>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e04d      	b.n	80026a0 <main+0xbf8>
 8002604:	200027b0 	.word	0x200027b0
 8002608:	20001948 	.word	0x20001948
 800260c:	200027c0 	.word	0x200027c0
 8002610:	200027c4 	.word	0x200027c4
 8002614:	200027c8 	.word	0x200027c8
 8002618:	200027d4 	.word	0x200027d4
 800261c:	3fec0000 	.word	0x3fec0000
 8002620:	200027d8 	.word	0x200027d8
 8002624:	3fd00000 	.word	0x3fd00000
 8002628:	200027cc 	.word	0x200027cc
 800262c:	3fe00000 	.word	0x3fe00000
 8002630:	200027ce 	.word	0x200027ce
 8002634:	200027ca 	.word	0x200027ca
 8002638:	200027d6 	.word	0x200027d6
 800263c:	200027da 	.word	0x200027da
 8002640:	200027d0 	.word	0x200027d0
 8002644:	200027d2 	.word	0x200027d2
 8002648:	200027bc 	.word	0x200027bc
 800264c:	200027dc 	.word	0x200027dc
 8002650:	20001df8 	.word	0x20001df8
 8002654:	20000fe8 	.word	0x20000fe8
 8002658:	200022a8 	.word	0x200022a8
 800265c:	200027b4 	.word	0x200027b4
 8002660:	0000026e 	.word	0x0000026e
 8002664:	20002798 	.word	0x20002798
 8002668:	200027ac 	.word	0x200027ac
		  	{
		  		rr1[i] = rr1[i+1];
 800266c:	4bbf      	ldr	r3, [pc, #764]	; (800296c <main+0xec4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	1c59      	adds	r1, r3, #1
 8002672:	4bbe      	ldr	r3, [pc, #760]	; (800296c <main+0xec4>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4bbe      	ldr	r3, [pc, #760]	; (8002970 <main+0xec8>)
 8002678:	0089      	lsls	r1, r1, #2
 800267a:	58c9      	ldr	r1, [r1, r3]
 800267c:	4bbc      	ldr	r3, [pc, #752]	; (8002970 <main+0xec8>)
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	50d1      	str	r1, [r2, r3]
		  		rravg1 += rr1[i];
 8002682:	4bba      	ldr	r3, [pc, #744]	; (800296c <main+0xec4>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4bba      	ldr	r3, [pc, #744]	; (8002970 <main+0xec8>)
 8002688:	0092      	lsls	r2, r2, #2
 800268a:	58d2      	ldr	r2, [r2, r3]
 800268c:	4bb9      	ldr	r3, [pc, #740]	; (8002974 <main+0xecc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	18d2      	adds	r2, r2, r3
 8002692:	4bb8      	ldr	r3, [pc, #736]	; (8002974 <main+0xecc>)
 8002694:	601a      	str	r2, [r3, #0]
		  	for (i = 0; i < 7; i++)
 8002696:	4bb5      	ldr	r3, [pc, #724]	; (800296c <main+0xec4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	4bb3      	ldr	r3, [pc, #716]	; (800296c <main+0xec4>)
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	4bb2      	ldr	r3, [pc, #712]	; (800296c <main+0xec4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d9e1      	bls.n	800266c <main+0xbc4>
		  	}
		  	rr1[7] = sample - lastQRS;
 80026a8:	4bb3      	ldr	r3, [pc, #716]	; (8002978 <main+0xed0>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4bb3      	ldr	r3, [pc, #716]	; (800297c <main+0xed4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	001a      	movs	r2, r3
 80026b4:	4bae      	ldr	r3, [pc, #696]	; (8002970 <main+0xec8>)
 80026b6:	61da      	str	r2, [r3, #28]
		  	lastQRS = sample;
 80026b8:	4baf      	ldr	r3, [pc, #700]	; (8002978 <main+0xed0>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4baf      	ldr	r3, [pc, #700]	; (800297c <main+0xed4>)
 80026be:	601a      	str	r2, [r3, #0]
		  	rravg1 += rr1[7];
 80026c0:	4bab      	ldr	r3, [pc, #684]	; (8002970 <main+0xec8>)
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	4bab      	ldr	r3, [pc, #684]	; (8002974 <main+0xecc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	18d2      	adds	r2, r2, r3
 80026ca:	4baa      	ldr	r3, [pc, #680]	; (8002974 <main+0xecc>)
 80026cc:	601a      	str	r2, [r3, #0]
		  	rravg1 *= 0.125;
 80026ce:	4ba9      	ldr	r3, [pc, #676]	; (8002974 <main+0xecc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7ff f974 	bl	80019c0 <__aeabi_i2d>
 80026d8:	2200      	movs	r2, #0
 80026da:	23ff      	movs	r3, #255	; 0xff
 80026dc:	059b      	lsls	r3, r3, #22
 80026de:	f7fe fb3b 	bl	8000d58 <__aeabi_dmul>
 80026e2:	0002      	movs	r2, r0
 80026e4:	000b      	movs	r3, r1
 80026e6:	0010      	movs	r0, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	f7ff f933 	bl	8001954 <__aeabi_d2iz>
 80026ee:	0002      	movs	r2, r0
 80026f0:	4ba0      	ldr	r3, [pc, #640]	; (8002974 <main+0xecc>)
 80026f2:	601a      	str	r2, [r3, #0]

		  	// If the newly-discovered RR-average is normal, add it to the "normal" buffer and get the new "normal" average.
		  	// Update the "normal" beat parameters.
		  	if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 80026f4:	4b9e      	ldr	r3, [pc, #632]	; (8002970 <main+0xec8>)
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	4ba1      	ldr	r3, [pc, #644]	; (8002980 <main+0xed8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	da00      	bge.n	8002702 <main+0xc5a>
 8002700:	e07e      	b.n	8002800 <main+0xd58>
 8002702:	4b9b      	ldr	r3, [pc, #620]	; (8002970 <main+0xec8>)
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	4b9f      	ldr	r3, [pc, #636]	; (8002984 <main+0xedc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	dc78      	bgt.n	8002800 <main+0xd58>
		  	{
		  		rravg2 = 0;
 800270e:	4b9e      	ldr	r3, [pc, #632]	; (8002988 <main+0xee0>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
		  		for (i = 0; i < 7; i++)
 8002714:	4b95      	ldr	r3, [pc, #596]	; (800296c <main+0xec4>)
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	e019      	b.n	8002750 <main+0xca8>
		  		{
		  			rr2[i] = rr2[i+1];
 800271c:	4b93      	ldr	r3, [pc, #588]	; (800296c <main+0xec4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	1c59      	adds	r1, r3, #1
 8002722:	4b92      	ldr	r3, [pc, #584]	; (800296c <main+0xec4>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b99      	ldr	r3, [pc, #612]	; (800298c <main+0xee4>)
 8002728:	0089      	lsls	r1, r1, #2
 800272a:	58c9      	ldr	r1, [r1, r3]
 800272c:	4b97      	ldr	r3, [pc, #604]	; (800298c <main+0xee4>)
 800272e:	0092      	lsls	r2, r2, #2
 8002730:	50d1      	str	r1, [r2, r3]
		  			rravg2 += rr2[i];
 8002732:	4b8e      	ldr	r3, [pc, #568]	; (800296c <main+0xec4>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b95      	ldr	r3, [pc, #596]	; (800298c <main+0xee4>)
 8002738:	0092      	lsls	r2, r2, #2
 800273a:	58d2      	ldr	r2, [r2, r3]
 800273c:	4b92      	ldr	r3, [pc, #584]	; (8002988 <main+0xee0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	18d2      	adds	r2, r2, r3
 8002742:	4b91      	ldr	r3, [pc, #580]	; (8002988 <main+0xee0>)
 8002744:	601a      	str	r2, [r3, #0]
		  		for (i = 0; i < 7; i++)
 8002746:	4b89      	ldr	r3, [pc, #548]	; (800296c <main+0xec4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	4b87      	ldr	r3, [pc, #540]	; (800296c <main+0xec4>)
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	4b86      	ldr	r3, [pc, #536]	; (800296c <main+0xec4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b06      	cmp	r3, #6
 8002756:	d9e1      	bls.n	800271c <main+0xc74>
		  		}
		  		rr2[7] = rr1[7];
 8002758:	4b85      	ldr	r3, [pc, #532]	; (8002970 <main+0xec8>)
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	4b8b      	ldr	r3, [pc, #556]	; (800298c <main+0xee4>)
 800275e:	61da      	str	r2, [r3, #28]
		  		rravg2 += rr2[7];
 8002760:	4b8a      	ldr	r3, [pc, #552]	; (800298c <main+0xee4>)
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	4b88      	ldr	r3, [pc, #544]	; (8002988 <main+0xee0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	18d2      	adds	r2, r2, r3
 800276a:	4b87      	ldr	r3, [pc, #540]	; (8002988 <main+0xee0>)
 800276c:	601a      	str	r2, [r3, #0]
		  		rravg2 *= 0.125;
 800276e:	4b86      	ldr	r3, [pc, #536]	; (8002988 <main+0xee0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	0018      	movs	r0, r3
 8002774:	f7ff f924 	bl	80019c0 <__aeabi_i2d>
 8002778:	2200      	movs	r2, #0
 800277a:	23ff      	movs	r3, #255	; 0xff
 800277c:	059b      	lsls	r3, r3, #22
 800277e:	f7fe faeb 	bl	8000d58 <__aeabi_dmul>
 8002782:	0002      	movs	r2, r0
 8002784:	000b      	movs	r3, r1
 8002786:	0010      	movs	r0, r2
 8002788:	0019      	movs	r1, r3
 800278a:	f7ff f8e3 	bl	8001954 <__aeabi_d2iz>
 800278e:	0002      	movs	r2, r0
 8002790:	4b7d      	ldr	r3, [pc, #500]	; (8002988 <main+0xee0>)
 8002792:	601a      	str	r2, [r3, #0]
		  		rrlow = 0.92*rravg2;
 8002794:	4b7c      	ldr	r3, [pc, #496]	; (8002988 <main+0xee0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	0018      	movs	r0, r3
 800279a:	f7ff f911 	bl	80019c0 <__aeabi_i2d>
 800279e:	4a7c      	ldr	r2, [pc, #496]	; (8002990 <main+0xee8>)
 80027a0:	4b7c      	ldr	r3, [pc, #496]	; (8002994 <main+0xeec>)
 80027a2:	f7fe fad9 	bl	8000d58 <__aeabi_dmul>
 80027a6:	0002      	movs	r2, r0
 80027a8:	000b      	movs	r3, r1
 80027aa:	0010      	movs	r0, r2
 80027ac:	0019      	movs	r1, r3
 80027ae:	f7ff f8d1 	bl	8001954 <__aeabi_d2iz>
 80027b2:	0002      	movs	r2, r0
 80027b4:	4b72      	ldr	r3, [pc, #456]	; (8002980 <main+0xed8>)
 80027b6:	601a      	str	r2, [r3, #0]
		  		rrhigh = 1.16*rravg2;
 80027b8:	4b73      	ldr	r3, [pc, #460]	; (8002988 <main+0xee0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0018      	movs	r0, r3
 80027be:	f7ff f8ff 	bl	80019c0 <__aeabi_i2d>
 80027c2:	4a75      	ldr	r2, [pc, #468]	; (8002998 <main+0xef0>)
 80027c4:	4b75      	ldr	r3, [pc, #468]	; (800299c <main+0xef4>)
 80027c6:	f7fe fac7 	bl	8000d58 <__aeabi_dmul>
 80027ca:	0002      	movs	r2, r0
 80027cc:	000b      	movs	r3, r1
 80027ce:	0010      	movs	r0, r2
 80027d0:	0019      	movs	r1, r3
 80027d2:	f7ff f8bf 	bl	8001954 <__aeabi_d2iz>
 80027d6:	0002      	movs	r2, r0
 80027d8:	4b6a      	ldr	r3, [pc, #424]	; (8002984 <main+0xedc>)
 80027da:	601a      	str	r2, [r3, #0]
		  		rrmiss = 1.66*rravg2;
 80027dc:	4b6a      	ldr	r3, [pc, #424]	; (8002988 <main+0xee0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f7ff f8ed 	bl	80019c0 <__aeabi_i2d>
 80027e6:	4a6c      	ldr	r2, [pc, #432]	; (8002998 <main+0xef0>)
 80027e8:	4b6d      	ldr	r3, [pc, #436]	; (80029a0 <main+0xef8>)
 80027ea:	f7fe fab5 	bl	8000d58 <__aeabi_dmul>
 80027ee:	0002      	movs	r2, r0
 80027f0:	000b      	movs	r3, r1
 80027f2:	0010      	movs	r0, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	f7ff f8ad 	bl	8001954 <__aeabi_d2iz>
 80027fa:	0002      	movs	r2, r0
 80027fc:	4b69      	ldr	r3, [pc, #420]	; (80029a4 <main+0xefc>)
 80027fe:	601a      	str	r2, [r3, #0]
		  	}

		  	prevRegular = regular;
 8002800:	4b69      	ldr	r3, [pc, #420]	; (80029a8 <main+0xf00>)
 8002802:	781a      	ldrb	r2, [r3, #0]
 8002804:	4b69      	ldr	r3, [pc, #420]	; (80029ac <main+0xf04>)
 8002806:	701a      	strb	r2, [r3, #0]
		  	if (rravg1 == rravg2)
 8002808:	4b5a      	ldr	r3, [pc, #360]	; (8002974 <main+0xecc>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b5e      	ldr	r3, [pc, #376]	; (8002988 <main+0xee0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d104      	bne.n	800281e <main+0xd76>
		  	{
		  		regular = true;
 8002814:	4b64      	ldr	r3, [pc, #400]	; (80029a8 <main+0xf00>)
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	f000 fc0a 	bl	8003032 <main+0x158a>
		  	}
		  	// If the beat had been normal but turned odd, change the thresholds.
		  	else
		  	{
		  		regular = false;
 800281e:	4b62      	ldr	r3, [pc, #392]	; (80029a8 <main+0xf00>)
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
		  		if (prevRegular)
 8002824:	4b61      	ldr	r3, [pc, #388]	; (80029ac <main+0xf04>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <main+0xd88>
 800282c:	f000 fc01 	bl	8003032 <main+0x158a>
		  		{
		  			threshold_i1 /= 2;
 8002830:	4b5f      	ldr	r3, [pc, #380]	; (80029b0 <main+0xf08>)
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <main+0xf08>)
 800283a:	801a      	strh	r2, [r3, #0]
		  			threshold_f1 /= 2;
 800283c:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <main+0xf0c>)
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	4b5b      	ldr	r3, [pc, #364]	; (80029b4 <main+0xf0c>)
 8002846:	801a      	strh	r2, [r3, #0]
 8002848:	f000 fbf3 	bl	8003032 <main+0x158a>
		  // If no R-peak was detected, it's important to check how long it's been since the last detection.
		  else
		  {
		  	// If no R-peak was detected for too long, use the lighter thresholds and do a back search.
		  	// However, the back search must respect the 200ms limit and the 360ms one (check the slope).
		  	if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 800284c:	4b4a      	ldr	r3, [pc, #296]	; (8002978 <main+0xed0>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b4a      	ldr	r3, [pc, #296]	; (800297c <main+0xed4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1ad2      	subs	r2, r2, r3
 8002856:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <main+0xefc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d800      	bhi.n	8002860 <main+0xdb8>
 800285e:	e306      	b.n	8002e6e <main+0x13c6>
 8002860:	4b46      	ldr	r3, [pc, #280]	; (800297c <main+0xed4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	3348      	adds	r3, #72	; 0x48
 8002866:	001a      	movs	r2, r3
 8002868:	4b43      	ldr	r3, [pc, #268]	; (8002978 <main+0xed0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d300      	bcc.n	8002872 <main+0xdca>
 8002870:	e2fd      	b.n	8002e6e <main+0x13c6>
		  	{
		  		for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 8002872:	4b42      	ldr	r3, [pc, #264]	; (800297c <main+0xed4>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4b40      	ldr	r3, [pc, #256]	; (8002978 <main+0xed0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	1ad2      	subs	r2, r2, r3
 800287c:	4b4e      	ldr	r3, [pc, #312]	; (80029b8 <main+0xf10>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	18d3      	adds	r3, r2, r3
 8002882:	3348      	adds	r3, #72	; 0x48
 8002884:	001a      	movs	r2, r3
 8002886:	4b39      	ldr	r3, [pc, #228]	; (800296c <main+0xec4>)
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e280      	b.n	8002d8e <main+0x12e6>
		  		{
		  			if ( (integral[i] > threshold_i2) && (highpass[i] > threshold_f2))
 800288c:	4b37      	ldr	r3, [pc, #220]	; (800296c <main+0xec4>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b4a      	ldr	r3, [pc, #296]	; (80029bc <main+0xf14>)
 8002892:	0052      	lsls	r2, r2, #1
 8002894:	5ad2      	ldrh	r2, [r2, r3]
 8002896:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <main+0xf18>)
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d800      	bhi.n	80028a0 <main+0xdf8>
 800289e:	e271      	b.n	8002d84 <main+0x12dc>
 80028a0:	4b32      	ldr	r3, [pc, #200]	; (800296c <main+0xec4>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <main+0xf1c>)
 80028a6:	0052      	lsls	r2, r2, #1
 80028a8:	5ad2      	ldrh	r2, [r2, r3]
 80028aa:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <main+0xf20>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d800      	bhi.n	80028b4 <main+0xe0c>
 80028b2:	e267      	b.n	8002d84 <main+0x12dc>
		  			{
		  				currentSlope = 0;
 80028b4:	4b45      	ldr	r3, [pc, #276]	; (80029cc <main+0xf24>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
		  				for (j = i - 10; j <= i; j++)
 80028ba:	4b2c      	ldr	r3, [pc, #176]	; (800296c <main+0xec4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3b0a      	subs	r3, #10
 80028c0:	001a      	movs	r2, r3
 80028c2:	4b43      	ldr	r3, [pc, #268]	; (80029d0 <main+0xf28>)
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e016      	b.n	80028f6 <main+0xe4e>
		  					if (squared[j] > currentSlope)
 80028c8:	4b41      	ldr	r3, [pc, #260]	; (80029d0 <main+0xf28>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <main+0xf2c>)
 80028ce:	0052      	lsls	r2, r2, #1
 80028d0:	5ad3      	ldrh	r3, [r2, r3]
 80028d2:	001a      	movs	r2, r3
 80028d4:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <main+0xf24>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d907      	bls.n	80028ec <main+0xe44>
		  						currentSlope = squared[j];
 80028dc:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <main+0xf28>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b3c      	ldr	r3, [pc, #240]	; (80029d4 <main+0xf2c>)
 80028e2:	0052      	lsls	r2, r2, #1
 80028e4:	5ad3      	ldrh	r3, [r2, r3]
 80028e6:	001a      	movs	r2, r3
 80028e8:	4b38      	ldr	r3, [pc, #224]	; (80029cc <main+0xf24>)
 80028ea:	601a      	str	r2, [r3, #0]
		  				for (j = i - 10; j <= i; j++)
 80028ec:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <main+0xf28>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	4b37      	ldr	r3, [pc, #220]	; (80029d0 <main+0xf28>)
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <main+0xf28>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b1c      	ldr	r3, [pc, #112]	; (800296c <main+0xec4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d9e2      	bls.n	80028c8 <main+0xe20>

		  				if ((currentSlope < (dataType)(lastSlope/2)) && (i + sample) < lastQRS + 0.36*lastQRS)
 8002902:	4b35      	ldr	r3, [pc, #212]	; (80029d8 <main+0xf30>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	085b      	lsrs	r3, r3, #1
 8002908:	b29b      	uxth	r3, r3
 800290a:	001a      	movs	r2, r3
 800290c:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <main+0xf24>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d969      	bls.n	80029e8 <main+0xf40>
 8002914:	4b15      	ldr	r3, [pc, #84]	; (800296c <main+0xec4>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <main+0xed0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	18d3      	adds	r3, r2, r3
 800291e:	0018      	movs	r0, r3
 8002920:	f7ff f87e 	bl	8001a20 <__aeabi_ui2d>
 8002924:	0004      	movs	r4, r0
 8002926:	000d      	movs	r5, r1
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <main+0xed4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	0018      	movs	r0, r3
 800292e:	f7ff f877 	bl	8001a20 <__aeabi_ui2d>
 8002932:	6038      	str	r0, [r7, #0]
 8002934:	6079      	str	r1, [r7, #4]
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <main+0xed4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0018      	movs	r0, r3
 800293c:	f7ff f870 	bl	8001a20 <__aeabi_ui2d>
 8002940:	4a26      	ldr	r2, [pc, #152]	; (80029dc <main+0xf34>)
 8002942:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <main+0xf38>)
 8002944:	f7fe fa08 	bl	8000d58 <__aeabi_dmul>
 8002948:	0002      	movs	r2, r0
 800294a:	000b      	movs	r3, r1
 800294c:	6838      	ldr	r0, [r7, #0]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	f7fd fdba 	bl	80004c8 <__aeabi_dadd>
 8002954:	0002      	movs	r2, r0
 8002956:	000b      	movs	r3, r1
 8002958:	0020      	movs	r0, r4
 800295a:	0029      	movs	r1, r5
 800295c:	f7fd fd6e 	bl	800043c <__aeabi_dcmplt>
 8002960:	1e03      	subs	r3, r0, #0
 8002962:	d041      	beq.n	80029e8 <main+0xf40>
		  				{
		  					qrs = false;
 8002964:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <main+0xf3c>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e20b      	b.n	8002d84 <main+0x12dc>
 800296c:	200027ac 	.word	0x200027ac
 8002970:	20002758 	.word	0x20002758
 8002974:	20002798 	.word	0x20002798
 8002978:	200027b4 	.word	0x200027b4
 800297c:	200027b8 	.word	0x200027b8
 8002980:	200027a0 	.word	0x200027a0
 8002984:	200027a4 	.word	0x200027a4
 8002988:	2000279c 	.word	0x2000279c
 800298c:	20002778 	.word	0x20002778
 8002990:	d70a3d71 	.word	0xd70a3d71
 8002994:	3fed70a3 	.word	0x3fed70a3
 8002998:	28f5c28f 	.word	0x28f5c28f
 800299c:	3ff28f5c 	.word	0x3ff28f5c
 80029a0:	3ffa8f5c 	.word	0x3ffa8f5c
 80029a4:	200027a8 	.word	0x200027a8
 80029a8:	20000000 	.word	0x20000000
 80029ac:	200027dd 	.word	0x200027dd
 80029b0:	200027cc 	.word	0x200027cc
 80029b4:	200027d0 	.word	0x200027d0
 80029b8:	200027c4 	.word	0x200027c4
 80029bc:	20001df8 	.word	0x20001df8
 80029c0:	200027ce 	.word	0x200027ce
 80029c4:	20000fe8 	.word	0x20000fe8
 80029c8:	200027d2 	.word	0x200027d2
 80029cc:	200027c0 	.word	0x200027c0
 80029d0:	200027b0 	.word	0x200027b0
 80029d4:	20001948 	.word	0x20001948
 80029d8:	200027bc 	.word	0x200027bc
 80029dc:	70a3d70a 	.word	0x70a3d70a
 80029e0:	3fd70a3d 	.word	0x3fd70a3d
 80029e4:	200027dc 	.word	0x200027dc
		  				}
		  				else
		  				{
		  					peak_i = integral[i];
 80029e8:	4bed      	ldr	r3, [pc, #948]	; (8002da0 <main+0x12f8>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4bed      	ldr	r3, [pc, #948]	; (8002da4 <main+0x12fc>)
 80029ee:	0052      	lsls	r2, r2, #1
 80029f0:	5ad2      	ldrh	r2, [r2, r3]
 80029f2:	4bed      	ldr	r3, [pc, #948]	; (8002da8 <main+0x1300>)
 80029f4:	801a      	strh	r2, [r3, #0]
		  					peak_f = highpass[i];
 80029f6:	4bea      	ldr	r3, [pc, #936]	; (8002da0 <main+0x12f8>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4bec      	ldr	r3, [pc, #944]	; (8002dac <main+0x1304>)
 80029fc:	0052      	lsls	r2, r2, #1
 80029fe:	5ad2      	ldrh	r2, [r2, r3]
 8002a00:	4beb      	ldr	r3, [pc, #940]	; (8002db0 <main+0x1308>)
 8002a02:	801a      	strh	r2, [r3, #0]
		  					spk_i = 0.25*peak_i+ 0.75*spk_i;
 8002a04:	4be8      	ldr	r3, [pc, #928]	; (8002da8 <main+0x1300>)
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7fe ffd9 	bl	80019c0 <__aeabi_i2d>
 8002a0e:	2200      	movs	r2, #0
 8002a10:	4be8      	ldr	r3, [pc, #928]	; (8002db4 <main+0x130c>)
 8002a12:	f7fe f9a1 	bl	8000d58 <__aeabi_dmul>
 8002a16:	0002      	movs	r2, r0
 8002a18:	000b      	movs	r3, r1
 8002a1a:	0014      	movs	r4, r2
 8002a1c:	001d      	movs	r5, r3
 8002a1e:	4be6      	ldr	r3, [pc, #920]	; (8002db8 <main+0x1310>)
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f7fe ffcc 	bl	80019c0 <__aeabi_i2d>
 8002a28:	2200      	movs	r2, #0
 8002a2a:	4be4      	ldr	r3, [pc, #912]	; (8002dbc <main+0x1314>)
 8002a2c:	f7fe f994 	bl	8000d58 <__aeabi_dmul>
 8002a30:	0002      	movs	r2, r0
 8002a32:	000b      	movs	r3, r1
 8002a34:	0020      	movs	r0, r4
 8002a36:	0029      	movs	r1, r5
 8002a38:	f7fd fd46 	bl	80004c8 <__aeabi_dadd>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	000b      	movs	r3, r1
 8002a40:	0010      	movs	r0, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	f7fd fd22 	bl	800048c <__aeabi_d2uiz>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	4bda      	ldr	r3, [pc, #872]	; (8002db8 <main+0x1310>)
 8002a4e:	801a      	strh	r2, [r3, #0]
		  					spk_f = 0.25*peak_f + 0.75*spk_f;
 8002a50:	4bd7      	ldr	r3, [pc, #860]	; (8002db0 <main+0x1308>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f7fe ffb3 	bl	80019c0 <__aeabi_i2d>
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	4bd5      	ldr	r3, [pc, #852]	; (8002db4 <main+0x130c>)
 8002a5e:	f7fe f97b 	bl	8000d58 <__aeabi_dmul>
 8002a62:	0002      	movs	r2, r0
 8002a64:	000b      	movs	r3, r1
 8002a66:	0014      	movs	r4, r2
 8002a68:	001d      	movs	r5, r3
 8002a6a:	4bd5      	ldr	r3, [pc, #852]	; (8002dc0 <main+0x1318>)
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7fe ffa6 	bl	80019c0 <__aeabi_i2d>
 8002a74:	2200      	movs	r2, #0
 8002a76:	4bd1      	ldr	r3, [pc, #836]	; (8002dbc <main+0x1314>)
 8002a78:	f7fe f96e 	bl	8000d58 <__aeabi_dmul>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	000b      	movs	r3, r1
 8002a80:	0020      	movs	r0, r4
 8002a82:	0029      	movs	r1, r5
 8002a84:	f7fd fd20 	bl	80004c8 <__aeabi_dadd>
 8002a88:	0002      	movs	r2, r0
 8002a8a:	000b      	movs	r3, r1
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	f7fd fcfc 	bl	800048c <__aeabi_d2uiz>
 8002a94:	0003      	movs	r3, r0
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	4bc9      	ldr	r3, [pc, #804]	; (8002dc0 <main+0x1318>)
 8002a9a:	801a      	strh	r2, [r3, #0]
		  					threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002a9c:	4bc9      	ldr	r3, [pc, #804]	; (8002dc4 <main+0x131c>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7fe ff8d 	bl	80019c0 <__aeabi_i2d>
 8002aa6:	0004      	movs	r4, r0
 8002aa8:	000d      	movs	r5, r1
 8002aaa:	4bc3      	ldr	r3, [pc, #780]	; (8002db8 <main+0x1310>)
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	001a      	movs	r2, r3
 8002ab0:	4bc4      	ldr	r3, [pc, #784]	; (8002dc4 <main+0x131c>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f7fe ff82 	bl	80019c0 <__aeabi_i2d>
 8002abc:	2200      	movs	r2, #0
 8002abe:	4bbd      	ldr	r3, [pc, #756]	; (8002db4 <main+0x130c>)
 8002ac0:	f7fe f94a 	bl	8000d58 <__aeabi_dmul>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	000b      	movs	r3, r1
 8002ac8:	0020      	movs	r0, r4
 8002aca:	0029      	movs	r1, r5
 8002acc:	f7fd fcfc 	bl	80004c8 <__aeabi_dadd>
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	000b      	movs	r3, r1
 8002ad4:	0010      	movs	r0, r2
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	f7fd fcd8 	bl	800048c <__aeabi_d2uiz>
 8002adc:	0003      	movs	r3, r0
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	4bb9      	ldr	r3, [pc, #740]	; (8002dc8 <main+0x1320>)
 8002ae2:	801a      	strh	r2, [r3, #0]
		  					threshold_i2 = 0.5*threshold_i1;
 8002ae4:	4bb8      	ldr	r3, [pc, #736]	; (8002dc8 <main+0x1320>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7fe ff69 	bl	80019c0 <__aeabi_i2d>
 8002aee:	2200      	movs	r2, #0
 8002af0:	4bb6      	ldr	r3, [pc, #728]	; (8002dcc <main+0x1324>)
 8002af2:	f7fe f931 	bl	8000d58 <__aeabi_dmul>
 8002af6:	0002      	movs	r2, r0
 8002af8:	000b      	movs	r3, r1
 8002afa:	0010      	movs	r0, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	f7fd fcc5 	bl	800048c <__aeabi_d2uiz>
 8002b02:	0003      	movs	r3, r0
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	4bb2      	ldr	r3, [pc, #712]	; (8002dd0 <main+0x1328>)
 8002b08:	801a      	strh	r2, [r3, #0]
		  					lastSlope = currentSlope;
 8002b0a:	4bb2      	ldr	r3, [pc, #712]	; (8002dd4 <main+0x132c>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4bb2      	ldr	r3, [pc, #712]	; (8002dd8 <main+0x1330>)
 8002b10:	601a      	str	r2, [r3, #0]
		  					threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002b12:	4bb2      	ldr	r3, [pc, #712]	; (8002ddc <main+0x1334>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7fe ff52 	bl	80019c0 <__aeabi_i2d>
 8002b1c:	0004      	movs	r4, r0
 8002b1e:	000d      	movs	r5, r1
 8002b20:	4ba7      	ldr	r3, [pc, #668]	; (8002dc0 <main+0x1318>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	001a      	movs	r2, r3
 8002b26:	4bad      	ldr	r3, [pc, #692]	; (8002ddc <main+0x1334>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7fe ff47 	bl	80019c0 <__aeabi_i2d>
 8002b32:	2200      	movs	r2, #0
 8002b34:	4b9f      	ldr	r3, [pc, #636]	; (8002db4 <main+0x130c>)
 8002b36:	f7fe f90f 	bl	8000d58 <__aeabi_dmul>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	000b      	movs	r3, r1
 8002b3e:	0020      	movs	r0, r4
 8002b40:	0029      	movs	r1, r5
 8002b42:	f7fd fcc1 	bl	80004c8 <__aeabi_dadd>
 8002b46:	0002      	movs	r2, r0
 8002b48:	000b      	movs	r3, r1
 8002b4a:	0010      	movs	r0, r2
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	f7fd fc9d 	bl	800048c <__aeabi_d2uiz>
 8002b52:	0003      	movs	r3, r0
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	4ba2      	ldr	r3, [pc, #648]	; (8002de0 <main+0x1338>)
 8002b58:	801a      	strh	r2, [r3, #0]
		  					threshold_f2 = 0.5*threshold_f1;
 8002b5a:	4ba1      	ldr	r3, [pc, #644]	; (8002de0 <main+0x1338>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7fe ff2e 	bl	80019c0 <__aeabi_i2d>
 8002b64:	2200      	movs	r2, #0
 8002b66:	4b99      	ldr	r3, [pc, #612]	; (8002dcc <main+0x1324>)
 8002b68:	f7fe f8f6 	bl	8000d58 <__aeabi_dmul>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	000b      	movs	r3, r1
 8002b70:	0010      	movs	r0, r2
 8002b72:	0019      	movs	r1, r3
 8002b74:	f7fd fc8a 	bl	800048c <__aeabi_d2uiz>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	4b99      	ldr	r3, [pc, #612]	; (8002de4 <main+0x133c>)
 8002b7e:	801a      	strh	r2, [r3, #0]
		  					// If a signal peak was detected on the back search, the RR attributes must be updated.
		  					// This is the same thing done when a peak is detected on the first try.
		  					//RR Average 1
		  					rravg1 = 0;
 8002b80:	4b99      	ldr	r3, [pc, #612]	; (8002de8 <main+0x1340>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
		  					for (j = 0; j < 7; j++)
 8002b86:	4b99      	ldr	r3, [pc, #612]	; (8002dec <main+0x1344>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	e019      	b.n	8002bc2 <main+0x111a>
		  					{
		  						rr1[j] = rr1[j+1];
 8002b8e:	4b97      	ldr	r3, [pc, #604]	; (8002dec <main+0x1344>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	1c59      	adds	r1, r3, #1
 8002b94:	4b95      	ldr	r3, [pc, #596]	; (8002dec <main+0x1344>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b95      	ldr	r3, [pc, #596]	; (8002df0 <main+0x1348>)
 8002b9a:	0089      	lsls	r1, r1, #2
 8002b9c:	58c9      	ldr	r1, [r1, r3]
 8002b9e:	4b94      	ldr	r3, [pc, #592]	; (8002df0 <main+0x1348>)
 8002ba0:	0092      	lsls	r2, r2, #2
 8002ba2:	50d1      	str	r1, [r2, r3]
		  						rravg1 += rr1[j];
 8002ba4:	4b91      	ldr	r3, [pc, #580]	; (8002dec <main+0x1344>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b91      	ldr	r3, [pc, #580]	; (8002df0 <main+0x1348>)
 8002baa:	0092      	lsls	r2, r2, #2
 8002bac:	58d2      	ldr	r2, [r2, r3]
 8002bae:	4b8e      	ldr	r3, [pc, #568]	; (8002de8 <main+0x1340>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	18d2      	adds	r2, r2, r3
 8002bb4:	4b8c      	ldr	r3, [pc, #560]	; (8002de8 <main+0x1340>)
 8002bb6:	601a      	str	r2, [r3, #0]
		  					for (j = 0; j < 7; j++)
 8002bb8:	4b8c      	ldr	r3, [pc, #560]	; (8002dec <main+0x1344>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	4b8b      	ldr	r3, [pc, #556]	; (8002dec <main+0x1344>)
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	4b8a      	ldr	r3, [pc, #552]	; (8002dec <main+0x1344>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d9e1      	bls.n	8002b8e <main+0x10e6>
		  					}
		  					rr1[7] = sample - (current - i) - lastQRS;
 8002bca:	4b75      	ldr	r3, [pc, #468]	; (8002da0 <main+0x12f8>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b89      	ldr	r3, [pc, #548]	; (8002df4 <main+0x134c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	1ad2      	subs	r2, r2, r3
 8002bd4:	4b88      	ldr	r3, [pc, #544]	; (8002df8 <main+0x1350>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	18d2      	adds	r2, r2, r3
 8002bda:	4b88      	ldr	r3, [pc, #544]	; (8002dfc <main+0x1354>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	001a      	movs	r2, r3
 8002be2:	4b83      	ldr	r3, [pc, #524]	; (8002df0 <main+0x1348>)
 8002be4:	61da      	str	r2, [r3, #28]
		  					qrs = true;
 8002be6:	4b86      	ldr	r3, [pc, #536]	; (8002e00 <main+0x1358>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
		  					lastQRS = sample - (current - i);
 8002bec:	4b6c      	ldr	r3, [pc, #432]	; (8002da0 <main+0x12f8>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b80      	ldr	r3, [pc, #512]	; (8002df4 <main+0x134c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	1ad2      	subs	r2, r2, r3
 8002bf6:	4b80      	ldr	r3, [pc, #512]	; (8002df8 <main+0x1350>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	18d2      	adds	r2, r2, r3
 8002bfc:	4b7f      	ldr	r3, [pc, #508]	; (8002dfc <main+0x1354>)
 8002bfe:	601a      	str	r2, [r3, #0]
		  					rravg1 += rr1[7];
 8002c00:	4b7b      	ldr	r3, [pc, #492]	; (8002df0 <main+0x1348>)
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	4b78      	ldr	r3, [pc, #480]	; (8002de8 <main+0x1340>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	18d2      	adds	r2, r2, r3
 8002c0a:	4b77      	ldr	r3, [pc, #476]	; (8002de8 <main+0x1340>)
 8002c0c:	601a      	str	r2, [r3, #0]
		  					rravg1 *= 0.125;
 8002c0e:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <main+0x1340>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7fe fed4 	bl	80019c0 <__aeabi_i2d>
 8002c18:	2200      	movs	r2, #0
 8002c1a:	23ff      	movs	r3, #255	; 0xff
 8002c1c:	059b      	lsls	r3, r3, #22
 8002c1e:	f7fe f89b 	bl	8000d58 <__aeabi_dmul>
 8002c22:	0002      	movs	r2, r0
 8002c24:	000b      	movs	r3, r1
 8002c26:	0010      	movs	r0, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	f7fe fe93 	bl	8001954 <__aeabi_d2iz>
 8002c2e:	0002      	movs	r2, r0
 8002c30:	4b6d      	ldr	r3, [pc, #436]	; (8002de8 <main+0x1340>)
 8002c32:	601a      	str	r2, [r3, #0]

		  					//RR Average 2
		  					if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 8002c34:	4b6e      	ldr	r3, [pc, #440]	; (8002df0 <main+0x1348>)
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	4b72      	ldr	r3, [pc, #456]	; (8002e04 <main+0x135c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	da00      	bge.n	8002c42 <main+0x119a>
 8002c40:	e07e      	b.n	8002d40 <main+0x1298>
 8002c42:	4b6b      	ldr	r3, [pc, #428]	; (8002df0 <main+0x1348>)
 8002c44:	69da      	ldr	r2, [r3, #28]
 8002c46:	4b70      	ldr	r3, [pc, #448]	; (8002e08 <main+0x1360>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	dc78      	bgt.n	8002d40 <main+0x1298>
		  					{
		  						rravg2 = 0;
 8002c4e:	4b6f      	ldr	r3, [pc, #444]	; (8002e0c <main+0x1364>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
		  						for (i = 0; i < 7; i++)
 8002c54:	4b52      	ldr	r3, [pc, #328]	; (8002da0 <main+0x12f8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	e019      	b.n	8002c90 <main+0x11e8>
		  						{
		  							rr2[i] = rr2[i+1];
 8002c5c:	4b50      	ldr	r3, [pc, #320]	; (8002da0 <main+0x12f8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	1c59      	adds	r1, r3, #1
 8002c62:	4b4f      	ldr	r3, [pc, #316]	; (8002da0 <main+0x12f8>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b6a      	ldr	r3, [pc, #424]	; (8002e10 <main+0x1368>)
 8002c68:	0089      	lsls	r1, r1, #2
 8002c6a:	58c9      	ldr	r1, [r1, r3]
 8002c6c:	4b68      	ldr	r3, [pc, #416]	; (8002e10 <main+0x1368>)
 8002c6e:	0092      	lsls	r2, r2, #2
 8002c70:	50d1      	str	r1, [r2, r3]
		  							rravg2 += rr2[i];
 8002c72:	4b4b      	ldr	r3, [pc, #300]	; (8002da0 <main+0x12f8>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4b66      	ldr	r3, [pc, #408]	; (8002e10 <main+0x1368>)
 8002c78:	0092      	lsls	r2, r2, #2
 8002c7a:	58d2      	ldr	r2, [r2, r3]
 8002c7c:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <main+0x1364>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	18d2      	adds	r2, r2, r3
 8002c82:	4b62      	ldr	r3, [pc, #392]	; (8002e0c <main+0x1364>)
 8002c84:	601a      	str	r2, [r3, #0]
		  						for (i = 0; i < 7; i++)
 8002c86:	4b46      	ldr	r3, [pc, #280]	; (8002da0 <main+0x12f8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	4b44      	ldr	r3, [pc, #272]	; (8002da0 <main+0x12f8>)
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	4b43      	ldr	r3, [pc, #268]	; (8002da0 <main+0x12f8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d9e1      	bls.n	8002c5c <main+0x11b4>
		  						}
		  						rr2[7] = rr1[7];
 8002c98:	4b55      	ldr	r3, [pc, #340]	; (8002df0 <main+0x1348>)
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	4b5c      	ldr	r3, [pc, #368]	; (8002e10 <main+0x1368>)
 8002c9e:	61da      	str	r2, [r3, #28]
		  						rravg2 += rr2[7];
 8002ca0:	4b5b      	ldr	r3, [pc, #364]	; (8002e10 <main+0x1368>)
 8002ca2:	69da      	ldr	r2, [r3, #28]
 8002ca4:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <main+0x1364>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	18d2      	adds	r2, r2, r3
 8002caa:	4b58      	ldr	r3, [pc, #352]	; (8002e0c <main+0x1364>)
 8002cac:	601a      	str	r2, [r3, #0]
		  						rravg2 *= 0.125;
 8002cae:	4b57      	ldr	r3, [pc, #348]	; (8002e0c <main+0x1364>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f7fe fe84 	bl	80019c0 <__aeabi_i2d>
 8002cb8:	2200      	movs	r2, #0
 8002cba:	23ff      	movs	r3, #255	; 0xff
 8002cbc:	059b      	lsls	r3, r3, #22
 8002cbe:	f7fe f84b 	bl	8000d58 <__aeabi_dmul>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	000b      	movs	r3, r1
 8002cc6:	0010      	movs	r0, r2
 8002cc8:	0019      	movs	r1, r3
 8002cca:	f7fe fe43 	bl	8001954 <__aeabi_d2iz>
 8002cce:	0002      	movs	r2, r0
 8002cd0:	4b4e      	ldr	r3, [pc, #312]	; (8002e0c <main+0x1364>)
 8002cd2:	601a      	str	r2, [r3, #0]
		  						rrlow = 0.92*rravg2;
 8002cd4:	4b4d      	ldr	r3, [pc, #308]	; (8002e0c <main+0x1364>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7fe fe71 	bl	80019c0 <__aeabi_i2d>
 8002cde:	4a4d      	ldr	r2, [pc, #308]	; (8002e14 <main+0x136c>)
 8002ce0:	4b4d      	ldr	r3, [pc, #308]	; (8002e18 <main+0x1370>)
 8002ce2:	f7fe f839 	bl	8000d58 <__aeabi_dmul>
 8002ce6:	0002      	movs	r2, r0
 8002ce8:	000b      	movs	r3, r1
 8002cea:	0010      	movs	r0, r2
 8002cec:	0019      	movs	r1, r3
 8002cee:	f7fe fe31 	bl	8001954 <__aeabi_d2iz>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <main+0x135c>)
 8002cf6:	601a      	str	r2, [r3, #0]
		  						rrhigh = 1.16*rravg2;
 8002cf8:	4b44      	ldr	r3, [pc, #272]	; (8002e0c <main+0x1364>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7fe fe5f 	bl	80019c0 <__aeabi_i2d>
 8002d02:	4a46      	ldr	r2, [pc, #280]	; (8002e1c <main+0x1374>)
 8002d04:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <main+0x1378>)
 8002d06:	f7fe f827 	bl	8000d58 <__aeabi_dmul>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	000b      	movs	r3, r1
 8002d0e:	0010      	movs	r0, r2
 8002d10:	0019      	movs	r1, r3
 8002d12:	f7fe fe1f 	bl	8001954 <__aeabi_d2iz>
 8002d16:	0002      	movs	r2, r0
 8002d18:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <main+0x1360>)
 8002d1a:	601a      	str	r2, [r3, #0]
		  						rrmiss = 1.66*rravg2;
 8002d1c:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <main+0x1364>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f7fe fe4d 	bl	80019c0 <__aeabi_i2d>
 8002d26:	4a3d      	ldr	r2, [pc, #244]	; (8002e1c <main+0x1374>)
 8002d28:	4b3e      	ldr	r3, [pc, #248]	; (8002e24 <main+0x137c>)
 8002d2a:	f7fe f815 	bl	8000d58 <__aeabi_dmul>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	000b      	movs	r3, r1
 8002d32:	0010      	movs	r0, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	f7fe fe0d 	bl	8001954 <__aeabi_d2iz>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	4b3a      	ldr	r3, [pc, #232]	; (8002e28 <main+0x1380>)
 8002d3e:	601a      	str	r2, [r3, #0]
		  					}

		  					prevRegular = regular;
 8002d40:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <main+0x1384>)
 8002d42:	781a      	ldrb	r2, [r3, #0]
 8002d44:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <main+0x1388>)
 8002d46:	701a      	strb	r2, [r3, #0]
		  					if (rravg1 == rravg2)
 8002d48:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <main+0x1340>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <main+0x1364>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d103      	bne.n	8002d5c <main+0x12b4>
		  					{
		  						regular = true;
 8002d54:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <main+0x1384>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
		  							threshold_i1 /= 2;
		  							threshold_f1 /= 2;
		  						}
		  					}

		  					break;
 8002d5a:	e06b      	b.n	8002e34 <main+0x138c>
		  						regular = false;
 8002d5c:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <main+0x1384>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
		  						if (prevRegular)
 8002d62:	4b33      	ldr	r3, [pc, #204]	; (8002e30 <main+0x1388>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d064      	beq.n	8002e34 <main+0x138c>
		  							threshold_i1 /= 2;
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <main+0x1320>)
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <main+0x1320>)
 8002d74:	801a      	strh	r2, [r3, #0]
		  							threshold_f1 /= 2;
 8002d76:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <main+0x1338>)
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <main+0x1338>)
 8002d80:	801a      	strh	r2, [r3, #0]
		  					break;
 8002d82:	e057      	b.n	8002e34 <main+0x138c>
		  		for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <main+0x12f8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <main+0x12f8>)
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <main+0x12f8>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <main+0x134c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d200      	bcs.n	8002d9c <main+0x12f4>
 8002d9a:	e577      	b.n	800288c <main+0xde4>
 8002d9c:	e04b      	b.n	8002e36 <main+0x138e>
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	200027ac 	.word	0x200027ac
 8002da4:	20001df8 	.word	0x20001df8
 8002da8:	200027c8 	.word	0x200027c8
 8002dac:	20000fe8 	.word	0x20000fe8
 8002db0:	200027ca 	.word	0x200027ca
 8002db4:	3fd00000 	.word	0x3fd00000
 8002db8:	200027d4 	.word	0x200027d4
 8002dbc:	3fe80000 	.word	0x3fe80000
 8002dc0:	200027d6 	.word	0x200027d6
 8002dc4:	200027d8 	.word	0x200027d8
 8002dc8:	200027cc 	.word	0x200027cc
 8002dcc:	3fe00000 	.word	0x3fe00000
 8002dd0:	200027ce 	.word	0x200027ce
 8002dd4:	200027c0 	.word	0x200027c0
 8002dd8:	200027bc 	.word	0x200027bc
 8002ddc:	200027da 	.word	0x200027da
 8002de0:	200027d0 	.word	0x200027d0
 8002de4:	200027d2 	.word	0x200027d2
 8002de8:	20002798 	.word	0x20002798
 8002dec:	200027b0 	.word	0x200027b0
 8002df0:	20002758 	.word	0x20002758
 8002df4:	200027c4 	.word	0x200027c4
 8002df8:	200027b4 	.word	0x200027b4
 8002dfc:	200027b8 	.word	0x200027b8
 8002e00:	200027dc 	.word	0x200027dc
 8002e04:	200027a0 	.word	0x200027a0
 8002e08:	200027a4 	.word	0x200027a4
 8002e0c:	2000279c 	.word	0x2000279c
 8002e10:	20002778 	.word	0x20002778
 8002e14:	d70a3d71 	.word	0xd70a3d71
 8002e18:	3fed70a3 	.word	0x3fed70a3
 8002e1c:	28f5c28f 	.word	0x28f5c28f
 8002e20:	3ff28f5c 	.word	0x3ff28f5c
 8002e24:	3ffa8f5c 	.word	0x3ffa8f5c
 8002e28:	200027a8 	.word	0x200027a8
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	200027dd 	.word	0x200027dd
		  					break;
 8002e34:	46c0      	nop			; (mov r8, r8)
		  				}
		  			}
		  		}

		  		if (qrs)
 8002e36:	4b8d      	ldr	r3, [pc, #564]	; (800306c <main+0x15c4>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d017      	beq.n	8002e6e <main+0x13c6>
		  		{
		  			outputSignal[current] = false;
 8002e3e:	4b8c      	ldr	r3, [pc, #560]	; (8003070 <main+0x15c8>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b8c      	ldr	r3, [pc, #560]	; (8003074 <main+0x15cc>)
 8002e44:	0052      	lsls	r2, r2, #1
 8002e46:	2100      	movs	r1, #0
 8002e48:	52d1      	strh	r1, [r2, r3]
		  			outputSignal[i] = true;
 8002e4a:	4b8b      	ldr	r3, [pc, #556]	; (8003078 <main+0x15d0>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4b89      	ldr	r3, [pc, #548]	; (8003074 <main+0x15cc>)
 8002e50:	0052      	lsls	r2, r2, #1
 8002e52:	2101      	movs	r1, #1
 8002e54:	52d1      	strh	r1, [r2, r3]
		  			if (sample > DELAY + BUFFSIZE)
 8002e56:	4b89      	ldr	r3, [pc, #548]	; (800307c <main+0x15d4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a89      	ldr	r2, [pc, #548]	; (8003080 <main+0x15d8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d800      	bhi.n	8002e62 <main+0x13ba>
 8002e60:	e100      	b.n	8003064 <main+0x15bc>
		  				output(outputSignal[0]);
 8002e62:	4b84      	ldr	r3, [pc, #528]	; (8003074 <main+0x15cc>)
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 fb26 	bl	80034b8 <output>
		  			continue;
 8002e6c:	e0fa      	b.n	8003064 <main+0x15bc>
		  		}
		  	}

		  	// Definitely no signal peak was detected.
		  	if (!qrs)
 8002e6e:	4b7f      	ldr	r3, [pc, #508]	; (800306c <main+0x15c4>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d000      	beq.n	8002e78 <main+0x13d0>
 8002e76:	e0dc      	b.n	8003032 <main+0x158a>
		  	{
		  		// If some kind of peak had been detected, then it's certainly a noise peak. Thresholds must be updated accordingly.
		  		if ((integral[current] >= threshold_i1) || (highpass[current] >= threshold_f1))
 8002e78:	4b7d      	ldr	r3, [pc, #500]	; (8003070 <main+0x15c8>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b81      	ldr	r3, [pc, #516]	; (8003084 <main+0x15dc>)
 8002e7e:	0052      	lsls	r2, r2, #1
 8002e80:	5ad2      	ldrh	r2, [r2, r3]
 8002e82:	4b81      	ldr	r3, [pc, #516]	; (8003088 <main+0x15e0>)
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d209      	bcs.n	8002e9e <main+0x13f6>
 8002e8a:	4b79      	ldr	r3, [pc, #484]	; (8003070 <main+0x15c8>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b7f      	ldr	r3, [pc, #508]	; (800308c <main+0x15e4>)
 8002e90:	0052      	lsls	r2, r2, #1
 8002e92:	5ad2      	ldrh	r2, [r2, r3]
 8002e94:	4b7e      	ldr	r3, [pc, #504]	; (8003090 <main+0x15e8>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d200      	bcs.n	8002e9e <main+0x13f6>
 8002e9c:	e0c9      	b.n	8003032 <main+0x158a>
		  		{
		  			peak_i = integral[current];
 8002e9e:	4b74      	ldr	r3, [pc, #464]	; (8003070 <main+0x15c8>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b78      	ldr	r3, [pc, #480]	; (8003084 <main+0x15dc>)
 8002ea4:	0052      	lsls	r2, r2, #1
 8002ea6:	5ad2      	ldrh	r2, [r2, r3]
 8002ea8:	4b7a      	ldr	r3, [pc, #488]	; (8003094 <main+0x15ec>)
 8002eaa:	801a      	strh	r2, [r3, #0]
		  			npk_i = 0.125*peak_i + 0.875*npk_i;
 8002eac:	4b79      	ldr	r3, [pc, #484]	; (8003094 <main+0x15ec>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7fe fd85 	bl	80019c0 <__aeabi_i2d>
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	23ff      	movs	r3, #255	; 0xff
 8002eba:	059b      	lsls	r3, r3, #22
 8002ebc:	f7fd ff4c 	bl	8000d58 <__aeabi_dmul>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	000b      	movs	r3, r1
 8002ec4:	0014      	movs	r4, r2
 8002ec6:	001d      	movs	r5, r3
 8002ec8:	4b73      	ldr	r3, [pc, #460]	; (8003098 <main+0x15f0>)
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7fe fd77 	bl	80019c0 <__aeabi_i2d>
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4b71      	ldr	r3, [pc, #452]	; (800309c <main+0x15f4>)
 8002ed6:	f7fd ff3f 	bl	8000d58 <__aeabi_dmul>
 8002eda:	0002      	movs	r2, r0
 8002edc:	000b      	movs	r3, r1
 8002ede:	0020      	movs	r0, r4
 8002ee0:	0029      	movs	r1, r5
 8002ee2:	f7fd faf1 	bl	80004c8 <__aeabi_dadd>
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	000b      	movs	r3, r1
 8002eea:	0010      	movs	r0, r2
 8002eec:	0019      	movs	r1, r3
 8002eee:	f7fd facd 	bl	800048c <__aeabi_d2uiz>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	4b68      	ldr	r3, [pc, #416]	; (8003098 <main+0x15f0>)
 8002ef8:	801a      	strh	r2, [r3, #0]
		  			threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002efa:	4b67      	ldr	r3, [pc, #412]	; (8003098 <main+0x15f0>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7fe fd5e 	bl	80019c0 <__aeabi_i2d>
 8002f04:	0004      	movs	r4, r0
 8002f06:	000d      	movs	r5, r1
 8002f08:	4b65      	ldr	r3, [pc, #404]	; (80030a0 <main+0x15f8>)
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	001a      	movs	r2, r3
 8002f0e:	4b62      	ldr	r3, [pc, #392]	; (8003098 <main+0x15f0>)
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7fe fd53 	bl	80019c0 <__aeabi_i2d>
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	4b61      	ldr	r3, [pc, #388]	; (80030a4 <main+0x15fc>)
 8002f1e:	f7fd ff1b 	bl	8000d58 <__aeabi_dmul>
 8002f22:	0002      	movs	r2, r0
 8002f24:	000b      	movs	r3, r1
 8002f26:	0020      	movs	r0, r4
 8002f28:	0029      	movs	r1, r5
 8002f2a:	f7fd facd 	bl	80004c8 <__aeabi_dadd>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	000b      	movs	r3, r1
 8002f32:	0010      	movs	r0, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	f7fd faa9 	bl	800048c <__aeabi_d2uiz>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	4b52      	ldr	r3, [pc, #328]	; (8003088 <main+0x15e0>)
 8002f40:	801a      	strh	r2, [r3, #0]
		  			threshold_i2 = 0.5*threshold_i1;
 8002f42:	4b51      	ldr	r3, [pc, #324]	; (8003088 <main+0x15e0>)
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f7fe fd3a 	bl	80019c0 <__aeabi_i2d>
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	4b56      	ldr	r3, [pc, #344]	; (80030a8 <main+0x1600>)
 8002f50:	f7fd ff02 	bl	8000d58 <__aeabi_dmul>
 8002f54:	0002      	movs	r2, r0
 8002f56:	000b      	movs	r3, r1
 8002f58:	0010      	movs	r0, r2
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	f7fd fa96 	bl	800048c <__aeabi_d2uiz>
 8002f60:	0003      	movs	r3, r0
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b51      	ldr	r3, [pc, #324]	; (80030ac <main+0x1604>)
 8002f66:	801a      	strh	r2, [r3, #0]
		  			peak_f = highpass[current];
 8002f68:	4b41      	ldr	r3, [pc, #260]	; (8003070 <main+0x15c8>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b47      	ldr	r3, [pc, #284]	; (800308c <main+0x15e4>)
 8002f6e:	0052      	lsls	r2, r2, #1
 8002f70:	5ad2      	ldrh	r2, [r2, r3]
 8002f72:	4b4f      	ldr	r3, [pc, #316]	; (80030b0 <main+0x1608>)
 8002f74:	801a      	strh	r2, [r3, #0]
		  			npk_f = 0.125*peak_f + 0.875*npk_f;
 8002f76:	4b4e      	ldr	r3, [pc, #312]	; (80030b0 <main+0x1608>)
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f7fe fd20 	bl	80019c0 <__aeabi_i2d>
 8002f80:	2200      	movs	r2, #0
 8002f82:	23ff      	movs	r3, #255	; 0xff
 8002f84:	059b      	lsls	r3, r3, #22
 8002f86:	f7fd fee7 	bl	8000d58 <__aeabi_dmul>
 8002f8a:	0002      	movs	r2, r0
 8002f8c:	000b      	movs	r3, r1
 8002f8e:	0014      	movs	r4, r2
 8002f90:	001d      	movs	r5, r3
 8002f92:	4b48      	ldr	r3, [pc, #288]	; (80030b4 <main+0x160c>)
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7fe fd12 	bl	80019c0 <__aeabi_i2d>
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4b3f      	ldr	r3, [pc, #252]	; (800309c <main+0x15f4>)
 8002fa0:	f7fd feda 	bl	8000d58 <__aeabi_dmul>
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	000b      	movs	r3, r1
 8002fa8:	0020      	movs	r0, r4
 8002faa:	0029      	movs	r1, r5
 8002fac:	f7fd fa8c 	bl	80004c8 <__aeabi_dadd>
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	000b      	movs	r3, r1
 8002fb4:	0010      	movs	r0, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	f7fd fa68 	bl	800048c <__aeabi_d2uiz>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	4b3c      	ldr	r3, [pc, #240]	; (80030b4 <main+0x160c>)
 8002fc2:	801a      	strh	r2, [r3, #0]
		  			threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002fc4:	4b3b      	ldr	r3, [pc, #236]	; (80030b4 <main+0x160c>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fe fcf9 	bl	80019c0 <__aeabi_i2d>
 8002fce:	0004      	movs	r4, r0
 8002fd0:	000d      	movs	r5, r1
 8002fd2:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <main+0x1610>)
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	001a      	movs	r2, r3
 8002fd8:	4b36      	ldr	r3, [pc, #216]	; (80030b4 <main+0x160c>)
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7fe fcee 	bl	80019c0 <__aeabi_i2d>
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <main+0x15fc>)
 8002fe8:	f7fd feb6 	bl	8000d58 <__aeabi_dmul>
 8002fec:	0002      	movs	r2, r0
 8002fee:	000b      	movs	r3, r1
 8002ff0:	0020      	movs	r0, r4
 8002ff2:	0029      	movs	r1, r5
 8002ff4:	f7fd fa68 	bl	80004c8 <__aeabi_dadd>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	000b      	movs	r3, r1
 8002ffc:	0010      	movs	r0, r2
 8002ffe:	0019      	movs	r1, r3
 8003000:	f7fd fa44 	bl	800048c <__aeabi_d2uiz>
 8003004:	0003      	movs	r3, r0
 8003006:	b29a      	uxth	r2, r3
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <main+0x15e8>)
 800300a:	801a      	strh	r2, [r3, #0]
		  			threshold_f2 = 0.5*threshold_f1;
 800300c:	4b20      	ldr	r3, [pc, #128]	; (8003090 <main+0x15e8>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	0018      	movs	r0, r3
 8003012:	f7fe fcd5 	bl	80019c0 <__aeabi_i2d>
 8003016:	2200      	movs	r2, #0
 8003018:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <main+0x1600>)
 800301a:	f7fd fe9d 	bl	8000d58 <__aeabi_dmul>
 800301e:	0002      	movs	r2, r0
 8003020:	000b      	movs	r3, r1
 8003022:	0010      	movs	r0, r2
 8003024:	0019      	movs	r1, r3
 8003026:	f7fd fa31 	bl	800048c <__aeabi_d2uiz>
 800302a:	0003      	movs	r3, r0
 800302c:	b29a      	uxth	r2, r3
 800302e:	4b23      	ldr	r3, [pc, #140]	; (80030bc <main+0x1614>)
 8003030:	801a      	strh	r2, [r3, #0]
		  // the desired application.
		  // The 'if' accounts for the delay introduced by the filters: we only start outputting after the delay.
		  // However, it updates a few samples back from the buffer. The reason is that if we update the detection
		  // for the current sample, we might miss a peak that could've been found later by backsearching using
		  // lighter thresholds. The final waveform output does match the original signal, though.
		  outputSignal[current] = qrs;
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <main+0x15c4>)
 8003034:	7819      	ldrb	r1, [r3, #0]
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <main+0x15c8>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	b289      	uxth	r1, r1
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <main+0x15cc>)
 800303e:	0052      	lsls	r2, r2, #1
 8003040:	52d1      	strh	r1, [r2, r3]
		  if (sample > DELAY + BUFFSIZE)
 8003042:	4b0e      	ldr	r3, [pc, #56]	; (800307c <main+0x15d4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a0e      	ldr	r2, [pc, #56]	; (8003080 <main+0x15d8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d801      	bhi.n	8003050 <main+0x15a8>
 800304c:	f7fe fd56 	bl	8001afc <main+0x54>
		  	output(outputSignal[0]);
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <main+0x15cc>)
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	0018      	movs	r0, r3
 8003056:	f000 fa2f 	bl	80034b8 <output>
 800305a:	f7fe fd4f 	bl	8001afc <main+0x54>
		  		continue;
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	f7fe fd4c 	bl	8001afc <main+0x54>
		  			continue;
 8003064:	46c0      	nop			; (mov r8, r8)
	  if (loop_triggered()) {
 8003066:	f7fe fd49 	bl	8001afc <main+0x54>
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	200027dc 	.word	0x200027dc
 8003070:	200027c4 	.word	0x200027c4
 8003074:	200022a8 	.word	0x200022a8
 8003078:	200027ac 	.word	0x200027ac
 800307c:	200027b4 	.word	0x200027b4
 8003080:	0000026e 	.word	0x0000026e
 8003084:	20001df8 	.word	0x20001df8
 8003088:	200027cc 	.word	0x200027cc
 800308c:	20000fe8 	.word	0x20000fe8
 8003090:	200027d0 	.word	0x200027d0
 8003094:	200027c8 	.word	0x200027c8
 8003098:	200027d8 	.word	0x200027d8
 800309c:	3fec0000 	.word	0x3fec0000
 80030a0:	200027d4 	.word	0x200027d4
 80030a4:	3fd00000 	.word	0x3fd00000
 80030a8:	3fe00000 	.word	0x3fe00000
 80030ac:	200027ce 	.word	0x200027ce
 80030b0:	200027ca 	.word	0x200027ca
 80030b4:	200027da 	.word	0x200027da
 80030b8:	200027d6 	.word	0x200027d6
 80030bc:	200027d2 	.word	0x200027d2

080030c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b093      	sub	sp, #76	; 0x4c
 80030c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030c6:	2414      	movs	r4, #20
 80030c8:	193b      	adds	r3, r7, r4
 80030ca:	0018      	movs	r0, r3
 80030cc:	2334      	movs	r3, #52	; 0x34
 80030ce:	001a      	movs	r2, r3
 80030d0:	2100      	movs	r1, #0
 80030d2:	f003 fc9f 	bl	8006a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	0018      	movs	r0, r3
 80030da:	2310      	movs	r3, #16
 80030dc:	001a      	movs	r2, r3
 80030de:	2100      	movs	r1, #0
 80030e0:	f003 fc98 	bl	8006a14 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	0018      	movs	r0, r3
 80030ea:	f001 fdbf 	bl	8004c6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030ee:	193b      	adds	r3, r7, r4
 80030f0:	2202      	movs	r2, #2
 80030f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030f4:	193b      	adds	r3, r7, r4
 80030f6:	2280      	movs	r2, #128	; 0x80
 80030f8:	0052      	lsls	r2, r2, #1
 80030fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80030fc:	193b      	adds	r3, r7, r4
 80030fe:	2200      	movs	r2, #0
 8003100:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003102:	193b      	adds	r3, r7, r4
 8003104:	2240      	movs	r2, #64	; 0x40
 8003106:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003108:	193b      	adds	r3, r7, r4
 800310a:	2200      	movs	r2, #0
 800310c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800310e:	193b      	adds	r3, r7, r4
 8003110:	0018      	movs	r0, r3
 8003112:	f001 fdf7 	bl	8004d04 <HAL_RCC_OscConfig>
 8003116:	1e03      	subs	r3, r0, #0
 8003118:	d001      	beq.n	800311e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800311a:	f000 f9ef 	bl	80034fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	2207      	movs	r2, #7
 8003122:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	2200      	movs	r2, #0
 8003128:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	2200      	movs	r2, #0
 800312e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	2200      	movs	r2, #0
 8003134:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	2100      	movs	r1, #0
 800313a:	0018      	movs	r0, r3
 800313c:	f002 f8f2 	bl	8005324 <HAL_RCC_ClockConfig>
 8003140:	1e03      	subs	r3, r0, #0
 8003142:	d001      	beq.n	8003148 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003144:	f000 f9da 	bl	80034fc <Error_Handler>
  }
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b013      	add	sp, #76	; 0x4c
 800314e:	bd90      	pop	{r4, r7, pc}

08003150 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	0018      	movs	r0, r3
 800315a:	230c      	movs	r3, #12
 800315c:	001a      	movs	r2, r3
 800315e:	2100      	movs	r1, #0
 8003160:	f003 fc58 	bl	8006a14 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003164:	4b2d      	ldr	r3, [pc, #180]	; (800321c <MX_ADC1_Init+0xcc>)
 8003166:	4a2e      	ldr	r2, [pc, #184]	; (8003220 <MX_ADC1_Init+0xd0>)
 8003168:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800316a:	4b2c      	ldr	r3, [pc, #176]	; (800321c <MX_ADC1_Init+0xcc>)
 800316c:	2280      	movs	r2, #128	; 0x80
 800316e:	05d2      	lsls	r2, r2, #23
 8003170:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003172:	4b2a      	ldr	r3, [pc, #168]	; (800321c <MX_ADC1_Init+0xcc>)
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003178:	4b28      	ldr	r3, [pc, #160]	; (800321c <MX_ADC1_Init+0xcc>)
 800317a:	2200      	movs	r2, #0
 800317c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800317e:	4b27      	ldr	r3, [pc, #156]	; (800321c <MX_ADC1_Init+0xcc>)
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003184:	4b25      	ldr	r3, [pc, #148]	; (800321c <MX_ADC1_Init+0xcc>)
 8003186:	2204      	movs	r2, #4
 8003188:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <MX_ADC1_Init+0xcc>)
 800318c:	2200      	movs	r2, #0
 800318e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003190:	4b22      	ldr	r3, [pc, #136]	; (800321c <MX_ADC1_Init+0xcc>)
 8003192:	2200      	movs	r2, #0
 8003194:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003196:	4b21      	ldr	r3, [pc, #132]	; (800321c <MX_ADC1_Init+0xcc>)
 8003198:	2200      	movs	r2, #0
 800319a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800319c:	4b1f      	ldr	r3, [pc, #124]	; (800321c <MX_ADC1_Init+0xcc>)
 800319e:	2201      	movs	r2, #1
 80031a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031a2:	4b1e      	ldr	r3, [pc, #120]	; (800321c <MX_ADC1_Init+0xcc>)
 80031a4:	2220      	movs	r2, #32
 80031a6:	2100      	movs	r1, #0
 80031a8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <MX_ADC1_Init+0xcc>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <MX_ADC1_Init+0xcc>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80031b6:	4b19      	ldr	r3, [pc, #100]	; (800321c <MX_ADC1_Init+0xcc>)
 80031b8:	222c      	movs	r2, #44	; 0x2c
 80031ba:	2100      	movs	r1, #0
 80031bc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <MX_ADC1_Init+0xcc>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80031c4:	4b15      	ldr	r3, [pc, #84]	; (800321c <MX_ADC1_Init+0xcc>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <MX_ADC1_Init+0xcc>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <MX_ADC1_Init+0xcc>)
 80031d2:	223c      	movs	r2, #60	; 0x3c
 80031d4:	2100      	movs	r1, #0
 80031d6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80031d8:	4b10      	ldr	r3, [pc, #64]	; (800321c <MX_ADC1_Init+0xcc>)
 80031da:	2200      	movs	r2, #0
 80031dc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031de:	4b0f      	ldr	r3, [pc, #60]	; (800321c <MX_ADC1_Init+0xcc>)
 80031e0:	0018      	movs	r0, r3
 80031e2:	f000 fcf9 	bl	8003bd8 <HAL_ADC_Init>
 80031e6:	1e03      	subs	r3, r0, #0
 80031e8:	d001      	beq.n	80031ee <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80031ea:	f000 f987 	bl	80034fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	2201      	movs	r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031f4:	1d3b      	adds	r3, r7, #4
 80031f6:	2200      	movs	r2, #0
 80031f8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80031fa:	1d3b      	adds	r3, r7, #4
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003200:	1d3a      	adds	r2, r7, #4
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <MX_ADC1_Init+0xcc>)
 8003204:	0011      	movs	r1, r2
 8003206:	0018      	movs	r0, r3
 8003208:	f000 ffb8 	bl	800417c <HAL_ADC_ConfigChannel>
 800320c:	1e03      	subs	r3, r0, #0
 800320e:	d001      	beq.n	8003214 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8003210:	f000 f974 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	b004      	add	sp, #16
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000090 	.word	0x20000090
 8003220:	40012400 	.word	0x40012400

08003224 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	0018      	movs	r0, r3
 800322e:	230c      	movs	r3, #12
 8003230:	001a      	movs	r2, r3
 8003232:	2100      	movs	r1, #0
 8003234:	f003 fbee 	bl	8006a14 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003238:	4b15      	ldr	r3, [pc, #84]	; (8003290 <MX_TIM6_Init+0x6c>)
 800323a:	4a16      	ldr	r2, [pc, #88]	; (8003294 <MX_TIM6_Init+0x70>)
 800323c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 800323e:	4b14      	ldr	r3, [pc, #80]	; (8003290 <MX_TIM6_Init+0x6c>)
 8003240:	220f      	movs	r2, #15
 8003242:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <MX_TIM6_Init+0x6c>)
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <MX_TIM6_Init+0x6c>)
 800324c:	4a12      	ldr	r2, [pc, #72]	; (8003298 <MX_TIM6_Init+0x74>)
 800324e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <MX_TIM6_Init+0x6c>)
 8003252:	2200      	movs	r2, #0
 8003254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <MX_TIM6_Init+0x6c>)
 8003258:	0018      	movs	r0, r3
 800325a:	f002 fb41 	bl	80058e0 <HAL_TIM_Base_Init>
 800325e:	1e03      	subs	r3, r0, #0
 8003260:	d001      	beq.n	8003266 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003262:	f000 f94b 	bl	80034fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003272:	1d3a      	adds	r2, r7, #4
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <MX_TIM6_Init+0x6c>)
 8003276:	0011      	movs	r1, r2
 8003278:	0018      	movs	r0, r3
 800327a:	f002 fda7 	bl	8005dcc <HAL_TIMEx_MasterConfigSynchronization>
 800327e:	1e03      	subs	r3, r0, #0
 8003280:	d001      	beq.n	8003286 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003282:	f000 f93b 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	46bd      	mov	sp, r7
 800328a:	b004      	add	sp, #16
 800328c:	bd80      	pop	{r7, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	200000f4 	.word	0x200000f4
 8003294:	40001000 	.word	0x40001000
 8003298:	0000ffff 	.word	0x0000ffff

0800329c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032a0:	4b23      	ldr	r3, [pc, #140]	; (8003330 <MX_USART2_UART_Init+0x94>)
 80032a2:	4a24      	ldr	r2, [pc, #144]	; (8003334 <MX_USART2_UART_Init+0x98>)
 80032a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <MX_USART2_UART_Init+0x94>)
 80032a8:	22e1      	movs	r2, #225	; 0xe1
 80032aa:	0252      	lsls	r2, r2, #9
 80032ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <MX_USART2_UART_Init+0x94>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032b4:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <MX_USART2_UART_Init+0x94>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <MX_USART2_UART_Init+0x94>)
 80032bc:	2200      	movs	r2, #0
 80032be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032c0:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <MX_USART2_UART_Init+0x94>)
 80032c2:	220c      	movs	r2, #12
 80032c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <MX_USART2_UART_Init+0x94>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032cc:	4b18      	ldr	r3, [pc, #96]	; (8003330 <MX_USART2_UART_Init+0x94>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <MX_USART2_UART_Init+0x94>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032d8:	4b15      	ldr	r3, [pc, #84]	; (8003330 <MX_USART2_UART_Init+0x94>)
 80032da:	2200      	movs	r2, #0
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <MX_USART2_UART_Init+0x94>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <MX_USART2_UART_Init+0x94>)
 80032e6:	0018      	movs	r0, r3
 80032e8:	f002 fdf0 	bl	8005ecc <HAL_UART_Init>
 80032ec:	1e03      	subs	r3, r0, #0
 80032ee:	d001      	beq.n	80032f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80032f0:	f000 f904 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032f4:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <MX_USART2_UART_Init+0x94>)
 80032f6:	2100      	movs	r1, #0
 80032f8:	0018      	movs	r0, r3
 80032fa:	f003 fa81 	bl	8006800 <HAL_UARTEx_SetTxFifoThreshold>
 80032fe:	1e03      	subs	r3, r0, #0
 8003300:	d001      	beq.n	8003306 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003302:	f000 f8fb 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <MX_USART2_UART_Init+0x94>)
 8003308:	2100      	movs	r1, #0
 800330a:	0018      	movs	r0, r3
 800330c:	f003 fab8 	bl	8006880 <HAL_UARTEx_SetRxFifoThreshold>
 8003310:	1e03      	subs	r3, r0, #0
 8003312:	d001      	beq.n	8003318 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003314:	f000 f8f2 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <MX_USART2_UART_Init+0x94>)
 800331a:	0018      	movs	r0, r3
 800331c:	f003 fa36 	bl	800678c <HAL_UARTEx_DisableFifoMode>
 8003320:	1e03      	subs	r3, r0, #0
 8003322:	d001      	beq.n	8003328 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003324:	f000 f8ea 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003328:	46c0      	nop			; (mov r8, r8)
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	20000140 	.word	0x20000140
 8003334:	40004400 	.word	0x40004400

08003338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b089      	sub	sp, #36	; 0x24
 800333c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333e:	240c      	movs	r4, #12
 8003340:	193b      	adds	r3, r7, r4
 8003342:	0018      	movs	r0, r3
 8003344:	2314      	movs	r3, #20
 8003346:	001a      	movs	r2, r3
 8003348:	2100      	movs	r1, #0
 800334a:	f003 fb63 	bl	8006a14 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800334e:	4b2a      	ldr	r3, [pc, #168]	; (80033f8 <MX_GPIO_Init+0xc0>)
 8003350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003352:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <MX_GPIO_Init+0xc0>)
 8003354:	2104      	movs	r1, #4
 8003356:	430a      	orrs	r2, r1
 8003358:	635a      	str	r2, [r3, #52]	; 0x34
 800335a:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <MX_GPIO_Init+0xc0>)
 800335c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335e:	2204      	movs	r2, #4
 8003360:	4013      	ands	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <MX_GPIO_Init+0xc0>)
 8003368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336a:	4b23      	ldr	r3, [pc, #140]	; (80033f8 <MX_GPIO_Init+0xc0>)
 800336c:	2120      	movs	r1, #32
 800336e:	430a      	orrs	r2, r1
 8003370:	635a      	str	r2, [r3, #52]	; 0x34
 8003372:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <MX_GPIO_Init+0xc0>)
 8003374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003376:	2220      	movs	r2, #32
 8003378:	4013      	ands	r3, r2
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <MX_GPIO_Init+0xc0>)
 8003380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003382:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <MX_GPIO_Init+0xc0>)
 8003384:	2101      	movs	r1, #1
 8003386:	430a      	orrs	r2, r1
 8003388:	635a      	str	r2, [r3, #52]	; 0x34
 800338a:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <MX_GPIO_Init+0xc0>)
 800338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338e:	2201      	movs	r2, #1
 8003390:	4013      	ands	r3, r2
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|DEBUG_Pin, GPIO_PIN_SET);
 8003396:	2384      	movs	r3, #132	; 0x84
 8003398:	00d9      	lsls	r1, r3, #3
 800339a:	23a0      	movs	r3, #160	; 0xa0
 800339c:	05db      	lsls	r3, r3, #23
 800339e:	2201      	movs	r2, #1
 80033a0:	0018      	movs	r0, r3
 80033a2:	f001 fc2b 	bl	8004bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PUSHBUTTON_Pin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 80033a6:	193b      	adds	r3, r7, r4
 80033a8:	2280      	movs	r2, #128	; 0x80
 80033aa:	0192      	lsls	r2, r2, #6
 80033ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ae:	193b      	adds	r3, r7, r4
 80033b0:	2200      	movs	r2, #0
 80033b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	193b      	adds	r3, r7, r4
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 80033ba:	193b      	adds	r3, r7, r4
 80033bc:	4a0f      	ldr	r2, [pc, #60]	; (80033fc <MX_GPIO_Init+0xc4>)
 80033be:	0019      	movs	r1, r3
 80033c0:	0010      	movs	r0, r2
 80033c2:	f001 fab7 	bl	8004934 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DEBUG_Pin;
 80033c6:	0021      	movs	r1, r4
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	2284      	movs	r2, #132	; 0x84
 80033cc:	00d2      	lsls	r2, r2, #3
 80033ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033d0:	187b      	adds	r3, r7, r1
 80033d2:	2201      	movs	r2, #1
 80033d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	187b      	adds	r3, r7, r1
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033dc:	187b      	adds	r3, r7, r1
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e2:	187a      	adds	r2, r7, r1
 80033e4:	23a0      	movs	r3, #160	; 0xa0
 80033e6:	05db      	lsls	r3, r3, #23
 80033e8:	0011      	movs	r1, r2
 80033ea:	0018      	movs	r0, r3
 80033ec:	f001 faa2 	bl	8004934 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b009      	add	sp, #36	; 0x24
 80033f6:	bd90      	pop	{r4, r7, pc}
 80033f8:	40021000 	.word	0x40021000
 80033fc:	50000800 	.word	0x50000800

08003400 <init_loop_counter>:

/* USER CODE BEGIN 4 */

void init_loop_counter(void) {
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0

	// Start the timer being used for the 1 ms counter
	HAL_TIM_Base_Start(MHZ_TIMER);
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <init_loop_counter+0x20>)
 8003406:	0018      	movs	r0, r3
 8003408:	f002 fac2 	bl	8005990 <HAL_TIM_Base_Start>

	// Set the counter
	loop_counter = __HAL_TIM_GET_COUNTER(MHZ_TIMER);
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <init_loop_counter+0x20>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	b29a      	uxth	r2, r3
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <init_loop_counter+0x24>)
 8003416:	801a      	strh	r2, [r3, #0]
}
 8003418:	46c0      	nop			; (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	200000f4 	.word	0x200000f4
 8003424:	200001d4 	.word	0x200001d4

08003428 <loop_triggered>:

bool loop_triggered(void) {
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(MHZ_TIMER) - loop_counter >= (1E6/FS) ? true : false;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <loop_triggered+0x20>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	4a06      	ldr	r2, [pc, #24]	; (800344c <loop_triggered+0x24>)
 8003434:	8812      	ldrh	r2, [r2, #0]
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	4a05      	ldr	r2, [pc, #20]	; (8003450 <loop_triggered+0x28>)
 800343a:	429a      	cmp	r2, r3
 800343c:	419b      	sbcs	r3, r3
 800343e:	425b      	negs	r3, r3
 8003440:	b2db      	uxtb	r3, r3
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	200000f4 	.word	0x200000f4
 800344c:	200001d4 	.word	0x200001d4
 8003450:	00000ad9 	.word	0x00000ad9

08003454 <reset_loop_counter>:

void reset_loop_counter(void) {
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
	loop_counter = __HAL_TIM_GET_COUNTER(MHZ_TIMER);
 8003458:	4b04      	ldr	r3, [pc, #16]	; (800346c <reset_loop_counter+0x18>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	b29a      	uxth	r2, r3
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <reset_loop_counter+0x1c>)
 8003462:	801a      	strh	r2, [r3, #0]
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	200000f4 	.word	0x200000f4
 8003470:	200001d4 	.word	0x200001d4

08003474 <input>:

dataType input(void) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
	dataType data;

	HAL_ADC_Start(ECG_ADC);
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <input+0x40>)
 800347c:	0018      	movs	r0, r3
 800347e:	f000 fd53 	bl	8003f28 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ECG_ADC, HAL_MAX_DELAY);
 8003482:	2301      	movs	r3, #1
 8003484:	425a      	negs	r2, r3
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <input+0x40>)
 8003488:	0011      	movs	r1, r2
 800348a:	0018      	movs	r0, r3
 800348c:	f000 fdd6 	bl	800403c <HAL_ADC_PollForConversion>
	data = (dataType) HAL_ADC_GetValue(ECG_ADC);
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <input+0x40>)
 8003492:	0018      	movs	r0, r3
 8003494:	f000 fe66 	bl	8004164 <HAL_ADC_GetValue>
 8003498:	0002      	movs	r2, r0
 800349a:	1dbb      	adds	r3, r7, #6
 800349c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(ECG_ADC);
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <input+0x40>)
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 fd8f 	bl	8003fc4 <HAL_ADC_Stop>

	return data;
 80034a6:	1dbb      	adds	r3, r7, #6
 80034a8:	881b      	ldrh	r3, [r3, #0]
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b002      	add	sp, #8
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	20000090 	.word	0x20000090

080034b8 <output>:

void output(dataType data) {
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	0002      	movs	r2, r0
 80034c0:	1dbb      	adds	r3, r7, #6
 80034c2:	801a      	strh	r2, [r3, #0]
	char msg[10];

	sprintf(msg, "%hu\r\n", data);
 80034c4:	1dbb      	adds	r3, r7, #6
 80034c6:	881a      	ldrh	r2, [r3, #0]
 80034c8:	490a      	ldr	r1, [pc, #40]	; (80034f4 <output+0x3c>)
 80034ca:	240c      	movs	r4, #12
 80034cc:	193b      	adds	r3, r7, r4
 80034ce:	0018      	movs	r0, r3
 80034d0:	f003 faa8 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(SIG_UART, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80034d4:	193b      	adds	r3, r7, r4
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7fc fe12 	bl	8000100 <strlen>
 80034dc:	0003      	movs	r3, r0
 80034de:	b29a      	uxth	r2, r3
 80034e0:	2301      	movs	r3, #1
 80034e2:	425b      	negs	r3, r3
 80034e4:	1939      	adds	r1, r7, r4
 80034e6:	4804      	ldr	r0, [pc, #16]	; (80034f8 <output+0x40>)
 80034e8:	f002 fd46 	bl	8005f78 <HAL_UART_Transmit>
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b007      	add	sp, #28
 80034f2:	bd90      	pop	{r4, r7, pc}
 80034f4:	08007310 	.word	0x08007310
 80034f8:	20000140 	.word	0x20000140

080034fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003500:	b672      	cpsid	i
}
 8003502:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003504:	e7fe      	b.n	8003504 <Error_Handler+0x8>
	...

08003508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_MspInit+0x44>)
 8003510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <HAL_MspInit+0x44>)
 8003514:	2101      	movs	r1, #1
 8003516:	430a      	orrs	r2, r1
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_MspInit+0x44>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	2201      	movs	r2, #1
 8003520:	4013      	ands	r3, r2
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_MspInit+0x44>)
 8003528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352a:	4b08      	ldr	r3, [pc, #32]	; (800354c <HAL_MspInit+0x44>)
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	0549      	lsls	r1, r1, #21
 8003530:	430a      	orrs	r2, r1
 8003532:	63da      	str	r2, [r3, #60]	; 0x3c
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_MspInit+0x44>)
 8003536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	055b      	lsls	r3, r3, #21
 800353c:	4013      	ands	r3, r2
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	46bd      	mov	sp, r7
 8003546:	b002      	add	sp, #8
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	40021000 	.word	0x40021000

08003550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b08b      	sub	sp, #44	; 0x2c
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003558:	2414      	movs	r4, #20
 800355a:	193b      	adds	r3, r7, r4
 800355c:	0018      	movs	r0, r3
 800355e:	2314      	movs	r3, #20
 8003560:	001a      	movs	r2, r3
 8003562:	2100      	movs	r1, #0
 8003564:	f003 fa56 	bl	8006a14 <memset>
  if(hadc->Instance==ADC1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a18      	ldr	r2, [pc, #96]	; (80035d0 <HAL_ADC_MspInit+0x80>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d129      	bne.n	80035c6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003572:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <HAL_ADC_MspInit+0x84>)
 8003574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003576:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <HAL_ADC_MspInit+0x84>)
 8003578:	2180      	movs	r1, #128	; 0x80
 800357a:	0349      	lsls	r1, r1, #13
 800357c:	430a      	orrs	r2, r1
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
 8003580:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <HAL_ADC_MspInit+0x84>)
 8003582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	035b      	lsls	r3, r3, #13
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358e:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <HAL_ADC_MspInit+0x84>)
 8003590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <HAL_ADC_MspInit+0x84>)
 8003594:	2101      	movs	r1, #1
 8003596:	430a      	orrs	r2, r1
 8003598:	635a      	str	r2, [r3, #52]	; 0x34
 800359a:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <HAL_ADC_MspInit+0x84>)
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359e:	2201      	movs	r2, #1
 80035a0:	4013      	ands	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035a6:	193b      	adds	r3, r7, r4
 80035a8:	2201      	movs	r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ac:	193b      	adds	r3, r7, r4
 80035ae:	2203      	movs	r2, #3
 80035b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b8:	193a      	adds	r2, r7, r4
 80035ba:	23a0      	movs	r3, #160	; 0xa0
 80035bc:	05db      	lsls	r3, r3, #23
 80035be:	0011      	movs	r1, r2
 80035c0:	0018      	movs	r0, r3
 80035c2:	f001 f9b7 	bl	8004934 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b00b      	add	sp, #44	; 0x2c
 80035cc:	bd90      	pop	{r4, r7, pc}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	40012400 	.word	0x40012400
 80035d4:	40021000 	.word	0x40021000

080035d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a0d      	ldr	r2, [pc, #52]	; (800361c <HAL_TIM_Base_MspInit+0x44>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d113      	bne.n	8003612 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <HAL_TIM_Base_MspInit+0x48>)
 80035ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <HAL_TIM_Base_MspInit+0x48>)
 80035f0:	2110      	movs	r1, #16
 80035f2:	430a      	orrs	r2, r1
 80035f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <HAL_TIM_Base_MspInit+0x48>)
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	2210      	movs	r2, #16
 80035fc:	4013      	ands	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003602:	2200      	movs	r2, #0
 8003604:	2100      	movs	r1, #0
 8003606:	2011      	movs	r0, #17
 8003608:	f001 f962 	bl	80048d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800360c:	2011      	movs	r0, #17
 800360e:	f001 f974 	bl	80048fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	46bd      	mov	sp, r7
 8003616:	b004      	add	sp, #16
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	40001000 	.word	0x40001000
 8003620:	40021000 	.word	0x40021000

08003624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b091      	sub	sp, #68	; 0x44
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362c:	232c      	movs	r3, #44	; 0x2c
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	0018      	movs	r0, r3
 8003632:	2314      	movs	r3, #20
 8003634:	001a      	movs	r2, r3
 8003636:	2100      	movs	r1, #0
 8003638:	f003 f9ec 	bl	8006a14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800363c:	2410      	movs	r4, #16
 800363e:	193b      	adds	r3, r7, r4
 8003640:	0018      	movs	r0, r3
 8003642:	231c      	movs	r3, #28
 8003644:	001a      	movs	r2, r3
 8003646:	2100      	movs	r1, #0
 8003648:	f003 f9e4 	bl	8006a14 <memset>
  if(huart->Instance==USART2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a22      	ldr	r2, [pc, #136]	; (80036dc <HAL_UART_MspInit+0xb8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d13e      	bne.n	80036d4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003656:	193b      	adds	r3, r7, r4
 8003658:	2202      	movs	r2, #2
 800365a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800365c:	193b      	adds	r3, r7, r4
 800365e:	2200      	movs	r2, #0
 8003660:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003662:	193b      	adds	r3, r7, r4
 8003664:	0018      	movs	r0, r3
 8003666:	f002 f807 	bl	8005678 <HAL_RCCEx_PeriphCLKConfig>
 800366a:	1e03      	subs	r3, r0, #0
 800366c:	d001      	beq.n	8003672 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800366e:	f7ff ff45 	bl	80034fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003672:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <HAL_UART_MspInit+0xbc>)
 8003674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003676:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_UART_MspInit+0xbc>)
 8003678:	2180      	movs	r1, #128	; 0x80
 800367a:	0289      	lsls	r1, r1, #10
 800367c:	430a      	orrs	r2, r1
 800367e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003680:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <HAL_UART_MspInit+0xbc>)
 8003682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	029b      	lsls	r3, r3, #10
 8003688:	4013      	ands	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368e:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <HAL_UART_MspInit+0xbc>)
 8003690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <HAL_UART_MspInit+0xbc>)
 8003694:	2101      	movs	r1, #1
 8003696:	430a      	orrs	r2, r1
 8003698:	635a      	str	r2, [r3, #52]	; 0x34
 800369a:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_UART_MspInit+0xbc>)
 800369c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369e:	2201      	movs	r2, #1
 80036a0:	4013      	ands	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036a6:	212c      	movs	r1, #44	; 0x2c
 80036a8:	187b      	adds	r3, r7, r1
 80036aa:	220c      	movs	r2, #12
 80036ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ae:	187b      	adds	r3, r7, r1
 80036b0:	2202      	movs	r2, #2
 80036b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	2200      	movs	r2, #0
 80036b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ba:	187b      	adds	r3, r7, r1
 80036bc:	2200      	movs	r2, #0
 80036be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80036c0:	187b      	adds	r3, r7, r1
 80036c2:	2201      	movs	r2, #1
 80036c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c6:	187a      	adds	r2, r7, r1
 80036c8:	23a0      	movs	r3, #160	; 0xa0
 80036ca:	05db      	lsls	r3, r3, #23
 80036cc:	0011      	movs	r1, r2
 80036ce:	0018      	movs	r0, r3
 80036d0:	f001 f930 	bl	8004934 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b011      	add	sp, #68	; 0x44
 80036da:	bd90      	pop	{r4, r7, pc}
 80036dc:	40004400 	.word	0x40004400
 80036e0:	40021000 	.word	0x40021000

080036e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036e8:	e7fe      	b.n	80036e8 <NMI_Handler+0x4>

080036ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036ee:	e7fe      	b.n	80036ee <HardFault_Handler+0x4>

080036f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003708:	f000 f8e0 	bl	80038cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003718:	4b03      	ldr	r3, [pc, #12]	; (8003728 <TIM6_IRQHandler+0x14>)
 800371a:	0018      	movs	r0, r3
 800371c:	f002 f986 	bl	8005a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	200000f4 	.word	0x200000f4

0800372c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003734:	4a14      	ldr	r2, [pc, #80]	; (8003788 <_sbrk+0x5c>)
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <_sbrk+0x60>)
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003740:	4b13      	ldr	r3, [pc, #76]	; (8003790 <_sbrk+0x64>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <_sbrk+0x64>)
 800374a:	4a12      	ldr	r2, [pc, #72]	; (8003794 <_sbrk+0x68>)
 800374c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <_sbrk+0x64>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	18d3      	adds	r3, r2, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	429a      	cmp	r2, r3
 800375a:	d207      	bcs.n	800376c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800375c:	f003 f930 	bl	80069c0 <__errno>
 8003760:	0003      	movs	r3, r0
 8003762:	220c      	movs	r2, #12
 8003764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003766:	2301      	movs	r3, #1
 8003768:	425b      	negs	r3, r3
 800376a:	e009      	b.n	8003780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <_sbrk+0x64>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <_sbrk+0x64>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	18d2      	adds	r2, r2, r3
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <_sbrk+0x64>)
 800377c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800377e:	68fb      	ldr	r3, [r7, #12]
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b006      	add	sp, #24
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20009000 	.word	0x20009000
 800378c:	00000400 	.word	0x00000400
 8003790:	200027e0 	.word	0x200027e0
 8003794:	200027f8 	.word	0x200027f8

08003798 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80037a4:	480d      	ldr	r0, [pc, #52]	; (80037dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80037a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80037a8:	f7ff fff6 	bl	8003798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037ac:	480c      	ldr	r0, [pc, #48]	; (80037e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80037ae:	490d      	ldr	r1, [pc, #52]	; (80037e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037b0:	4a0d      	ldr	r2, [pc, #52]	; (80037e8 <LoopForever+0xe>)
  movs r3, #0
 80037b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037b4:	e002      	b.n	80037bc <LoopCopyDataInit>

080037b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ba:	3304      	adds	r3, #4

080037bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037c0:	d3f9      	bcc.n	80037b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037c2:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80037c4:	4c0a      	ldr	r4, [pc, #40]	; (80037f0 <LoopForever+0x16>)
  movs r3, #0
 80037c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037c8:	e001      	b.n	80037ce <LoopFillZerobss>

080037ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037cc:	3204      	adds	r2, #4

080037ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037d0:	d3fb      	bcc.n	80037ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80037d2:	f003 f8fb 	bl	80069cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80037d6:	f7fe f967 	bl	8001aa8 <main>

080037da <LoopForever>:

LoopForever:
  b LoopForever
 80037da:	e7fe      	b.n	80037da <LoopForever>
  ldr   r0, =_estack
 80037dc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80037e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80037e8:	0800741c 	.word	0x0800741c
  ldr r2, =_sbss
 80037ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80037f0:	200027f8 	.word	0x200027f8

080037f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037f4:	e7fe      	b.n	80037f4 <ADC1_IRQHandler>
	...

080037f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037fe:	1dfb      	adds	r3, r7, #7
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_Init+0x3c>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <HAL_Init+0x3c>)
 800380a:	2180      	movs	r1, #128	; 0x80
 800380c:	0049      	lsls	r1, r1, #1
 800380e:	430a      	orrs	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003812:	2000      	movs	r0, #0
 8003814:	f000 f810 	bl	8003838 <HAL_InitTick>
 8003818:	1e03      	subs	r3, r0, #0
 800381a:	d003      	beq.n	8003824 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800381c:	1dfb      	adds	r3, r7, #7
 800381e:	2201      	movs	r2, #1
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	e001      	b.n	8003828 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003824:	f7ff fe70 	bl	8003508 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003828:	1dfb      	adds	r3, r7, #7
 800382a:	781b      	ldrb	r3, [r3, #0]
}
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	b002      	add	sp, #8
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40022000 	.word	0x40022000

08003838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003838:	b590      	push	{r4, r7, lr}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003840:	230f      	movs	r3, #15
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_InitTick+0x88>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d02b      	beq.n	80038a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003850:	4b1c      	ldr	r3, [pc, #112]	; (80038c4 <HAL_InitTick+0x8c>)
 8003852:	681c      	ldr	r4, [r3, #0]
 8003854:	4b1a      	ldr	r3, [pc, #104]	; (80038c0 <HAL_InitTick+0x88>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	0019      	movs	r1, r3
 800385a:	23fa      	movs	r3, #250	; 0xfa
 800385c:	0098      	lsls	r0, r3, #2
 800385e:	f7fc fc61 	bl	8000124 <__udivsi3>
 8003862:	0003      	movs	r3, r0
 8003864:	0019      	movs	r1, r3
 8003866:	0020      	movs	r0, r4
 8003868:	f7fc fc5c 	bl	8000124 <__udivsi3>
 800386c:	0003      	movs	r3, r0
 800386e:	0018      	movs	r0, r3
 8003870:	f001 f853 	bl	800491a <HAL_SYSTICK_Config>
 8003874:	1e03      	subs	r3, r0, #0
 8003876:	d112      	bne.n	800389e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b03      	cmp	r3, #3
 800387c:	d80a      	bhi.n	8003894 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	2301      	movs	r3, #1
 8003882:	425b      	negs	r3, r3
 8003884:	2200      	movs	r2, #0
 8003886:	0018      	movs	r0, r3
 8003888:	f001 f822 	bl	80048d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800388c:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <HAL_InitTick+0x90>)
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e00d      	b.n	80038b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003894:	230f      	movs	r3, #15
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2201      	movs	r2, #1
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	e008      	b.n	80038b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800389e:	230f      	movs	r3, #15
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	e003      	b.n	80038b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038a8:	230f      	movs	r3, #15
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	2201      	movs	r2, #1
 80038ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80038b0:	230f      	movs	r3, #15
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	781b      	ldrb	r3, [r3, #0]
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b005      	add	sp, #20
 80038bc:	bd90      	pop	{r4, r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	2000000c 	.word	0x2000000c
 80038c4:	20000004 	.word	0x20000004
 80038c8:	20000008 	.word	0x20000008

080038cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_IncTick+0x1c>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	001a      	movs	r2, r3
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HAL_IncTick+0x20>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	18d2      	adds	r2, r2, r3
 80038dc:	4b03      	ldr	r3, [pc, #12]	; (80038ec <HAL_IncTick+0x20>)
 80038de:	601a      	str	r2, [r3, #0]
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	2000000c 	.word	0x2000000c
 80038ec:	200027e4 	.word	0x200027e4

080038f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  return uwTick;
 80038f4:	4b02      	ldr	r3, [pc, #8]	; (8003900 <HAL_GetTick+0x10>)
 80038f6:	681b      	ldr	r3, [r3, #0]
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	200027e4 	.word	0x200027e4

08003904 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a05      	ldr	r2, [pc, #20]	; (8003928 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003914:	401a      	ands	r2, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]
}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b002      	add	sp, #8
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	fe3fffff 	.word	0xfe3fffff

0800392c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	23e0      	movs	r3, #224	; 0xe0
 800393a:	045b      	lsls	r3, r3, #17
 800393c:	4013      	ands	r3, r2
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b002      	add	sp, #8
 8003944:	bd80      	pop	{r7, pc}

08003946 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	2104      	movs	r1, #4
 800395a:	400a      	ands	r2, r1
 800395c:	2107      	movs	r1, #7
 800395e:	4091      	lsls	r1, r2
 8003960:	000a      	movs	r2, r1
 8003962:	43d2      	mvns	r2, r2
 8003964:	401a      	ands	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2104      	movs	r1, #4
 800396a:	400b      	ands	r3, r1
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4099      	lsls	r1, r3
 8003970:	000b      	movs	r3, r1
 8003972:	431a      	orrs	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b004      	add	sp, #16
 800397e:	bd80      	pop	{r7, pc}

08003980 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	2104      	movs	r1, #4
 8003992:	400a      	ands	r2, r1
 8003994:	2107      	movs	r1, #7
 8003996:	4091      	lsls	r1, r2
 8003998:	000a      	movs	r2, r1
 800399a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2104      	movs	r1, #4
 80039a0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80039a2:	40da      	lsrs	r2, r3
 80039a4:	0013      	movs	r3, r2
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b002      	add	sp, #8
 80039ac:	bd80      	pop	{r7, pc}

080039ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	23c0      	movs	r3, #192	; 0xc0
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	4013      	ands	r3, r2
 80039c0:	d101      	bne.n	80039c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	211f      	movs	r1, #31
 80039e4:	400a      	ands	r2, r1
 80039e6:	210f      	movs	r1, #15
 80039e8:	4091      	lsls	r1, r2
 80039ea:	000a      	movs	r2, r1
 80039ec:	43d2      	mvns	r2, r2
 80039ee:	401a      	ands	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0e9b      	lsrs	r3, r3, #26
 80039f4:	210f      	movs	r1, #15
 80039f6:	4019      	ands	r1, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	201f      	movs	r0, #31
 80039fc:	4003      	ands	r3, r0
 80039fe:	4099      	lsls	r1, r3
 8003a00:	000b      	movs	r3, r1
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b004      	add	sp, #16
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	035b      	lsls	r3, r3, #13
 8003a22:	0b5b      	lsrs	r3, r3, #13
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b002      	add	sp, #8
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	0352      	lsls	r2, r2, #13
 8003a44:	0b52      	lsrs	r2, r2, #13
 8003a46:	43d2      	mvns	r2, r2
 8003a48:	401a      	ands	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b002      	add	sp, #8
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	0212      	lsls	r2, r2, #8
 8003a6c:	43d2      	mvns	r2, r2
 8003a6e:	401a      	ands	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	400b      	ands	r3, r1
 8003a78:	4904      	ldr	r1, [pc, #16]	; (8003a8c <LL_ADC_SetChannelSamplingTime+0x34>)
 8003a7a:	400b      	ands	r3, r1
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b004      	add	sp, #16
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	07ffff00 	.word	0x07ffff00

08003a90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4a05      	ldr	r2, [pc, #20]	; (8003ab4 <LL_ADC_EnableInternalRegulator+0x24>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2280      	movs	r2, #128	; 0x80
 8003aa2:	0552      	lsls	r2, r2, #21
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b002      	add	sp, #8
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	6fffffe8 	.word	0x6fffffe8

08003ab8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	2380      	movs	r3, #128	; 0x80
 8003ac6:	055b      	lsls	r3, r3, #21
 8003ac8:	401a      	ands	r2, r3
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	055b      	lsls	r3, r3, #21
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d101      	bne.n	8003ad6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b002      	add	sp, #8
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <LL_ADC_Enable+0x20>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	2201      	movs	r2, #1
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b002      	add	sp, #8
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	7fffffe8 	.word	0x7fffffe8

08003b04 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <LL_ADC_Disable+0x20>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	2202      	movs	r2, #2
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b002      	add	sp, #8
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	7fffffe8 	.word	0x7fffffe8

08003b28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2201      	movs	r2, #1
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <LL_ADC_IsEnabled+0x18>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <LL_ADC_IsEnabled+0x1a>
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	0018      	movs	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b002      	add	sp, #8
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2202      	movs	r2, #2
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d101      	bne.n	8003b62 <LL_ADC_IsDisableOngoing+0x18>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <LL_ADC_IsDisableOngoing+0x1a>
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <LL_ADC_REG_StartConversion+0x20>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b002      	add	sp, #8
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	7fffffe8 	.word	0x7fffffe8

08003b90 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4a04      	ldr	r2, [pc, #16]	; (8003bb0 <LL_ADC_REG_StopConversion+0x20>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	7fffffe8 	.word	0x7fffffe8

08003bb4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d101      	bne.n	8003bcc <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	0018      	movs	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b002      	add	sp, #8
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003be0:	231f      	movs	r3, #31
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e17f      	b.n	8003efe <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10a      	bne.n	8003c1c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7ff fca1 	bl	8003550 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2254      	movs	r2, #84	; 0x54
 8003c18:	2100      	movs	r1, #0
 8003c1a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7ff ff49 	bl	8003ab8 <LL_ADC_IsInternalRegulatorEnabled>
 8003c26:	1e03      	subs	r3, r0, #0
 8003c28:	d115      	bne.n	8003c56 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f7ff ff2e 	bl	8003a90 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c34:	4bb4      	ldr	r3, [pc, #720]	; (8003f08 <HAL_ADC_Init+0x330>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	49b4      	ldr	r1, [pc, #720]	; (8003f0c <HAL_ADC_Init+0x334>)
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f7fc fa72 	bl	8000124 <__udivsi3>
 8003c40:	0003      	movs	r3, r0
 8003c42:	3301      	adds	r3, #1
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c48:	e002      	b.n	8003c50 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f9      	bne.n	8003c4a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f7ff ff2c 	bl	8003ab8 <LL_ADC_IsInternalRegulatorEnabled>
 8003c60:	1e03      	subs	r3, r0, #0
 8003c62:	d10f      	bne.n	8003c84 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	2210      	movs	r2, #16
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	2201      	movs	r2, #1
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c7c:	231f      	movs	r3, #31
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	2201      	movs	r2, #1
 8003c82:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f7ff ff93 	bl	8003bb4 <LL_ADC_REG_IsConversionOngoing>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	2210      	movs	r2, #16
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d000      	beq.n	8003c9e <HAL_ADC_Init+0xc6>
 8003c9c:	e122      	b.n	8003ee4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d000      	beq.n	8003ca6 <HAL_ADC_Init+0xce>
 8003ca4:	e11e      	b.n	8003ee4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	4a99      	ldr	r2, [pc, #612]	; (8003f10 <HAL_ADC_Init+0x338>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	2202      	movs	r2, #2
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7ff ff34 	bl	8003b28 <LL_ADC_IsEnabled>
 8003cc0:	1e03      	subs	r3, r0, #0
 8003cc2:	d000      	beq.n	8003cc6 <HAL_ADC_Init+0xee>
 8003cc4:	e0ad      	b.n	8003e22 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7e1b      	ldrb	r3, [r3, #24]
 8003cce:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003cd0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	7e5b      	ldrb	r3, [r3, #25]
 8003cd6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003cd8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	7e9b      	ldrb	r3, [r3, #26]
 8003cde:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003ce0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_ADC_Init+0x118>
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	015b      	lsls	r3, r3, #5
 8003cee:	e000      	b.n	8003cf2 <HAL_ADC_Init+0x11a>
 8003cf0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003cf2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003cf8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	da04      	bge.n	8003d0c <HAL_ADC_Init+0x134>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	e001      	b.n	8003d10 <HAL_ADC_Init+0x138>
 8003d0c:	2380      	movs	r3, #128	; 0x80
 8003d0e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003d10:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	212c      	movs	r1, #44	; 0x2c
 8003d16:	5c5b      	ldrb	r3, [r3, r1]
 8003d18:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d1a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	5c9b      	ldrb	r3, [r3, r2]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d115      	bne.n	8003d58 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	7e9b      	ldrb	r3, [r3, #26]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2280      	movs	r2, #128	; 0x80
 8003d38:	0252      	lsls	r2, r2, #9
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	e00b      	b.n	8003d58 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	2220      	movs	r2, #32
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	2201      	movs	r2, #1
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d64:	23e0      	movs	r3, #224	; 0xe0
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4a65      	ldr	r2, [pc, #404]	; (8003f14 <HAL_ADC_Init+0x33c>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	0f9b      	lsrs	r3, r3, #30
 8003d92:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	223c      	movs	r2, #60	; 0x3c
 8003da4:	5c9b      	ldrb	r3, [r3, r2]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d111      	bne.n	8003dce <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	0f9b      	lsrs	r3, r3, #30
 8003db0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003db6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003dbc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003dc2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	2201      	movs	r2, #1
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	4a50      	ldr	r2, [pc, #320]	; (8003f18 <HAL_ADC_Init+0x340>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	0019      	movs	r1, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	23c0      	movs	r3, #192	; 0xc0
 8003dea:	061b      	lsls	r3, r3, #24
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d018      	beq.n	8003e22 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	05db      	lsls	r3, r3, #23
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d012      	beq.n	8003e22 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	061b      	lsls	r3, r3, #24
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d00c      	beq.n	8003e22 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003e08:	4b44      	ldr	r3, [pc, #272]	; (8003f1c <HAL_ADC_Init+0x344>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a44      	ldr	r2, [pc, #272]	; (8003f20 <HAL_ADC_Init+0x348>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	0019      	movs	r1, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	23f0      	movs	r3, #240	; 0xf0
 8003e18:	039b      	lsls	r3, r3, #14
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	4b3f      	ldr	r3, [pc, #252]	; (8003f1c <HAL_ADC_Init+0x344>)
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	001a      	movs	r2, r3
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	f7ff fd8a 	bl	8003946 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	493a      	ldr	r1, [pc, #232]	; (8003f24 <HAL_ADC_Init+0x34c>)
 8003e3c:	001a      	movs	r2, r3
 8003e3e:	f7ff fd82 	bl	8003946 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2110      	movs	r1, #16
 8003e56:	4249      	negs	r1, r1
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e5c:	e018      	b.n	8003e90 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	039b      	lsls	r3, r3, #14
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d112      	bne.n	8003e90 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	221c      	movs	r2, #28
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	4252      	negs	r2, r2
 8003e80:	409a      	lsls	r2, r3
 8003e82:	0011      	movs	r1, r2
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2100      	movs	r1, #0
 8003e96:	0018      	movs	r0, r3
 8003e98:	f7ff fd72 	bl	8003980 <LL_ADC_GetSamplingTimeCommonChannels>
 8003e9c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d10b      	bne.n	8003ebe <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	4393      	bics	r3, r2
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003ebc:	e01c      	b.n	8003ef8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	2212      	movs	r2, #18
 8003ec4:	4393      	bics	r3, r2
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003eda:	231f      	movs	r3, #31
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	2201      	movs	r2, #1
 8003ee0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003ee2:	e009      	b.n	8003ef8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	2210      	movs	r2, #16
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ef0:	231f      	movs	r3, #31
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003ef8:	231f      	movs	r3, #31
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	781b      	ldrb	r3, [r3, #0]
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b008      	add	sp, #32
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	20000004 	.word	0x20000004
 8003f0c:	00030d40 	.word	0x00030d40
 8003f10:	fffffefd 	.word	0xfffffefd
 8003f14:	fffe0201 	.word	0xfffe0201
 8003f18:	1ffffc02 	.word	0x1ffffc02
 8003f1c:	40012708 	.word	0x40012708
 8003f20:	ffc3ffff 	.word	0xffc3ffff
 8003f24:	07ffff04 	.word	0x07ffff04

08003f28 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003f28:	b5b0      	push	{r4, r5, r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff fe3d 	bl	8003bb4 <LL_ADC_REG_IsConversionOngoing>
 8003f3a:	1e03      	subs	r3, r0, #0
 8003f3c:	d135      	bne.n	8003faa <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2254      	movs	r2, #84	; 0x54
 8003f42:	5c9b      	ldrb	r3, [r3, r2]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_ADC_Start+0x24>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e035      	b.n	8003fb8 <HAL_ADC_Start+0x90>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2254      	movs	r2, #84	; 0x54
 8003f50:	2101      	movs	r1, #1
 8003f52:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003f54:	250f      	movs	r5, #15
 8003f56:	197c      	adds	r4, r7, r5
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f000 fb28 	bl	80045b0 <ADC_Enable>
 8003f60:	0003      	movs	r3, r0
 8003f62:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003f64:	197b      	adds	r3, r7, r5
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d119      	bne.n	8003fa0 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <HAL_ADC_Start+0x98>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	2280      	movs	r2, #128	; 0x80
 8003f76:	0052      	lsls	r2, r2, #1
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	221c      	movs	r2, #28
 8003f8a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2254      	movs	r2, #84	; 0x54
 8003f90:	2100      	movs	r1, #0
 8003f92:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7ff fde7 	bl	8003b6c <LL_ADC_REG_StartConversion>
 8003f9e:	e008      	b.n	8003fb2 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2254      	movs	r2, #84	; 0x54
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	5499      	strb	r1, [r3, r2]
 8003fa8:	e003      	b.n	8003fb2 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003faa:	230f      	movs	r3, #15
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	2202      	movs	r2, #2
 8003fb0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003fb2:	230f      	movs	r3, #15
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	781b      	ldrb	r3, [r3, #0]
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b004      	add	sp, #16
 8003fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc0:	fffff0fe 	.word	0xfffff0fe

08003fc4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003fc4:	b5b0      	push	{r4, r5, r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2254      	movs	r2, #84	; 0x54
 8003fd0:	5c9b      	ldrb	r3, [r3, r2]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_ADC_Stop+0x16>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e029      	b.n	800402e <HAL_ADC_Stop+0x6a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2254      	movs	r2, #84	; 0x54
 8003fde:	2101      	movs	r1, #1
 8003fe0:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003fe2:	250f      	movs	r5, #15
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f000 fa9f 	bl	800452c <ADC_ConversionStop>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003ff2:	197b      	adds	r3, r7, r5
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d112      	bne.n	8004020 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003ffa:	197c      	adds	r4, r7, r5
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	0018      	movs	r0, r3
 8004000:	f000 fb5c 	bl	80046bc <ADC_Disable>
 8004004:	0003      	movs	r3, r0
 8004006:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004008:	197b      	adds	r3, r7, r5
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d107      	bne.n	8004020 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	4a08      	ldr	r2, [pc, #32]	; (8004038 <HAL_ADC_Stop+0x74>)
 8004016:	4013      	ands	r3, r2
 8004018:	2201      	movs	r2, #1
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2254      	movs	r2, #84	; 0x54
 8004024:	2100      	movs	r1, #0
 8004026:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004028:	230f      	movs	r3, #15
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	781b      	ldrb	r3, [r3, #0]
}
 800402e:	0018      	movs	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	b004      	add	sp, #16
 8004034:	bdb0      	pop	{r4, r5, r7, pc}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	fffffefe 	.word	0xfffffefe

0800403c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	2b08      	cmp	r3, #8
 800404c:	d102      	bne.n	8004054 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800404e:	2308      	movs	r3, #8
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	e00f      	b.n	8004074 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	4013      	ands	r3, r2
 800405e:	d007      	beq.n	8004070 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	2220      	movs	r2, #32
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e072      	b.n	8004156 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004070:	2304      	movs	r3, #4
 8004072:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004074:	f7ff fc3c 	bl	80038f0 <HAL_GetTick>
 8004078:	0003      	movs	r3, r0
 800407a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800407c:	e01f      	b.n	80040be <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	3301      	adds	r3, #1
 8004082:	d01c      	beq.n	80040be <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004084:	f7ff fc34 	bl	80038f0 <HAL_GetTick>
 8004088:	0002      	movs	r2, r0
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d302      	bcc.n	800409a <HAL_ADC_PollForConversion+0x5e>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d111      	bne.n	80040be <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4013      	ands	r3, r2
 80040a4:	d10b      	bne.n	80040be <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	2204      	movs	r2, #4
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2254      	movs	r2, #84	; 0x54
 80040b6:	2100      	movs	r1, #0
 80040b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e04b      	b.n	8004156 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4013      	ands	r3, r2
 80040c8:	d0d9      	beq.n	800407e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	2280      	movs	r2, #128	; 0x80
 80040d0:	0092      	lsls	r2, r2, #2
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	0018      	movs	r0, r3
 80040de:	f7ff fc66 	bl	80039ae <LL_ADC_REG_IsTriggerSourceSWStart>
 80040e2:	1e03      	subs	r3, r0, #0
 80040e4:	d02e      	beq.n	8004144 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	7e9b      	ldrb	r3, [r3, #26]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d12a      	bne.n	8004144 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2208      	movs	r2, #8
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d123      	bne.n	8004144 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	0018      	movs	r0, r3
 8004102:	f7ff fd57 	bl	8003bb4 <LL_ADC_REG_IsConversionOngoing>
 8004106:	1e03      	subs	r3, r0, #0
 8004108:	d110      	bne.n	800412c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	210c      	movs	r1, #12
 8004116:	438a      	bics	r2, r1
 8004118:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411e:	4a10      	ldr	r2, [pc, #64]	; (8004160 <HAL_ADC_PollForConversion+0x124>)
 8004120:	4013      	ands	r3, r2
 8004122:	2201      	movs	r2, #1
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	659a      	str	r2, [r3, #88]	; 0x58
 800412a:	e00b      	b.n	8004144 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004130:	2220      	movs	r2, #32
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	2201      	movs	r2, #1
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	7e1b      	ldrb	r3, [r3, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d103      	bne.n	8004154 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	220c      	movs	r2, #12
 8004152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	0018      	movs	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	b004      	add	sp, #16
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	fffffefe 	.word	0xfffffefe

08004164 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004172:	0018      	movs	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	b002      	add	sp, #8
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004186:	2317      	movs	r3, #23
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2254      	movs	r2, #84	; 0x54
 8004196:	5c9b      	ldrb	r3, [r3, r2]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x24>
 800419c:	2302      	movs	r3, #2
 800419e:	e1c0      	b.n	8004522 <HAL_ADC_ConfigChannel+0x3a6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2254      	movs	r2, #84	; 0x54
 80041a4:	2101      	movs	r1, #1
 80041a6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f7ff fd01 	bl	8003bb4 <LL_ADC_REG_IsConversionOngoing>
 80041b2:	1e03      	subs	r3, r0, #0
 80041b4:	d000      	beq.n	80041b8 <HAL_ADC_ConfigChannel+0x3c>
 80041b6:	e1a3      	b.n	8004500 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d100      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x46>
 80041c0:	e143      	b.n	800444a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	2380      	movs	r3, #128	; 0x80
 80041c8:	061b      	lsls	r3, r3, #24
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d004      	beq.n	80041d8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80041d2:	4ac1      	ldr	r2, [pc, #772]	; (80044d8 <HAL_ADC_ConfigChannel+0x35c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d108      	bne.n	80041ea <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	0019      	movs	r1, r3
 80041e2:	0010      	movs	r0, r2
 80041e4:	f7ff fc14 	bl	8003a10 <LL_ADC_REG_SetSequencerChAdd>
 80041e8:	e0c9      	b.n	800437e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	211f      	movs	r1, #31
 80041f4:	400b      	ands	r3, r1
 80041f6:	210f      	movs	r1, #15
 80041f8:	4099      	lsls	r1, r3
 80041fa:	000b      	movs	r3, r1
 80041fc:	43db      	mvns	r3, r3
 80041fe:	4013      	ands	r3, r2
 8004200:	0019      	movs	r1, r3
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	035b      	lsls	r3, r3, #13
 8004208:	0b5b      	lsrs	r3, r3, #13
 800420a:	d105      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x9c>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	0e9b      	lsrs	r3, r3, #26
 8004212:	221f      	movs	r2, #31
 8004214:	4013      	ands	r3, r2
 8004216:	e098      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2201      	movs	r2, #1
 800421e:	4013      	ands	r3, r2
 8004220:	d000      	beq.n	8004224 <HAL_ADC_ConfigChannel+0xa8>
 8004222:	e091      	b.n	8004348 <HAL_ADC_ConfigChannel+0x1cc>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2202      	movs	r2, #2
 800422a:	4013      	ands	r3, r2
 800422c:	d000      	beq.n	8004230 <HAL_ADC_ConfigChannel+0xb4>
 800422e:	e089      	b.n	8004344 <HAL_ADC_ConfigChannel+0x1c8>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2204      	movs	r2, #4
 8004236:	4013      	ands	r3, r2
 8004238:	d000      	beq.n	800423c <HAL_ADC_ConfigChannel+0xc0>
 800423a:	e081      	b.n	8004340 <HAL_ADC_ConfigChannel+0x1c4>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2208      	movs	r2, #8
 8004242:	4013      	ands	r3, r2
 8004244:	d000      	beq.n	8004248 <HAL_ADC_ConfigChannel+0xcc>
 8004246:	e079      	b.n	800433c <HAL_ADC_ConfigChannel+0x1c0>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2210      	movs	r2, #16
 800424e:	4013      	ands	r3, r2
 8004250:	d000      	beq.n	8004254 <HAL_ADC_ConfigChannel+0xd8>
 8004252:	e071      	b.n	8004338 <HAL_ADC_ConfigChannel+0x1bc>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2220      	movs	r2, #32
 800425a:	4013      	ands	r3, r2
 800425c:	d000      	beq.n	8004260 <HAL_ADC_ConfigChannel+0xe4>
 800425e:	e069      	b.n	8004334 <HAL_ADC_ConfigChannel+0x1b8>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2240      	movs	r2, #64	; 0x40
 8004266:	4013      	ands	r3, r2
 8004268:	d000      	beq.n	800426c <HAL_ADC_ConfigChannel+0xf0>
 800426a:	e061      	b.n	8004330 <HAL_ADC_ConfigChannel+0x1b4>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2280      	movs	r2, #128	; 0x80
 8004272:	4013      	ands	r3, r2
 8004274:	d000      	beq.n	8004278 <HAL_ADC_ConfigChannel+0xfc>
 8004276:	e059      	b.n	800432c <HAL_ADC_ConfigChannel+0x1b0>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	4013      	ands	r3, r2
 8004282:	d151      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x1ac>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4013      	ands	r3, r2
 800428e:	d149      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x1a8>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	2380      	movs	r3, #128	; 0x80
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4013      	ands	r3, r2
 800429a:	d141      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x1a4>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	4013      	ands	r3, r2
 80042a6:	d139      	bne.n	800431c <HAL_ADC_ConfigChannel+0x1a0>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	2380      	movs	r3, #128	; 0x80
 80042ae:	015b      	lsls	r3, r3, #5
 80042b0:	4013      	ands	r3, r2
 80042b2:	d131      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x19c>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	019b      	lsls	r3, r3, #6
 80042bc:	4013      	ands	r3, r2
 80042be:	d129      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x198>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	01db      	lsls	r3, r3, #7
 80042c8:	4013      	ands	r3, r2
 80042ca:	d121      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x194>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	4013      	ands	r3, r2
 80042d6:	d119      	bne.n	800430c <HAL_ADC_ConfigChannel+0x190>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	025b      	lsls	r3, r3, #9
 80042e0:	4013      	ands	r3, r2
 80042e2:	d111      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x18c>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	029b      	lsls	r3, r3, #10
 80042ec:	4013      	ands	r3, r2
 80042ee:	d109      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x188>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	02db      	lsls	r3, r3, #11
 80042f8:	4013      	ands	r3, r2
 80042fa:	d001      	beq.n	8004300 <HAL_ADC_ConfigChannel+0x184>
 80042fc:	2312      	movs	r3, #18
 80042fe:	e024      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004300:	2300      	movs	r3, #0
 8004302:	e022      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004304:	2311      	movs	r3, #17
 8004306:	e020      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004308:	2310      	movs	r3, #16
 800430a:	e01e      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 800430c:	230f      	movs	r3, #15
 800430e:	e01c      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004310:	230e      	movs	r3, #14
 8004312:	e01a      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004314:	230d      	movs	r3, #13
 8004316:	e018      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004318:	230c      	movs	r3, #12
 800431a:	e016      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 800431c:	230b      	movs	r3, #11
 800431e:	e014      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004320:	230a      	movs	r3, #10
 8004322:	e012      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004324:	2309      	movs	r3, #9
 8004326:	e010      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004328:	2308      	movs	r3, #8
 800432a:	e00e      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 800432c:	2307      	movs	r3, #7
 800432e:	e00c      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004330:	2306      	movs	r3, #6
 8004332:	e00a      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004334:	2305      	movs	r3, #5
 8004336:	e008      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004338:	2304      	movs	r3, #4
 800433a:	e006      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 800433c:	2303      	movs	r3, #3
 800433e:	e004      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004340:	2302      	movs	r3, #2
 8004342:	e002      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <HAL_ADC_ConfigChannel+0x1ce>
 8004348:	2300      	movs	r3, #0
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	6852      	ldr	r2, [r2, #4]
 800434e:	201f      	movs	r0, #31
 8004350:	4002      	ands	r2, r0
 8004352:	4093      	lsls	r3, r2
 8004354:	000a      	movs	r2, r1
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	089b      	lsrs	r3, r3, #2
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	429a      	cmp	r2, r3
 800436a:	d808      	bhi.n	800437e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	001a      	movs	r2, r3
 800437a:	f7ff fb29 	bl	80039d0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6819      	ldr	r1, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	001a      	movs	r2, r3
 800438c:	f7ff fb64 	bl	8003a58 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	db00      	blt.n	800439a <HAL_ADC_ConfigChannel+0x21e>
 8004398:	e0bc      	b.n	8004514 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800439a:	4b50      	ldr	r3, [pc, #320]	; (80044dc <HAL_ADC_ConfigChannel+0x360>)
 800439c:	0018      	movs	r0, r3
 800439e:	f7ff fac5 	bl	800392c <LL_ADC_GetCommonPathInternalCh>
 80043a2:	0003      	movs	r3, r0
 80043a4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a4d      	ldr	r2, [pc, #308]	; (80044e0 <HAL_ADC_ConfigChannel+0x364>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d122      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043b8:	d11d      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2280      	movs	r2, #128	; 0x80
 80043be:	0412      	lsls	r2, r2, #16
 80043c0:	4313      	orrs	r3, r2
 80043c2:	4a46      	ldr	r2, [pc, #280]	; (80044dc <HAL_ADC_ConfigChannel+0x360>)
 80043c4:	0019      	movs	r1, r3
 80043c6:	0010      	movs	r0, r2
 80043c8:	f7ff fa9c 	bl	8003904 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043cc:	4b45      	ldr	r3, [pc, #276]	; (80044e4 <HAL_ADC_ConfigChannel+0x368>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4945      	ldr	r1, [pc, #276]	; (80044e8 <HAL_ADC_ConfigChannel+0x36c>)
 80043d2:	0018      	movs	r0, r3
 80043d4:	f7fb fea6 	bl	8000124 <__udivsi3>
 80043d8:	0003      	movs	r3, r0
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	0013      	movs	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	189b      	adds	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80043e6:	e002      	b.n	80043ee <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1f9      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043f4:	e08e      	b.n	8004514 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a3c      	ldr	r2, [pc, #240]	; (80044ec <HAL_ADC_ConfigChannel+0x370>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d10e      	bne.n	800441e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	045b      	lsls	r3, r3, #17
 8004406:	4013      	ands	r3, r2
 8004408:	d109      	bne.n	800441e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2280      	movs	r2, #128	; 0x80
 800440e:	0452      	lsls	r2, r2, #17
 8004410:	4313      	orrs	r3, r2
 8004412:	4a32      	ldr	r2, [pc, #200]	; (80044dc <HAL_ADC_ConfigChannel+0x360>)
 8004414:	0019      	movs	r1, r3
 8004416:	0010      	movs	r0, r2
 8004418:	f7ff fa74 	bl	8003904 <LL_ADC_SetCommonPathInternalCh>
 800441c:	e07a      	b.n	8004514 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a33      	ldr	r2, [pc, #204]	; (80044f0 <HAL_ADC_ConfigChannel+0x374>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d000      	beq.n	800442a <HAL_ADC_ConfigChannel+0x2ae>
 8004428:	e074      	b.n	8004514 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	03db      	lsls	r3, r3, #15
 8004430:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004432:	d000      	beq.n	8004436 <HAL_ADC_ConfigChannel+0x2ba>
 8004434:	e06e      	b.n	8004514 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2280      	movs	r2, #128	; 0x80
 800443a:	03d2      	lsls	r2, r2, #15
 800443c:	4313      	orrs	r3, r2
 800443e:	4a27      	ldr	r2, [pc, #156]	; (80044dc <HAL_ADC_ConfigChannel+0x360>)
 8004440:	0019      	movs	r1, r3
 8004442:	0010      	movs	r0, r2
 8004444:	f7ff fa5e 	bl	8003904 <LL_ADC_SetCommonPathInternalCh>
 8004448:	e064      	b.n	8004514 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	061b      	lsls	r3, r3, #24
 8004452:	429a      	cmp	r2, r3
 8004454:	d004      	beq.n	8004460 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800445a:	4a1f      	ldr	r2, [pc, #124]	; (80044d8 <HAL_ADC_ConfigChannel+0x35c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d107      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	0019      	movs	r1, r3
 800446a:	0010      	movs	r0, r2
 800446c:	f7ff fae1 	bl	8003a32 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	da4d      	bge.n	8004514 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004478:	4b18      	ldr	r3, [pc, #96]	; (80044dc <HAL_ADC_ConfigChannel+0x360>)
 800447a:	0018      	movs	r0, r3
 800447c:	f7ff fa56 	bl	800392c <LL_ADC_GetCommonPathInternalCh>
 8004480:	0003      	movs	r3, r0
 8004482:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <HAL_ADC_ConfigChannel+0x364>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d108      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <HAL_ADC_ConfigChannel+0x378>)
 8004492:	4013      	ands	r3, r2
 8004494:	4a11      	ldr	r2, [pc, #68]	; (80044dc <HAL_ADC_ConfigChannel+0x360>)
 8004496:	0019      	movs	r1, r3
 8004498:	0010      	movs	r0, r2
 800449a:	f7ff fa33 	bl	8003904 <LL_ADC_SetCommonPathInternalCh>
 800449e:	e039      	b.n	8004514 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a11      	ldr	r2, [pc, #68]	; (80044ec <HAL_ADC_ConfigChannel+0x370>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d108      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <HAL_ADC_ConfigChannel+0x37c>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <HAL_ADC_ConfigChannel+0x360>)
 80044b2:	0019      	movs	r1, r3
 80044b4:	0010      	movs	r0, r2
 80044b6:	f7ff fa25 	bl	8003904 <LL_ADC_SetCommonPathInternalCh>
 80044ba:	e02b      	b.n	8004514 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a0b      	ldr	r2, [pc, #44]	; (80044f0 <HAL_ADC_ConfigChannel+0x374>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d126      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4a0c      	ldr	r2, [pc, #48]	; (80044fc <HAL_ADC_ConfigChannel+0x380>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	4a03      	ldr	r2, [pc, #12]	; (80044dc <HAL_ADC_ConfigChannel+0x360>)
 80044ce:	0019      	movs	r1, r3
 80044d0:	0010      	movs	r0, r2
 80044d2:	f7ff fa17 	bl	8003904 <LL_ADC_SetCommonPathInternalCh>
 80044d6:	e01d      	b.n	8004514 <HAL_ADC_ConfigChannel+0x398>
 80044d8:	80000004 	.word	0x80000004
 80044dc:	40012708 	.word	0x40012708
 80044e0:	b0001000 	.word	0xb0001000
 80044e4:	20000004 	.word	0x20000004
 80044e8:	00030d40 	.word	0x00030d40
 80044ec:	b8004000 	.word	0xb8004000
 80044f0:	b4002000 	.word	0xb4002000
 80044f4:	ff7fffff 	.word	0xff7fffff
 80044f8:	feffffff 	.word	0xfeffffff
 80044fc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	2220      	movs	r2, #32
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800450c:	2317      	movs	r3, #23
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	2201      	movs	r2, #1
 8004512:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2254      	movs	r2, #84	; 0x54
 8004518:	2100      	movs	r1, #0
 800451a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800451c:	2317      	movs	r3, #23
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	781b      	ldrb	r3, [r3, #0]
}
 8004522:	0018      	movs	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	b006      	add	sp, #24
 8004528:	bd80      	pop	{r7, pc}
 800452a:	46c0      	nop			; (mov r8, r8)

0800452c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	0018      	movs	r0, r3
 800453a:	f7ff fb3b 	bl	8003bb4 <LL_ADC_REG_IsConversionOngoing>
 800453e:	1e03      	subs	r3, r0, #0
 8004540:	d031      	beq.n	80045a6 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	0018      	movs	r0, r3
 8004548:	f7ff faff 	bl	8003b4a <LL_ADC_IsDisableOngoing>
 800454c:	1e03      	subs	r3, r0, #0
 800454e:	d104      	bne.n	800455a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	0018      	movs	r0, r3
 8004556:	f7ff fb1b 	bl	8003b90 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800455a:	f7ff f9c9 	bl	80038f0 <HAL_GetTick>
 800455e:	0003      	movs	r3, r0
 8004560:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004562:	e01a      	b.n	800459a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004564:	f7ff f9c4 	bl	80038f0 <HAL_GetTick>
 8004568:	0002      	movs	r2, r0
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d913      	bls.n	800459a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2204      	movs	r2, #4
 800457a:	4013      	ands	r3, r2
 800457c:	d00d      	beq.n	800459a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	2210      	movs	r2, #16
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458e:	2201      	movs	r2, #1
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e006      	b.n	80045a8 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2204      	movs	r2, #4
 80045a2:	4013      	ands	r3, r2
 80045a4:	d1de      	bne.n	8004564 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	0018      	movs	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b004      	add	sp, #16
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7ff fab1 	bl	8003b28 <LL_ADC_IsEnabled>
 80045c6:	1e03      	subs	r3, r0, #0
 80045c8:	d000      	beq.n	80045cc <ADC_Enable+0x1c>
 80045ca:	e069      	b.n	80046a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	4a36      	ldr	r2, [pc, #216]	; (80046ac <ADC_Enable+0xfc>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	d00d      	beq.n	80045f4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045dc:	2210      	movs	r2, #16
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	2201      	movs	r2, #1
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e056      	b.n	80046a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7ff fa71 	bl	8003ae0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80045fe:	4b2c      	ldr	r3, [pc, #176]	; (80046b0 <ADC_Enable+0x100>)
 8004600:	0018      	movs	r0, r3
 8004602:	f7ff f993 	bl	800392c <LL_ADC_GetCommonPathInternalCh>
 8004606:	0002      	movs	r2, r0
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	041b      	lsls	r3, r3, #16
 800460c:	4013      	ands	r3, r2
 800460e:	d00f      	beq.n	8004630 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004610:	4b28      	ldr	r3, [pc, #160]	; (80046b4 <ADC_Enable+0x104>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4928      	ldr	r1, [pc, #160]	; (80046b8 <ADC_Enable+0x108>)
 8004616:	0018      	movs	r0, r3
 8004618:	f7fb fd84 	bl	8000124 <__udivsi3>
 800461c:	0003      	movs	r3, r0
 800461e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004620:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004622:	e002      	b.n	800462a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	3b01      	subs	r3, #1
 8004628:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f9      	bne.n	8004624 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	7e5b      	ldrb	r3, [r3, #25]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d033      	beq.n	80046a0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004638:	f7ff f95a 	bl	80038f0 <HAL_GetTick>
 800463c:	0003      	movs	r3, r0
 800463e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004640:	e027      	b.n	8004692 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	0018      	movs	r0, r3
 8004648:	f7ff fa6e 	bl	8003b28 <LL_ADC_IsEnabled>
 800464c:	1e03      	subs	r3, r0, #0
 800464e:	d104      	bne.n	800465a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	0018      	movs	r0, r3
 8004656:	f7ff fa43 	bl	8003ae0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800465a:	f7ff f949 	bl	80038f0 <HAL_GetTick>
 800465e:	0002      	movs	r2, r0
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d914      	bls.n	8004692 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2201      	movs	r2, #1
 8004670:	4013      	ands	r3, r2
 8004672:	2b01      	cmp	r3, #1
 8004674:	d00d      	beq.n	8004692 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467a:	2210      	movs	r2, #16
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	2201      	movs	r2, #1
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e007      	b.n	80046a2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2201      	movs	r2, #1
 800469a:	4013      	ands	r3, r2
 800469c:	2b01      	cmp	r3, #1
 800469e:	d1d0      	bne.n	8004642 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	0018      	movs	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b004      	add	sp, #16
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	80000017 	.word	0x80000017
 80046b0:	40012708 	.word	0x40012708
 80046b4:	20000004 	.word	0x20000004
 80046b8:	00030d40 	.word	0x00030d40

080046bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7ff fa3e 	bl	8003b4a <LL_ADC_IsDisableOngoing>
 80046ce:	0003      	movs	r3, r0
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	0018      	movs	r0, r3
 80046d8:	f7ff fa26 	bl	8003b28 <LL_ADC_IsEnabled>
 80046dc:	1e03      	subs	r3, r0, #0
 80046de:	d046      	beq.n	800476e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d143      	bne.n	800476e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2205      	movs	r2, #5
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d10d      	bne.n	8004710 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f7ff fa03 	bl	8003b04 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2203      	movs	r2, #3
 8004704:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004706:	f7ff f8f3 	bl	80038f0 <HAL_GetTick>
 800470a:	0003      	movs	r3, r0
 800470c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800470e:	e028      	b.n	8004762 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	2210      	movs	r2, #16
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004720:	2201      	movs	r2, #1
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e021      	b.n	8004770 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800472c:	f7ff f8e0 	bl	80038f0 <HAL_GetTick>
 8004730:	0002      	movs	r2, r0
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d913      	bls.n	8004762 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2201      	movs	r2, #1
 8004742:	4013      	ands	r3, r2
 8004744:	d00d      	beq.n	8004762 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474a:	2210      	movs	r2, #16
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004756:	2201      	movs	r2, #1
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e006      	b.n	8004770 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2201      	movs	r2, #1
 800476a:	4013      	ands	r3, r2
 800476c:	d1de      	bne.n	800472c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	b004      	add	sp, #16
 8004776:	bd80      	pop	{r7, pc}

08004778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	0002      	movs	r2, r0
 8004780:	1dfb      	adds	r3, r7, #7
 8004782:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004784:	1dfb      	adds	r3, r7, #7
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b7f      	cmp	r3, #127	; 0x7f
 800478a:	d809      	bhi.n	80047a0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800478c:	1dfb      	adds	r3, r7, #7
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	001a      	movs	r2, r3
 8004792:	231f      	movs	r3, #31
 8004794:	401a      	ands	r2, r3
 8004796:	4b04      	ldr	r3, [pc, #16]	; (80047a8 <__NVIC_EnableIRQ+0x30>)
 8004798:	2101      	movs	r1, #1
 800479a:	4091      	lsls	r1, r2
 800479c:	000a      	movs	r2, r1
 800479e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80047a0:	46c0      	nop			; (mov r8, r8)
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b002      	add	sp, #8
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	e000e100 	.word	0xe000e100

080047ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047ac:	b590      	push	{r4, r7, lr}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	0002      	movs	r2, r0
 80047b4:	6039      	str	r1, [r7, #0]
 80047b6:	1dfb      	adds	r3, r7, #7
 80047b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80047ba:	1dfb      	adds	r3, r7, #7
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b7f      	cmp	r3, #127	; 0x7f
 80047c0:	d828      	bhi.n	8004814 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047c2:	4a2f      	ldr	r2, [pc, #188]	; (8004880 <__NVIC_SetPriority+0xd4>)
 80047c4:	1dfb      	adds	r3, r7, #7
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	b25b      	sxtb	r3, r3
 80047ca:	089b      	lsrs	r3, r3, #2
 80047cc:	33c0      	adds	r3, #192	; 0xc0
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	589b      	ldr	r3, [r3, r2]
 80047d2:	1dfa      	adds	r2, r7, #7
 80047d4:	7812      	ldrb	r2, [r2, #0]
 80047d6:	0011      	movs	r1, r2
 80047d8:	2203      	movs	r2, #3
 80047da:	400a      	ands	r2, r1
 80047dc:	00d2      	lsls	r2, r2, #3
 80047de:	21ff      	movs	r1, #255	; 0xff
 80047e0:	4091      	lsls	r1, r2
 80047e2:	000a      	movs	r2, r1
 80047e4:	43d2      	mvns	r2, r2
 80047e6:	401a      	ands	r2, r3
 80047e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	019b      	lsls	r3, r3, #6
 80047ee:	22ff      	movs	r2, #255	; 0xff
 80047f0:	401a      	ands	r2, r3
 80047f2:	1dfb      	adds	r3, r7, #7
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	0018      	movs	r0, r3
 80047f8:	2303      	movs	r3, #3
 80047fa:	4003      	ands	r3, r0
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004800:	481f      	ldr	r0, [pc, #124]	; (8004880 <__NVIC_SetPriority+0xd4>)
 8004802:	1dfb      	adds	r3, r7, #7
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	b25b      	sxtb	r3, r3
 8004808:	089b      	lsrs	r3, r3, #2
 800480a:	430a      	orrs	r2, r1
 800480c:	33c0      	adds	r3, #192	; 0xc0
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004812:	e031      	b.n	8004878 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004814:	4a1b      	ldr	r2, [pc, #108]	; (8004884 <__NVIC_SetPriority+0xd8>)
 8004816:	1dfb      	adds	r3, r7, #7
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	0019      	movs	r1, r3
 800481c:	230f      	movs	r3, #15
 800481e:	400b      	ands	r3, r1
 8004820:	3b08      	subs	r3, #8
 8004822:	089b      	lsrs	r3, r3, #2
 8004824:	3306      	adds	r3, #6
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	18d3      	adds	r3, r2, r3
 800482a:	3304      	adds	r3, #4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	1dfa      	adds	r2, r7, #7
 8004830:	7812      	ldrb	r2, [r2, #0]
 8004832:	0011      	movs	r1, r2
 8004834:	2203      	movs	r2, #3
 8004836:	400a      	ands	r2, r1
 8004838:	00d2      	lsls	r2, r2, #3
 800483a:	21ff      	movs	r1, #255	; 0xff
 800483c:	4091      	lsls	r1, r2
 800483e:	000a      	movs	r2, r1
 8004840:	43d2      	mvns	r2, r2
 8004842:	401a      	ands	r2, r3
 8004844:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	22ff      	movs	r2, #255	; 0xff
 800484c:	401a      	ands	r2, r3
 800484e:	1dfb      	adds	r3, r7, #7
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	0018      	movs	r0, r3
 8004854:	2303      	movs	r3, #3
 8004856:	4003      	ands	r3, r0
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800485c:	4809      	ldr	r0, [pc, #36]	; (8004884 <__NVIC_SetPriority+0xd8>)
 800485e:	1dfb      	adds	r3, r7, #7
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	001c      	movs	r4, r3
 8004864:	230f      	movs	r3, #15
 8004866:	4023      	ands	r3, r4
 8004868:	3b08      	subs	r3, #8
 800486a:	089b      	lsrs	r3, r3, #2
 800486c:	430a      	orrs	r2, r1
 800486e:	3306      	adds	r3, #6
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	18c3      	adds	r3, r0, r3
 8004874:	3304      	adds	r3, #4
 8004876:	601a      	str	r2, [r3, #0]
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	b003      	add	sp, #12
 800487e:	bd90      	pop	{r4, r7, pc}
 8004880:	e000e100 	.word	0xe000e100
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	1e5a      	subs	r2, r3, #1
 8004894:	2380      	movs	r3, #128	; 0x80
 8004896:	045b      	lsls	r3, r3, #17
 8004898:	429a      	cmp	r2, r3
 800489a:	d301      	bcc.n	80048a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800489c:	2301      	movs	r3, #1
 800489e:	e010      	b.n	80048c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048a0:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <SysTick_Config+0x44>)
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	3a01      	subs	r2, #1
 80048a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048a8:	2301      	movs	r3, #1
 80048aa:	425b      	negs	r3, r3
 80048ac:	2103      	movs	r1, #3
 80048ae:	0018      	movs	r0, r3
 80048b0:	f7ff ff7c 	bl	80047ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <SysTick_Config+0x44>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ba:	4b04      	ldr	r3, [pc, #16]	; (80048cc <SysTick_Config+0x44>)
 80048bc:	2207      	movs	r2, #7
 80048be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	0018      	movs	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b002      	add	sp, #8
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	e000e010 	.word	0xe000e010

080048d0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	210f      	movs	r1, #15
 80048dc:	187b      	adds	r3, r7, r1
 80048de:	1c02      	adds	r2, r0, #0
 80048e0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	b25b      	sxtb	r3, r3
 80048ea:	0011      	movs	r1, r2
 80048ec:	0018      	movs	r0, r3
 80048ee:	f7ff ff5d 	bl	80047ac <__NVIC_SetPriority>
}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	46bd      	mov	sp, r7
 80048f6:	b004      	add	sp, #16
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	0002      	movs	r2, r0
 8004902:	1dfb      	adds	r3, r7, #7
 8004904:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004906:	1dfb      	adds	r3, r7, #7
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	b25b      	sxtb	r3, r3
 800490c:	0018      	movs	r0, r3
 800490e:	f7ff ff33 	bl	8004778 <__NVIC_EnableIRQ>
}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	46bd      	mov	sp, r7
 8004916:	b002      	add	sp, #8
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f7ff ffaf 	bl	8004888 <SysTick_Config>
 800492a:	0003      	movs	r3, r0
}
 800492c:	0018      	movs	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	b002      	add	sp, #8
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004942:	e147      	b.n	8004bd4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2101      	movs	r1, #1
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4091      	lsls	r1, r2
 800494e:	000a      	movs	r2, r1
 8004950:	4013      	ands	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d100      	bne.n	800495c <HAL_GPIO_Init+0x28>
 800495a:	e138      	b.n	8004bce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2203      	movs	r2, #3
 8004962:	4013      	ands	r3, r2
 8004964:	2b01      	cmp	r3, #1
 8004966:	d005      	beq.n	8004974 <HAL_GPIO_Init+0x40>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2203      	movs	r2, #3
 800496e:	4013      	ands	r3, r2
 8004970:	2b02      	cmp	r3, #2
 8004972:	d130      	bne.n	80049d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	2203      	movs	r2, #3
 8004980:	409a      	lsls	r2, r3
 8004982:	0013      	movs	r3, r2
 8004984:	43da      	mvns	r2, r3
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4013      	ands	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	409a      	lsls	r2, r3
 8004996:	0013      	movs	r3, r2
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049aa:	2201      	movs	r2, #1
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	409a      	lsls	r2, r3
 80049b0:	0013      	movs	r3, r2
 80049b2:	43da      	mvns	r2, r3
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4013      	ands	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	091b      	lsrs	r3, r3, #4
 80049c0:	2201      	movs	r2, #1
 80049c2:	401a      	ands	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	409a      	lsls	r2, r3
 80049c8:	0013      	movs	r3, r2
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2203      	movs	r2, #3
 80049dc:	4013      	ands	r3, r2
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d017      	beq.n	8004a12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	2203      	movs	r2, #3
 80049ee:	409a      	lsls	r2, r3
 80049f0:	0013      	movs	r3, r2
 80049f2:	43da      	mvns	r2, r3
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	4013      	ands	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	409a      	lsls	r2, r3
 8004a04:	0013      	movs	r3, r2
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2203      	movs	r2, #3
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d123      	bne.n	8004a66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	08da      	lsrs	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3208      	adds	r2, #8
 8004a26:	0092      	lsls	r2, r2, #2
 8004a28:	58d3      	ldr	r3, [r2, r3]
 8004a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2207      	movs	r2, #7
 8004a30:	4013      	ands	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	220f      	movs	r2, #15
 8004a36:	409a      	lsls	r2, r3
 8004a38:	0013      	movs	r3, r2
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2107      	movs	r1, #7
 8004a4a:	400b      	ands	r3, r1
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	0013      	movs	r3, r2
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	08da      	lsrs	r2, r3, #3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3208      	adds	r2, #8
 8004a60:	0092      	lsls	r2, r2, #2
 8004a62:	6939      	ldr	r1, [r7, #16]
 8004a64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	2203      	movs	r2, #3
 8004a72:	409a      	lsls	r2, r3
 8004a74:	0013      	movs	r3, r2
 8004a76:	43da      	mvns	r2, r3
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2203      	movs	r2, #3
 8004a84:	401a      	ands	r2, r3
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	0013      	movs	r3, r2
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	23c0      	movs	r3, #192	; 0xc0
 8004aa0:	029b      	lsls	r3, r3, #10
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d100      	bne.n	8004aa8 <HAL_GPIO_Init+0x174>
 8004aa6:	e092      	b.n	8004bce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004aa8:	4a50      	ldr	r2, [pc, #320]	; (8004bec <HAL_GPIO_Init+0x2b8>)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	089b      	lsrs	r3, r3, #2
 8004aae:	3318      	adds	r3, #24
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	589b      	ldr	r3, [r3, r2]
 8004ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2203      	movs	r2, #3
 8004aba:	4013      	ands	r3, r2
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	220f      	movs	r2, #15
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	0013      	movs	r3, r2
 8004ac4:	43da      	mvns	r2, r3
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	23a0      	movs	r3, #160	; 0xa0
 8004ad0:	05db      	lsls	r3, r3, #23
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d013      	beq.n	8004afe <HAL_GPIO_Init+0x1ca>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a45      	ldr	r2, [pc, #276]	; (8004bf0 <HAL_GPIO_Init+0x2bc>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00d      	beq.n	8004afa <HAL_GPIO_Init+0x1c6>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a44      	ldr	r2, [pc, #272]	; (8004bf4 <HAL_GPIO_Init+0x2c0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d007      	beq.n	8004af6 <HAL_GPIO_Init+0x1c2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a43      	ldr	r2, [pc, #268]	; (8004bf8 <HAL_GPIO_Init+0x2c4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d101      	bne.n	8004af2 <HAL_GPIO_Init+0x1be>
 8004aee:	2303      	movs	r3, #3
 8004af0:	e006      	b.n	8004b00 <HAL_GPIO_Init+0x1cc>
 8004af2:	2305      	movs	r3, #5
 8004af4:	e004      	b.n	8004b00 <HAL_GPIO_Init+0x1cc>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e002      	b.n	8004b00 <HAL_GPIO_Init+0x1cc>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <HAL_GPIO_Init+0x1cc>
 8004afe:	2300      	movs	r3, #0
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	2103      	movs	r1, #3
 8004b04:	400a      	ands	r2, r1
 8004b06:	00d2      	lsls	r2, r2, #3
 8004b08:	4093      	lsls	r3, r2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004b10:	4936      	ldr	r1, [pc, #216]	; (8004bec <HAL_GPIO_Init+0x2b8>)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	089b      	lsrs	r3, r3, #2
 8004b16:	3318      	adds	r3, #24
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b1e:	4b33      	ldr	r3, [pc, #204]	; (8004bec <HAL_GPIO_Init+0x2b8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	43da      	mvns	r2, r3
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	2380      	movs	r3, #128	; 0x80
 8004b34:	035b      	lsls	r3, r3, #13
 8004b36:	4013      	ands	r3, r2
 8004b38:	d003      	beq.n	8004b42 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b42:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <HAL_GPIO_Init+0x2b8>)
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004b48:	4b28      	ldr	r3, [pc, #160]	; (8004bec <HAL_GPIO_Init+0x2b8>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	43da      	mvns	r2, r3
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4013      	ands	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	2380      	movs	r3, #128	; 0x80
 8004b5e:	039b      	lsls	r3, r3, #14
 8004b60:	4013      	ands	r3, r2
 8004b62:	d003      	beq.n	8004b6c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b6c:	4b1f      	ldr	r3, [pc, #124]	; (8004bec <HAL_GPIO_Init+0x2b8>)
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004b72:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <HAL_GPIO_Init+0x2b8>)
 8004b74:	2384      	movs	r3, #132	; 0x84
 8004b76:	58d3      	ldr	r3, [r2, r3]
 8004b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	43da      	mvns	r2, r3
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4013      	ands	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	029b      	lsls	r3, r3, #10
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d003      	beq.n	8004b98 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b98:	4914      	ldr	r1, [pc, #80]	; (8004bec <HAL_GPIO_Init+0x2b8>)
 8004b9a:	2284      	movs	r2, #132	; 0x84
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004ba0:	4a12      	ldr	r2, [pc, #72]	; (8004bec <HAL_GPIO_Init+0x2b8>)
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	58d3      	ldr	r3, [r2, r3]
 8004ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	43da      	mvns	r2, r3
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	2380      	movs	r3, #128	; 0x80
 8004bb8:	025b      	lsls	r3, r3, #9
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d003      	beq.n	8004bc6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004bc6:	4909      	ldr	r1, [pc, #36]	; (8004bec <HAL_GPIO_Init+0x2b8>)
 8004bc8:	2280      	movs	r2, #128	; 0x80
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	40da      	lsrs	r2, r3
 8004bdc:	1e13      	subs	r3, r2, #0
 8004bde:	d000      	beq.n	8004be2 <HAL_GPIO_Init+0x2ae>
 8004be0:	e6b0      	b.n	8004944 <HAL_GPIO_Init+0x10>
  }
}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	46c0      	nop			; (mov r8, r8)
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b006      	add	sp, #24
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40021800 	.word	0x40021800
 8004bf0:	50000400 	.word	0x50000400
 8004bf4:	50000800 	.word	0x50000800
 8004bf8:	50000c00 	.word	0x50000c00

08004bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	0008      	movs	r0, r1
 8004c06:	0011      	movs	r1, r2
 8004c08:	1cbb      	adds	r3, r7, #2
 8004c0a:	1c02      	adds	r2, r0, #0
 8004c0c:	801a      	strh	r2, [r3, #0]
 8004c0e:	1c7b      	adds	r3, r7, #1
 8004c10:	1c0a      	adds	r2, r1, #0
 8004c12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c14:	1c7b      	adds	r3, r7, #1
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d004      	beq.n	8004c26 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c1c:	1cbb      	adds	r3, r7, #2
 8004c1e:	881a      	ldrh	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c24:	e003      	b.n	8004c2e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c26:	1cbb      	adds	r3, r7, #2
 8004c28:	881a      	ldrh	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b002      	add	sp, #8
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	000a      	movs	r2, r1
 8004c40:	1cbb      	adds	r3, r7, #2
 8004c42:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c4a:	1cbb      	adds	r3, r7, #2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4013      	ands	r3, r2
 8004c52:	041a      	lsls	r2, r3, #16
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	1cb9      	adds	r1, r7, #2
 8004c5a:	8809      	ldrh	r1, [r1, #0]
 8004c5c:	400b      	ands	r3, r1
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	619a      	str	r2, [r3, #24]
}
 8004c64:	46c0      	nop			; (mov r8, r8)
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b004      	add	sp, #16
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004c74:	4b19      	ldr	r3, [pc, #100]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d11f      	bne.n	8004cd0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004c90:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	0013      	movs	r3, r2
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	189b      	adds	r3, r3, r2
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	4912      	ldr	r1, [pc, #72]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f7fb fa40 	bl	8000124 <__udivsi3>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004caa:	e008      	b.n	8004cbe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	e001      	b.n	8004cbe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e009      	b.n	8004cd2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cbe:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	401a      	ands	r2, r3
 8004cc8:	2380      	movs	r3, #128	; 0x80
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d0ed      	beq.n	8004cac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b004      	add	sp, #16
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	40007000 	.word	0x40007000
 8004ce0:	fffff9ff 	.word	0xfffff9ff
 8004ce4:	20000004 	.word	0x20000004
 8004ce8:	000f4240 	.word	0x000f4240

08004cec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004cf0:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	23e0      	movs	r3, #224	; 0xe0
 8004cf6:	01db      	lsls	r3, r3, #7
 8004cf8:	4013      	ands	r3, r2
}
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40021000 	.word	0x40021000

08004d04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e2f3      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d100      	bne.n	8004d22 <HAL_RCC_OscConfig+0x1e>
 8004d20:	e07c      	b.n	8004e1c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d22:	4bc3      	ldr	r3, [pc, #780]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2238      	movs	r2, #56	; 0x38
 8004d28:	4013      	ands	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d2c:	4bc0      	ldr	r3, [pc, #768]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2203      	movs	r2, #3
 8004d32:	4013      	ands	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d102      	bne.n	8004d42 <HAL_RCC_OscConfig+0x3e>
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d002      	beq.n	8004d48 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d10b      	bne.n	8004d60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d48:	4bb9      	ldr	r3, [pc, #740]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	029b      	lsls	r3, r3, #10
 8004d50:	4013      	ands	r3, r2
 8004d52:	d062      	beq.n	8004e1a <HAL_RCC_OscConfig+0x116>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d15e      	bne.n	8004e1a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e2ce      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	025b      	lsls	r3, r3, #9
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d107      	bne.n	8004d7c <HAL_RCC_OscConfig+0x78>
 8004d6c:	4bb0      	ldr	r3, [pc, #704]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4baf      	ldr	r3, [pc, #700]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004d72:	2180      	movs	r1, #128	; 0x80
 8004d74:	0249      	lsls	r1, r1, #9
 8004d76:	430a      	orrs	r2, r1
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e020      	b.n	8004dbe <HAL_RCC_OscConfig+0xba>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	23a0      	movs	r3, #160	; 0xa0
 8004d82:	02db      	lsls	r3, r3, #11
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d10e      	bne.n	8004da6 <HAL_RCC_OscConfig+0xa2>
 8004d88:	4ba9      	ldr	r3, [pc, #676]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	4ba8      	ldr	r3, [pc, #672]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004d8e:	2180      	movs	r1, #128	; 0x80
 8004d90:	02c9      	lsls	r1, r1, #11
 8004d92:	430a      	orrs	r2, r1
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	4ba6      	ldr	r3, [pc, #664]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4ba5      	ldr	r3, [pc, #660]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004d9c:	2180      	movs	r1, #128	; 0x80
 8004d9e:	0249      	lsls	r1, r1, #9
 8004da0:	430a      	orrs	r2, r1
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	e00b      	b.n	8004dbe <HAL_RCC_OscConfig+0xba>
 8004da6:	4ba2      	ldr	r3, [pc, #648]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	4ba1      	ldr	r3, [pc, #644]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004dac:	49a1      	ldr	r1, [pc, #644]	; (8005034 <HAL_RCC_OscConfig+0x330>)
 8004dae:	400a      	ands	r2, r1
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	4b9f      	ldr	r3, [pc, #636]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	4b9e      	ldr	r3, [pc, #632]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004db8:	499f      	ldr	r1, [pc, #636]	; (8005038 <HAL_RCC_OscConfig+0x334>)
 8004dba:	400a      	ands	r2, r1
 8004dbc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d014      	beq.n	8004df0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc6:	f7fe fd93 	bl	80038f0 <HAL_GetTick>
 8004dca:	0003      	movs	r3, r0
 8004dcc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd0:	f7fe fd8e 	bl	80038f0 <HAL_GetTick>
 8004dd4:	0002      	movs	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	; 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e28d      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de2:	4b93      	ldr	r3, [pc, #588]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	029b      	lsls	r3, r3, #10
 8004dea:	4013      	ands	r3, r2
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0xcc>
 8004dee:	e015      	b.n	8004e1c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fe fd7e 	bl	80038f0 <HAL_GetTick>
 8004df4:	0003      	movs	r3, r0
 8004df6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dfa:	f7fe fd79 	bl	80038f0 <HAL_GetTick>
 8004dfe:	0002      	movs	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b64      	cmp	r3, #100	; 0x64
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e278      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e0c:	4b88      	ldr	r3, [pc, #544]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	029b      	lsls	r3, r3, #10
 8004e14:	4013      	ands	r3, r2
 8004e16:	d1f0      	bne.n	8004dfa <HAL_RCC_OscConfig+0xf6>
 8004e18:	e000      	b.n	8004e1c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2202      	movs	r2, #2
 8004e22:	4013      	ands	r3, r2
 8004e24:	d100      	bne.n	8004e28 <HAL_RCC_OscConfig+0x124>
 8004e26:	e099      	b.n	8004f5c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e28:	4b81      	ldr	r3, [pc, #516]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2238      	movs	r2, #56	; 0x38
 8004e2e:	4013      	ands	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e32:	4b7f      	ldr	r3, [pc, #508]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	2203      	movs	r2, #3
 8004e38:	4013      	ands	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	2b10      	cmp	r3, #16
 8004e40:	d102      	bne.n	8004e48 <HAL_RCC_OscConfig+0x144>
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d002      	beq.n	8004e4e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d135      	bne.n	8004eba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e4e:	4b78      	ldr	r3, [pc, #480]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4013      	ands	r3, r2
 8004e58:	d005      	beq.n	8004e66 <HAL_RCC_OscConfig+0x162>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e24b      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e66:	4b72      	ldr	r3, [pc, #456]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	4a74      	ldr	r2, [pc, #464]	; (800503c <HAL_RCC_OscConfig+0x338>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	0019      	movs	r1, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	021a      	lsls	r2, r3, #8
 8004e76:	4b6e      	ldr	r3, [pc, #440]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d112      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004e82:	4b6b      	ldr	r3, [pc, #428]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a6e      	ldr	r2, [pc, #440]	; (8005040 <HAL_RCC_OscConfig+0x33c>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	4b67      	ldr	r3, [pc, #412]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004e92:	430a      	orrs	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004e96:	4b66      	ldr	r3, [pc, #408]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	0adb      	lsrs	r3, r3, #11
 8004e9c:	2207      	movs	r2, #7
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	4a68      	ldr	r2, [pc, #416]	; (8005044 <HAL_RCC_OscConfig+0x340>)
 8004ea2:	40da      	lsrs	r2, r3
 8004ea4:	4b68      	ldr	r3, [pc, #416]	; (8005048 <HAL_RCC_OscConfig+0x344>)
 8004ea6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ea8:	4b68      	ldr	r3, [pc, #416]	; (800504c <HAL_RCC_OscConfig+0x348>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	0018      	movs	r0, r3
 8004eae:	f7fe fcc3 	bl	8003838 <HAL_InitTick>
 8004eb2:	1e03      	subs	r3, r0, #0
 8004eb4:	d051      	beq.n	8004f5a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e221      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d030      	beq.n	8004f24 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ec2:	4b5b      	ldr	r3, [pc, #364]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a5e      	ldr	r2, [pc, #376]	; (8005040 <HAL_RCC_OscConfig+0x33c>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	0019      	movs	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	4b57      	ldr	r3, [pc, #348]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004ed6:	4b56      	ldr	r3, [pc, #344]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b55      	ldr	r3, [pc, #340]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004edc:	2180      	movs	r1, #128	; 0x80
 8004ede:	0049      	lsls	r1, r1, #1
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee4:	f7fe fd04 	bl	80038f0 <HAL_GetTick>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eee:	f7fe fcff 	bl	80038f0 <HAL_GetTick>
 8004ef2:	0002      	movs	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e1fe      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f00:	4b4b      	ldr	r3, [pc, #300]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d0f0      	beq.n	8004eee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0c:	4b48      	ldr	r3, [pc, #288]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4a4a      	ldr	r2, [pc, #296]	; (800503c <HAL_RCC_OscConfig+0x338>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	0019      	movs	r1, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	021a      	lsls	r2, r3, #8
 8004f1c:	4b44      	ldr	r3, [pc, #272]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
 8004f22:	e01b      	b.n	8004f5c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004f24:	4b42      	ldr	r3, [pc, #264]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4b41      	ldr	r3, [pc, #260]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004f2a:	4949      	ldr	r1, [pc, #292]	; (8005050 <HAL_RCC_OscConfig+0x34c>)
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fe fcde 	bl	80038f0 <HAL_GetTick>
 8004f34:	0003      	movs	r3, r0
 8004f36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f3a:	f7fe fcd9 	bl	80038f0 <HAL_GetTick>
 8004f3e:	0002      	movs	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e1d8      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f4c:	4b38      	ldr	r3, [pc, #224]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	4013      	ands	r3, r2
 8004f56:	d1f0      	bne.n	8004f3a <HAL_RCC_OscConfig+0x236>
 8004f58:	e000      	b.n	8004f5c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f5a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2208      	movs	r2, #8
 8004f62:	4013      	ands	r3, r2
 8004f64:	d047      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004f66:	4b32      	ldr	r3, [pc, #200]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2238      	movs	r2, #56	; 0x38
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b18      	cmp	r3, #24
 8004f70:	d10a      	bne.n	8004f88 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004f72:	4b2f      	ldr	r3, [pc, #188]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f76:	2202      	movs	r2, #2
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d03c      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x2f2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d138      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e1ba      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d019      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004f90:	4b27      	ldr	r3, [pc, #156]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004f92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f94:	4b26      	ldr	r3, [pc, #152]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004f96:	2101      	movs	r1, #1
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fe fca8 	bl	80038f0 <HAL_GetTick>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa6:	f7fe fca3 	bl	80038f0 <HAL_GetTick>
 8004faa:	0002      	movs	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e1a2      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d0f1      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x2a2>
 8004fc2:	e018      	b.n	8004ff6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004fc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fc8:	4b19      	ldr	r3, [pc, #100]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004fca:	2101      	movs	r1, #1
 8004fcc:	438a      	bics	r2, r1
 8004fce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fe fc8e 	bl	80038f0 <HAL_GetTick>
 8004fd4:	0003      	movs	r3, r0
 8004fd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fda:	f7fe fc89 	bl	80038f0 <HAL_GetTick>
 8004fde:	0002      	movs	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e188      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fec:	4b10      	ldr	r3, [pc, #64]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8004fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d1f1      	bne.n	8004fda <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2204      	movs	r2, #4
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d100      	bne.n	8005002 <HAL_RCC_OscConfig+0x2fe>
 8005000:	e0c6      	b.n	8005190 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005002:	231f      	movs	r3, #31
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	2200      	movs	r2, #0
 8005008:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800500a:	4b09      	ldr	r3, [pc, #36]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2238      	movs	r2, #56	; 0x38
 8005010:	4013      	ands	r3, r2
 8005012:	2b20      	cmp	r3, #32
 8005014:	d11e      	bne.n	8005054 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005016:	4b06      	ldr	r3, [pc, #24]	; (8005030 <HAL_RCC_OscConfig+0x32c>)
 8005018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501a:	2202      	movs	r2, #2
 800501c:	4013      	ands	r3, r2
 800501e:	d100      	bne.n	8005022 <HAL_RCC_OscConfig+0x31e>
 8005020:	e0b6      	b.n	8005190 <HAL_RCC_OscConfig+0x48c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d000      	beq.n	800502c <HAL_RCC_OscConfig+0x328>
 800502a:	e0b1      	b.n	8005190 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e166      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
 8005030:	40021000 	.word	0x40021000
 8005034:	fffeffff 	.word	0xfffeffff
 8005038:	fffbffff 	.word	0xfffbffff
 800503c:	ffff80ff 	.word	0xffff80ff
 8005040:	ffffc7ff 	.word	0xffffc7ff
 8005044:	00f42400 	.word	0x00f42400
 8005048:	20000004 	.word	0x20000004
 800504c:	20000008 	.word	0x20000008
 8005050:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005054:	4bac      	ldr	r3, [pc, #688]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 8005056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	055b      	lsls	r3, r3, #21
 800505c:	4013      	ands	r3, r2
 800505e:	d101      	bne.n	8005064 <HAL_RCC_OscConfig+0x360>
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <HAL_RCC_OscConfig+0x362>
 8005064:	2300      	movs	r3, #0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d011      	beq.n	800508e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800506a:	4ba7      	ldr	r3, [pc, #668]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 800506c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800506e:	4ba6      	ldr	r3, [pc, #664]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 8005070:	2180      	movs	r1, #128	; 0x80
 8005072:	0549      	lsls	r1, r1, #21
 8005074:	430a      	orrs	r2, r1
 8005076:	63da      	str	r2, [r3, #60]	; 0x3c
 8005078:	4ba3      	ldr	r3, [pc, #652]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 800507a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800507c:	2380      	movs	r3, #128	; 0x80
 800507e:	055b      	lsls	r3, r3, #21
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005086:	231f      	movs	r3, #31
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	2201      	movs	r2, #1
 800508c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800508e:	4b9f      	ldr	r3, [pc, #636]	; (800530c <HAL_RCC_OscConfig+0x608>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	2380      	movs	r3, #128	; 0x80
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	4013      	ands	r3, r2
 8005098:	d11a      	bne.n	80050d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800509a:	4b9c      	ldr	r3, [pc, #624]	; (800530c <HAL_RCC_OscConfig+0x608>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	4b9b      	ldr	r3, [pc, #620]	; (800530c <HAL_RCC_OscConfig+0x608>)
 80050a0:	2180      	movs	r1, #128	; 0x80
 80050a2:	0049      	lsls	r1, r1, #1
 80050a4:	430a      	orrs	r2, r1
 80050a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80050a8:	f7fe fc22 	bl	80038f0 <HAL_GetTick>
 80050ac:	0003      	movs	r3, r0
 80050ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b2:	f7fe fc1d 	bl	80038f0 <HAL_GetTick>
 80050b6:	0002      	movs	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e11c      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c4:	4b91      	ldr	r3, [pc, #580]	; (800530c <HAL_RCC_OscConfig+0x608>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	2380      	movs	r3, #128	; 0x80
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	4013      	ands	r3, r2
 80050ce:	d0f0      	beq.n	80050b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d106      	bne.n	80050e6 <HAL_RCC_OscConfig+0x3e2>
 80050d8:	4b8b      	ldr	r3, [pc, #556]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 80050da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050dc:	4b8a      	ldr	r3, [pc, #552]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 80050de:	2101      	movs	r1, #1
 80050e0:	430a      	orrs	r2, r1
 80050e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80050e4:	e01c      	b.n	8005120 <HAL_RCC_OscConfig+0x41c>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b05      	cmp	r3, #5
 80050ec:	d10c      	bne.n	8005108 <HAL_RCC_OscConfig+0x404>
 80050ee:	4b86      	ldr	r3, [pc, #536]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 80050f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050f2:	4b85      	ldr	r3, [pc, #532]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 80050f4:	2104      	movs	r1, #4
 80050f6:	430a      	orrs	r2, r1
 80050f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80050fa:	4b83      	ldr	r3, [pc, #524]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 80050fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050fe:	4b82      	ldr	r3, [pc, #520]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 8005100:	2101      	movs	r1, #1
 8005102:	430a      	orrs	r2, r1
 8005104:	65da      	str	r2, [r3, #92]	; 0x5c
 8005106:	e00b      	b.n	8005120 <HAL_RCC_OscConfig+0x41c>
 8005108:	4b7f      	ldr	r3, [pc, #508]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 800510a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800510c:	4b7e      	ldr	r3, [pc, #504]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 800510e:	2101      	movs	r1, #1
 8005110:	438a      	bics	r2, r1
 8005112:	65da      	str	r2, [r3, #92]	; 0x5c
 8005114:	4b7c      	ldr	r3, [pc, #496]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 8005116:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005118:	4b7b      	ldr	r3, [pc, #492]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 800511a:	2104      	movs	r1, #4
 800511c:	438a      	bics	r2, r1
 800511e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d014      	beq.n	8005152 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fe fbe2 	bl	80038f0 <HAL_GetTick>
 800512c:	0003      	movs	r3, r0
 800512e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005130:	e009      	b.n	8005146 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005132:	f7fe fbdd 	bl	80038f0 <HAL_GetTick>
 8005136:	0002      	movs	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	4a74      	ldr	r2, [pc, #464]	; (8005310 <HAL_RCC_OscConfig+0x60c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e0db      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005146:	4b70      	ldr	r3, [pc, #448]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 8005148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514a:	2202      	movs	r2, #2
 800514c:	4013      	ands	r3, r2
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x42e>
 8005150:	e013      	b.n	800517a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005152:	f7fe fbcd 	bl	80038f0 <HAL_GetTick>
 8005156:	0003      	movs	r3, r0
 8005158:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800515a:	e009      	b.n	8005170 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800515c:	f7fe fbc8 	bl	80038f0 <HAL_GetTick>
 8005160:	0002      	movs	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	4a6a      	ldr	r2, [pc, #424]	; (8005310 <HAL_RCC_OscConfig+0x60c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e0c6      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005170:	4b65      	ldr	r3, [pc, #404]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 8005172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005174:	2202      	movs	r2, #2
 8005176:	4013      	ands	r3, r2
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800517a:	231f      	movs	r3, #31
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d105      	bne.n	8005190 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005184:	4b60      	ldr	r3, [pc, #384]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 8005186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005188:	4b5f      	ldr	r3, [pc, #380]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 800518a:	4962      	ldr	r1, [pc, #392]	; (8005314 <HAL_RCC_OscConfig+0x610>)
 800518c:	400a      	ands	r2, r1
 800518e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d100      	bne.n	800519a <HAL_RCC_OscConfig+0x496>
 8005198:	e0b0      	b.n	80052fc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800519a:	4b5b      	ldr	r3, [pc, #364]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2238      	movs	r2, #56	; 0x38
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d100      	bne.n	80051a8 <HAL_RCC_OscConfig+0x4a4>
 80051a6:	e078      	b.n	800529a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d153      	bne.n	8005258 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b0:	4b55      	ldr	r3, [pc, #340]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4b54      	ldr	r3, [pc, #336]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 80051b6:	4958      	ldr	r1, [pc, #352]	; (8005318 <HAL_RCC_OscConfig+0x614>)
 80051b8:	400a      	ands	r2, r1
 80051ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051bc:	f7fe fb98 	bl	80038f0 <HAL_GetTick>
 80051c0:	0003      	movs	r3, r0
 80051c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c6:	f7fe fb93 	bl	80038f0 <HAL_GetTick>
 80051ca:	0002      	movs	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e092      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051d8:	4b4b      	ldr	r3, [pc, #300]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	2380      	movs	r3, #128	; 0x80
 80051de:	049b      	lsls	r3, r3, #18
 80051e0:	4013      	ands	r3, r2
 80051e2:	d1f0      	bne.n	80051c6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051e4:	4b48      	ldr	r3, [pc, #288]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	4a4c      	ldr	r2, [pc, #304]	; (800531c <HAL_RCC_OscConfig+0x618>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	0019      	movs	r1, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1a      	ldr	r2, [r3, #32]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	431a      	orrs	r2, r3
 800520c:	4b3e      	ldr	r3, [pc, #248]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 800520e:	430a      	orrs	r2, r1
 8005210:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005212:	4b3d      	ldr	r3, [pc, #244]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	4b3c      	ldr	r3, [pc, #240]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 8005218:	2180      	movs	r1, #128	; 0x80
 800521a:	0449      	lsls	r1, r1, #17
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005220:	4b39      	ldr	r3, [pc, #228]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	4b38      	ldr	r3, [pc, #224]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 8005226:	2180      	movs	r1, #128	; 0x80
 8005228:	0549      	lsls	r1, r1, #21
 800522a:	430a      	orrs	r2, r1
 800522c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7fe fb5f 	bl	80038f0 <HAL_GetTick>
 8005232:	0003      	movs	r3, r0
 8005234:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005238:	f7fe fb5a 	bl	80038f0 <HAL_GetTick>
 800523c:	0002      	movs	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e059      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800524a:	4b2f      	ldr	r3, [pc, #188]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	049b      	lsls	r3, r3, #18
 8005252:	4013      	ands	r3, r2
 8005254:	d0f0      	beq.n	8005238 <HAL_RCC_OscConfig+0x534>
 8005256:	e051      	b.n	80052fc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005258:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	4b2a      	ldr	r3, [pc, #168]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 800525e:	492e      	ldr	r1, [pc, #184]	; (8005318 <HAL_RCC_OscConfig+0x614>)
 8005260:	400a      	ands	r2, r1
 8005262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fe fb44 	bl	80038f0 <HAL_GetTick>
 8005268:	0003      	movs	r3, r0
 800526a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526e:	f7fe fb3f 	bl	80038f0 <HAL_GetTick>
 8005272:	0002      	movs	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e03e      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005280:	4b21      	ldr	r3, [pc, #132]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	2380      	movs	r3, #128	; 0x80
 8005286:	049b      	lsls	r3, r3, #18
 8005288:	4013      	ands	r3, r2
 800528a:	d1f0      	bne.n	800526e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800528c:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	4b1d      	ldr	r3, [pc, #116]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 8005292:	4923      	ldr	r1, [pc, #140]	; (8005320 <HAL_RCC_OscConfig+0x61c>)
 8005294:	400a      	ands	r2, r1
 8005296:	60da      	str	r2, [r3, #12]
 8005298:	e030      	b.n	80052fc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e02b      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80052a6:	4b18      	ldr	r3, [pc, #96]	; (8005308 <HAL_RCC_OscConfig+0x604>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2203      	movs	r2, #3
 80052b0:	401a      	ands	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d11e      	bne.n	80052f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2270      	movs	r2, #112	; 0x70
 80052be:	401a      	ands	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d117      	bne.n	80052f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	23fe      	movs	r3, #254	; 0xfe
 80052cc:	01db      	lsls	r3, r3, #7
 80052ce:	401a      	ands	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d10e      	bne.n	80052f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	23f8      	movs	r3, #248	; 0xf8
 80052de:	039b      	lsls	r3, r3, #14
 80052e0:	401a      	ands	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d106      	bne.n	80052f8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	0f5b      	lsrs	r3, r3, #29
 80052ee:	075a      	lsls	r2, r3, #29
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d001      	beq.n	80052fc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	0018      	movs	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	b008      	add	sp, #32
 8005304:	bd80      	pop	{r7, pc}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	40021000 	.word	0x40021000
 800530c:	40007000 	.word	0x40007000
 8005310:	00001388 	.word	0x00001388
 8005314:	efffffff 	.word	0xefffffff
 8005318:	feffffff 	.word	0xfeffffff
 800531c:	1fc1808c 	.word	0x1fc1808c
 8005320:	effefffc 	.word	0xeffefffc

08005324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0e9      	b.n	800550c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005338:	4b76      	ldr	r3, [pc, #472]	; (8005514 <HAL_RCC_ClockConfig+0x1f0>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2207      	movs	r2, #7
 800533e:	4013      	ands	r3, r2
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d91e      	bls.n	8005384 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005346:	4b73      	ldr	r3, [pc, #460]	; (8005514 <HAL_RCC_ClockConfig+0x1f0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2207      	movs	r2, #7
 800534c:	4393      	bics	r3, r2
 800534e:	0019      	movs	r1, r3
 8005350:	4b70      	ldr	r3, [pc, #448]	; (8005514 <HAL_RCC_ClockConfig+0x1f0>)
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005358:	f7fe faca 	bl	80038f0 <HAL_GetTick>
 800535c:	0003      	movs	r3, r0
 800535e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005360:	e009      	b.n	8005376 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005362:	f7fe fac5 	bl	80038f0 <HAL_GetTick>
 8005366:	0002      	movs	r2, r0
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	4a6a      	ldr	r2, [pc, #424]	; (8005518 <HAL_RCC_ClockConfig+0x1f4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e0ca      	b.n	800550c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005376:	4b67      	ldr	r3, [pc, #412]	; (8005514 <HAL_RCC_ClockConfig+0x1f0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2207      	movs	r2, #7
 800537c:	4013      	ands	r3, r2
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d1ee      	bne.n	8005362 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2202      	movs	r2, #2
 800538a:	4013      	ands	r3, r2
 800538c:	d015      	beq.n	80053ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2204      	movs	r2, #4
 8005394:	4013      	ands	r3, r2
 8005396:	d006      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005398:	4b60      	ldr	r3, [pc, #384]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	4b5f      	ldr	r3, [pc, #380]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 800539e:	21e0      	movs	r1, #224	; 0xe0
 80053a0:	01c9      	lsls	r1, r1, #7
 80053a2:	430a      	orrs	r2, r1
 80053a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a6:	4b5d      	ldr	r3, [pc, #372]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	4a5d      	ldr	r2, [pc, #372]	; (8005520 <HAL_RCC_ClockConfig+0x1fc>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	0019      	movs	r1, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	4b59      	ldr	r3, [pc, #356]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 80053b6:	430a      	orrs	r2, r1
 80053b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2201      	movs	r2, #1
 80053c0:	4013      	ands	r3, r2
 80053c2:	d057      	beq.n	8005474 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d107      	bne.n	80053dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053cc:	4b53      	ldr	r3, [pc, #332]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	2380      	movs	r3, #128	; 0x80
 80053d2:	029b      	lsls	r3, r3, #10
 80053d4:	4013      	ands	r3, r2
 80053d6:	d12b      	bne.n	8005430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e097      	b.n	800550c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d107      	bne.n	80053f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053e4:	4b4d      	ldr	r3, [pc, #308]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	049b      	lsls	r3, r3, #18
 80053ec:	4013      	ands	r3, r2
 80053ee:	d11f      	bne.n	8005430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e08b      	b.n	800550c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d107      	bne.n	800540c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053fc:	4b47      	ldr	r3, [pc, #284]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4013      	ands	r3, r2
 8005406:	d113      	bne.n	8005430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e07f      	b.n	800550c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b03      	cmp	r3, #3
 8005412:	d106      	bne.n	8005422 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005414:	4b41      	ldr	r3, [pc, #260]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 8005416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005418:	2202      	movs	r2, #2
 800541a:	4013      	ands	r3, r2
 800541c:	d108      	bne.n	8005430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e074      	b.n	800550c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005422:	4b3e      	ldr	r3, [pc, #248]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 8005424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005426:	2202      	movs	r2, #2
 8005428:	4013      	ands	r3, r2
 800542a:	d101      	bne.n	8005430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e06d      	b.n	800550c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005430:	4b3a      	ldr	r3, [pc, #232]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	2207      	movs	r2, #7
 8005436:	4393      	bics	r3, r2
 8005438:	0019      	movs	r1, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	4b37      	ldr	r3, [pc, #220]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 8005440:	430a      	orrs	r2, r1
 8005442:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005444:	f7fe fa54 	bl	80038f0 <HAL_GetTick>
 8005448:	0003      	movs	r3, r0
 800544a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544c:	e009      	b.n	8005462 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544e:	f7fe fa4f 	bl	80038f0 <HAL_GetTick>
 8005452:	0002      	movs	r2, r0
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	4a2f      	ldr	r2, [pc, #188]	; (8005518 <HAL_RCC_ClockConfig+0x1f4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e054      	b.n	800550c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005462:	4b2e      	ldr	r3, [pc, #184]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2238      	movs	r2, #56	; 0x38
 8005468:	401a      	ands	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	429a      	cmp	r2, r3
 8005472:	d1ec      	bne.n	800544e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005474:	4b27      	ldr	r3, [pc, #156]	; (8005514 <HAL_RCC_ClockConfig+0x1f0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2207      	movs	r2, #7
 800547a:	4013      	ands	r3, r2
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d21e      	bcs.n	80054c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005482:	4b24      	ldr	r3, [pc, #144]	; (8005514 <HAL_RCC_ClockConfig+0x1f0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2207      	movs	r2, #7
 8005488:	4393      	bics	r3, r2
 800548a:	0019      	movs	r1, r3
 800548c:	4b21      	ldr	r3, [pc, #132]	; (8005514 <HAL_RCC_ClockConfig+0x1f0>)
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005494:	f7fe fa2c 	bl	80038f0 <HAL_GetTick>
 8005498:	0003      	movs	r3, r0
 800549a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800549c:	e009      	b.n	80054b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800549e:	f7fe fa27 	bl	80038f0 <HAL_GetTick>
 80054a2:	0002      	movs	r2, r0
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	4a1b      	ldr	r2, [pc, #108]	; (8005518 <HAL_RCC_ClockConfig+0x1f4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e02c      	b.n	800550c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054b2:	4b18      	ldr	r3, [pc, #96]	; (8005514 <HAL_RCC_ClockConfig+0x1f0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2207      	movs	r2, #7
 80054b8:	4013      	ands	r3, r2
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d1ee      	bne.n	800549e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2204      	movs	r2, #4
 80054c6:	4013      	ands	r3, r2
 80054c8:	d009      	beq.n	80054de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80054ca:	4b14      	ldr	r3, [pc, #80]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	4a15      	ldr	r2, [pc, #84]	; (8005524 <HAL_RCC_ClockConfig+0x200>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	0019      	movs	r1, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	4b10      	ldr	r3, [pc, #64]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 80054da:	430a      	orrs	r2, r1
 80054dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80054de:	f000 f829 	bl	8005534 <HAL_RCC_GetSysClockFreq>
 80054e2:	0001      	movs	r1, r0
 80054e4:	4b0d      	ldr	r3, [pc, #52]	; (800551c <HAL_RCC_ClockConfig+0x1f8>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	0a1b      	lsrs	r3, r3, #8
 80054ea:	220f      	movs	r2, #15
 80054ec:	401a      	ands	r2, r3
 80054ee:	4b0e      	ldr	r3, [pc, #56]	; (8005528 <HAL_RCC_ClockConfig+0x204>)
 80054f0:	0092      	lsls	r2, r2, #2
 80054f2:	58d3      	ldr	r3, [r2, r3]
 80054f4:	221f      	movs	r2, #31
 80054f6:	4013      	ands	r3, r2
 80054f8:	000a      	movs	r2, r1
 80054fa:	40da      	lsrs	r2, r3
 80054fc:	4b0b      	ldr	r3, [pc, #44]	; (800552c <HAL_RCC_ClockConfig+0x208>)
 80054fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <HAL_RCC_ClockConfig+0x20c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	0018      	movs	r0, r3
 8005506:	f7fe f997 	bl	8003838 <HAL_InitTick>
 800550a:	0003      	movs	r3, r0
}
 800550c:	0018      	movs	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	b004      	add	sp, #16
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40022000 	.word	0x40022000
 8005518:	00001388 	.word	0x00001388
 800551c:	40021000 	.word	0x40021000
 8005520:	fffff0ff 	.word	0xfffff0ff
 8005524:	ffff8fff 	.word	0xffff8fff
 8005528:	08007358 	.word	0x08007358
 800552c:	20000004 	.word	0x20000004
 8005530:	20000008 	.word	0x20000008

08005534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800553a:	4b3c      	ldr	r3, [pc, #240]	; (800562c <HAL_RCC_GetSysClockFreq+0xf8>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2238      	movs	r2, #56	; 0x38
 8005540:	4013      	ands	r3, r2
 8005542:	d10f      	bne.n	8005564 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005544:	4b39      	ldr	r3, [pc, #228]	; (800562c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	0adb      	lsrs	r3, r3, #11
 800554a:	2207      	movs	r2, #7
 800554c:	4013      	ands	r3, r2
 800554e:	2201      	movs	r2, #1
 8005550:	409a      	lsls	r2, r3
 8005552:	0013      	movs	r3, r2
 8005554:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	4835      	ldr	r0, [pc, #212]	; (8005630 <HAL_RCC_GetSysClockFreq+0xfc>)
 800555a:	f7fa fde3 	bl	8000124 <__udivsi3>
 800555e:	0003      	movs	r3, r0
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	e05d      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005564:	4b31      	ldr	r3, [pc, #196]	; (800562c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2238      	movs	r2, #56	; 0x38
 800556a:	4013      	ands	r3, r2
 800556c:	2b08      	cmp	r3, #8
 800556e:	d102      	bne.n	8005576 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005570:	4b30      	ldr	r3, [pc, #192]	; (8005634 <HAL_RCC_GetSysClockFreq+0x100>)
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	e054      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005576:	4b2d      	ldr	r3, [pc, #180]	; (800562c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2238      	movs	r2, #56	; 0x38
 800557c:	4013      	ands	r3, r2
 800557e:	2b10      	cmp	r3, #16
 8005580:	d138      	bne.n	80055f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005582:	4b2a      	ldr	r3, [pc, #168]	; (800562c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	2203      	movs	r2, #3
 8005588:	4013      	ands	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800558c:	4b27      	ldr	r3, [pc, #156]	; (800562c <HAL_RCC_GetSysClockFreq+0xf8>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	091b      	lsrs	r3, r3, #4
 8005592:	2207      	movs	r2, #7
 8005594:	4013      	ands	r3, r2
 8005596:	3301      	adds	r3, #1
 8005598:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b03      	cmp	r3, #3
 800559e:	d10d      	bne.n	80055bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	4824      	ldr	r0, [pc, #144]	; (8005634 <HAL_RCC_GetSysClockFreq+0x100>)
 80055a4:	f7fa fdbe 	bl	8000124 <__udivsi3>
 80055a8:	0003      	movs	r3, r0
 80055aa:	0019      	movs	r1, r3
 80055ac:	4b1f      	ldr	r3, [pc, #124]	; (800562c <HAL_RCC_GetSysClockFreq+0xf8>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	0a1b      	lsrs	r3, r3, #8
 80055b2:	227f      	movs	r2, #127	; 0x7f
 80055b4:	4013      	ands	r3, r2
 80055b6:	434b      	muls	r3, r1
 80055b8:	617b      	str	r3, [r7, #20]
        break;
 80055ba:	e00d      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	481c      	ldr	r0, [pc, #112]	; (8005630 <HAL_RCC_GetSysClockFreq+0xfc>)
 80055c0:	f7fa fdb0 	bl	8000124 <__udivsi3>
 80055c4:	0003      	movs	r3, r0
 80055c6:	0019      	movs	r1, r3
 80055c8:	4b18      	ldr	r3, [pc, #96]	; (800562c <HAL_RCC_GetSysClockFreq+0xf8>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	0a1b      	lsrs	r3, r3, #8
 80055ce:	227f      	movs	r2, #127	; 0x7f
 80055d0:	4013      	ands	r3, r2
 80055d2:	434b      	muls	r3, r1
 80055d4:	617b      	str	r3, [r7, #20]
        break;
 80055d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80055d8:	4b14      	ldr	r3, [pc, #80]	; (800562c <HAL_RCC_GetSysClockFreq+0xf8>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	0f5b      	lsrs	r3, r3, #29
 80055de:	2207      	movs	r2, #7
 80055e0:	4013      	ands	r3, r2
 80055e2:	3301      	adds	r3, #1
 80055e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	6978      	ldr	r0, [r7, #20]
 80055ea:	f7fa fd9b 	bl	8000124 <__udivsi3>
 80055ee:	0003      	movs	r3, r0
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	e015      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80055f4:	4b0d      	ldr	r3, [pc, #52]	; (800562c <HAL_RCC_GetSysClockFreq+0xf8>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2238      	movs	r2, #56	; 0x38
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d103      	bne.n	8005608 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005600:	2380      	movs	r3, #128	; 0x80
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	e00b      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005608:	4b08      	ldr	r3, [pc, #32]	; (800562c <HAL_RCC_GetSysClockFreq+0xf8>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2238      	movs	r2, #56	; 0x38
 800560e:	4013      	ands	r3, r2
 8005610:	2b18      	cmp	r3, #24
 8005612:	d103      	bne.n	800561c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005614:	23fa      	movs	r3, #250	; 0xfa
 8005616:	01db      	lsls	r3, r3, #7
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	e001      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005620:	693b      	ldr	r3, [r7, #16]
}
 8005622:	0018      	movs	r0, r3
 8005624:	46bd      	mov	sp, r7
 8005626:	b006      	add	sp, #24
 8005628:	bd80      	pop	{r7, pc}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	40021000 	.word	0x40021000
 8005630:	00f42400 	.word	0x00f42400
 8005634:	007a1200 	.word	0x007a1200

08005638 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <HAL_RCC_GetHCLKFreq+0x10>)
 800563e:	681b      	ldr	r3, [r3, #0]
}
 8005640:	0018      	movs	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	20000004 	.word	0x20000004

0800564c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800564c:	b5b0      	push	{r4, r5, r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005650:	f7ff fff2 	bl	8005638 <HAL_RCC_GetHCLKFreq>
 8005654:	0004      	movs	r4, r0
 8005656:	f7ff fb49 	bl	8004cec <LL_RCC_GetAPB1Prescaler>
 800565a:	0003      	movs	r3, r0
 800565c:	0b1a      	lsrs	r2, r3, #12
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005660:	0092      	lsls	r2, r2, #2
 8005662:	58d3      	ldr	r3, [r2, r3]
 8005664:	221f      	movs	r2, #31
 8005666:	4013      	ands	r3, r2
 8005668:	40dc      	lsrs	r4, r3
 800566a:	0023      	movs	r3, r4
}
 800566c:	0018      	movs	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	bdb0      	pop	{r4, r5, r7, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	08007398 	.word	0x08007398

08005678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005680:	2313      	movs	r3, #19
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005688:	2312      	movs	r3, #18
 800568a:	18fb      	adds	r3, r7, r3
 800568c:	2200      	movs	r2, #0
 800568e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	029b      	lsls	r3, r3, #10
 8005698:	4013      	ands	r3, r2
 800569a:	d100      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800569c:	e0a3      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800569e:	2011      	movs	r0, #17
 80056a0:	183b      	adds	r3, r7, r0
 80056a2:	2200      	movs	r2, #0
 80056a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a6:	4b86      	ldr	r3, [pc, #536]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80056a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056aa:	2380      	movs	r3, #128	; 0x80
 80056ac:	055b      	lsls	r3, r3, #21
 80056ae:	4013      	ands	r3, r2
 80056b0:	d110      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b2:	4b83      	ldr	r3, [pc, #524]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80056b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b6:	4b82      	ldr	r3, [pc, #520]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80056b8:	2180      	movs	r1, #128	; 0x80
 80056ba:	0549      	lsls	r1, r1, #21
 80056bc:	430a      	orrs	r2, r1
 80056be:	63da      	str	r2, [r3, #60]	; 0x3c
 80056c0:	4b7f      	ldr	r3, [pc, #508]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80056c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c4:	2380      	movs	r3, #128	; 0x80
 80056c6:	055b      	lsls	r3, r3, #21
 80056c8:	4013      	ands	r3, r2
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ce:	183b      	adds	r3, r7, r0
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056d4:	4b7b      	ldr	r3, [pc, #492]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	4b7a      	ldr	r3, [pc, #488]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80056da:	2180      	movs	r1, #128	; 0x80
 80056dc:	0049      	lsls	r1, r1, #1
 80056de:	430a      	orrs	r2, r1
 80056e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056e2:	f7fe f905 	bl	80038f0 <HAL_GetTick>
 80056e6:	0003      	movs	r3, r0
 80056e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056ea:	e00b      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ec:	f7fe f900 	bl	80038f0 <HAL_GetTick>
 80056f0:	0002      	movs	r2, r0
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d904      	bls.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80056fa:	2313      	movs	r3, #19
 80056fc:	18fb      	adds	r3, r7, r3
 80056fe:	2203      	movs	r2, #3
 8005700:	701a      	strb	r2, [r3, #0]
        break;
 8005702:	e005      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005704:	4b6f      	ldr	r3, [pc, #444]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	2380      	movs	r3, #128	; 0x80
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	4013      	ands	r3, r2
 800570e:	d0ed      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005710:	2313      	movs	r3, #19
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d154      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800571a:	4b69      	ldr	r3, [pc, #420]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800571c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800571e:	23c0      	movs	r3, #192	; 0xc0
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4013      	ands	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d019      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	429a      	cmp	r2, r3
 8005734:	d014      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005736:	4b62      	ldr	r3, [pc, #392]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573a:	4a63      	ldr	r2, [pc, #396]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800573c:	4013      	ands	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005740:	4b5f      	ldr	r3, [pc, #380]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005742:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005744:	4b5e      	ldr	r3, [pc, #376]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005746:	2180      	movs	r1, #128	; 0x80
 8005748:	0249      	lsls	r1, r1, #9
 800574a:	430a      	orrs	r2, r1
 800574c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800574e:	4b5c      	ldr	r3, [pc, #368]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005750:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005752:	4b5b      	ldr	r3, [pc, #364]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005754:	495d      	ldr	r1, [pc, #372]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005756:	400a      	ands	r2, r1
 8005758:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800575a:	4b59      	ldr	r3, [pc, #356]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2201      	movs	r2, #1
 8005764:	4013      	ands	r3, r2
 8005766:	d016      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005768:	f7fe f8c2 	bl	80038f0 <HAL_GetTick>
 800576c:	0003      	movs	r3, r0
 800576e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005770:	e00c      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005772:	f7fe f8bd 	bl	80038f0 <HAL_GetTick>
 8005776:	0002      	movs	r2, r0
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	4a54      	ldr	r2, [pc, #336]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d904      	bls.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005782:	2313      	movs	r3, #19
 8005784:	18fb      	adds	r3, r7, r3
 8005786:	2203      	movs	r2, #3
 8005788:	701a      	strb	r2, [r3, #0]
            break;
 800578a:	e004      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800578c:	4b4c      	ldr	r3, [pc, #304]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800578e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005790:	2202      	movs	r2, #2
 8005792:	4013      	ands	r3, r2
 8005794:	d0ed      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005796:	2313      	movs	r3, #19
 8005798:	18fb      	adds	r3, r7, r3
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10a      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057a0:	4b47      	ldr	r3, [pc, #284]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a4:	4a48      	ldr	r2, [pc, #288]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	0019      	movs	r1, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	4b44      	ldr	r3, [pc, #272]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057b0:	430a      	orrs	r2, r1
 80057b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80057b4:	e00c      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057b6:	2312      	movs	r3, #18
 80057b8:	18fb      	adds	r3, r7, r3
 80057ba:	2213      	movs	r2, #19
 80057bc:	18ba      	adds	r2, r7, r2
 80057be:	7812      	ldrb	r2, [r2, #0]
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	e005      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c4:	2312      	movs	r3, #18
 80057c6:	18fb      	adds	r3, r7, r3
 80057c8:	2213      	movs	r2, #19
 80057ca:	18ba      	adds	r2, r7, r2
 80057cc:	7812      	ldrb	r2, [r2, #0]
 80057ce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057d0:	2311      	movs	r3, #17
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d105      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057da:	4b39      	ldr	r3, [pc, #228]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057de:	4b38      	ldr	r3, [pc, #224]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057e0:	493c      	ldr	r1, [pc, #240]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80057e2:	400a      	ands	r2, r1
 80057e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2201      	movs	r2, #1
 80057ec:	4013      	ands	r3, r2
 80057ee:	d009      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057f0:	4b33      	ldr	r3, [pc, #204]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f4:	2203      	movs	r2, #3
 80057f6:	4393      	bics	r3, r2
 80057f8:	0019      	movs	r1, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	4b30      	ldr	r3, [pc, #192]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005800:	430a      	orrs	r2, r1
 8005802:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2202      	movs	r2, #2
 800580a:	4013      	ands	r3, r2
 800580c:	d009      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800580e:	4b2c      	ldr	r3, [pc, #176]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005812:	220c      	movs	r2, #12
 8005814:	4393      	bics	r3, r2
 8005816:	0019      	movs	r1, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	4b28      	ldr	r3, [pc, #160]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800581e:	430a      	orrs	r2, r1
 8005820:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2220      	movs	r2, #32
 8005828:	4013      	ands	r3, r2
 800582a:	d009      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800582c:	4b24      	ldr	r3, [pc, #144]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800582e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005830:	4a29      	ldr	r2, [pc, #164]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005832:	4013      	ands	r3, r2
 8005834:	0019      	movs	r1, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	4b21      	ldr	r3, [pc, #132]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800583c:	430a      	orrs	r2, r1
 800583e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	2380      	movs	r3, #128	; 0x80
 8005846:	01db      	lsls	r3, r3, #7
 8005848:	4013      	ands	r3, r2
 800584a:	d015      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800584c:	4b1c      	ldr	r3, [pc, #112]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800584e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	0899      	lsrs	r1, r3, #2
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	695a      	ldr	r2, [r3, #20]
 8005858:	4b19      	ldr	r3, [pc, #100]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800585a:	430a      	orrs	r2, r1
 800585c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	2380      	movs	r3, #128	; 0x80
 8005864:	05db      	lsls	r3, r3, #23
 8005866:	429a      	cmp	r2, r3
 8005868:	d106      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800586a:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005870:	2180      	movs	r1, #128	; 0x80
 8005872:	0249      	lsls	r1, r1, #9
 8005874:	430a      	orrs	r2, r1
 8005876:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	2380      	movs	r3, #128	; 0x80
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	4013      	ands	r3, r2
 8005882:	d016      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005884:	4b0e      	ldr	r3, [pc, #56]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	4a14      	ldr	r2, [pc, #80]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800588a:	4013      	ands	r3, r2
 800588c:	0019      	movs	r1, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005894:	430a      	orrs	r2, r1
 8005896:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	2380      	movs	r3, #128	; 0x80
 800589e:	01db      	lsls	r3, r3, #7
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d106      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80058a4:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80058aa:	2180      	movs	r1, #128	; 0x80
 80058ac:	0249      	lsls	r1, r1, #9
 80058ae:	430a      	orrs	r2, r1
 80058b0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80058b2:	2312      	movs	r3, #18
 80058b4:	18fb      	adds	r3, r7, r3
 80058b6:	781b      	ldrb	r3, [r3, #0]
}
 80058b8:	0018      	movs	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	b006      	add	sp, #24
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40021000 	.word	0x40021000
 80058c4:	40007000 	.word	0x40007000
 80058c8:	fffffcff 	.word	0xfffffcff
 80058cc:	fffeffff 	.word	0xfffeffff
 80058d0:	00001388 	.word	0x00001388
 80058d4:	efffffff 	.word	0xefffffff
 80058d8:	ffffcfff 	.word	0xffffcfff
 80058dc:	ffff3fff 	.word	0xffff3fff

080058e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e04a      	b.n	8005988 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	223d      	movs	r2, #61	; 0x3d
 80058f6:	5c9b      	ldrb	r3, [r3, r2]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d107      	bne.n	800590e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	223c      	movs	r2, #60	; 0x3c
 8005902:	2100      	movs	r1, #0
 8005904:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	0018      	movs	r0, r3
 800590a:	f7fd fe65 	bl	80035d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	223d      	movs	r2, #61	; 0x3d
 8005912:	2102      	movs	r1, #2
 8005914:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3304      	adds	r3, #4
 800591e:	0019      	movs	r1, r3
 8005920:	0010      	movs	r0, r2
 8005922:	f000 f9dd 	bl	8005ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2248      	movs	r2, #72	; 0x48
 800592a:	2101      	movs	r1, #1
 800592c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	223e      	movs	r2, #62	; 0x3e
 8005932:	2101      	movs	r1, #1
 8005934:	5499      	strb	r1, [r3, r2]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	223f      	movs	r2, #63	; 0x3f
 800593a:	2101      	movs	r1, #1
 800593c:	5499      	strb	r1, [r3, r2]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2240      	movs	r2, #64	; 0x40
 8005942:	2101      	movs	r1, #1
 8005944:	5499      	strb	r1, [r3, r2]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2241      	movs	r2, #65	; 0x41
 800594a:	2101      	movs	r1, #1
 800594c:	5499      	strb	r1, [r3, r2]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2242      	movs	r2, #66	; 0x42
 8005952:	2101      	movs	r1, #1
 8005954:	5499      	strb	r1, [r3, r2]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2243      	movs	r2, #67	; 0x43
 800595a:	2101      	movs	r1, #1
 800595c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2244      	movs	r2, #68	; 0x44
 8005962:	2101      	movs	r1, #1
 8005964:	5499      	strb	r1, [r3, r2]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2245      	movs	r2, #69	; 0x45
 800596a:	2101      	movs	r1, #1
 800596c:	5499      	strb	r1, [r3, r2]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2246      	movs	r2, #70	; 0x46
 8005972:	2101      	movs	r1, #1
 8005974:	5499      	strb	r1, [r3, r2]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2247      	movs	r2, #71	; 0x47
 800597a:	2101      	movs	r1, #1
 800597c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	223d      	movs	r2, #61	; 0x3d
 8005982:	2101      	movs	r1, #1
 8005984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	0018      	movs	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	b002      	add	sp, #8
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	223d      	movs	r2, #61	; 0x3d
 800599c:	5c9b      	ldrb	r3, [r3, r2]
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d001      	beq.n	80059a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e034      	b.n	8005a12 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	223d      	movs	r2, #61	; 0x3d
 80059ac:	2102      	movs	r1, #2
 80059ae:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a19      	ldr	r2, [pc, #100]	; (8005a1c <HAL_TIM_Base_Start+0x8c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_TIM_Base_Start+0x3e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a18      	ldr	r2, [pc, #96]	; (8005a20 <HAL_TIM_Base_Start+0x90>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_TIM_Base_Start+0x3e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <HAL_TIM_Base_Start+0x94>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d116      	bne.n	80059fc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4a14      	ldr	r2, [pc, #80]	; (8005a28 <HAL_TIM_Base_Start+0x98>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b06      	cmp	r3, #6
 80059de:	d016      	beq.n	8005a0e <HAL_TIM_Base_Start+0x7e>
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	2380      	movs	r3, #128	; 0x80
 80059e4:	025b      	lsls	r3, r3, #9
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d011      	beq.n	8005a0e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2101      	movs	r1, #1
 80059f6:	430a      	orrs	r2, r1
 80059f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fa:	e008      	b.n	8005a0e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2101      	movs	r1, #1
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	e000      	b.n	8005a10 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	0018      	movs	r0, r3
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b004      	add	sp, #16
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	40012c00 	.word	0x40012c00
 8005a20:	40000400 	.word	0x40000400
 8005a24:	40014000 	.word	0x40014000
 8005a28:	00010007 	.word	0x00010007

08005a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d124      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d11d      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2203      	movs	r2, #3
 8005a56:	4252      	negs	r2, r2
 8005a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	2203      	movs	r2, #3
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f000 f91e 	bl	8005cb0 <HAL_TIM_IC_CaptureCallback>
 8005a74:	e007      	b.n	8005a86 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f000 f911 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	0018      	movs	r0, r3
 8005a82:	f000 f91d 	bl	8005cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2204      	movs	r2, #4
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d125      	bne.n	8005ae6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	2204      	movs	r2, #4
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d11e      	bne.n	8005ae6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2205      	movs	r2, #5
 8005aae:	4252      	negs	r2, r2
 8005ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699a      	ldr	r2, [r3, #24]
 8005abe:	23c0      	movs	r3, #192	; 0xc0
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d004      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f000 f8f1 	bl	8005cb0 <HAL_TIM_IC_CaptureCallback>
 8005ace:	e007      	b.n	8005ae0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f000 f8e4 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	0018      	movs	r0, r3
 8005adc:	f000 f8f0 	bl	8005cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2208      	movs	r2, #8
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d124      	bne.n	8005b3e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	2208      	movs	r2, #8
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d11d      	bne.n	8005b3e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2209      	movs	r2, #9
 8005b08:	4252      	negs	r2, r2
 8005b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2204      	movs	r2, #4
 8005b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d004      	beq.n	8005b28 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	0018      	movs	r0, r3
 8005b22:	f000 f8c5 	bl	8005cb0 <HAL_TIM_IC_CaptureCallback>
 8005b26:	e007      	b.n	8005b38 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f000 f8b8 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	0018      	movs	r0, r3
 8005b34:	f000 f8c4 	bl	8005cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	2210      	movs	r2, #16
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b10      	cmp	r3, #16
 8005b4a:	d125      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	2210      	movs	r2, #16
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b10      	cmp	r3, #16
 8005b58:	d11e      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2211      	movs	r2, #17
 8005b60:	4252      	negs	r2, r2
 8005b62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2208      	movs	r2, #8
 8005b68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	23c0      	movs	r3, #192	; 0xc0
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4013      	ands	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	f000 f898 	bl	8005cb0 <HAL_TIM_IC_CaptureCallback>
 8005b80:	e007      	b.n	8005b92 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	0018      	movs	r0, r3
 8005b86:	f000 f88b 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f000 f897 	bl	8005cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d10f      	bne.n	8005bc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d108      	bne.n	8005bc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	4252      	negs	r2, r2
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f000 f865 	bl	8005c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2280      	movs	r2, #128	; 0x80
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b80      	cmp	r3, #128	; 0x80
 8005bd2:	d10f      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2280      	movs	r2, #128	; 0x80
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b80      	cmp	r3, #128	; 0x80
 8005be0:	d108      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2281      	movs	r2, #129	; 0x81
 8005be8:	4252      	negs	r2, r2
 8005bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	0018      	movs	r0, r3
 8005bf0:	f000 f95c 	bl	8005eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	2380      	movs	r3, #128	; 0x80
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	401a      	ands	r2, r3
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d10e      	bne.n	8005c26 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2280      	movs	r2, #128	; 0x80
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b80      	cmp	r3, #128	; 0x80
 8005c14:	d107      	bne.n	8005c26 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1c      	ldr	r2, [pc, #112]	; (8005c8c <HAL_TIM_IRQHandler+0x260>)
 8005c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f000 f94b 	bl	8005ebc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2240      	movs	r2, #64	; 0x40
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d10f      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	2240      	movs	r2, #64	; 0x40
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	2b40      	cmp	r3, #64	; 0x40
 8005c40:	d108      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2241      	movs	r2, #65	; 0x41
 8005c48:	4252      	negs	r2, r2
 8005c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f000 f83e 	bl	8005cd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	d10f      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d108      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2221      	movs	r2, #33	; 0x21
 8005c76:	4252      	negs	r2, r2
 8005c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f000 f90d 	bl	8005e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	46bd      	mov	sp, r7
 8005c86:	b002      	add	sp, #8
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	fffffeff 	.word	0xfffffeff

08005c90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c98:	46c0      	nop			; (mov r8, r8)
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b002      	add	sp, #8
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ca8:	46c0      	nop			; (mov r8, r8)
 8005caa:	46bd      	mov	sp, r7
 8005cac:	b002      	add	sp, #8
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cb8:	46c0      	nop			; (mov r8, r8)
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b002      	add	sp, #8
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cc8:	46c0      	nop			; (mov r8, r8)
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	b002      	add	sp, #8
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b002      	add	sp, #8
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a2f      	ldr	r2, [pc, #188]	; (8005db0 <TIM_Base_SetConfig+0xd0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_Base_SetConfig+0x20>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a2e      	ldr	r2, [pc, #184]	; (8005db4 <TIM_Base_SetConfig+0xd4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d108      	bne.n	8005d12 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2270      	movs	r2, #112	; 0x70
 8005d04:	4393      	bics	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a26      	ldr	r2, [pc, #152]	; (8005db0 <TIM_Base_SetConfig+0xd0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d013      	beq.n	8005d42 <TIM_Base_SetConfig+0x62>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a25      	ldr	r2, [pc, #148]	; (8005db4 <TIM_Base_SetConfig+0xd4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00f      	beq.n	8005d42 <TIM_Base_SetConfig+0x62>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a24      	ldr	r2, [pc, #144]	; (8005db8 <TIM_Base_SetConfig+0xd8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00b      	beq.n	8005d42 <TIM_Base_SetConfig+0x62>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a23      	ldr	r2, [pc, #140]	; (8005dbc <TIM_Base_SetConfig+0xdc>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d007      	beq.n	8005d42 <TIM_Base_SetConfig+0x62>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a22      	ldr	r2, [pc, #136]	; (8005dc0 <TIM_Base_SetConfig+0xe0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_Base_SetConfig+0x62>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a21      	ldr	r2, [pc, #132]	; (8005dc4 <TIM_Base_SetConfig+0xe4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d108      	bne.n	8005d54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4a20      	ldr	r2, [pc, #128]	; (8005dc8 <TIM_Base_SetConfig+0xe8>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2280      	movs	r2, #128	; 0x80
 8005d58:	4393      	bics	r3, r2
 8005d5a:	001a      	movs	r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a0c      	ldr	r2, [pc, #48]	; (8005db0 <TIM_Base_SetConfig+0xd0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00b      	beq.n	8005d9a <TIM_Base_SetConfig+0xba>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a0d      	ldr	r2, [pc, #52]	; (8005dbc <TIM_Base_SetConfig+0xdc>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d007      	beq.n	8005d9a <TIM_Base_SetConfig+0xba>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a0c      	ldr	r2, [pc, #48]	; (8005dc0 <TIM_Base_SetConfig+0xe0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d003      	beq.n	8005d9a <TIM_Base_SetConfig+0xba>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a0b      	ldr	r2, [pc, #44]	; (8005dc4 <TIM_Base_SetConfig+0xe4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d103      	bne.n	8005da2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	615a      	str	r2, [r3, #20]
}
 8005da8:	46c0      	nop			; (mov r8, r8)
 8005daa:	46bd      	mov	sp, r7
 8005dac:	b004      	add	sp, #16
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40002000 	.word	0x40002000
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40014400 	.word	0x40014400
 8005dc4:	40014800 	.word	0x40014800
 8005dc8:	fffffcff 	.word	0xfffffcff

08005dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	223c      	movs	r2, #60	; 0x3c
 8005dda:	5c9b      	ldrb	r3, [r3, r2]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e04f      	b.n	8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	223c      	movs	r2, #60	; 0x3c
 8005de8:	2101      	movs	r1, #1
 8005dea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	223d      	movs	r2, #61	; 0x3d
 8005df0:	2102      	movs	r1, #2
 8005df2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a20      	ldr	r2, [pc, #128]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d108      	bne.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2270      	movs	r2, #112	; 0x70
 8005e24:	4393      	bics	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a13      	ldr	r2, [pc, #76]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a12      	ldr	r2, [pc, #72]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a11      	ldr	r2, [pc, #68]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d10c      	bne.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2280      	movs	r2, #128	; 0x80
 8005e5c:	4393      	bics	r3, r2
 8005e5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	223d      	movs	r2, #61	; 0x3d
 8005e76:	2101      	movs	r1, #1
 8005e78:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	223c      	movs	r2, #60	; 0x3c
 8005e7e:	2100      	movs	r1, #0
 8005e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	0018      	movs	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	b004      	add	sp, #16
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	ff0fffff 	.word	0xff0fffff
 8005e94:	40000400 	.word	0x40000400
 8005e98:	40014000 	.word	0x40014000

08005e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ea4:	46c0      	nop			; (mov r8, r8)
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	b002      	add	sp, #8
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eb4:	46c0      	nop			; (mov r8, r8)
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	b002      	add	sp, #8
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ec4:	46c0      	nop			; (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b002      	add	sp, #8
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e046      	b.n	8005f6c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2288      	movs	r2, #136	; 0x88
 8005ee2:	589b      	ldr	r3, [r3, r2]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d107      	bne.n	8005ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2284      	movs	r2, #132	; 0x84
 8005eec:	2100      	movs	r1, #0
 8005eee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7fd fb96 	bl	8003624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2288      	movs	r2, #136	; 0x88
 8005efc:	2124      	movs	r1, #36	; 0x24
 8005efe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	438a      	bics	r2, r1
 8005f0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	0018      	movs	r0, r3
 8005f14:	f000 f8cc 	bl	80060b0 <UART_SetConfig>
 8005f18:	0003      	movs	r3, r0
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e024      	b.n	8005f6c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f000 fa63 	bl	80063f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	490d      	ldr	r1, [pc, #52]	; (8005f74 <HAL_UART_Init+0xa8>)
 8005f3e:	400a      	ands	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	212a      	movs	r1, #42	; 0x2a
 8005f4e:	438a      	bics	r2, r1
 8005f50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	0018      	movs	r0, r3
 8005f66:	f000 fafb 	bl	8006560 <UART_CheckIdleState>
 8005f6a:	0003      	movs	r3, r0
}
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	b002      	add	sp, #8
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	ffffb7ff 	.word	0xffffb7ff

08005f78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	1dbb      	adds	r3, r7, #6
 8005f86:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2288      	movs	r2, #136	; 0x88
 8005f8c:	589b      	ldr	r3, [r3, r2]
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d000      	beq.n	8005f94 <HAL_UART_Transmit+0x1c>
 8005f92:	e088      	b.n	80060a6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_UART_Transmit+0x2a>
 8005f9a:	1dbb      	adds	r3, r7, #6
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e080      	b.n	80060a8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	2380      	movs	r3, #128	; 0x80
 8005fac:	015b      	lsls	r3, r3, #5
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d109      	bne.n	8005fc6 <HAL_UART_Transmit+0x4e>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d001      	beq.n	8005fc6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e070      	b.n	80060a8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2290      	movs	r2, #144	; 0x90
 8005fca:	2100      	movs	r1, #0
 8005fcc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2288      	movs	r2, #136	; 0x88
 8005fd2:	2121      	movs	r1, #33	; 0x21
 8005fd4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fd6:	f7fd fc8b 	bl	80038f0 <HAL_GetTick>
 8005fda:	0003      	movs	r3, r0
 8005fdc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	1dba      	adds	r2, r7, #6
 8005fe2:	2154      	movs	r1, #84	; 0x54
 8005fe4:	8812      	ldrh	r2, [r2, #0]
 8005fe6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	1dba      	adds	r2, r7, #6
 8005fec:	2156      	movs	r1, #86	; 0x56
 8005fee:	8812      	ldrh	r2, [r2, #0]
 8005ff0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	2380      	movs	r3, #128	; 0x80
 8005ff8:	015b      	lsls	r3, r3, #5
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d108      	bne.n	8006010 <HAL_UART_Transmit+0x98>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d104      	bne.n	8006010 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006006:	2300      	movs	r3, #0
 8006008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	e003      	b.n	8006018 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006014:	2300      	movs	r3, #0
 8006016:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006018:	e02c      	b.n	8006074 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	0013      	movs	r3, r2
 8006024:	2200      	movs	r2, #0
 8006026:	2180      	movs	r1, #128	; 0x80
 8006028:	f000 fae8 	bl	80065fc <UART_WaitOnFlagUntilTimeout>
 800602c:	1e03      	subs	r3, r0, #0
 800602e:	d001      	beq.n	8006034 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e039      	b.n	80060a8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	001a      	movs	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	05d2      	lsls	r2, r2, #23
 8006046:	0dd2      	lsrs	r2, r2, #23
 8006048:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	3302      	adds	r3, #2
 800604e:	61bb      	str	r3, [r7, #24]
 8006050:	e007      	b.n	8006062 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	781a      	ldrb	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	3301      	adds	r3, #1
 8006060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2256      	movs	r2, #86	; 0x56
 8006066:	5a9b      	ldrh	r3, [r3, r2]
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b299      	uxth	r1, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2256      	movs	r2, #86	; 0x56
 8006072:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2256      	movs	r2, #86	; 0x56
 8006078:	5a9b      	ldrh	r3, [r3, r2]
 800607a:	b29b      	uxth	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1cc      	bne.n	800601a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	0013      	movs	r3, r2
 800608a:	2200      	movs	r2, #0
 800608c:	2140      	movs	r1, #64	; 0x40
 800608e:	f000 fab5 	bl	80065fc <UART_WaitOnFlagUntilTimeout>
 8006092:	1e03      	subs	r3, r0, #0
 8006094:	d001      	beq.n	800609a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e006      	b.n	80060a8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2288      	movs	r2, #136	; 0x88
 800609e:	2120      	movs	r1, #32
 80060a0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e000      	b.n	80060a8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80060a6:	2302      	movs	r3, #2
  }
}
 80060a8:	0018      	movs	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b008      	add	sp, #32
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060b8:	231a      	movs	r3, #26
 80060ba:	18fb      	adds	r3, r7, r3
 80060bc:	2200      	movs	r2, #0
 80060be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	431a      	orrs	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4abc      	ldr	r2, [pc, #752]	; (80063d0 <UART_SetConfig+0x320>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	0019      	movs	r1, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	4ab7      	ldr	r2, [pc, #732]	; (80063d4 <UART_SetConfig+0x324>)
 80060f6:	4013      	ands	r3, r2
 80060f8:	0019      	movs	r1, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	4313      	orrs	r3, r2
 8006114:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	4aae      	ldr	r2, [pc, #696]	; (80063d8 <UART_SetConfig+0x328>)
 800611e:	4013      	ands	r3, r2
 8006120:	0019      	movs	r1, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	430a      	orrs	r2, r1
 800612a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006132:	220f      	movs	r2, #15
 8006134:	4393      	bics	r3, r2
 8006136:	0019      	movs	r1, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4aa4      	ldr	r2, [pc, #656]	; (80063dc <UART_SetConfig+0x32c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d127      	bne.n	800619e <UART_SetConfig+0xee>
 800614e:	4ba4      	ldr	r3, [pc, #656]	; (80063e0 <UART_SetConfig+0x330>)
 8006150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006152:	2203      	movs	r2, #3
 8006154:	4013      	ands	r3, r2
 8006156:	2b03      	cmp	r3, #3
 8006158:	d017      	beq.n	800618a <UART_SetConfig+0xda>
 800615a:	d81b      	bhi.n	8006194 <UART_SetConfig+0xe4>
 800615c:	2b02      	cmp	r3, #2
 800615e:	d00a      	beq.n	8006176 <UART_SetConfig+0xc6>
 8006160:	d818      	bhi.n	8006194 <UART_SetConfig+0xe4>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <UART_SetConfig+0xbc>
 8006166:	2b01      	cmp	r3, #1
 8006168:	d00a      	beq.n	8006180 <UART_SetConfig+0xd0>
 800616a:	e013      	b.n	8006194 <UART_SetConfig+0xe4>
 800616c:	231b      	movs	r3, #27
 800616e:	18fb      	adds	r3, r7, r3
 8006170:	2200      	movs	r2, #0
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	e058      	b.n	8006228 <UART_SetConfig+0x178>
 8006176:	231b      	movs	r3, #27
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	2202      	movs	r2, #2
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	e053      	b.n	8006228 <UART_SetConfig+0x178>
 8006180:	231b      	movs	r3, #27
 8006182:	18fb      	adds	r3, r7, r3
 8006184:	2204      	movs	r2, #4
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	e04e      	b.n	8006228 <UART_SetConfig+0x178>
 800618a:	231b      	movs	r3, #27
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	2208      	movs	r2, #8
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	e049      	b.n	8006228 <UART_SetConfig+0x178>
 8006194:	231b      	movs	r3, #27
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	2210      	movs	r2, #16
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	e044      	b.n	8006228 <UART_SetConfig+0x178>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a90      	ldr	r2, [pc, #576]	; (80063e4 <UART_SetConfig+0x334>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d127      	bne.n	80061f8 <UART_SetConfig+0x148>
 80061a8:	4b8d      	ldr	r3, [pc, #564]	; (80063e0 <UART_SetConfig+0x330>)
 80061aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ac:	220c      	movs	r2, #12
 80061ae:	4013      	ands	r3, r2
 80061b0:	2b0c      	cmp	r3, #12
 80061b2:	d017      	beq.n	80061e4 <UART_SetConfig+0x134>
 80061b4:	d81b      	bhi.n	80061ee <UART_SetConfig+0x13e>
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d00a      	beq.n	80061d0 <UART_SetConfig+0x120>
 80061ba:	d818      	bhi.n	80061ee <UART_SetConfig+0x13e>
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <UART_SetConfig+0x116>
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d00a      	beq.n	80061da <UART_SetConfig+0x12a>
 80061c4:	e013      	b.n	80061ee <UART_SetConfig+0x13e>
 80061c6:	231b      	movs	r3, #27
 80061c8:	18fb      	adds	r3, r7, r3
 80061ca:	2200      	movs	r2, #0
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	e02b      	b.n	8006228 <UART_SetConfig+0x178>
 80061d0:	231b      	movs	r3, #27
 80061d2:	18fb      	adds	r3, r7, r3
 80061d4:	2202      	movs	r2, #2
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	e026      	b.n	8006228 <UART_SetConfig+0x178>
 80061da:	231b      	movs	r3, #27
 80061dc:	18fb      	adds	r3, r7, r3
 80061de:	2204      	movs	r2, #4
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e021      	b.n	8006228 <UART_SetConfig+0x178>
 80061e4:	231b      	movs	r3, #27
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	2208      	movs	r2, #8
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	e01c      	b.n	8006228 <UART_SetConfig+0x178>
 80061ee:	231b      	movs	r3, #27
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	2210      	movs	r2, #16
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	e017      	b.n	8006228 <UART_SetConfig+0x178>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a7a      	ldr	r2, [pc, #488]	; (80063e8 <UART_SetConfig+0x338>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d104      	bne.n	800620c <UART_SetConfig+0x15c>
 8006202:	231b      	movs	r3, #27
 8006204:	18fb      	adds	r3, r7, r3
 8006206:	2200      	movs	r2, #0
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	e00d      	b.n	8006228 <UART_SetConfig+0x178>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a76      	ldr	r2, [pc, #472]	; (80063ec <UART_SetConfig+0x33c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d104      	bne.n	8006220 <UART_SetConfig+0x170>
 8006216:	231b      	movs	r3, #27
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	2200      	movs	r2, #0
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e003      	b.n	8006228 <UART_SetConfig+0x178>
 8006220:	231b      	movs	r3, #27
 8006222:	18fb      	adds	r3, r7, r3
 8006224:	2210      	movs	r2, #16
 8006226:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	2380      	movs	r3, #128	; 0x80
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	429a      	cmp	r2, r3
 8006232:	d000      	beq.n	8006236 <UART_SetConfig+0x186>
 8006234:	e065      	b.n	8006302 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8006236:	231b      	movs	r3, #27
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b08      	cmp	r3, #8
 800623e:	d015      	beq.n	800626c <UART_SetConfig+0x1bc>
 8006240:	dc18      	bgt.n	8006274 <UART_SetConfig+0x1c4>
 8006242:	2b04      	cmp	r3, #4
 8006244:	d00d      	beq.n	8006262 <UART_SetConfig+0x1b2>
 8006246:	dc15      	bgt.n	8006274 <UART_SetConfig+0x1c4>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <UART_SetConfig+0x1a2>
 800624c:	2b02      	cmp	r3, #2
 800624e:	d005      	beq.n	800625c <UART_SetConfig+0x1ac>
 8006250:	e010      	b.n	8006274 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006252:	f7ff f9fb 	bl	800564c <HAL_RCC_GetPCLK1Freq>
 8006256:	0003      	movs	r3, r0
 8006258:	617b      	str	r3, [r7, #20]
        break;
 800625a:	e012      	b.n	8006282 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800625c:	4b64      	ldr	r3, [pc, #400]	; (80063f0 <UART_SetConfig+0x340>)
 800625e:	617b      	str	r3, [r7, #20]
        break;
 8006260:	e00f      	b.n	8006282 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006262:	f7ff f967 	bl	8005534 <HAL_RCC_GetSysClockFreq>
 8006266:	0003      	movs	r3, r0
 8006268:	617b      	str	r3, [r7, #20]
        break;
 800626a:	e00a      	b.n	8006282 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800626c:	2380      	movs	r3, #128	; 0x80
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	617b      	str	r3, [r7, #20]
        break;
 8006272:	e006      	b.n	8006282 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006278:	231a      	movs	r3, #26
 800627a:	18fb      	adds	r3, r7, r3
 800627c:	2201      	movs	r2, #1
 800627e:	701a      	strb	r2, [r3, #0]
        break;
 8006280:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d100      	bne.n	800628a <UART_SetConfig+0x1da>
 8006288:	e08d      	b.n	80063a6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800628e:	4b59      	ldr	r3, [pc, #356]	; (80063f4 <UART_SetConfig+0x344>)
 8006290:	0052      	lsls	r2, r2, #1
 8006292:	5ad3      	ldrh	r3, [r2, r3]
 8006294:	0019      	movs	r1, r3
 8006296:	6978      	ldr	r0, [r7, #20]
 8006298:	f7f9 ff44 	bl	8000124 <__udivsi3>
 800629c:	0003      	movs	r3, r0
 800629e:	005a      	lsls	r2, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	18d2      	adds	r2, r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	0019      	movs	r1, r3
 80062ae:	0010      	movs	r0, r2
 80062b0:	f7f9 ff38 	bl	8000124 <__udivsi3>
 80062b4:	0003      	movs	r3, r0
 80062b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b0f      	cmp	r3, #15
 80062bc:	d91c      	bls.n	80062f8 <UART_SetConfig+0x248>
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	2380      	movs	r3, #128	; 0x80
 80062c2:	025b      	lsls	r3, r3, #9
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d217      	bcs.n	80062f8 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	200e      	movs	r0, #14
 80062ce:	183b      	adds	r3, r7, r0
 80062d0:	210f      	movs	r1, #15
 80062d2:	438a      	bics	r2, r1
 80062d4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	085b      	lsrs	r3, r3, #1
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2207      	movs	r2, #7
 80062de:	4013      	ands	r3, r2
 80062e0:	b299      	uxth	r1, r3
 80062e2:	183b      	adds	r3, r7, r0
 80062e4:	183a      	adds	r2, r7, r0
 80062e6:	8812      	ldrh	r2, [r2, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	183a      	adds	r2, r7, r0
 80062f2:	8812      	ldrh	r2, [r2, #0]
 80062f4:	60da      	str	r2, [r3, #12]
 80062f6:	e056      	b.n	80063a6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80062f8:	231a      	movs	r3, #26
 80062fa:	18fb      	adds	r3, r7, r3
 80062fc:	2201      	movs	r2, #1
 80062fe:	701a      	strb	r2, [r3, #0]
 8006300:	e051      	b.n	80063a6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006302:	231b      	movs	r3, #27
 8006304:	18fb      	adds	r3, r7, r3
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b08      	cmp	r3, #8
 800630a:	d015      	beq.n	8006338 <UART_SetConfig+0x288>
 800630c:	dc18      	bgt.n	8006340 <UART_SetConfig+0x290>
 800630e:	2b04      	cmp	r3, #4
 8006310:	d00d      	beq.n	800632e <UART_SetConfig+0x27e>
 8006312:	dc15      	bgt.n	8006340 <UART_SetConfig+0x290>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <UART_SetConfig+0x26e>
 8006318:	2b02      	cmp	r3, #2
 800631a:	d005      	beq.n	8006328 <UART_SetConfig+0x278>
 800631c:	e010      	b.n	8006340 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800631e:	f7ff f995 	bl	800564c <HAL_RCC_GetPCLK1Freq>
 8006322:	0003      	movs	r3, r0
 8006324:	617b      	str	r3, [r7, #20]
        break;
 8006326:	e012      	b.n	800634e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006328:	4b31      	ldr	r3, [pc, #196]	; (80063f0 <UART_SetConfig+0x340>)
 800632a:	617b      	str	r3, [r7, #20]
        break;
 800632c:	e00f      	b.n	800634e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800632e:	f7ff f901 	bl	8005534 <HAL_RCC_GetSysClockFreq>
 8006332:	0003      	movs	r3, r0
 8006334:	617b      	str	r3, [r7, #20]
        break;
 8006336:	e00a      	b.n	800634e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006338:	2380      	movs	r3, #128	; 0x80
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	617b      	str	r3, [r7, #20]
        break;
 800633e:	e006      	b.n	800634e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006344:	231a      	movs	r3, #26
 8006346:	18fb      	adds	r3, r7, r3
 8006348:	2201      	movs	r2, #1
 800634a:	701a      	strb	r2, [r3, #0]
        break;
 800634c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d028      	beq.n	80063a6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006358:	4b26      	ldr	r3, [pc, #152]	; (80063f4 <UART_SetConfig+0x344>)
 800635a:	0052      	lsls	r2, r2, #1
 800635c:	5ad3      	ldrh	r3, [r2, r3]
 800635e:	0019      	movs	r1, r3
 8006360:	6978      	ldr	r0, [r7, #20]
 8006362:	f7f9 fedf 	bl	8000124 <__udivsi3>
 8006366:	0003      	movs	r3, r0
 8006368:	001a      	movs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	18d2      	adds	r2, r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	0019      	movs	r1, r3
 8006378:	0010      	movs	r0, r2
 800637a:	f7f9 fed3 	bl	8000124 <__udivsi3>
 800637e:	0003      	movs	r3, r0
 8006380:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b0f      	cmp	r3, #15
 8006386:	d90a      	bls.n	800639e <UART_SetConfig+0x2ee>
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	2380      	movs	r3, #128	; 0x80
 800638c:	025b      	lsls	r3, r3, #9
 800638e:	429a      	cmp	r2, r3
 8006390:	d205      	bcs.n	800639e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	b29a      	uxth	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60da      	str	r2, [r3, #12]
 800639c:	e003      	b.n	80063a6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800639e:	231a      	movs	r3, #26
 80063a0:	18fb      	adds	r3, r7, r3
 80063a2:	2201      	movs	r2, #1
 80063a4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	226a      	movs	r2, #106	; 0x6a
 80063aa:	2101      	movs	r1, #1
 80063ac:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2268      	movs	r2, #104	; 0x68
 80063b2:	2101      	movs	r1, #1
 80063b4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80063c2:	231a      	movs	r3, #26
 80063c4:	18fb      	adds	r3, r7, r3
 80063c6:	781b      	ldrb	r3, [r3, #0]
}
 80063c8:	0018      	movs	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b008      	add	sp, #32
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	cfff69f3 	.word	0xcfff69f3
 80063d4:	ffffcfff 	.word	0xffffcfff
 80063d8:	11fff4ff 	.word	0x11fff4ff
 80063dc:	40013800 	.word	0x40013800
 80063e0:	40021000 	.word	0x40021000
 80063e4:	40004400 	.word	0x40004400
 80063e8:	40004800 	.word	0x40004800
 80063ec:	40004c00 	.word	0x40004c00
 80063f0:	00f42400 	.word	0x00f42400
 80063f4:	080073b8 	.word	0x080073b8

080063f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006404:	2201      	movs	r2, #1
 8006406:	4013      	ands	r3, r2
 8006408:	d00b      	beq.n	8006422 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	4a4a      	ldr	r2, [pc, #296]	; (800653c <UART_AdvFeatureConfig+0x144>)
 8006412:	4013      	ands	r3, r2
 8006414:	0019      	movs	r1, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006426:	2202      	movs	r2, #2
 8006428:	4013      	ands	r3, r2
 800642a:	d00b      	beq.n	8006444 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4a43      	ldr	r2, [pc, #268]	; (8006540 <UART_AdvFeatureConfig+0x148>)
 8006434:	4013      	ands	r3, r2
 8006436:	0019      	movs	r1, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006448:	2204      	movs	r2, #4
 800644a:	4013      	ands	r3, r2
 800644c:	d00b      	beq.n	8006466 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	4a3b      	ldr	r2, [pc, #236]	; (8006544 <UART_AdvFeatureConfig+0x14c>)
 8006456:	4013      	ands	r3, r2
 8006458:	0019      	movs	r1, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	2208      	movs	r2, #8
 800646c:	4013      	ands	r3, r2
 800646e:	d00b      	beq.n	8006488 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4a34      	ldr	r2, [pc, #208]	; (8006548 <UART_AdvFeatureConfig+0x150>)
 8006478:	4013      	ands	r3, r2
 800647a:	0019      	movs	r1, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648c:	2210      	movs	r2, #16
 800648e:	4013      	ands	r3, r2
 8006490:	d00b      	beq.n	80064aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	4a2c      	ldr	r2, [pc, #176]	; (800654c <UART_AdvFeatureConfig+0x154>)
 800649a:	4013      	ands	r3, r2
 800649c:	0019      	movs	r1, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	2220      	movs	r2, #32
 80064b0:	4013      	ands	r3, r2
 80064b2:	d00b      	beq.n	80064cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	4a25      	ldr	r2, [pc, #148]	; (8006550 <UART_AdvFeatureConfig+0x158>)
 80064bc:	4013      	ands	r3, r2
 80064be:	0019      	movs	r1, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d0:	2240      	movs	r2, #64	; 0x40
 80064d2:	4013      	ands	r3, r2
 80064d4:	d01d      	beq.n	8006512 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	4a1d      	ldr	r2, [pc, #116]	; (8006554 <UART_AdvFeatureConfig+0x15c>)
 80064de:	4013      	ands	r3, r2
 80064e0:	0019      	movs	r1, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064f2:	2380      	movs	r3, #128	; 0x80
 80064f4:	035b      	lsls	r3, r3, #13
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d10b      	bne.n	8006512 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	4a15      	ldr	r2, [pc, #84]	; (8006558 <UART_AdvFeatureConfig+0x160>)
 8006502:	4013      	ands	r3, r2
 8006504:	0019      	movs	r1, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	2280      	movs	r2, #128	; 0x80
 8006518:	4013      	ands	r3, r2
 800651a:	d00b      	beq.n	8006534 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	4a0e      	ldr	r2, [pc, #56]	; (800655c <UART_AdvFeatureConfig+0x164>)
 8006524:	4013      	ands	r3, r2
 8006526:	0019      	movs	r1, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	605a      	str	r2, [r3, #4]
  }
}
 8006534:	46c0      	nop			; (mov r8, r8)
 8006536:	46bd      	mov	sp, r7
 8006538:	b002      	add	sp, #8
 800653a:	bd80      	pop	{r7, pc}
 800653c:	fffdffff 	.word	0xfffdffff
 8006540:	fffeffff 	.word	0xfffeffff
 8006544:	fffbffff 	.word	0xfffbffff
 8006548:	ffff7fff 	.word	0xffff7fff
 800654c:	ffffefff 	.word	0xffffefff
 8006550:	ffffdfff 	.word	0xffffdfff
 8006554:	ffefffff 	.word	0xffefffff
 8006558:	ff9fffff 	.word	0xff9fffff
 800655c:	fff7ffff 	.word	0xfff7ffff

08006560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af02      	add	r7, sp, #8
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2290      	movs	r2, #144	; 0x90
 800656c:	2100      	movs	r1, #0
 800656e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006570:	f7fd f9be 	bl	80038f0 <HAL_GetTick>
 8006574:	0003      	movs	r3, r0
 8006576:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2208      	movs	r2, #8
 8006580:	4013      	ands	r3, r2
 8006582:	2b08      	cmp	r3, #8
 8006584:	d10c      	bne.n	80065a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2280      	movs	r2, #128	; 0x80
 800658a:	0391      	lsls	r1, r2, #14
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	4a1a      	ldr	r2, [pc, #104]	; (80065f8 <UART_CheckIdleState+0x98>)
 8006590:	9200      	str	r2, [sp, #0]
 8006592:	2200      	movs	r2, #0
 8006594:	f000 f832 	bl	80065fc <UART_WaitOnFlagUntilTimeout>
 8006598:	1e03      	subs	r3, r0, #0
 800659a:	d001      	beq.n	80065a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e026      	b.n	80065ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2204      	movs	r2, #4
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d10c      	bne.n	80065c8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2280      	movs	r2, #128	; 0x80
 80065b2:	03d1      	lsls	r1, r2, #15
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	4a10      	ldr	r2, [pc, #64]	; (80065f8 <UART_CheckIdleState+0x98>)
 80065b8:	9200      	str	r2, [sp, #0]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f000 f81e 	bl	80065fc <UART_WaitOnFlagUntilTimeout>
 80065c0:	1e03      	subs	r3, r0, #0
 80065c2:	d001      	beq.n	80065c8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e012      	b.n	80065ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2288      	movs	r2, #136	; 0x88
 80065cc:	2120      	movs	r1, #32
 80065ce:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	228c      	movs	r2, #140	; 0x8c
 80065d4:	2120      	movs	r1, #32
 80065d6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2284      	movs	r2, #132	; 0x84
 80065e8:	2100      	movs	r1, #0
 80065ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	0018      	movs	r0, r3
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b004      	add	sp, #16
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	01ffffff 	.word	0x01ffffff

080065fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b094      	sub	sp, #80	; 0x50
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	1dfb      	adds	r3, r7, #7
 800660a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660c:	e0a7      	b.n	800675e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006610:	3301      	adds	r3, #1
 8006612:	d100      	bne.n	8006616 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006614:	e0a3      	b.n	800675e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006616:	f7fd f96b 	bl	80038f0 <HAL_GetTick>
 800661a:	0002      	movs	r2, r0
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006622:	429a      	cmp	r2, r3
 8006624:	d302      	bcc.n	800662c <UART_WaitOnFlagUntilTimeout+0x30>
 8006626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006628:	2b00      	cmp	r3, #0
 800662a:	d13f      	bne.n	80066ac <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800662c:	f3ef 8310 	mrs	r3, PRIMASK
 8006630:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006634:	647b      	str	r3, [r7, #68]	; 0x44
 8006636:	2301      	movs	r3, #1
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	f383 8810 	msr	PRIMASK, r3
}
 8006640:	46c0      	nop			; (mov r8, r8)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	494e      	ldr	r1, [pc, #312]	; (8006788 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800664e:	400a      	ands	r2, r1
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006654:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	f383 8810 	msr	PRIMASK, r3
}
 800665c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800665e:	f3ef 8310 	mrs	r3, PRIMASK
 8006662:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006666:	643b      	str	r3, [r7, #64]	; 0x40
 8006668:	2301      	movs	r3, #1
 800666a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800666c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666e:	f383 8810 	msr	PRIMASK, r3
}
 8006672:	46c0      	nop			; (mov r8, r8)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2101      	movs	r1, #1
 8006680:	438a      	bics	r2, r1
 8006682:	609a      	str	r2, [r3, #8]
 8006684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006686:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668a:	f383 8810 	msr	PRIMASK, r3
}
 800668e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2288      	movs	r2, #136	; 0x88
 8006694:	2120      	movs	r1, #32
 8006696:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	228c      	movs	r2, #140	; 0x8c
 800669c:	2120      	movs	r1, #32
 800669e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2284      	movs	r2, #132	; 0x84
 80066a4:	2100      	movs	r1, #0
 80066a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e069      	b.n	8006780 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2204      	movs	r2, #4
 80066b4:	4013      	ands	r3, r2
 80066b6:	d052      	beq.n	800675e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69da      	ldr	r2, [r3, #28]
 80066be:	2380      	movs	r3, #128	; 0x80
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	401a      	ands	r2, r3
 80066c4:	2380      	movs	r3, #128	; 0x80
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d148      	bne.n	800675e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2280      	movs	r2, #128	; 0x80
 80066d2:	0112      	lsls	r2, r2, #4
 80066d4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d6:	f3ef 8310 	mrs	r3, PRIMASK
 80066da:	613b      	str	r3, [r7, #16]
  return(result);
 80066dc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e0:	2301      	movs	r3, #1
 80066e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f383 8810 	msr	PRIMASK, r3
}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4924      	ldr	r1, [pc, #144]	; (8006788 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80066f8:	400a      	ands	r2, r1
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	f383 8810 	msr	PRIMASK, r3
}
 8006706:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006708:	f3ef 8310 	mrs	r3, PRIMASK
 800670c:	61fb      	str	r3, [r7, #28]
  return(result);
 800670e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006710:	64bb      	str	r3, [r7, #72]	; 0x48
 8006712:	2301      	movs	r3, #1
 8006714:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	f383 8810 	msr	PRIMASK, r3
}
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2101      	movs	r1, #1
 800672a:	438a      	bics	r2, r1
 800672c:	609a      	str	r2, [r3, #8]
 800672e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	f383 8810 	msr	PRIMASK, r3
}
 8006738:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2288      	movs	r2, #136	; 0x88
 800673e:	2120      	movs	r1, #32
 8006740:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	228c      	movs	r2, #140	; 0x8c
 8006746:	2120      	movs	r1, #32
 8006748:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2290      	movs	r2, #144	; 0x90
 800674e:	2120      	movs	r1, #32
 8006750:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2284      	movs	r2, #132	; 0x84
 8006756:	2100      	movs	r1, #0
 8006758:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e010      	b.n	8006780 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	4013      	ands	r3, r2
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	425a      	negs	r2, r3
 800676e:	4153      	adcs	r3, r2
 8006770:	b2db      	uxtb	r3, r3
 8006772:	001a      	movs	r2, r3
 8006774:	1dfb      	adds	r3, r7, #7
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d100      	bne.n	800677e <UART_WaitOnFlagUntilTimeout+0x182>
 800677c:	e747      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	0018      	movs	r0, r3
 8006782:	46bd      	mov	sp, r7
 8006784:	b014      	add	sp, #80	; 0x50
 8006786:	bd80      	pop	{r7, pc}
 8006788:	fffffe5f 	.word	0xfffffe5f

0800678c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2284      	movs	r2, #132	; 0x84
 8006798:	5c9b      	ldrb	r3, [r3, r2]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800679e:	2302      	movs	r3, #2
 80067a0:	e027      	b.n	80067f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2284      	movs	r2, #132	; 0x84
 80067a6:	2101      	movs	r1, #1
 80067a8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2288      	movs	r2, #136	; 0x88
 80067ae:	2124      	movs	r1, #36	; 0x24
 80067b0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2101      	movs	r1, #1
 80067c6:	438a      	bics	r2, r1
 80067c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4a0b      	ldr	r2, [pc, #44]	; (80067fc <HAL_UARTEx_DisableFifoMode+0x70>)
 80067ce:	4013      	ands	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2288      	movs	r2, #136	; 0x88
 80067e4:	2120      	movs	r1, #32
 80067e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2284      	movs	r2, #132	; 0x84
 80067ec:	2100      	movs	r1, #0
 80067ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	0018      	movs	r0, r3
 80067f4:	46bd      	mov	sp, r7
 80067f6:	b004      	add	sp, #16
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	dfffffff 	.word	0xdfffffff

08006800 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2284      	movs	r2, #132	; 0x84
 800680e:	5c9b      	ldrb	r3, [r3, r2]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006814:	2302      	movs	r3, #2
 8006816:	e02e      	b.n	8006876 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2284      	movs	r2, #132	; 0x84
 800681c:	2101      	movs	r1, #1
 800681e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2288      	movs	r2, #136	; 0x88
 8006824:	2124      	movs	r1, #36	; 0x24
 8006826:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2101      	movs	r1, #1
 800683c:	438a      	bics	r2, r1
 800683e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	08d9      	lsrs	r1, r3, #3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	0018      	movs	r0, r3
 8006858:	f000 f854 	bl	8006904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2288      	movs	r2, #136	; 0x88
 8006868:	2120      	movs	r1, #32
 800686a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2284      	movs	r2, #132	; 0x84
 8006870:	2100      	movs	r1, #0
 8006872:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	0018      	movs	r0, r3
 8006878:	46bd      	mov	sp, r7
 800687a:	b004      	add	sp, #16
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2284      	movs	r2, #132	; 0x84
 800688e:	5c9b      	ldrb	r3, [r3, r2]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006894:	2302      	movs	r3, #2
 8006896:	e02f      	b.n	80068f8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2284      	movs	r2, #132	; 0x84
 800689c:	2101      	movs	r1, #1
 800689e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2288      	movs	r2, #136	; 0x88
 80068a4:	2124      	movs	r1, #36	; 0x24
 80068a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2101      	movs	r1, #1
 80068bc:	438a      	bics	r2, r1
 80068be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	4a0e      	ldr	r2, [pc, #56]	; (8006900 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	0019      	movs	r1, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	0018      	movs	r0, r3
 80068da:	f000 f813 	bl	8006904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2288      	movs	r2, #136	; 0x88
 80068ea:	2120      	movs	r1, #32
 80068ec:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2284      	movs	r2, #132	; 0x84
 80068f2:	2100      	movs	r1, #0
 80068f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	0018      	movs	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	b004      	add	sp, #16
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	f1ffffff 	.word	0xf1ffffff

08006904 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006910:	2b00      	cmp	r3, #0
 8006912:	d108      	bne.n	8006926 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	226a      	movs	r2, #106	; 0x6a
 8006918:	2101      	movs	r1, #1
 800691a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2268      	movs	r2, #104	; 0x68
 8006920:	2101      	movs	r1, #1
 8006922:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006924:	e043      	b.n	80069ae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006926:	260f      	movs	r6, #15
 8006928:	19bb      	adds	r3, r7, r6
 800692a:	2208      	movs	r2, #8
 800692c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800692e:	200e      	movs	r0, #14
 8006930:	183b      	adds	r3, r7, r0
 8006932:	2208      	movs	r2, #8
 8006934:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	0e5b      	lsrs	r3, r3, #25
 800693e:	b2da      	uxtb	r2, r3
 8006940:	240d      	movs	r4, #13
 8006942:	193b      	adds	r3, r7, r4
 8006944:	2107      	movs	r1, #7
 8006946:	400a      	ands	r2, r1
 8006948:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	0f5b      	lsrs	r3, r3, #29
 8006952:	b2da      	uxtb	r2, r3
 8006954:	250c      	movs	r5, #12
 8006956:	197b      	adds	r3, r7, r5
 8006958:	2107      	movs	r1, #7
 800695a:	400a      	ands	r2, r1
 800695c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800695e:	183b      	adds	r3, r7, r0
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	197a      	adds	r2, r7, r5
 8006964:	7812      	ldrb	r2, [r2, #0]
 8006966:	4914      	ldr	r1, [pc, #80]	; (80069b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8006968:	5c8a      	ldrb	r2, [r1, r2]
 800696a:	435a      	muls	r2, r3
 800696c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800696e:	197b      	adds	r3, r7, r5
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	4a12      	ldr	r2, [pc, #72]	; (80069bc <UARTEx_SetNbDataToProcess+0xb8>)
 8006974:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006976:	0019      	movs	r1, r3
 8006978:	f7f9 fc5e 	bl	8000238 <__divsi3>
 800697c:	0003      	movs	r3, r0
 800697e:	b299      	uxth	r1, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	226a      	movs	r2, #106	; 0x6a
 8006984:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006986:	19bb      	adds	r3, r7, r6
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	193a      	adds	r2, r7, r4
 800698c:	7812      	ldrb	r2, [r2, #0]
 800698e:	490a      	ldr	r1, [pc, #40]	; (80069b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8006990:	5c8a      	ldrb	r2, [r1, r2]
 8006992:	435a      	muls	r2, r3
 8006994:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006996:	193b      	adds	r3, r7, r4
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	4a08      	ldr	r2, [pc, #32]	; (80069bc <UARTEx_SetNbDataToProcess+0xb8>)
 800699c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800699e:	0019      	movs	r1, r3
 80069a0:	f7f9 fc4a 	bl	8000238 <__divsi3>
 80069a4:	0003      	movs	r3, r0
 80069a6:	b299      	uxth	r1, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2268      	movs	r2, #104	; 0x68
 80069ac:	5299      	strh	r1, [r3, r2]
}
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	46bd      	mov	sp, r7
 80069b2:	b005      	add	sp, #20
 80069b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	080073d0 	.word	0x080073d0
 80069bc:	080073d8 	.word	0x080073d8

080069c0 <__errno>:
 80069c0:	4b01      	ldr	r3, [pc, #4]	; (80069c8 <__errno+0x8>)
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	4770      	bx	lr
 80069c6:	46c0      	nop			; (mov r8, r8)
 80069c8:	20000010 	.word	0x20000010

080069cc <__libc_init_array>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	2600      	movs	r6, #0
 80069d0:	4d0c      	ldr	r5, [pc, #48]	; (8006a04 <__libc_init_array+0x38>)
 80069d2:	4c0d      	ldr	r4, [pc, #52]	; (8006a08 <__libc_init_array+0x3c>)
 80069d4:	1b64      	subs	r4, r4, r5
 80069d6:	10a4      	asrs	r4, r4, #2
 80069d8:	42a6      	cmp	r6, r4
 80069da:	d109      	bne.n	80069f0 <__libc_init_array+0x24>
 80069dc:	2600      	movs	r6, #0
 80069de:	f000 fc8b 	bl	80072f8 <_init>
 80069e2:	4d0a      	ldr	r5, [pc, #40]	; (8006a0c <__libc_init_array+0x40>)
 80069e4:	4c0a      	ldr	r4, [pc, #40]	; (8006a10 <__libc_init_array+0x44>)
 80069e6:	1b64      	subs	r4, r4, r5
 80069e8:	10a4      	asrs	r4, r4, #2
 80069ea:	42a6      	cmp	r6, r4
 80069ec:	d105      	bne.n	80069fa <__libc_init_array+0x2e>
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	00b3      	lsls	r3, r6, #2
 80069f2:	58eb      	ldr	r3, [r5, r3]
 80069f4:	4798      	blx	r3
 80069f6:	3601      	adds	r6, #1
 80069f8:	e7ee      	b.n	80069d8 <__libc_init_array+0xc>
 80069fa:	00b3      	lsls	r3, r6, #2
 80069fc:	58eb      	ldr	r3, [r5, r3]
 80069fe:	4798      	blx	r3
 8006a00:	3601      	adds	r6, #1
 8006a02:	e7f2      	b.n	80069ea <__libc_init_array+0x1e>
 8006a04:	08007414 	.word	0x08007414
 8006a08:	08007414 	.word	0x08007414
 8006a0c:	08007414 	.word	0x08007414
 8006a10:	08007418 	.word	0x08007418

08006a14 <memset>:
 8006a14:	0003      	movs	r3, r0
 8006a16:	1882      	adds	r2, r0, r2
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d100      	bne.n	8006a1e <memset+0xa>
 8006a1c:	4770      	bx	lr
 8006a1e:	7019      	strb	r1, [r3, #0]
 8006a20:	3301      	adds	r3, #1
 8006a22:	e7f9      	b.n	8006a18 <memset+0x4>

08006a24 <siprintf>:
 8006a24:	b40e      	push	{r1, r2, r3}
 8006a26:	b500      	push	{lr}
 8006a28:	490b      	ldr	r1, [pc, #44]	; (8006a58 <siprintf+0x34>)
 8006a2a:	b09c      	sub	sp, #112	; 0x70
 8006a2c:	ab1d      	add	r3, sp, #116	; 0x74
 8006a2e:	9002      	str	r0, [sp, #8]
 8006a30:	9006      	str	r0, [sp, #24]
 8006a32:	9107      	str	r1, [sp, #28]
 8006a34:	9104      	str	r1, [sp, #16]
 8006a36:	4809      	ldr	r0, [pc, #36]	; (8006a5c <siprintf+0x38>)
 8006a38:	4909      	ldr	r1, [pc, #36]	; (8006a60 <siprintf+0x3c>)
 8006a3a:	cb04      	ldmia	r3!, {r2}
 8006a3c:	9105      	str	r1, [sp, #20]
 8006a3e:	6800      	ldr	r0, [r0, #0]
 8006a40:	a902      	add	r1, sp, #8
 8006a42:	9301      	str	r3, [sp, #4]
 8006a44:	f000 f870 	bl	8006b28 <_svfiprintf_r>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	9a02      	ldr	r2, [sp, #8]
 8006a4c:	7013      	strb	r3, [r2, #0]
 8006a4e:	b01c      	add	sp, #112	; 0x70
 8006a50:	bc08      	pop	{r3}
 8006a52:	b003      	add	sp, #12
 8006a54:	4718      	bx	r3
 8006a56:	46c0      	nop			; (mov r8, r8)
 8006a58:	7fffffff 	.word	0x7fffffff
 8006a5c:	20000010 	.word	0x20000010
 8006a60:	ffff0208 	.word	0xffff0208

08006a64 <__ssputs_r>:
 8006a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a66:	688e      	ldr	r6, [r1, #8]
 8006a68:	b085      	sub	sp, #20
 8006a6a:	0007      	movs	r7, r0
 8006a6c:	000c      	movs	r4, r1
 8006a6e:	9203      	str	r2, [sp, #12]
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	429e      	cmp	r6, r3
 8006a74:	d83c      	bhi.n	8006af0 <__ssputs_r+0x8c>
 8006a76:	2390      	movs	r3, #144	; 0x90
 8006a78:	898a      	ldrh	r2, [r1, #12]
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	421a      	tst	r2, r3
 8006a7e:	d034      	beq.n	8006aea <__ssputs_r+0x86>
 8006a80:	6909      	ldr	r1, [r1, #16]
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	6960      	ldr	r0, [r4, #20]
 8006a86:	1a5b      	subs	r3, r3, r1
 8006a88:	9302      	str	r3, [sp, #8]
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	4343      	muls	r3, r0
 8006a8e:	0fdd      	lsrs	r5, r3, #31
 8006a90:	18ed      	adds	r5, r5, r3
 8006a92:	9b01      	ldr	r3, [sp, #4]
 8006a94:	9802      	ldr	r0, [sp, #8]
 8006a96:	3301      	adds	r3, #1
 8006a98:	181b      	adds	r3, r3, r0
 8006a9a:	106d      	asrs	r5, r5, #1
 8006a9c:	42ab      	cmp	r3, r5
 8006a9e:	d900      	bls.n	8006aa2 <__ssputs_r+0x3e>
 8006aa0:	001d      	movs	r5, r3
 8006aa2:	0553      	lsls	r3, r2, #21
 8006aa4:	d532      	bpl.n	8006b0c <__ssputs_r+0xa8>
 8006aa6:	0029      	movs	r1, r5
 8006aa8:	0038      	movs	r0, r7
 8006aaa:	f000 fb53 	bl	8007154 <_malloc_r>
 8006aae:	1e06      	subs	r6, r0, #0
 8006ab0:	d109      	bne.n	8006ac6 <__ssputs_r+0x62>
 8006ab2:	230c      	movs	r3, #12
 8006ab4:	603b      	str	r3, [r7, #0]
 8006ab6:	2340      	movs	r3, #64	; 0x40
 8006ab8:	2001      	movs	r0, #1
 8006aba:	89a2      	ldrh	r2, [r4, #12]
 8006abc:	4240      	negs	r0, r0
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	81a3      	strh	r3, [r4, #12]
 8006ac2:	b005      	add	sp, #20
 8006ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac6:	9a02      	ldr	r2, [sp, #8]
 8006ac8:	6921      	ldr	r1, [r4, #16]
 8006aca:	f000 faba 	bl	8007042 <memcpy>
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	4a14      	ldr	r2, [pc, #80]	; (8006b24 <__ssputs_r+0xc0>)
 8006ad2:	401a      	ands	r2, r3
 8006ad4:	2380      	movs	r3, #128	; 0x80
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	81a3      	strh	r3, [r4, #12]
 8006ada:	9b02      	ldr	r3, [sp, #8]
 8006adc:	6126      	str	r6, [r4, #16]
 8006ade:	18f6      	adds	r6, r6, r3
 8006ae0:	6026      	str	r6, [r4, #0]
 8006ae2:	6165      	str	r5, [r4, #20]
 8006ae4:	9e01      	ldr	r6, [sp, #4]
 8006ae6:	1aed      	subs	r5, r5, r3
 8006ae8:	60a5      	str	r5, [r4, #8]
 8006aea:	9b01      	ldr	r3, [sp, #4]
 8006aec:	429e      	cmp	r6, r3
 8006aee:	d900      	bls.n	8006af2 <__ssputs_r+0x8e>
 8006af0:	9e01      	ldr	r6, [sp, #4]
 8006af2:	0032      	movs	r2, r6
 8006af4:	9903      	ldr	r1, [sp, #12]
 8006af6:	6820      	ldr	r0, [r4, #0]
 8006af8:	f000 faac 	bl	8007054 <memmove>
 8006afc:	68a3      	ldr	r3, [r4, #8]
 8006afe:	2000      	movs	r0, #0
 8006b00:	1b9b      	subs	r3, r3, r6
 8006b02:	60a3      	str	r3, [r4, #8]
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	199e      	adds	r6, r3, r6
 8006b08:	6026      	str	r6, [r4, #0]
 8006b0a:	e7da      	b.n	8006ac2 <__ssputs_r+0x5e>
 8006b0c:	002a      	movs	r2, r5
 8006b0e:	0038      	movs	r0, r7
 8006b10:	f000 fb96 	bl	8007240 <_realloc_r>
 8006b14:	1e06      	subs	r6, r0, #0
 8006b16:	d1e0      	bne.n	8006ada <__ssputs_r+0x76>
 8006b18:	0038      	movs	r0, r7
 8006b1a:	6921      	ldr	r1, [r4, #16]
 8006b1c:	f000 faae 	bl	800707c <_free_r>
 8006b20:	e7c7      	b.n	8006ab2 <__ssputs_r+0x4e>
 8006b22:	46c0      	nop			; (mov r8, r8)
 8006b24:	fffffb7f 	.word	0xfffffb7f

08006b28 <_svfiprintf_r>:
 8006b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b2a:	b0a1      	sub	sp, #132	; 0x84
 8006b2c:	9003      	str	r0, [sp, #12]
 8006b2e:	001d      	movs	r5, r3
 8006b30:	898b      	ldrh	r3, [r1, #12]
 8006b32:	000f      	movs	r7, r1
 8006b34:	0016      	movs	r6, r2
 8006b36:	061b      	lsls	r3, r3, #24
 8006b38:	d511      	bpl.n	8006b5e <_svfiprintf_r+0x36>
 8006b3a:	690b      	ldr	r3, [r1, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10e      	bne.n	8006b5e <_svfiprintf_r+0x36>
 8006b40:	2140      	movs	r1, #64	; 0x40
 8006b42:	f000 fb07 	bl	8007154 <_malloc_r>
 8006b46:	6038      	str	r0, [r7, #0]
 8006b48:	6138      	str	r0, [r7, #16]
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d105      	bne.n	8006b5a <_svfiprintf_r+0x32>
 8006b4e:	230c      	movs	r3, #12
 8006b50:	9a03      	ldr	r2, [sp, #12]
 8006b52:	3801      	subs	r0, #1
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	b021      	add	sp, #132	; 0x84
 8006b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b5a:	2340      	movs	r3, #64	; 0x40
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	ac08      	add	r4, sp, #32
 8006b62:	6163      	str	r3, [r4, #20]
 8006b64:	3320      	adds	r3, #32
 8006b66:	7663      	strb	r3, [r4, #25]
 8006b68:	3310      	adds	r3, #16
 8006b6a:	76a3      	strb	r3, [r4, #26]
 8006b6c:	9507      	str	r5, [sp, #28]
 8006b6e:	0035      	movs	r5, r6
 8006b70:	782b      	ldrb	r3, [r5, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <_svfiprintf_r+0x52>
 8006b76:	2b25      	cmp	r3, #37	; 0x25
 8006b78:	d147      	bne.n	8006c0a <_svfiprintf_r+0xe2>
 8006b7a:	1bab      	subs	r3, r5, r6
 8006b7c:	9305      	str	r3, [sp, #20]
 8006b7e:	42b5      	cmp	r5, r6
 8006b80:	d00c      	beq.n	8006b9c <_svfiprintf_r+0x74>
 8006b82:	0032      	movs	r2, r6
 8006b84:	0039      	movs	r1, r7
 8006b86:	9803      	ldr	r0, [sp, #12]
 8006b88:	f7ff ff6c 	bl	8006a64 <__ssputs_r>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d100      	bne.n	8006b92 <_svfiprintf_r+0x6a>
 8006b90:	e0ae      	b.n	8006cf0 <_svfiprintf_r+0x1c8>
 8006b92:	6962      	ldr	r2, [r4, #20]
 8006b94:	9b05      	ldr	r3, [sp, #20]
 8006b96:	4694      	mov	ip, r2
 8006b98:	4463      	add	r3, ip
 8006b9a:	6163      	str	r3, [r4, #20]
 8006b9c:	782b      	ldrb	r3, [r5, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d100      	bne.n	8006ba4 <_svfiprintf_r+0x7c>
 8006ba2:	e0a5      	b.n	8006cf0 <_svfiprintf_r+0x1c8>
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	4252      	negs	r2, r2
 8006baa:	6062      	str	r2, [r4, #4]
 8006bac:	a904      	add	r1, sp, #16
 8006bae:	3254      	adds	r2, #84	; 0x54
 8006bb0:	1852      	adds	r2, r2, r1
 8006bb2:	1c6e      	adds	r6, r5, #1
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	60e3      	str	r3, [r4, #12]
 8006bb8:	60a3      	str	r3, [r4, #8]
 8006bba:	7013      	strb	r3, [r2, #0]
 8006bbc:	65a3      	str	r3, [r4, #88]	; 0x58
 8006bbe:	2205      	movs	r2, #5
 8006bc0:	7831      	ldrb	r1, [r6, #0]
 8006bc2:	4854      	ldr	r0, [pc, #336]	; (8006d14 <_svfiprintf_r+0x1ec>)
 8006bc4:	f000 fa32 	bl	800702c <memchr>
 8006bc8:	1c75      	adds	r5, r6, #1
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d11f      	bne.n	8006c0e <_svfiprintf_r+0xe6>
 8006bce:	6822      	ldr	r2, [r4, #0]
 8006bd0:	06d3      	lsls	r3, r2, #27
 8006bd2:	d504      	bpl.n	8006bde <_svfiprintf_r+0xb6>
 8006bd4:	2353      	movs	r3, #83	; 0x53
 8006bd6:	a904      	add	r1, sp, #16
 8006bd8:	185b      	adds	r3, r3, r1
 8006bda:	2120      	movs	r1, #32
 8006bdc:	7019      	strb	r1, [r3, #0]
 8006bde:	0713      	lsls	r3, r2, #28
 8006be0:	d504      	bpl.n	8006bec <_svfiprintf_r+0xc4>
 8006be2:	2353      	movs	r3, #83	; 0x53
 8006be4:	a904      	add	r1, sp, #16
 8006be6:	185b      	adds	r3, r3, r1
 8006be8:	212b      	movs	r1, #43	; 0x2b
 8006bea:	7019      	strb	r1, [r3, #0]
 8006bec:	7833      	ldrb	r3, [r6, #0]
 8006bee:	2b2a      	cmp	r3, #42	; 0x2a
 8006bf0:	d016      	beq.n	8006c20 <_svfiprintf_r+0xf8>
 8006bf2:	0035      	movs	r5, r6
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	200a      	movs	r0, #10
 8006bf8:	68e3      	ldr	r3, [r4, #12]
 8006bfa:	782a      	ldrb	r2, [r5, #0]
 8006bfc:	1c6e      	adds	r6, r5, #1
 8006bfe:	3a30      	subs	r2, #48	; 0x30
 8006c00:	2a09      	cmp	r2, #9
 8006c02:	d94e      	bls.n	8006ca2 <_svfiprintf_r+0x17a>
 8006c04:	2900      	cmp	r1, #0
 8006c06:	d111      	bne.n	8006c2c <_svfiprintf_r+0x104>
 8006c08:	e017      	b.n	8006c3a <_svfiprintf_r+0x112>
 8006c0a:	3501      	adds	r5, #1
 8006c0c:	e7b0      	b.n	8006b70 <_svfiprintf_r+0x48>
 8006c0e:	4b41      	ldr	r3, [pc, #260]	; (8006d14 <_svfiprintf_r+0x1ec>)
 8006c10:	6822      	ldr	r2, [r4, #0]
 8006c12:	1ac0      	subs	r0, r0, r3
 8006c14:	2301      	movs	r3, #1
 8006c16:	4083      	lsls	r3, r0
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	002e      	movs	r6, r5
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	e7ce      	b.n	8006bbe <_svfiprintf_r+0x96>
 8006c20:	9b07      	ldr	r3, [sp, #28]
 8006c22:	1d19      	adds	r1, r3, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	9107      	str	r1, [sp, #28]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	db01      	blt.n	8006c30 <_svfiprintf_r+0x108>
 8006c2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c2e:	e004      	b.n	8006c3a <_svfiprintf_r+0x112>
 8006c30:	425b      	negs	r3, r3
 8006c32:	60e3      	str	r3, [r4, #12]
 8006c34:	2302      	movs	r3, #2
 8006c36:	4313      	orrs	r3, r2
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	782b      	ldrb	r3, [r5, #0]
 8006c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c3e:	d10a      	bne.n	8006c56 <_svfiprintf_r+0x12e>
 8006c40:	786b      	ldrb	r3, [r5, #1]
 8006c42:	2b2a      	cmp	r3, #42	; 0x2a
 8006c44:	d135      	bne.n	8006cb2 <_svfiprintf_r+0x18a>
 8006c46:	9b07      	ldr	r3, [sp, #28]
 8006c48:	3502      	adds	r5, #2
 8006c4a:	1d1a      	adds	r2, r3, #4
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	9207      	str	r2, [sp, #28]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	db2b      	blt.n	8006cac <_svfiprintf_r+0x184>
 8006c54:	9309      	str	r3, [sp, #36]	; 0x24
 8006c56:	4e30      	ldr	r6, [pc, #192]	; (8006d18 <_svfiprintf_r+0x1f0>)
 8006c58:	2203      	movs	r2, #3
 8006c5a:	0030      	movs	r0, r6
 8006c5c:	7829      	ldrb	r1, [r5, #0]
 8006c5e:	f000 f9e5 	bl	800702c <memchr>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d006      	beq.n	8006c74 <_svfiprintf_r+0x14c>
 8006c66:	2340      	movs	r3, #64	; 0x40
 8006c68:	1b80      	subs	r0, r0, r6
 8006c6a:	4083      	lsls	r3, r0
 8006c6c:	6822      	ldr	r2, [r4, #0]
 8006c6e:	3501      	adds	r5, #1
 8006c70:	4313      	orrs	r3, r2
 8006c72:	6023      	str	r3, [r4, #0]
 8006c74:	7829      	ldrb	r1, [r5, #0]
 8006c76:	2206      	movs	r2, #6
 8006c78:	4828      	ldr	r0, [pc, #160]	; (8006d1c <_svfiprintf_r+0x1f4>)
 8006c7a:	1c6e      	adds	r6, r5, #1
 8006c7c:	7621      	strb	r1, [r4, #24]
 8006c7e:	f000 f9d5 	bl	800702c <memchr>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d03c      	beq.n	8006d00 <_svfiprintf_r+0x1d8>
 8006c86:	4b26      	ldr	r3, [pc, #152]	; (8006d20 <_svfiprintf_r+0x1f8>)
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d125      	bne.n	8006cd8 <_svfiprintf_r+0x1b0>
 8006c8c:	2207      	movs	r2, #7
 8006c8e:	9b07      	ldr	r3, [sp, #28]
 8006c90:	3307      	adds	r3, #7
 8006c92:	4393      	bics	r3, r2
 8006c94:	3308      	adds	r3, #8
 8006c96:	9307      	str	r3, [sp, #28]
 8006c98:	6963      	ldr	r3, [r4, #20]
 8006c9a:	9a04      	ldr	r2, [sp, #16]
 8006c9c:	189b      	adds	r3, r3, r2
 8006c9e:	6163      	str	r3, [r4, #20]
 8006ca0:	e765      	b.n	8006b6e <_svfiprintf_r+0x46>
 8006ca2:	4343      	muls	r3, r0
 8006ca4:	0035      	movs	r5, r6
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	189b      	adds	r3, r3, r2
 8006caa:	e7a6      	b.n	8006bfa <_svfiprintf_r+0xd2>
 8006cac:	2301      	movs	r3, #1
 8006cae:	425b      	negs	r3, r3
 8006cb0:	e7d0      	b.n	8006c54 <_svfiprintf_r+0x12c>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	200a      	movs	r0, #10
 8006cb6:	001a      	movs	r2, r3
 8006cb8:	3501      	adds	r5, #1
 8006cba:	6063      	str	r3, [r4, #4]
 8006cbc:	7829      	ldrb	r1, [r5, #0]
 8006cbe:	1c6e      	adds	r6, r5, #1
 8006cc0:	3930      	subs	r1, #48	; 0x30
 8006cc2:	2909      	cmp	r1, #9
 8006cc4:	d903      	bls.n	8006cce <_svfiprintf_r+0x1a6>
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0c5      	beq.n	8006c56 <_svfiprintf_r+0x12e>
 8006cca:	9209      	str	r2, [sp, #36]	; 0x24
 8006ccc:	e7c3      	b.n	8006c56 <_svfiprintf_r+0x12e>
 8006cce:	4342      	muls	r2, r0
 8006cd0:	0035      	movs	r5, r6
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	1852      	adds	r2, r2, r1
 8006cd6:	e7f1      	b.n	8006cbc <_svfiprintf_r+0x194>
 8006cd8:	ab07      	add	r3, sp, #28
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	003a      	movs	r2, r7
 8006cde:	0021      	movs	r1, r4
 8006ce0:	4b10      	ldr	r3, [pc, #64]	; (8006d24 <_svfiprintf_r+0x1fc>)
 8006ce2:	9803      	ldr	r0, [sp, #12]
 8006ce4:	e000      	b.n	8006ce8 <_svfiprintf_r+0x1c0>
 8006ce6:	bf00      	nop
 8006ce8:	9004      	str	r0, [sp, #16]
 8006cea:	9b04      	ldr	r3, [sp, #16]
 8006cec:	3301      	adds	r3, #1
 8006cee:	d1d3      	bne.n	8006c98 <_svfiprintf_r+0x170>
 8006cf0:	89bb      	ldrh	r3, [r7, #12]
 8006cf2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006cf4:	065b      	lsls	r3, r3, #25
 8006cf6:	d400      	bmi.n	8006cfa <_svfiprintf_r+0x1d2>
 8006cf8:	e72d      	b.n	8006b56 <_svfiprintf_r+0x2e>
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	4240      	negs	r0, r0
 8006cfe:	e72a      	b.n	8006b56 <_svfiprintf_r+0x2e>
 8006d00:	ab07      	add	r3, sp, #28
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	003a      	movs	r2, r7
 8006d06:	0021      	movs	r1, r4
 8006d08:	4b06      	ldr	r3, [pc, #24]	; (8006d24 <_svfiprintf_r+0x1fc>)
 8006d0a:	9803      	ldr	r0, [sp, #12]
 8006d0c:	f000 f87c 	bl	8006e08 <_printf_i>
 8006d10:	e7ea      	b.n	8006ce8 <_svfiprintf_r+0x1c0>
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	080073e0 	.word	0x080073e0
 8006d18:	080073e6 	.word	0x080073e6
 8006d1c:	080073ea 	.word	0x080073ea
 8006d20:	00000000 	.word	0x00000000
 8006d24:	08006a65 	.word	0x08006a65

08006d28 <_printf_common>:
 8006d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d2a:	0015      	movs	r5, r2
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	688a      	ldr	r2, [r1, #8]
 8006d30:	690b      	ldr	r3, [r1, #16]
 8006d32:	000c      	movs	r4, r1
 8006d34:	9000      	str	r0, [sp, #0]
 8006d36:	4293      	cmp	r3, r2
 8006d38:	da00      	bge.n	8006d3c <_printf_common+0x14>
 8006d3a:	0013      	movs	r3, r2
 8006d3c:	0022      	movs	r2, r4
 8006d3e:	602b      	str	r3, [r5, #0]
 8006d40:	3243      	adds	r2, #67	; 0x43
 8006d42:	7812      	ldrb	r2, [r2, #0]
 8006d44:	2a00      	cmp	r2, #0
 8006d46:	d001      	beq.n	8006d4c <_printf_common+0x24>
 8006d48:	3301      	adds	r3, #1
 8006d4a:	602b      	str	r3, [r5, #0]
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	069b      	lsls	r3, r3, #26
 8006d50:	d502      	bpl.n	8006d58 <_printf_common+0x30>
 8006d52:	682b      	ldr	r3, [r5, #0]
 8006d54:	3302      	adds	r3, #2
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	6822      	ldr	r2, [r4, #0]
 8006d5a:	2306      	movs	r3, #6
 8006d5c:	0017      	movs	r7, r2
 8006d5e:	401f      	ands	r7, r3
 8006d60:	421a      	tst	r2, r3
 8006d62:	d027      	beq.n	8006db4 <_printf_common+0x8c>
 8006d64:	0023      	movs	r3, r4
 8006d66:	3343      	adds	r3, #67	; 0x43
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	1e5a      	subs	r2, r3, #1
 8006d6c:	4193      	sbcs	r3, r2
 8006d6e:	6822      	ldr	r2, [r4, #0]
 8006d70:	0692      	lsls	r2, r2, #26
 8006d72:	d430      	bmi.n	8006dd6 <_printf_common+0xae>
 8006d74:	0022      	movs	r2, r4
 8006d76:	9901      	ldr	r1, [sp, #4]
 8006d78:	9800      	ldr	r0, [sp, #0]
 8006d7a:	9e08      	ldr	r6, [sp, #32]
 8006d7c:	3243      	adds	r2, #67	; 0x43
 8006d7e:	47b0      	blx	r6
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d025      	beq.n	8006dd0 <_printf_common+0xa8>
 8006d84:	2306      	movs	r3, #6
 8006d86:	6820      	ldr	r0, [r4, #0]
 8006d88:	682a      	ldr	r2, [r5, #0]
 8006d8a:	68e1      	ldr	r1, [r4, #12]
 8006d8c:	2500      	movs	r5, #0
 8006d8e:	4003      	ands	r3, r0
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d103      	bne.n	8006d9c <_printf_common+0x74>
 8006d94:	1a8d      	subs	r5, r1, r2
 8006d96:	43eb      	mvns	r3, r5
 8006d98:	17db      	asrs	r3, r3, #31
 8006d9a:	401d      	ands	r5, r3
 8006d9c:	68a3      	ldr	r3, [r4, #8]
 8006d9e:	6922      	ldr	r2, [r4, #16]
 8006da0:	4293      	cmp	r3, r2
 8006da2:	dd01      	ble.n	8006da8 <_printf_common+0x80>
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	18ed      	adds	r5, r5, r3
 8006da8:	2700      	movs	r7, #0
 8006daa:	42bd      	cmp	r5, r7
 8006dac:	d120      	bne.n	8006df0 <_printf_common+0xc8>
 8006dae:	2000      	movs	r0, #0
 8006db0:	e010      	b.n	8006dd4 <_printf_common+0xac>
 8006db2:	3701      	adds	r7, #1
 8006db4:	68e3      	ldr	r3, [r4, #12]
 8006db6:	682a      	ldr	r2, [r5, #0]
 8006db8:	1a9b      	subs	r3, r3, r2
 8006dba:	42bb      	cmp	r3, r7
 8006dbc:	ddd2      	ble.n	8006d64 <_printf_common+0x3c>
 8006dbe:	0022      	movs	r2, r4
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	9901      	ldr	r1, [sp, #4]
 8006dc4:	9800      	ldr	r0, [sp, #0]
 8006dc6:	9e08      	ldr	r6, [sp, #32]
 8006dc8:	3219      	adds	r2, #25
 8006dca:	47b0      	blx	r6
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d1f0      	bne.n	8006db2 <_printf_common+0x8a>
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	4240      	negs	r0, r0
 8006dd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006dd6:	2030      	movs	r0, #48	; 0x30
 8006dd8:	18e1      	adds	r1, r4, r3
 8006dda:	3143      	adds	r1, #67	; 0x43
 8006ddc:	7008      	strb	r0, [r1, #0]
 8006dde:	0021      	movs	r1, r4
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	3145      	adds	r1, #69	; 0x45
 8006de4:	7809      	ldrb	r1, [r1, #0]
 8006de6:	18a2      	adds	r2, r4, r2
 8006de8:	3243      	adds	r2, #67	; 0x43
 8006dea:	3302      	adds	r3, #2
 8006dec:	7011      	strb	r1, [r2, #0]
 8006dee:	e7c1      	b.n	8006d74 <_printf_common+0x4c>
 8006df0:	0022      	movs	r2, r4
 8006df2:	2301      	movs	r3, #1
 8006df4:	9901      	ldr	r1, [sp, #4]
 8006df6:	9800      	ldr	r0, [sp, #0]
 8006df8:	9e08      	ldr	r6, [sp, #32]
 8006dfa:	321a      	adds	r2, #26
 8006dfc:	47b0      	blx	r6
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	d0e6      	beq.n	8006dd0 <_printf_common+0xa8>
 8006e02:	3701      	adds	r7, #1
 8006e04:	e7d1      	b.n	8006daa <_printf_common+0x82>
	...

08006e08 <_printf_i>:
 8006e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e0a:	b08b      	sub	sp, #44	; 0x2c
 8006e0c:	9206      	str	r2, [sp, #24]
 8006e0e:	000a      	movs	r2, r1
 8006e10:	3243      	adds	r2, #67	; 0x43
 8006e12:	9307      	str	r3, [sp, #28]
 8006e14:	9005      	str	r0, [sp, #20]
 8006e16:	9204      	str	r2, [sp, #16]
 8006e18:	7e0a      	ldrb	r2, [r1, #24]
 8006e1a:	000c      	movs	r4, r1
 8006e1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e1e:	2a78      	cmp	r2, #120	; 0x78
 8006e20:	d807      	bhi.n	8006e32 <_printf_i+0x2a>
 8006e22:	2a62      	cmp	r2, #98	; 0x62
 8006e24:	d809      	bhi.n	8006e3a <_printf_i+0x32>
 8006e26:	2a00      	cmp	r2, #0
 8006e28:	d100      	bne.n	8006e2c <_printf_i+0x24>
 8006e2a:	e0c1      	b.n	8006fb0 <_printf_i+0x1a8>
 8006e2c:	2a58      	cmp	r2, #88	; 0x58
 8006e2e:	d100      	bne.n	8006e32 <_printf_i+0x2a>
 8006e30:	e08c      	b.n	8006f4c <_printf_i+0x144>
 8006e32:	0026      	movs	r6, r4
 8006e34:	3642      	adds	r6, #66	; 0x42
 8006e36:	7032      	strb	r2, [r6, #0]
 8006e38:	e022      	b.n	8006e80 <_printf_i+0x78>
 8006e3a:	0010      	movs	r0, r2
 8006e3c:	3863      	subs	r0, #99	; 0x63
 8006e3e:	2815      	cmp	r0, #21
 8006e40:	d8f7      	bhi.n	8006e32 <_printf_i+0x2a>
 8006e42:	f7f9 f965 	bl	8000110 <__gnu_thumb1_case_shi>
 8006e46:	0016      	.short	0x0016
 8006e48:	fff6001f 	.word	0xfff6001f
 8006e4c:	fff6fff6 	.word	0xfff6fff6
 8006e50:	001ffff6 	.word	0x001ffff6
 8006e54:	fff6fff6 	.word	0xfff6fff6
 8006e58:	fff6fff6 	.word	0xfff6fff6
 8006e5c:	003600a8 	.word	0x003600a8
 8006e60:	fff6009a 	.word	0xfff6009a
 8006e64:	00b9fff6 	.word	0x00b9fff6
 8006e68:	0036fff6 	.word	0x0036fff6
 8006e6c:	fff6fff6 	.word	0xfff6fff6
 8006e70:	009e      	.short	0x009e
 8006e72:	0026      	movs	r6, r4
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	3642      	adds	r6, #66	; 0x42
 8006e78:	1d11      	adds	r1, r2, #4
 8006e7a:	6019      	str	r1, [r3, #0]
 8006e7c:	6813      	ldr	r3, [r2, #0]
 8006e7e:	7033      	strb	r3, [r6, #0]
 8006e80:	2301      	movs	r3, #1
 8006e82:	e0a7      	b.n	8006fd4 <_printf_i+0x1cc>
 8006e84:	6808      	ldr	r0, [r1, #0]
 8006e86:	6819      	ldr	r1, [r3, #0]
 8006e88:	1d0a      	adds	r2, r1, #4
 8006e8a:	0605      	lsls	r5, r0, #24
 8006e8c:	d50b      	bpl.n	8006ea6 <_printf_i+0x9e>
 8006e8e:	680d      	ldr	r5, [r1, #0]
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	2d00      	cmp	r5, #0
 8006e94:	da03      	bge.n	8006e9e <_printf_i+0x96>
 8006e96:	232d      	movs	r3, #45	; 0x2d
 8006e98:	9a04      	ldr	r2, [sp, #16]
 8006e9a:	426d      	negs	r5, r5
 8006e9c:	7013      	strb	r3, [r2, #0]
 8006e9e:	4b61      	ldr	r3, [pc, #388]	; (8007024 <_printf_i+0x21c>)
 8006ea0:	270a      	movs	r7, #10
 8006ea2:	9303      	str	r3, [sp, #12]
 8006ea4:	e01b      	b.n	8006ede <_printf_i+0xd6>
 8006ea6:	680d      	ldr	r5, [r1, #0]
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	0641      	lsls	r1, r0, #25
 8006eac:	d5f1      	bpl.n	8006e92 <_printf_i+0x8a>
 8006eae:	b22d      	sxth	r5, r5
 8006eb0:	e7ef      	b.n	8006e92 <_printf_i+0x8a>
 8006eb2:	680d      	ldr	r5, [r1, #0]
 8006eb4:	6819      	ldr	r1, [r3, #0]
 8006eb6:	1d08      	adds	r0, r1, #4
 8006eb8:	6018      	str	r0, [r3, #0]
 8006eba:	062e      	lsls	r6, r5, #24
 8006ebc:	d501      	bpl.n	8006ec2 <_printf_i+0xba>
 8006ebe:	680d      	ldr	r5, [r1, #0]
 8006ec0:	e003      	b.n	8006eca <_printf_i+0xc2>
 8006ec2:	066d      	lsls	r5, r5, #25
 8006ec4:	d5fb      	bpl.n	8006ebe <_printf_i+0xb6>
 8006ec6:	680d      	ldr	r5, [r1, #0]
 8006ec8:	b2ad      	uxth	r5, r5
 8006eca:	4b56      	ldr	r3, [pc, #344]	; (8007024 <_printf_i+0x21c>)
 8006ecc:	2708      	movs	r7, #8
 8006ece:	9303      	str	r3, [sp, #12]
 8006ed0:	2a6f      	cmp	r2, #111	; 0x6f
 8006ed2:	d000      	beq.n	8006ed6 <_printf_i+0xce>
 8006ed4:	3702      	adds	r7, #2
 8006ed6:	0023      	movs	r3, r4
 8006ed8:	2200      	movs	r2, #0
 8006eda:	3343      	adds	r3, #67	; 0x43
 8006edc:	701a      	strb	r2, [r3, #0]
 8006ede:	6863      	ldr	r3, [r4, #4]
 8006ee0:	60a3      	str	r3, [r4, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	db03      	blt.n	8006eee <_printf_i+0xe6>
 8006ee6:	2204      	movs	r2, #4
 8006ee8:	6821      	ldr	r1, [r4, #0]
 8006eea:	4391      	bics	r1, r2
 8006eec:	6021      	str	r1, [r4, #0]
 8006eee:	2d00      	cmp	r5, #0
 8006ef0:	d102      	bne.n	8006ef8 <_printf_i+0xf0>
 8006ef2:	9e04      	ldr	r6, [sp, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00c      	beq.n	8006f12 <_printf_i+0x10a>
 8006ef8:	9e04      	ldr	r6, [sp, #16]
 8006efa:	0028      	movs	r0, r5
 8006efc:	0039      	movs	r1, r7
 8006efe:	f7f9 f997 	bl	8000230 <__aeabi_uidivmod>
 8006f02:	9b03      	ldr	r3, [sp, #12]
 8006f04:	3e01      	subs	r6, #1
 8006f06:	5c5b      	ldrb	r3, [r3, r1]
 8006f08:	7033      	strb	r3, [r6, #0]
 8006f0a:	002b      	movs	r3, r5
 8006f0c:	0005      	movs	r5, r0
 8006f0e:	429f      	cmp	r7, r3
 8006f10:	d9f3      	bls.n	8006efa <_printf_i+0xf2>
 8006f12:	2f08      	cmp	r7, #8
 8006f14:	d109      	bne.n	8006f2a <_printf_i+0x122>
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	07db      	lsls	r3, r3, #31
 8006f1a:	d506      	bpl.n	8006f2a <_printf_i+0x122>
 8006f1c:	6863      	ldr	r3, [r4, #4]
 8006f1e:	6922      	ldr	r2, [r4, #16]
 8006f20:	4293      	cmp	r3, r2
 8006f22:	dc02      	bgt.n	8006f2a <_printf_i+0x122>
 8006f24:	2330      	movs	r3, #48	; 0x30
 8006f26:	3e01      	subs	r6, #1
 8006f28:	7033      	strb	r3, [r6, #0]
 8006f2a:	9b04      	ldr	r3, [sp, #16]
 8006f2c:	1b9b      	subs	r3, r3, r6
 8006f2e:	6123      	str	r3, [r4, #16]
 8006f30:	9b07      	ldr	r3, [sp, #28]
 8006f32:	0021      	movs	r1, r4
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	9805      	ldr	r0, [sp, #20]
 8006f38:	9b06      	ldr	r3, [sp, #24]
 8006f3a:	aa09      	add	r2, sp, #36	; 0x24
 8006f3c:	f7ff fef4 	bl	8006d28 <_printf_common>
 8006f40:	1c43      	adds	r3, r0, #1
 8006f42:	d14c      	bne.n	8006fde <_printf_i+0x1d6>
 8006f44:	2001      	movs	r0, #1
 8006f46:	4240      	negs	r0, r0
 8006f48:	b00b      	add	sp, #44	; 0x2c
 8006f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f4c:	3145      	adds	r1, #69	; 0x45
 8006f4e:	700a      	strb	r2, [r1, #0]
 8006f50:	4a34      	ldr	r2, [pc, #208]	; (8007024 <_printf_i+0x21c>)
 8006f52:	9203      	str	r2, [sp, #12]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	6821      	ldr	r1, [r4, #0]
 8006f58:	ca20      	ldmia	r2!, {r5}
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	0608      	lsls	r0, r1, #24
 8006f5e:	d516      	bpl.n	8006f8e <_printf_i+0x186>
 8006f60:	07cb      	lsls	r3, r1, #31
 8006f62:	d502      	bpl.n	8006f6a <_printf_i+0x162>
 8006f64:	2320      	movs	r3, #32
 8006f66:	4319      	orrs	r1, r3
 8006f68:	6021      	str	r1, [r4, #0]
 8006f6a:	2710      	movs	r7, #16
 8006f6c:	2d00      	cmp	r5, #0
 8006f6e:	d1b2      	bne.n	8006ed6 <_printf_i+0xce>
 8006f70:	2320      	movs	r3, #32
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	439a      	bics	r2, r3
 8006f76:	6022      	str	r2, [r4, #0]
 8006f78:	e7ad      	b.n	8006ed6 <_printf_i+0xce>
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	6809      	ldr	r1, [r1, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	6022      	str	r2, [r4, #0]
 8006f82:	0022      	movs	r2, r4
 8006f84:	2178      	movs	r1, #120	; 0x78
 8006f86:	3245      	adds	r2, #69	; 0x45
 8006f88:	7011      	strb	r1, [r2, #0]
 8006f8a:	4a27      	ldr	r2, [pc, #156]	; (8007028 <_printf_i+0x220>)
 8006f8c:	e7e1      	b.n	8006f52 <_printf_i+0x14a>
 8006f8e:	0648      	lsls	r0, r1, #25
 8006f90:	d5e6      	bpl.n	8006f60 <_printf_i+0x158>
 8006f92:	b2ad      	uxth	r5, r5
 8006f94:	e7e4      	b.n	8006f60 <_printf_i+0x158>
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	680d      	ldr	r5, [r1, #0]
 8006f9a:	1d10      	adds	r0, r2, #4
 8006f9c:	6949      	ldr	r1, [r1, #20]
 8006f9e:	6018      	str	r0, [r3, #0]
 8006fa0:	6813      	ldr	r3, [r2, #0]
 8006fa2:	062e      	lsls	r6, r5, #24
 8006fa4:	d501      	bpl.n	8006faa <_printf_i+0x1a2>
 8006fa6:	6019      	str	r1, [r3, #0]
 8006fa8:	e002      	b.n	8006fb0 <_printf_i+0x1a8>
 8006faa:	066d      	lsls	r5, r5, #25
 8006fac:	d5fb      	bpl.n	8006fa6 <_printf_i+0x19e>
 8006fae:	8019      	strh	r1, [r3, #0]
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	9e04      	ldr	r6, [sp, #16]
 8006fb4:	6123      	str	r3, [r4, #16]
 8006fb6:	e7bb      	b.n	8006f30 <_printf_i+0x128>
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	1d11      	adds	r1, r2, #4
 8006fbc:	6019      	str	r1, [r3, #0]
 8006fbe:	6816      	ldr	r6, [r2, #0]
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	0030      	movs	r0, r6
 8006fc4:	6862      	ldr	r2, [r4, #4]
 8006fc6:	f000 f831 	bl	800702c <memchr>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d001      	beq.n	8006fd2 <_printf_i+0x1ca>
 8006fce:	1b80      	subs	r0, r0, r6
 8006fd0:	6060      	str	r0, [r4, #4]
 8006fd2:	6863      	ldr	r3, [r4, #4]
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9a04      	ldr	r2, [sp, #16]
 8006fda:	7013      	strb	r3, [r2, #0]
 8006fdc:	e7a8      	b.n	8006f30 <_printf_i+0x128>
 8006fde:	6923      	ldr	r3, [r4, #16]
 8006fe0:	0032      	movs	r2, r6
 8006fe2:	9906      	ldr	r1, [sp, #24]
 8006fe4:	9805      	ldr	r0, [sp, #20]
 8006fe6:	9d07      	ldr	r5, [sp, #28]
 8006fe8:	47a8      	blx	r5
 8006fea:	1c43      	adds	r3, r0, #1
 8006fec:	d0aa      	beq.n	8006f44 <_printf_i+0x13c>
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	079b      	lsls	r3, r3, #30
 8006ff2:	d415      	bmi.n	8007020 <_printf_i+0x218>
 8006ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff6:	68e0      	ldr	r0, [r4, #12]
 8006ff8:	4298      	cmp	r0, r3
 8006ffa:	daa5      	bge.n	8006f48 <_printf_i+0x140>
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	e7a3      	b.n	8006f48 <_printf_i+0x140>
 8007000:	0022      	movs	r2, r4
 8007002:	2301      	movs	r3, #1
 8007004:	9906      	ldr	r1, [sp, #24]
 8007006:	9805      	ldr	r0, [sp, #20]
 8007008:	9e07      	ldr	r6, [sp, #28]
 800700a:	3219      	adds	r2, #25
 800700c:	47b0      	blx	r6
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	d098      	beq.n	8006f44 <_printf_i+0x13c>
 8007012:	3501      	adds	r5, #1
 8007014:	68e3      	ldr	r3, [r4, #12]
 8007016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007018:	1a9b      	subs	r3, r3, r2
 800701a:	42ab      	cmp	r3, r5
 800701c:	dcf0      	bgt.n	8007000 <_printf_i+0x1f8>
 800701e:	e7e9      	b.n	8006ff4 <_printf_i+0x1ec>
 8007020:	2500      	movs	r5, #0
 8007022:	e7f7      	b.n	8007014 <_printf_i+0x20c>
 8007024:	080073f1 	.word	0x080073f1
 8007028:	08007402 	.word	0x08007402

0800702c <memchr>:
 800702c:	b2c9      	uxtb	r1, r1
 800702e:	1882      	adds	r2, r0, r2
 8007030:	4290      	cmp	r0, r2
 8007032:	d101      	bne.n	8007038 <memchr+0xc>
 8007034:	2000      	movs	r0, #0
 8007036:	4770      	bx	lr
 8007038:	7803      	ldrb	r3, [r0, #0]
 800703a:	428b      	cmp	r3, r1
 800703c:	d0fb      	beq.n	8007036 <memchr+0xa>
 800703e:	3001      	adds	r0, #1
 8007040:	e7f6      	b.n	8007030 <memchr+0x4>

08007042 <memcpy>:
 8007042:	2300      	movs	r3, #0
 8007044:	b510      	push	{r4, lr}
 8007046:	429a      	cmp	r2, r3
 8007048:	d100      	bne.n	800704c <memcpy+0xa>
 800704a:	bd10      	pop	{r4, pc}
 800704c:	5ccc      	ldrb	r4, [r1, r3]
 800704e:	54c4      	strb	r4, [r0, r3]
 8007050:	3301      	adds	r3, #1
 8007052:	e7f8      	b.n	8007046 <memcpy+0x4>

08007054 <memmove>:
 8007054:	b510      	push	{r4, lr}
 8007056:	4288      	cmp	r0, r1
 8007058:	d902      	bls.n	8007060 <memmove+0xc>
 800705a:	188b      	adds	r3, r1, r2
 800705c:	4298      	cmp	r0, r3
 800705e:	d303      	bcc.n	8007068 <memmove+0x14>
 8007060:	2300      	movs	r3, #0
 8007062:	e007      	b.n	8007074 <memmove+0x20>
 8007064:	5c8b      	ldrb	r3, [r1, r2]
 8007066:	5483      	strb	r3, [r0, r2]
 8007068:	3a01      	subs	r2, #1
 800706a:	d2fb      	bcs.n	8007064 <memmove+0x10>
 800706c:	bd10      	pop	{r4, pc}
 800706e:	5ccc      	ldrb	r4, [r1, r3]
 8007070:	54c4      	strb	r4, [r0, r3]
 8007072:	3301      	adds	r3, #1
 8007074:	429a      	cmp	r2, r3
 8007076:	d1fa      	bne.n	800706e <memmove+0x1a>
 8007078:	e7f8      	b.n	800706c <memmove+0x18>
	...

0800707c <_free_r>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	0005      	movs	r5, r0
 8007080:	2900      	cmp	r1, #0
 8007082:	d010      	beq.n	80070a6 <_free_r+0x2a>
 8007084:	1f0c      	subs	r4, r1, #4
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	da00      	bge.n	800708e <_free_r+0x12>
 800708c:	18e4      	adds	r4, r4, r3
 800708e:	0028      	movs	r0, r5
 8007090:	f000 f918 	bl	80072c4 <__malloc_lock>
 8007094:	4a1d      	ldr	r2, [pc, #116]	; (800710c <_free_r+0x90>)
 8007096:	6813      	ldr	r3, [r2, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d105      	bne.n	80070a8 <_free_r+0x2c>
 800709c:	6063      	str	r3, [r4, #4]
 800709e:	6014      	str	r4, [r2, #0]
 80070a0:	0028      	movs	r0, r5
 80070a2:	f000 f917 	bl	80072d4 <__malloc_unlock>
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	d908      	bls.n	80070be <_free_r+0x42>
 80070ac:	6821      	ldr	r1, [r4, #0]
 80070ae:	1860      	adds	r0, r4, r1
 80070b0:	4283      	cmp	r3, r0
 80070b2:	d1f3      	bne.n	800709c <_free_r+0x20>
 80070b4:	6818      	ldr	r0, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	1841      	adds	r1, r0, r1
 80070ba:	6021      	str	r1, [r4, #0]
 80070bc:	e7ee      	b.n	800709c <_free_r+0x20>
 80070be:	001a      	movs	r2, r3
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <_free_r+0x4e>
 80070c6:	42a3      	cmp	r3, r4
 80070c8:	d9f9      	bls.n	80070be <_free_r+0x42>
 80070ca:	6811      	ldr	r1, [r2, #0]
 80070cc:	1850      	adds	r0, r2, r1
 80070ce:	42a0      	cmp	r0, r4
 80070d0:	d10b      	bne.n	80070ea <_free_r+0x6e>
 80070d2:	6820      	ldr	r0, [r4, #0]
 80070d4:	1809      	adds	r1, r1, r0
 80070d6:	1850      	adds	r0, r2, r1
 80070d8:	6011      	str	r1, [r2, #0]
 80070da:	4283      	cmp	r3, r0
 80070dc:	d1e0      	bne.n	80070a0 <_free_r+0x24>
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	1841      	adds	r1, r0, r1
 80070e4:	6011      	str	r1, [r2, #0]
 80070e6:	6053      	str	r3, [r2, #4]
 80070e8:	e7da      	b.n	80070a0 <_free_r+0x24>
 80070ea:	42a0      	cmp	r0, r4
 80070ec:	d902      	bls.n	80070f4 <_free_r+0x78>
 80070ee:	230c      	movs	r3, #12
 80070f0:	602b      	str	r3, [r5, #0]
 80070f2:	e7d5      	b.n	80070a0 <_free_r+0x24>
 80070f4:	6821      	ldr	r1, [r4, #0]
 80070f6:	1860      	adds	r0, r4, r1
 80070f8:	4283      	cmp	r3, r0
 80070fa:	d103      	bne.n	8007104 <_free_r+0x88>
 80070fc:	6818      	ldr	r0, [r3, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	1841      	adds	r1, r0, r1
 8007102:	6021      	str	r1, [r4, #0]
 8007104:	6063      	str	r3, [r4, #4]
 8007106:	6054      	str	r4, [r2, #4]
 8007108:	e7ca      	b.n	80070a0 <_free_r+0x24>
 800710a:	46c0      	nop			; (mov r8, r8)
 800710c:	200027e8 	.word	0x200027e8

08007110 <sbrk_aligned>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	4e0f      	ldr	r6, [pc, #60]	; (8007150 <sbrk_aligned+0x40>)
 8007114:	000d      	movs	r5, r1
 8007116:	6831      	ldr	r1, [r6, #0]
 8007118:	0004      	movs	r4, r0
 800711a:	2900      	cmp	r1, #0
 800711c:	d102      	bne.n	8007124 <sbrk_aligned+0x14>
 800711e:	f000 f8bf 	bl	80072a0 <_sbrk_r>
 8007122:	6030      	str	r0, [r6, #0]
 8007124:	0029      	movs	r1, r5
 8007126:	0020      	movs	r0, r4
 8007128:	f000 f8ba 	bl	80072a0 <_sbrk_r>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d00a      	beq.n	8007146 <sbrk_aligned+0x36>
 8007130:	2303      	movs	r3, #3
 8007132:	1cc5      	adds	r5, r0, #3
 8007134:	439d      	bics	r5, r3
 8007136:	42a8      	cmp	r0, r5
 8007138:	d007      	beq.n	800714a <sbrk_aligned+0x3a>
 800713a:	1a29      	subs	r1, r5, r0
 800713c:	0020      	movs	r0, r4
 800713e:	f000 f8af 	bl	80072a0 <_sbrk_r>
 8007142:	1c43      	adds	r3, r0, #1
 8007144:	d101      	bne.n	800714a <sbrk_aligned+0x3a>
 8007146:	2501      	movs	r5, #1
 8007148:	426d      	negs	r5, r5
 800714a:	0028      	movs	r0, r5
 800714c:	bd70      	pop	{r4, r5, r6, pc}
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	200027ec 	.word	0x200027ec

08007154 <_malloc_r>:
 8007154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007156:	2203      	movs	r2, #3
 8007158:	1ccb      	adds	r3, r1, #3
 800715a:	4393      	bics	r3, r2
 800715c:	3308      	adds	r3, #8
 800715e:	0006      	movs	r6, r0
 8007160:	001f      	movs	r7, r3
 8007162:	2b0c      	cmp	r3, #12
 8007164:	d232      	bcs.n	80071cc <_malloc_r+0x78>
 8007166:	270c      	movs	r7, #12
 8007168:	42b9      	cmp	r1, r7
 800716a:	d831      	bhi.n	80071d0 <_malloc_r+0x7c>
 800716c:	0030      	movs	r0, r6
 800716e:	f000 f8a9 	bl	80072c4 <__malloc_lock>
 8007172:	4d32      	ldr	r5, [pc, #200]	; (800723c <_malloc_r+0xe8>)
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	001c      	movs	r4, r3
 8007178:	2c00      	cmp	r4, #0
 800717a:	d12e      	bne.n	80071da <_malloc_r+0x86>
 800717c:	0039      	movs	r1, r7
 800717e:	0030      	movs	r0, r6
 8007180:	f7ff ffc6 	bl	8007110 <sbrk_aligned>
 8007184:	0004      	movs	r4, r0
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	d11e      	bne.n	80071c8 <_malloc_r+0x74>
 800718a:	682c      	ldr	r4, [r5, #0]
 800718c:	0025      	movs	r5, r4
 800718e:	2d00      	cmp	r5, #0
 8007190:	d14a      	bne.n	8007228 <_malloc_r+0xd4>
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	0029      	movs	r1, r5
 8007196:	18e3      	adds	r3, r4, r3
 8007198:	0030      	movs	r0, r6
 800719a:	9301      	str	r3, [sp, #4]
 800719c:	f000 f880 	bl	80072a0 <_sbrk_r>
 80071a0:	9b01      	ldr	r3, [sp, #4]
 80071a2:	4283      	cmp	r3, r0
 80071a4:	d143      	bne.n	800722e <_malloc_r+0xda>
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	3703      	adds	r7, #3
 80071aa:	1aff      	subs	r7, r7, r3
 80071ac:	2303      	movs	r3, #3
 80071ae:	439f      	bics	r7, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	2f0c      	cmp	r7, #12
 80071b4:	d200      	bcs.n	80071b8 <_malloc_r+0x64>
 80071b6:	270c      	movs	r7, #12
 80071b8:	0039      	movs	r1, r7
 80071ba:	0030      	movs	r0, r6
 80071bc:	f7ff ffa8 	bl	8007110 <sbrk_aligned>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d034      	beq.n	800722e <_malloc_r+0xda>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	19df      	adds	r7, r3, r7
 80071c8:	6027      	str	r7, [r4, #0]
 80071ca:	e013      	b.n	80071f4 <_malloc_r+0xa0>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	dacb      	bge.n	8007168 <_malloc_r+0x14>
 80071d0:	230c      	movs	r3, #12
 80071d2:	2500      	movs	r5, #0
 80071d4:	6033      	str	r3, [r6, #0]
 80071d6:	0028      	movs	r0, r5
 80071d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071da:	6822      	ldr	r2, [r4, #0]
 80071dc:	1bd1      	subs	r1, r2, r7
 80071de:	d420      	bmi.n	8007222 <_malloc_r+0xce>
 80071e0:	290b      	cmp	r1, #11
 80071e2:	d917      	bls.n	8007214 <_malloc_r+0xc0>
 80071e4:	19e2      	adds	r2, r4, r7
 80071e6:	6027      	str	r7, [r4, #0]
 80071e8:	42a3      	cmp	r3, r4
 80071ea:	d111      	bne.n	8007210 <_malloc_r+0xbc>
 80071ec:	602a      	str	r2, [r5, #0]
 80071ee:	6863      	ldr	r3, [r4, #4]
 80071f0:	6011      	str	r1, [r2, #0]
 80071f2:	6053      	str	r3, [r2, #4]
 80071f4:	0030      	movs	r0, r6
 80071f6:	0025      	movs	r5, r4
 80071f8:	f000 f86c 	bl	80072d4 <__malloc_unlock>
 80071fc:	2207      	movs	r2, #7
 80071fe:	350b      	adds	r5, #11
 8007200:	1d23      	adds	r3, r4, #4
 8007202:	4395      	bics	r5, r2
 8007204:	1aea      	subs	r2, r5, r3
 8007206:	429d      	cmp	r5, r3
 8007208:	d0e5      	beq.n	80071d6 <_malloc_r+0x82>
 800720a:	1b5b      	subs	r3, r3, r5
 800720c:	50a3      	str	r3, [r4, r2]
 800720e:	e7e2      	b.n	80071d6 <_malloc_r+0x82>
 8007210:	605a      	str	r2, [r3, #4]
 8007212:	e7ec      	b.n	80071ee <_malloc_r+0x9a>
 8007214:	6862      	ldr	r2, [r4, #4]
 8007216:	42a3      	cmp	r3, r4
 8007218:	d101      	bne.n	800721e <_malloc_r+0xca>
 800721a:	602a      	str	r2, [r5, #0]
 800721c:	e7ea      	b.n	80071f4 <_malloc_r+0xa0>
 800721e:	605a      	str	r2, [r3, #4]
 8007220:	e7e8      	b.n	80071f4 <_malloc_r+0xa0>
 8007222:	0023      	movs	r3, r4
 8007224:	6864      	ldr	r4, [r4, #4]
 8007226:	e7a7      	b.n	8007178 <_malloc_r+0x24>
 8007228:	002c      	movs	r4, r5
 800722a:	686d      	ldr	r5, [r5, #4]
 800722c:	e7af      	b.n	800718e <_malloc_r+0x3a>
 800722e:	230c      	movs	r3, #12
 8007230:	0030      	movs	r0, r6
 8007232:	6033      	str	r3, [r6, #0]
 8007234:	f000 f84e 	bl	80072d4 <__malloc_unlock>
 8007238:	e7cd      	b.n	80071d6 <_malloc_r+0x82>
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	200027e8 	.word	0x200027e8

08007240 <_realloc_r>:
 8007240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007242:	0007      	movs	r7, r0
 8007244:	000e      	movs	r6, r1
 8007246:	0014      	movs	r4, r2
 8007248:	2900      	cmp	r1, #0
 800724a:	d105      	bne.n	8007258 <_realloc_r+0x18>
 800724c:	0011      	movs	r1, r2
 800724e:	f7ff ff81 	bl	8007154 <_malloc_r>
 8007252:	0005      	movs	r5, r0
 8007254:	0028      	movs	r0, r5
 8007256:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007258:	2a00      	cmp	r2, #0
 800725a:	d103      	bne.n	8007264 <_realloc_r+0x24>
 800725c:	f7ff ff0e 	bl	800707c <_free_r>
 8007260:	0025      	movs	r5, r4
 8007262:	e7f7      	b.n	8007254 <_realloc_r+0x14>
 8007264:	f000 f83e 	bl	80072e4 <_malloc_usable_size_r>
 8007268:	9001      	str	r0, [sp, #4]
 800726a:	4284      	cmp	r4, r0
 800726c:	d803      	bhi.n	8007276 <_realloc_r+0x36>
 800726e:	0035      	movs	r5, r6
 8007270:	0843      	lsrs	r3, r0, #1
 8007272:	42a3      	cmp	r3, r4
 8007274:	d3ee      	bcc.n	8007254 <_realloc_r+0x14>
 8007276:	0021      	movs	r1, r4
 8007278:	0038      	movs	r0, r7
 800727a:	f7ff ff6b 	bl	8007154 <_malloc_r>
 800727e:	1e05      	subs	r5, r0, #0
 8007280:	d0e8      	beq.n	8007254 <_realloc_r+0x14>
 8007282:	9b01      	ldr	r3, [sp, #4]
 8007284:	0022      	movs	r2, r4
 8007286:	429c      	cmp	r4, r3
 8007288:	d900      	bls.n	800728c <_realloc_r+0x4c>
 800728a:	001a      	movs	r2, r3
 800728c:	0031      	movs	r1, r6
 800728e:	0028      	movs	r0, r5
 8007290:	f7ff fed7 	bl	8007042 <memcpy>
 8007294:	0031      	movs	r1, r6
 8007296:	0038      	movs	r0, r7
 8007298:	f7ff fef0 	bl	800707c <_free_r>
 800729c:	e7da      	b.n	8007254 <_realloc_r+0x14>
	...

080072a0 <_sbrk_r>:
 80072a0:	2300      	movs	r3, #0
 80072a2:	b570      	push	{r4, r5, r6, lr}
 80072a4:	4d06      	ldr	r5, [pc, #24]	; (80072c0 <_sbrk_r+0x20>)
 80072a6:	0004      	movs	r4, r0
 80072a8:	0008      	movs	r0, r1
 80072aa:	602b      	str	r3, [r5, #0]
 80072ac:	f7fc fa3e 	bl	800372c <_sbrk>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	d103      	bne.n	80072bc <_sbrk_r+0x1c>
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d000      	beq.n	80072bc <_sbrk_r+0x1c>
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	bd70      	pop	{r4, r5, r6, pc}
 80072be:	46c0      	nop			; (mov r8, r8)
 80072c0:	200027f0 	.word	0x200027f0

080072c4 <__malloc_lock>:
 80072c4:	b510      	push	{r4, lr}
 80072c6:	4802      	ldr	r0, [pc, #8]	; (80072d0 <__malloc_lock+0xc>)
 80072c8:	f000 f814 	bl	80072f4 <__retarget_lock_acquire_recursive>
 80072cc:	bd10      	pop	{r4, pc}
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	200027f4 	.word	0x200027f4

080072d4 <__malloc_unlock>:
 80072d4:	b510      	push	{r4, lr}
 80072d6:	4802      	ldr	r0, [pc, #8]	; (80072e0 <__malloc_unlock+0xc>)
 80072d8:	f000 f80d 	bl	80072f6 <__retarget_lock_release_recursive>
 80072dc:	bd10      	pop	{r4, pc}
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	200027f4 	.word	0x200027f4

080072e4 <_malloc_usable_size_r>:
 80072e4:	1f0b      	subs	r3, r1, #4
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	1f18      	subs	r0, r3, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	da01      	bge.n	80072f2 <_malloc_usable_size_r+0xe>
 80072ee:	580b      	ldr	r3, [r1, r0]
 80072f0:	18c0      	adds	r0, r0, r3
 80072f2:	4770      	bx	lr

080072f4 <__retarget_lock_acquire_recursive>:
 80072f4:	4770      	bx	lr

080072f6 <__retarget_lock_release_recursive>:
 80072f6:	4770      	bx	lr

080072f8 <_init>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fe:	bc08      	pop	{r3}
 8007300:	469e      	mov	lr, r3
 8007302:	4770      	bx	lr

08007304 <_fini>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	46c0      	nop			; (mov r8, r8)
 8007308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730a:	bc08      	pop	{r3}
 800730c:	469e      	mov	lr, r3
 800730e:	4770      	bx	lr
