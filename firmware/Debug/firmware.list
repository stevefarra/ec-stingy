
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006d94  08006d94  00016d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dec  08006dec  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006dec  08006dec  00016dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006df4  08006df4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006df4  08006df4  00016df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006df8  08006df8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          000001d0  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001f4  200001f4  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b61  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002062  00000000  00000000  00031bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  00033c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd8  00000000  00000000  00034a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021026  00000000  00000000  00035850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000124fa  00000000  00000000  00056876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb32e  00000000  00000000  00068d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013409e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ea0  00000000  00000000  001340f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d7c 	.word	0x08006d7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08006d7c 	.word	0x08006d7c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b974 	b.w	8000b44 <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	4604      	mov	r4, r0
 800087c:	468e      	mov	lr, r1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d14d      	bne.n	800091e <__udivmoddi4+0xaa>
 8000882:	428a      	cmp	r2, r1
 8000884:	4694      	mov	ip, r2
 8000886:	d969      	bls.n	800095c <__udivmoddi4+0xe8>
 8000888:	fab2 f282 	clz	r2, r2
 800088c:	b152      	cbz	r2, 80008a4 <__udivmoddi4+0x30>
 800088e:	fa01 f302 	lsl.w	r3, r1, r2
 8000892:	f1c2 0120 	rsb	r1, r2, #32
 8000896:	fa20 f101 	lsr.w	r1, r0, r1
 800089a:	fa0c fc02 	lsl.w	ip, ip, r2
 800089e:	ea41 0e03 	orr.w	lr, r1, r3
 80008a2:	4094      	lsls	r4, r2
 80008a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a8:	0c21      	lsrs	r1, r4, #16
 80008aa:	fbbe f6f8 	udiv	r6, lr, r8
 80008ae:	fa1f f78c 	uxth.w	r7, ip
 80008b2:	fb08 e316 	mls	r3, r8, r6, lr
 80008b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ba:	fb06 f107 	mul.w	r1, r6, r7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x64>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ca:	f080 811f 	bcs.w	8000b0c <__udivmoddi4+0x298>
 80008ce:	4299      	cmp	r1, r3
 80008d0:	f240 811c 	bls.w	8000b0c <__udivmoddi4+0x298>
 80008d4:	3e02      	subs	r6, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1a5b      	subs	r3, r3, r1
 80008da:	b2a4      	uxth	r4, r4
 80008dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e0:	fb08 3310 	mls	r3, r8, r0, r3
 80008e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e8:	fb00 f707 	mul.w	r7, r0, r7
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x92>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008f8:	f080 810a 	bcs.w	8000b10 <__udivmoddi4+0x29c>
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	f240 8107 	bls.w	8000b10 <__udivmoddi4+0x29c>
 8000902:	4464      	add	r4, ip
 8000904:	3802      	subs	r0, #2
 8000906:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800090a:	1be4      	subs	r4, r4, r7
 800090c:	2600      	movs	r6, #0
 800090e:	b11d      	cbz	r5, 8000918 <__udivmoddi4+0xa4>
 8000910:	40d4      	lsrs	r4, r2
 8000912:	2300      	movs	r3, #0
 8000914:	e9c5 4300 	strd	r4, r3, [r5]
 8000918:	4631      	mov	r1, r6
 800091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091e:	428b      	cmp	r3, r1
 8000920:	d909      	bls.n	8000936 <__udivmoddi4+0xc2>
 8000922:	2d00      	cmp	r5, #0
 8000924:	f000 80ef 	beq.w	8000b06 <__udivmoddi4+0x292>
 8000928:	2600      	movs	r6, #0
 800092a:	e9c5 0100 	strd	r0, r1, [r5]
 800092e:	4630      	mov	r0, r6
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	fab3 f683 	clz	r6, r3
 800093a:	2e00      	cmp	r6, #0
 800093c:	d14a      	bne.n	80009d4 <__udivmoddi4+0x160>
 800093e:	428b      	cmp	r3, r1
 8000940:	d302      	bcc.n	8000948 <__udivmoddi4+0xd4>
 8000942:	4282      	cmp	r2, r0
 8000944:	f200 80f9 	bhi.w	8000b3a <__udivmoddi4+0x2c6>
 8000948:	1a84      	subs	r4, r0, r2
 800094a:	eb61 0303 	sbc.w	r3, r1, r3
 800094e:	2001      	movs	r0, #1
 8000950:	469e      	mov	lr, r3
 8000952:	2d00      	cmp	r5, #0
 8000954:	d0e0      	beq.n	8000918 <__udivmoddi4+0xa4>
 8000956:	e9c5 4e00 	strd	r4, lr, [r5]
 800095a:	e7dd      	b.n	8000918 <__udivmoddi4+0xa4>
 800095c:	b902      	cbnz	r2, 8000960 <__udivmoddi4+0xec>
 800095e:	deff      	udf	#255	; 0xff
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	2a00      	cmp	r2, #0
 8000966:	f040 8092 	bne.w	8000a8e <__udivmoddi4+0x21a>
 800096a:	eba1 010c 	sub.w	r1, r1, ip
 800096e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	2601      	movs	r6, #1
 8000978:	0c20      	lsrs	r0, r4, #16
 800097a:	fbb1 f3f7 	udiv	r3, r1, r7
 800097e:	fb07 1113 	mls	r1, r7, r3, r1
 8000982:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000986:	fb0e f003 	mul.w	r0, lr, r3
 800098a:	4288      	cmp	r0, r1
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0x12c>
 800098e:	eb1c 0101 	adds.w	r1, ip, r1
 8000992:	f103 38ff 	add.w	r8, r3, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0x12a>
 8000998:	4288      	cmp	r0, r1
 800099a:	f200 80cb 	bhi.w	8000b34 <__udivmoddi4+0x2c0>
 800099e:	4643      	mov	r3, r8
 80009a0:	1a09      	subs	r1, r1, r0
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009a8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009b0:	fb0e fe00 	mul.w	lr, lr, r0
 80009b4:	45a6      	cmp	lr, r4
 80009b6:	d908      	bls.n	80009ca <__udivmoddi4+0x156>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x154>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f200 80bb 	bhi.w	8000b3e <__udivmoddi4+0x2ca>
 80009c8:	4608      	mov	r0, r1
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009d2:	e79c      	b.n	800090e <__udivmoddi4+0x9a>
 80009d4:	f1c6 0720 	rsb	r7, r6, #32
 80009d8:	40b3      	lsls	r3, r6
 80009da:	fa22 fc07 	lsr.w	ip, r2, r7
 80009de:	ea4c 0c03 	orr.w	ip, ip, r3
 80009e2:	fa20 f407 	lsr.w	r4, r0, r7
 80009e6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ea:	431c      	orrs	r4, r3
 80009ec:	40f9      	lsrs	r1, r7
 80009ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009f2:	fa00 f306 	lsl.w	r3, r0, r6
 80009f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009fa:	0c20      	lsrs	r0, r4, #16
 80009fc:	fa1f fe8c 	uxth.w	lr, ip
 8000a00:	fb09 1118 	mls	r1, r9, r8, r1
 8000a04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a08:	fb08 f00e 	mul.w	r0, r8, lr
 8000a0c:	4288      	cmp	r0, r1
 8000a0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a12:	d90b      	bls.n	8000a2c <__udivmoddi4+0x1b8>
 8000a14:	eb1c 0101 	adds.w	r1, ip, r1
 8000a18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a1c:	f080 8088 	bcs.w	8000b30 <__udivmoddi4+0x2bc>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f240 8085 	bls.w	8000b30 <__udivmoddi4+0x2bc>
 8000a26:	f1a8 0802 	sub.w	r8, r8, #2
 8000a2a:	4461      	add	r1, ip
 8000a2c:	1a09      	subs	r1, r1, r0
 8000a2e:	b2a4      	uxth	r4, r4
 8000a30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a34:	fb09 1110 	mls	r1, r9, r0, r1
 8000a38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a40:	458e      	cmp	lr, r1
 8000a42:	d908      	bls.n	8000a56 <__udivmoddi4+0x1e2>
 8000a44:	eb1c 0101 	adds.w	r1, ip, r1
 8000a48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4c:	d26c      	bcs.n	8000b28 <__udivmoddi4+0x2b4>
 8000a4e:	458e      	cmp	lr, r1
 8000a50:	d96a      	bls.n	8000b28 <__udivmoddi4+0x2b4>
 8000a52:	3802      	subs	r0, #2
 8000a54:	4461      	add	r1, ip
 8000a56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a5e:	eba1 010e 	sub.w	r1, r1, lr
 8000a62:	42a1      	cmp	r1, r4
 8000a64:	46c8      	mov	r8, r9
 8000a66:	46a6      	mov	lr, r4
 8000a68:	d356      	bcc.n	8000b18 <__udivmoddi4+0x2a4>
 8000a6a:	d053      	beq.n	8000b14 <__udivmoddi4+0x2a0>
 8000a6c:	b15d      	cbz	r5, 8000a86 <__udivmoddi4+0x212>
 8000a6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a72:	eb61 010e 	sbc.w	r1, r1, lr
 8000a76:	fa01 f707 	lsl.w	r7, r1, r7
 8000a7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a7e:	40f1      	lsrs	r1, r6
 8000a80:	431f      	orrs	r7, r3
 8000a82:	e9c5 7100 	strd	r7, r1, [r5]
 8000a86:	2600      	movs	r6, #0
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	40d8      	lsrs	r0, r3
 8000a94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a98:	fa21 f303 	lsr.w	r3, r1, r3
 8000a9c:	4091      	lsls	r1, r2
 8000a9e:	4301      	orrs	r1, r0
 8000aa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aac:	fb07 3610 	mls	r6, r7, r0, r3
 8000ab0:	0c0b      	lsrs	r3, r1, #16
 8000ab2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ab6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aba:	429e      	cmp	r6, r3
 8000abc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x260>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aca:	d22f      	bcs.n	8000b2c <__udivmoddi4+0x2b8>
 8000acc:	429e      	cmp	r6, r3
 8000ace:	d92d      	bls.n	8000b2c <__udivmoddi4+0x2b8>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	1b9b      	subs	r3, r3, r6
 8000ad6:	b289      	uxth	r1, r1
 8000ad8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000adc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ae0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x28a>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000af4:	d216      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d914      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000afa:	3e02      	subs	r6, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	1ac9      	subs	r1, r1, r3
 8000b00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b04:	e738      	b.n	8000978 <__udivmoddi4+0x104>
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e705      	b.n	8000918 <__udivmoddi4+0xa4>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e3      	b.n	80008d8 <__udivmoddi4+0x64>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6f8      	b.n	8000906 <__udivmoddi4+0x92>
 8000b14:	454b      	cmp	r3, r9
 8000b16:	d2a9      	bcs.n	8000a6c <__udivmoddi4+0x1f8>
 8000b18:	ebb9 0802 	subs.w	r8, r9, r2
 8000b1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7a3      	b.n	8000a6c <__udivmoddi4+0x1f8>
 8000b24:	4646      	mov	r6, r8
 8000b26:	e7ea      	b.n	8000afe <__udivmoddi4+0x28a>
 8000b28:	4620      	mov	r0, r4
 8000b2a:	e794      	b.n	8000a56 <__udivmoddi4+0x1e2>
 8000b2c:	4640      	mov	r0, r8
 8000b2e:	e7d1      	b.n	8000ad4 <__udivmoddi4+0x260>
 8000b30:	46d0      	mov	r8, sl
 8000b32:	e77b      	b.n	8000a2c <__udivmoddi4+0x1b8>
 8000b34:	3b02      	subs	r3, #2
 8000b36:	4461      	add	r1, ip
 8000b38:	e732      	b.n	80009a0 <__udivmoddi4+0x12c>
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	e709      	b.n	8000952 <__udivmoddi4+0xde>
 8000b3e:	4464      	add	r4, ip
 8000b40:	3802      	subs	r0, #2
 8000b42:	e742      	b.n	80009ca <__udivmoddi4+0x156>

08000b44 <__aeabi_idiv0>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <npf_max>:

#ifdef _MSC_VER
  #include <intrin.h>
#endif

static int npf_max(int x, int y) { return (x > y) ? x : y; }
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4293      	cmp	r3, r2
 8000b58:	bfb8      	it	lt
 8000b5a:	4613      	movlt	r3, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <npf_parse_format_spec>:

int npf_parse_format_spec(char const *format, npf_format_spec_t *out_spec) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  char const *cur = format;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60fb      	str	r3, [r7, #12]

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
  out_spec->left_justified = 0;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	721a      	strb	r2, [r3, #8]
  out_spec->leading_zero_pad = 0;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	725a      	strb	r2, [r3, #9]
#endif
  out_spec->case_adjust = 'a'-'A'; // lowercase
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2220      	movs	r2, #32
 8000b86:	749a      	strb	r2, [r3, #18]
  out_spec->prepend = 0;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
  out_spec->alt_form = 0;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	2200      	movs	r2, #0
 8000b92:	705a      	strb	r2, [r3, #1]

  while (*++cur) { // cur points at the leading '%' character
 8000b94:	e04c      	b.n	8000c30 <npf_parse_format_spec+0xc8>
    switch (*cur) { // Optional flags
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	3b20      	subs	r3, #32
 8000b9c:	2b10      	cmp	r3, #16
 8000b9e:	d84f      	bhi.n	8000c40 <npf_parse_format_spec+0xd8>
 8000ba0:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <npf_parse_format_spec+0x40>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000c19 	.word	0x08000c19
 8000bac:	08000c41 	.word	0x08000c41
 8000bb0:	08000c41 	.word	0x08000c41
 8000bb4:	08000c29 	.word	0x08000c29
 8000bb8:	08000c41 	.word	0x08000c41
 8000bbc:	08000c41 	.word	0x08000c41
 8000bc0:	08000c41 	.word	0x08000c41
 8000bc4:	08000c41 	.word	0x08000c41
 8000bc8:	08000c41 	.word	0x08000c41
 8000bcc:	08000c41 	.word	0x08000c41
 8000bd0:	08000c41 	.word	0x08000c41
 8000bd4:	08000c11 	.word	0x08000c11
 8000bd8:	08000c41 	.word	0x08000c41
 8000bdc:	08000bed 	.word	0x08000bed
 8000be0:	08000c41 	.word	0x08000c41
 8000be4:	08000c41 	.word	0x08000c41
 8000be8:	08000bfb 	.word	0x08000bfb
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
      case '-': out_spec->left_justified = '-'; out_spec->leading_zero_pad = 0; continue;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	222d      	movs	r2, #45	; 0x2d
 8000bf0:	721a      	strb	r2, [r3, #8]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	725a      	strb	r2, [r3, #9]
 8000bf8:	e01a      	b.n	8000c30 <npf_parse_format_spec+0xc8>
      case '0': out_spec->leading_zero_pad = !out_spec->left_justified; continue;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	7a1b      	ldrb	r3, [r3, #8]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf0c      	ite	eq
 8000c02:	2301      	moveq	r3, #1
 8000c04:	2300      	movne	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	461a      	mov	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	725a      	strb	r2, [r3, #9]
 8000c0e:	e00f      	b.n	8000c30 <npf_parse_format_spec+0xc8>
#endif
      case '+': out_spec->prepend = '+'; continue;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	222b      	movs	r2, #43	; 0x2b
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	e00b      	b.n	8000c30 <npf_parse_format_spec+0xc8>
      case ' ': if (out_spec->prepend == 0) { out_spec->prepend = ' '; } continue;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d107      	bne.n	8000c30 <npf_parse_format_spec+0xc8>
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	2220      	movs	r2, #32
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e003      	b.n	8000c30 <npf_parse_format_spec+0xc8>
      case '#': out_spec->alt_form = '#'; continue;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2223      	movs	r2, #35	; 0x23
 8000c2c:	705a      	strb	r2, [r3, #1]
 8000c2e:	bf00      	nop
  while (*++cur) { // cur points at the leading '%' character
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3301      	adds	r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1ab      	bne.n	8000b96 <npf_parse_format_spec+0x2e>
 8000c3e:	e000      	b.n	8000c42 <npf_parse_format_spec+0xda>
      default: break;
    }
    break;
 8000c40:	bf00      	nop
  }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
  out_spec->field_width_opt = NPF_FMT_SPEC_OPT_NONE;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	2200      	movs	r2, #0
 8000c46:	709a      	strb	r2, [r3, #2]
  if (*cur == '*') {
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8000c4e:	d106      	bne.n	8000c5e <npf_parse_format_spec+0xf6>
    out_spec->field_width_opt = NPF_FMT_SPEC_OPT_STAR;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	2202      	movs	r2, #2
 8000c54:	709a      	strb	r2, [r3, #2]
    ++cur;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	e01d      	b.n	8000c9a <npf_parse_format_spec+0x132>
  } else {
    out_spec->field_width = 0;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
    while ((*cur >= '0') && (*cur <= '9')) {
 8000c64:	e011      	b.n	8000c8a <npf_parse_format_spec+0x122>
      out_spec->field_width_opt = NPF_FMT_SPEC_OPT_LITERAL;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	709a      	strb	r2, [r3, #2]
      out_spec->field_width = (out_spec->field_width * 10) + (*cur++ - '0');
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4619      	mov	r1, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	60fa      	str	r2, [r7, #12]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	18ca      	adds	r2, r1, r3
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	605a      	str	r2, [r3, #4]
    while ((*cur >= '0') && (*cur <= '9')) {
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c90:	d903      	bls.n	8000c9a <npf_parse_format_spec+0x132>
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b39      	cmp	r3, #57	; 0x39
 8000c98:	d9e5      	bls.n	8000c66 <npf_parse_format_spec+0xfe>
    }
  }
#endif

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
  out_spec->prec = 0;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	729a      	strb	r2, [r3, #10]
  if (*cur == '.') {
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b2e      	cmp	r3, #46	; 0x2e
 8000cac:	d133      	bne.n	8000d16 <npf_parse_format_spec+0x1ae>
    ++cur;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
    if (*cur == '*') {
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8000cba:	d106      	bne.n	8000cca <npf_parse_format_spec+0x162>
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_STAR;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	729a      	strb	r2, [r3, #10]
      ++cur;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	e025      	b.n	8000d16 <npf_parse_format_spec+0x1ae>
    } else {
      if (*cur == '-') {
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b2d      	cmp	r3, #45	; 0x2d
 8000cd0:	d106      	bne.n	8000ce0 <npf_parse_format_spec+0x178>
        ++cur;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
        out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	729a      	strb	r2, [r3, #10]
 8000cde:	e012      	b.n	8000d06 <npf_parse_format_spec+0x19e>
      } else {
        out_spec->prec_opt = NPF_FMT_SPEC_OPT_LITERAL;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	729a      	strb	r2, [r3, #10]
      }
      while ((*cur >= '0') && (*cur <= '9')) {
 8000ce6:	e00e      	b.n	8000d06 <npf_parse_format_spec+0x19e>
        out_spec->prec = (out_spec->prec * 10) + (*cur++ - '0');
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	60fa      	str	r2, [r7, #12]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	18ca      	adds	r2, r1, r3
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	60da      	str	r2, [r3, #12]
      while ((*cur >= '0') && (*cur <= '9')) {
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b2f      	cmp	r3, #47	; 0x2f
 8000d0c:	d903      	bls.n	8000d16 <npf_parse_format_spec+0x1ae>
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b39      	cmp	r3, #57	; 0x39
 8000d14:	d9e8      	bls.n	8000ce8 <npf_parse_format_spec+0x180>
      }
    }
  }
#endif

  int tmp_conv = -1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	60bb      	str	r3, [r7, #8]
  out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_NONE;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	741a      	strb	r2, [r3, #16]
  switch (*cur++) { // Length modifier
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	60fa      	str	r2, [r7, #12]
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b6c      	cmp	r3, #108	; 0x6c
 8000d2c:	d013      	beq.n	8000d56 <npf_parse_format_spec+0x1ee>
 8000d2e:	2b6c      	cmp	r3, #108	; 0x6c
 8000d30:	dc19      	bgt.n	8000d66 <npf_parse_format_spec+0x1fe>
 8000d32:	2b4c      	cmp	r3, #76	; 0x4c
 8000d34:	d013      	beq.n	8000d5e <npf_parse_format_spec+0x1f6>
 8000d36:	2b68      	cmp	r3, #104	; 0x68
 8000d38:	d115      	bne.n	8000d66 <npf_parse_format_spec+0x1fe>
    case 'h':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_SHORT;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	741a      	strb	r2, [r3, #16]
      if (*cur == 'h') {
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b68      	cmp	r3, #104	; 0x68
 8000d46:	d112      	bne.n	8000d6e <npf_parse_format_spec+0x206>
        out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_CHAR;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	741a      	strb	r2, [r3, #16]
        ++cur;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3301      	adds	r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
      }
      break;
 8000d54:	e00b      	b.n	8000d6e <npf_parse_format_spec+0x206>
    case 'l':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LONG;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	2204      	movs	r2, #4
 8000d5a:	741a      	strb	r2, [r3, #16]
      if (*cur == 'l') {
        out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_LONG_LONG;
        ++cur;
      }
#endif
      break;
 8000d5c:	e008      	b.n	8000d70 <npf_parse_format_spec+0x208>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    case 'L': out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LONG_DOUBLE; break;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	2202      	movs	r2, #2
 8000d62:	741a      	strb	r2, [r3, #16]
 8000d64:	e004      	b.n	8000d70 <npf_parse_format_spec+0x208>
#if NANOPRINTF_USE_LARGE_FORMAT_SPECIFIERS == 1
    case 'j': out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_INTMAX; break;
    case 'z': out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_SIZET; break;
    case 't': out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_PTRDIFFT; break;
#endif
    default: --cur; break;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	e000      	b.n	8000d70 <npf_parse_format_spec+0x208>
      break;
 8000d6e:	bf00      	nop
  }

  switch (*cur++) { // Conversion specifier
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	60fa      	str	r2, [r7, #12]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	3b25      	subs	r3, #37	; 0x25
 8000d7a:	2b53      	cmp	r3, #83	; 0x53
 8000d7c:	f200 8127 	bhi.w	8000fce <npf_parse_format_spec+0x466>
 8000d80:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <npf_parse_format_spec+0x220>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	08000ed9 	.word	0x08000ed9
 8000d8c:	08000fcf 	.word	0x08000fcf
 8000d90:	08000fcf 	.word	0x08000fcf
 8000d94:	08000fcf 	.word	0x08000fcf
 8000d98:	08000fcf 	.word	0x08000fcf
 8000d9c:	08000fcf 	.word	0x08000fcf
 8000da0:	08000fcf 	.word	0x08000fcf
 8000da4:	08000fcf 	.word	0x08000fcf
 8000da8:	08000fcf 	.word	0x08000fcf
 8000dac:	08000fcf 	.word	0x08000fcf
 8000db0:	08000fcf 	.word	0x08000fcf
 8000db4:	08000fcf 	.word	0x08000fcf
 8000db8:	08000fcf 	.word	0x08000fcf
 8000dbc:	08000fcf 	.word	0x08000fcf
 8000dc0:	08000fcf 	.word	0x08000fcf
 8000dc4:	08000fcf 	.word	0x08000fcf
 8000dc8:	08000fcf 	.word	0x08000fcf
 8000dcc:	08000fcf 	.word	0x08000fcf
 8000dd0:	08000fcf 	.word	0x08000fcf
 8000dd4:	08000fcf 	.word	0x08000fcf
 8000dd8:	08000fcf 	.word	0x08000fcf
 8000ddc:	08000fcf 	.word	0x08000fcf
 8000de0:	08000fcf 	.word	0x08000fcf
 8000de4:	08000fcf 	.word	0x08000fcf
 8000de8:	08000fcf 	.word	0x08000fcf
 8000dec:	08000fcf 	.word	0x08000fcf
 8000df0:	08000fcf 	.word	0x08000fcf
 8000df4:	08000fcf 	.word	0x08000fcf
 8000df8:	08000fa5 	.word	0x08000fa5
 8000dfc:	08000fcf 	.word	0x08000fcf
 8000e00:	08000fcf 	.word	0x08000fcf
 8000e04:	08000fcf 	.word	0x08000fcf
 8000e08:	08000f6d 	.word	0x08000f6d
 8000e0c:	08000f51 	.word	0x08000f51
 8000e10:	08000f89 	.word	0x08000f89
 8000e14:	08000fcf 	.word	0x08000fcf
 8000e18:	08000fcf 	.word	0x08000fcf
 8000e1c:	08000fcf 	.word	0x08000fcf
 8000e20:	08000fcf 	.word	0x08000fcf
 8000e24:	08000fcf 	.word	0x08000fcf
 8000e28:	08000fcf 	.word	0x08000fcf
 8000e2c:	08000fcf 	.word	0x08000fcf
 8000e30:	08000fcf 	.word	0x08000fcf
 8000e34:	08000fcf 	.word	0x08000fcf
 8000e38:	08000fcf 	.word	0x08000fcf
 8000e3c:	08000fcf 	.word	0x08000fcf
 8000e40:	08000fcf 	.word	0x08000fcf
 8000e44:	08000fcf 	.word	0x08000fcf
 8000e48:	08000fcf 	.word	0x08000fcf
 8000e4c:	08000fcf 	.word	0x08000fcf
 8000e50:	08000fcf 	.word	0x08000fcf
 8000e54:	08000f1f 	.word	0x08000f1f
 8000e58:	08000fcf 	.word	0x08000fcf
 8000e5c:	08000fcf 	.word	0x08000fcf
 8000e60:	08000fcf 	.word	0x08000fcf
 8000e64:	08000fcf 	.word	0x08000fcf
 8000e68:	08000fcf 	.word	0x08000fcf
 8000e6c:	08000fcf 	.word	0x08000fcf
 8000e70:	08000fcf 	.word	0x08000fcf
 8000e74:	08000fcf 	.word	0x08000fcf
 8000e78:	08000fab 	.word	0x08000fab
 8000e7c:	08000fcf 	.word	0x08000fcf
 8000e80:	08000ee7 	.word	0x08000ee7
 8000e84:	08000f03 	.word	0x08000f03
 8000e88:	08000f73 	.word	0x08000f73
 8000e8c:	08000f57 	.word	0x08000f57
 8000e90:	08000f8f 	.word	0x08000f8f
 8000e94:	08000fcf 	.word	0x08000fcf
 8000e98:	08000f03 	.word	0x08000f03
 8000e9c:	08000fcf 	.word	0x08000fcf
 8000ea0:	08000fcf 	.word	0x08000fcf
 8000ea4:	08000fcf 	.word	0x08000fcf
 8000ea8:	08000fcf 	.word	0x08000fcf
 8000eac:	08000fcf 	.word	0x08000fcf
 8000eb0:	08000f07 	.word	0x08000f07
 8000eb4:	08000fc1 	.word	0x08000fc1
 8000eb8:	08000fcf 	.word	0x08000fcf
 8000ebc:	08000fcf 	.word	0x08000fcf
 8000ec0:	08000ef5 	.word	0x08000ef5
 8000ec4:	08000fcf 	.word	0x08000fcf
 8000ec8:	08000f13 	.word	0x08000f13
 8000ecc:	08000fcf 	.word	0x08000fcf
 8000ed0:	08000fcf 	.word	0x08000fcf
 8000ed4:	08000f2d 	.word	0x08000f2d
    case '%': out_spec->conv_spec = NPF_FMT_SPEC_CONV_PERCENT;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2200      	movs	r2, #0
 8000edc:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8000ee4:	e07e      	b.n	8000fe4 <npf_parse_format_spec+0x47c>

    case 'c': out_spec->conv_spec = NPF_FMT_SPEC_CONV_CHAR;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8000ef2:	e077      	b.n	8000fe4 <npf_parse_format_spec+0x47c>

    case 's': out_spec->conv_spec = NPF_FMT_SPEC_CONV_STRING;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
      out_spec->leading_zero_pad = 0;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2200      	movs	r2, #0
 8000efe:	725a      	strb	r2, [r3, #9]
#endif
      break;
 8000f00:	e070      	b.n	8000fe4 <npf_parse_format_spec+0x47c>

    case 'i':
    case 'd': tmp_conv = NPF_FMT_SPEC_CONV_SIGNED_INT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	60bb      	str	r3, [r7, #8]
    case 'o': if (tmp_conv == -1) { tmp_conv = NPF_FMT_SPEC_CONV_OCTAL; }
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d101      	bne.n	8000f12 <npf_parse_format_spec+0x3aa>
 8000f0e:	2304      	movs	r3, #4
 8000f10:	60bb      	str	r3, [r7, #8]
    case 'u': if (tmp_conv == -1) { tmp_conv = NPF_FMT_SPEC_CONV_UNSIGNED_INT; }
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d101      	bne.n	8000f1e <npf_parse_format_spec+0x3b6>
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	60bb      	str	r3, [r7, #8]
    case 'X': if (tmp_conv == -1) { out_spec->case_adjust = 0; }
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d102      	bne.n	8000f2c <npf_parse_format_spec+0x3c4>
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	749a      	strb	r2, [r3, #18]
    case 'x': if (tmp_conv == -1) { tmp_conv = NPF_FMT_SPEC_CONV_HEX_INT; }
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f32:	d101      	bne.n	8000f38 <npf_parse_format_spec+0x3d0>
 8000f34:	2305      	movs	r3, #5
 8000f36:	60bb      	str	r3, [r7, #8]
      out_spec->conv_spec = (npf_format_spec_conversion_t)tmp_conv;
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	745a      	strb	r2, [r3, #17]
#if (NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1) && \
    (NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1)
      if (out_spec->prec_opt != NPF_FMT_SPEC_OPT_NONE) { out_spec->leading_zero_pad = 0; }
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	7a9b      	ldrb	r3, [r3, #10]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d044      	beq.n	8000fd2 <npf_parse_format_spec+0x46a>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	725a      	strb	r2, [r3, #9]
#endif
      break;
 8000f4e:	e040      	b.n	8000fd2 <npf_parse_format_spec+0x46a>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    case 'F': out_spec->case_adjust = 0;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	2200      	movs	r2, #0
 8000f54:	749a      	strb	r2, [r3, #18]
    case 'f':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_FLOAT_DEC;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	2208      	movs	r2, #8
 8000f5a:	745a      	strb	r2, [r3, #17]
      if (out_spec->prec_opt == NPF_FMT_SPEC_OPT_NONE) { out_spec->prec = 6; }
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	7a9b      	ldrb	r3, [r3, #10]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d138      	bne.n	8000fd6 <npf_parse_format_spec+0x46e>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2206      	movs	r2, #6
 8000f68:	60da      	str	r2, [r3, #12]
      break;
 8000f6a:	e034      	b.n	8000fd6 <npf_parse_format_spec+0x46e>

    case 'E': out_spec->case_adjust = 0;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	749a      	strb	r2, [r3, #18]
    case 'e':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_FLOAT_SCI;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	2209      	movs	r2, #9
 8000f76:	745a      	strb	r2, [r3, #17]
      if (out_spec->prec_opt == NPF_FMT_SPEC_OPT_NONE) { out_spec->prec = 6; }
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	7a9b      	ldrb	r3, [r3, #10]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d12c      	bne.n	8000fda <npf_parse_format_spec+0x472>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	2206      	movs	r2, #6
 8000f84:	60da      	str	r2, [r3, #12]
      break;
 8000f86:	e028      	b.n	8000fda <npf_parse_format_spec+0x472>

    case 'G': out_spec->case_adjust = 0;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	749a      	strb	r2, [r3, #18]
    case 'g':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_FLOAT_SHORTEST;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	220a      	movs	r2, #10
 8000f92:	745a      	strb	r2, [r3, #17]
      if (out_spec->prec_opt == NPF_FMT_SPEC_OPT_NONE) { out_spec->prec = 6; }
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	7a9b      	ldrb	r3, [r3, #10]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d120      	bne.n	8000fde <npf_parse_format_spec+0x476>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	2206      	movs	r2, #6
 8000fa0:	60da      	str	r2, [r3, #12]
      break;
 8000fa2:	e01c      	b.n	8000fde <npf_parse_format_spec+0x476>

    case 'A': out_spec->case_adjust = 0;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	749a      	strb	r2, [r3, #18]
    case 'a':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_FLOAT_HEX;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	220b      	movs	r2, #11
 8000fae:	745a      	strb	r2, [r3, #17]
      if (out_spec->prec_opt == NPF_FMT_SPEC_OPT_NONE) { out_spec->prec = 6; }
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	7a9b      	ldrb	r3, [r3, #10]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d114      	bne.n	8000fe2 <npf_parse_format_spec+0x47a>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	2206      	movs	r2, #6
 8000fbc:	60da      	str	r2, [r3, #12]
      break;
 8000fbe:	e010      	b.n	8000fe2 <npf_parse_format_spec+0x47a>
#endif
      break;
#endif

    case 'p':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_POINTER;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8000fcc:	e00a      	b.n	8000fe4 <npf_parse_format_spec+0x47c>
    case 'b':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_BINARY;
      break;
#endif

    default: return 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e00b      	b.n	8000fea <npf_parse_format_spec+0x482>
      break;
 8000fd2:	bf00      	nop
 8000fd4:	e006      	b.n	8000fe4 <npf_parse_format_spec+0x47c>
      break;
 8000fd6:	bf00      	nop
 8000fd8:	e004      	b.n	8000fe4 <npf_parse_format_spec+0x47c>
      break;
 8000fda:	bf00      	nop
 8000fdc:	e002      	b.n	8000fe4 <npf_parse_format_spec+0x47c>
      break;
 8000fde:	bf00      	nop
 8000fe0:	e000      	b.n	8000fe4 <npf_parse_format_spec+0x47c>
      break;
 8000fe2:	bf00      	nop
  }

  return (int)(cur - format);
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	1ad3      	subs	r3, r2, r3
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <npf_itoa_rev>:

int npf_itoa_rev(char *buf, npf_int_t i) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  int n = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
  int const sign = (i >= 0) ? 1 : -1;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db01      	blt.n	8001010 <npf_itoa_rev+0x18>
 800100c:	2301      	movs	r3, #1
 800100e:	e001      	b.n	8001014 <npf_itoa_rev+0x1c>
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	60bb      	str	r3, [r7, #8]
  do { *buf++ = (char)('0' + (sign * (i % 10))); i /= 10; ++n; } while (i);
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	b2d8      	uxtb	r0, r3
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <npf_itoa_rev+0x78>)
 800101e:	fb83 1302 	smull	r1, r3, r3, r2
 8001022:	1099      	asrs	r1, r3, #2
 8001024:	17d3      	asrs	r3, r2, #31
 8001026:	1ac9      	subs	r1, r1, r3
 8001028:	460b      	mov	r3, r1
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	1ad1      	subs	r1, r2, r3
 8001032:	b2cb      	uxtb	r3, r1
 8001034:	fb10 f303 	smulbb	r3, r0, r3
 8001038:	b2da      	uxtb	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	1c59      	adds	r1, r3, #1
 800103e:	6079      	str	r1, [r7, #4]
 8001040:	3230      	adds	r2, #48	; 0x30
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	4a09      	ldr	r2, [pc, #36]	; (8001070 <npf_itoa_rev+0x78>)
 800104a:	fb82 1203 	smull	r1, r2, r2, r3
 800104e:	1092      	asrs	r2, r2, #2
 8001050:	17db      	asrs	r3, r3, #31
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3301      	adds	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1d9      	bne.n	8001016 <npf_itoa_rev+0x1e>
  return n;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	66666667 	.word	0x66666667

08001074 <npf_utoa_rev>:

int npf_utoa_rev(char *buf, npf_uint_t i, unsigned base, unsigned case_adj) {
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	603b      	str	r3, [r7, #0]
  int n = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  do {
    unsigned const d = (unsigned)(i % base);
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	fbb3 f2f2 	udiv	r2, r3, r2
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	fb01 f202 	mul.w	r2, r1, r2
 8001094:	1a9b      	subs	r3, r3, r2
 8001096:	613b      	str	r3, [r7, #16]
    *buf++ = (char)((d < 10) ? ('0' + d) : ('A' + case_adj + (d - 10)));
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	2b09      	cmp	r3, #9
 800109c:	d804      	bhi.n	80010a8 <npf_utoa_rev+0x34>
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	3330      	adds	r3, #48	; 0x30
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	e007      	b.n	80010b8 <npf_utoa_rev+0x44>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4413      	add	r3, r2
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	3337      	adds	r3, #55	; 0x37
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	1c59      	adds	r1, r3, #1
 80010bc:	60f9      	str	r1, [r7, #12]
 80010be:	701a      	strb	r2, [r3, #0]
    i /= base;
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c8:	60bb      	str	r3, [r7, #8]
    ++n;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
  } while (i);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1d7      	bne.n	8001086 <npf_utoa_rev+0x12>
  return n;
 80010d6:	697b      	ldr	r3, [r7, #20]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <npf_fsplit_abs>:
  NPF_FRACTION_BIN_DIGITS = 64,
  NPF_MAX_FRACTION_DEC_DIGITS = 8
};

int npf_fsplit_abs(float f, uint64_t *out_int_part, uint64_t *out_frac_part,
                   int *out_frac_base10_neg_exp) {
 80010e4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80010e8:	b0b5      	sub	sp, #212	; 0xd4
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
 80010f0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 80010f4:	67f9      	str	r1, [r7, #124]	; 0x7c
 80010f6:	67ba      	str	r2, [r7, #120]	; 0x78
     http://0x80.pl/notesen/2015-12-29-float-to-string.html
     grisu2 (https://bit.ly/2JgMggX) and ryu (https://bit.ly/2RLXSg0)
     are fast + precise + round, but require large lookup tables. */

  uint32_t f_bits; { // union-cast is UB, let compiler optimize byte-copy loop.
    char const *src = (char const *)&f;
 80010f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80010fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    char *dst = (char *)&f_bits;
 8001100:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001104:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    for (unsigned i = 0; i < sizeof(f_bits); ++i) { dst[i] = src[i]; }
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800110e:	e010      	b.n	8001132 <npf_fsplit_abs+0x4e>
 8001110:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001118:	18d1      	adds	r1, r2, r3
 800111a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800111e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001122:	441a      	add	r2, r3
 8001124:	780b      	ldrb	r3, [r1, #0]
 8001126:	7013      	strb	r3, [r2, #0]
 8001128:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800112c:	3301      	adds	r3, #1
 800112e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001132:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001136:	2b03      	cmp	r3, #3
 8001138:	d9ea      	bls.n	8001110 <npf_fsplit_abs+0x2c>
  }

  int const exponent =
    ((int)((f_bits >> NPF_MANTISSA_BITS) & ((1u << NPF_EXPONENT_BITS) - 1u)) -
 800113a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800113e:	0ddb      	lsrs	r3, r3, #23
 8001140:	b2db      	uxtb	r3, r3
  int const exponent =
 8001142:	3b96      	subs	r3, #150	; 0x96
 8001144:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      NPF_EXPONENT_BIAS) - NPF_MANTISSA_BITS;

  if (exponent >= (64 - NPF_MANTISSA_BITS)) { return 0; } // value is out of range
 8001148:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800114c:	2b28      	cmp	r3, #40	; 0x28
 800114e:	dd01      	ble.n	8001154 <npf_fsplit_abs+0x70>
 8001150:	2300      	movs	r3, #0
 8001152:	e17c      	b.n	800144e <npf_fsplit_abs+0x36a>

  uint32_t const implicit_one = 1u << NPF_MANTISSA_BITS;
 8001154:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t const mantissa = f_bits & (implicit_one - 1);
 800115c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001160:	1e5a      	subs	r2, r3, #1
 8001162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001166:	4013      	ands	r3, r2
 8001168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  uint32_t const mantissa_norm = mantissa | implicit_one;
 800116c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001174:	4313      	orrs	r3, r2
 8001176:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  if (exponent > 0) {
 800117a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800117e:	2b00      	cmp	r3, #0
 8001180:	dd19      	ble.n	80011b6 <npf_fsplit_abs+0xd2>
    *out_int_part = (uint64_t)mantissa_norm << exponent;
 8001182:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001186:	2200      	movs	r2, #0
 8001188:	469a      	mov	sl, r3
 800118a:	4693      	mov	fp, r2
 800118c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001190:	f1a1 0320 	sub.w	r3, r1, #32
 8001194:	f1c1 0220 	rsb	r2, r1, #32
 8001198:	fa0b f501 	lsl.w	r5, fp, r1
 800119c:	fa0a f303 	lsl.w	r3, sl, r3
 80011a0:	431d      	orrs	r5, r3
 80011a2:	fa2a f202 	lsr.w	r2, sl, r2
 80011a6:	4315      	orrs	r5, r2
 80011a8:	fa0a f401 	lsl.w	r4, sl, r1
 80011ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80011b0:	e9c3 4500 	strd	r4, r5, [r3]
 80011b4:	e02c      	b.n	8001210 <npf_fsplit_abs+0x12c>
  } else if (exponent < 0) {
 80011b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	da1d      	bge.n	80011fa <npf_fsplit_abs+0x116>
    if (-exponent > NPF_MANTISSA_BITS) {
 80011be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011c2:	f113 0f17 	cmn.w	r3, #23
 80011c6:	da08      	bge.n	80011da <npf_fsplit_abs+0xf6>
      *out_int_part = 0;
 80011c8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	e9c1 2300 	strd	r2, r3, [r1]
 80011d8:	e01a      	b.n	8001210 <npf_fsplit_abs+0x12c>
    } else {
      *out_int_part = mantissa_norm >> -exponent;
 80011da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011de:	425a      	negs	r2, r3
 80011e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80011e4:	40d3      	lsrs	r3, r2
 80011e6:	2200      	movs	r2, #0
 80011e8:	653b      	str	r3, [r7, #80]	; 0x50
 80011ea:	657a      	str	r2, [r7, #84]	; 0x54
 80011ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80011f0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80011f4:	e9c3 1200 	strd	r1, r2, [r3]
 80011f8:	e00a      	b.n	8001210 <npf_fsplit_abs+0x12c>
    }
  } else {
    *out_int_part = mantissa_norm;
 80011fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80011fe:	2200      	movs	r2, #0
 8001200:	64bb      	str	r3, [r7, #72]	; 0x48
 8001202:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001204:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001208:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800120c:	e9c3 1200 	strd	r1, r2, [r3]
  }

  uint64_t frac; {
    int const shift = NPF_FRACTION_BIN_DIGITS + exponent - 4;
 8001210:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001214:	333c      	adds	r3, #60	; 0x3c
 8001216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if ((shift >= (NPF_FRACTION_BIN_DIGITS - 4)) || (shift < 0)) {
 800121a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800121e:	2b3b      	cmp	r3, #59	; 0x3b
 8001220:	dc03      	bgt.n	800122a <npf_fsplit_abs+0x146>
 8001222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001226:	2b00      	cmp	r3, #0
 8001228:	da06      	bge.n	8001238 <npf_fsplit_abs+0x154>
      frac = 0;
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 8001236:	e022      	b.n	800127e <npf_fsplit_abs+0x19a>
    } else {
      frac = ((uint64_t)mantissa_norm) << shift;
 8001238:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800123c:	2200      	movs	r2, #0
 800123e:	643b      	str	r3, [r7, #64]	; 0x40
 8001240:	647a      	str	r2, [r7, #68]	; 0x44
 8001242:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001246:	f1a1 0320 	sub.w	r3, r1, #32
 800124a:	f1c1 0220 	rsb	r2, r1, #32
 800124e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001252:	4628      	mov	r0, r5
 8001254:	4088      	lsls	r0, r1
 8001256:	6778      	str	r0, [r7, #116]	; 0x74
 8001258:	4620      	mov	r0, r4
 800125a:	fa00 f303 	lsl.w	r3, r0, r3
 800125e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001260:	4318      	orrs	r0, r3
 8001262:	6778      	str	r0, [r7, #116]	; 0x74
 8001264:	4623      	mov	r3, r4
 8001266:	fa23 f202 	lsr.w	r2, r3, r2
 800126a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800126c:	4313      	orrs	r3, r2
 800126e:	677b      	str	r3, [r7, #116]	; 0x74
 8001270:	4623      	mov	r3, r4
 8001272:	408b      	lsls	r3, r1
 8001274:	673b      	str	r3, [r7, #112]	; 0x70
 8001276:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800127a:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
    }
    // multiply off the leading one's digit
    frac &= 0x0fffffffffffffffllu;
 800127e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001282:	63ba      	str	r2, [r7, #56]	; 0x38
 8001284:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800128a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800128e:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
    frac *= 10;
 8001292:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001296:	4622      	mov	r2, r4
 8001298:	462b      	mov	r3, r5
 800129a:	f04f 0000 	mov.w	r0, #0
 800129e:	f04f 0100 	mov.w	r1, #0
 80012a2:	0099      	lsls	r1, r3, #2
 80012a4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80012a8:	0090      	lsls	r0, r2, #2
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	eb12 0804 	adds.w	r8, r2, r4
 80012b2:	eb43 0905 	adc.w	r9, r3, r5
 80012b6:	eb18 0308 	adds.w	r3, r8, r8
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
 80012bc:	eb49 0309 	adc.w	r3, r9, r9
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
 80012c2:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 80012c6:	e9c7 8930 	strd	r8, r9, [r7, #192]	; 0xc0
  }

  { // Count the number of 0s at the beginning of the fractional part.
    int frac_base10_neg_exp = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    while (frac && ((frac >> (NPF_FRACTION_BIN_DIGITS - 4))) == 0) {
 80012d0:	e02f      	b.n	8001332 <npf_fsplit_abs+0x24e>
      ++frac_base10_neg_exp;
 80012d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012d6:	3301      	adds	r3, #1
 80012d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      frac &= 0x0fffffffffffffffllu;
 80012dc:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80012e0:	62ba      	str	r2, [r7, #40]	; 0x28
 80012e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80012ec:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
      frac *= 10;
 80012f0:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80012f4:	4622      	mov	r2, r4
 80012f6:	462b      	mov	r3, r5
 80012f8:	f04f 0000 	mov.w	r0, #0
 80012fc:	f04f 0100 	mov.w	r1, #0
 8001300:	0099      	lsls	r1, r3, #2
 8001302:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001306:	0090      	lsls	r0, r2, #2
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	1911      	adds	r1, r2, r4
 800130e:	66b9      	str	r1, [r7, #104]	; 0x68
 8001310:	416b      	adcs	r3, r5
 8001312:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001314:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8001318:	460b      	mov	r3, r1
 800131a:	18db      	adds	r3, r3, r3
 800131c:	623b      	str	r3, [r7, #32]
 800131e:	4613      	mov	r3, r2
 8001320:	eb42 0303 	adc.w	r3, r2, r3
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
 8001326:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800132a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 800132e:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
    while (frac && ((frac >> (NPF_FRACTION_BIN_DIGITS - 4))) == 0) {
 8001332:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001336:	4313      	orrs	r3, r2
 8001338:	d00a      	beq.n	8001350 <npf_fsplit_abs+0x26c>
 800133a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800133e:	f04f 0000 	mov.w	r0, #0
 8001342:	f04f 0100 	mov.w	r1, #0
 8001346:	0f18      	lsrs	r0, r3, #28
 8001348:	2100      	movs	r1, #0
 800134a:	ea50 0301 	orrs.w	r3, r0, r1
 800134e:	d0c0      	beq.n	80012d2 <npf_fsplit_abs+0x1ee>
    }
    *out_frac_base10_neg_exp = frac_base10_neg_exp;
 8001350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001352:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001356:	601a      	str	r2, [r3, #0]
  }

  { // Convert the fractional part to base 10.
    uint64_t frac_part = 0;
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    for (int i = 0; frac && (i < NPF_MAX_FRACTION_DEC_DIGITS); ++i) {
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800136a:	e062      	b.n	8001432 <npf_fsplit_abs+0x34e>
      frac_part *= 10;
 800136c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001370:	4622      	mov	r2, r4
 8001372:	462b      	mov	r3, r5
 8001374:	f04f 0000 	mov.w	r0, #0
 8001378:	f04f 0100 	mov.w	r1, #0
 800137c:	0099      	lsls	r1, r3, #2
 800137e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001382:	0090      	lsls	r0, r2, #2
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	1911      	adds	r1, r2, r4
 800138a:	6639      	str	r1, [r7, #96]	; 0x60
 800138c:	416b      	adcs	r3, r5
 800138e:	667b      	str	r3, [r7, #100]	; 0x64
 8001390:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8001394:	460b      	mov	r3, r1
 8001396:	18db      	adds	r3, r3, r3
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	4613      	mov	r3, r2
 800139c:	eb42 0303 	adc.w	r3, r2, r3
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80013a6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
 80013aa:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
      frac_part += (uint64_t)(frac >> (NPF_FRACTION_BIN_DIGITS - 4));
 80013ae:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80013b2:	f04f 0000 	mov.w	r0, #0
 80013b6:	f04f 0100 	mov.w	r1, #0
 80013ba:	0f18      	lsrs	r0, r3, #28
 80013bc:	2100      	movs	r1, #0
 80013be:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80013c2:	1814      	adds	r4, r2, r0
 80013c4:	613c      	str	r4, [r7, #16]
 80013c6:	414b      	adcs	r3, r1
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80013ce:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
      frac &= 0x0fffffffffffffffllu;
 80013d2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80013d6:	60ba      	str	r2, [r7, #8]
 80013d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013e2:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
      frac *= 10;
 80013e6:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80013ea:	4622      	mov	r2, r4
 80013ec:	462b      	mov	r3, r5
 80013ee:	f04f 0000 	mov.w	r0, #0
 80013f2:	f04f 0100 	mov.w	r1, #0
 80013f6:	0099      	lsls	r1, r3, #2
 80013f8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80013fc:	0090      	lsls	r0, r2, #2
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	1911      	adds	r1, r2, r4
 8001404:	65b9      	str	r1, [r7, #88]	; 0x58
 8001406:	416b      	adcs	r3, r5
 8001408:	65fb      	str	r3, [r7, #92]	; 0x5c
 800140a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800140e:	460b      	mov	r3, r1
 8001410:	18db      	adds	r3, r3, r3
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	4613      	mov	r3, r2
 8001416:	eb42 0303 	adc.w	r3, r2, r3
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001420:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8001424:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
    for (int i = 0; frac && (i < NPF_MAX_FRACTION_DEC_DIGITS); ++i) {
 8001428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800142c:	3301      	adds	r3, #1
 800142e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001432:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001436:	4313      	orrs	r3, r2
 8001438:	d003      	beq.n	8001442 <npf_fsplit_abs+0x35e>
 800143a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800143e:	2b07      	cmp	r3, #7
 8001440:	dd94      	ble.n	800136c <npf_fsplit_abs+0x288>
    }
    *out_frac_part = frac_part;
 8001442:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001444:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001448:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	37d4      	adds	r7, #212	; 0xd4
 8001452:	46bd      	mov	sp, r7
 8001454:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001458:	4770      	bx	lr
	...

0800145c <npf_ftoa_rev>:

int npf_ftoa_rev(char *buf, float f, char case_adj, int *out_frac_chars) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b092      	sub	sp, #72	; 0x48
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	ed87 0a02 	vstr	s0, [r7, #8]
 8001468:	460b      	mov	r3, r1
 800146a:	603a      	str	r2, [r7, #0]
 800146c:	71fb      	strb	r3, [r7, #7]
  uint32_t f_bits; { // union-cast is UB, let compiler optimize byte-copy loop.
    char const *src = (char const *)&f;
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	633b      	str	r3, [r7, #48]	; 0x30
    char *dst = (char *)&f_bits;
 8001474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (unsigned i = 0; i < sizeof(f_bits); ++i) { dst[i] = src[i]; }
 800147a:	2300      	movs	r3, #0
 800147c:	647b      	str	r3, [r7, #68]	; 0x44
 800147e:	e00a      	b.n	8001496 <npf_ftoa_rev+0x3a>
 8001480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001484:	441a      	add	r2, r3
 8001486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800148a:	440b      	add	r3, r1
 800148c:	7812      	ldrb	r2, [r2, #0]
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001492:	3301      	adds	r3, #1
 8001494:	647b      	str	r3, [r7, #68]	; 0x44
 8001496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001498:	2b03      	cmp	r3, #3
 800149a:	d9f1      	bls.n	8001480 <npf_ftoa_rev+0x24>
  }

  if ((uint8_t)(f_bits >> 23) == 0xFF) {
 800149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149e:	0ddb      	lsrs	r3, r3, #23
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2bff      	cmp	r3, #255	; 0xff
 80014a4:	d130      	bne.n	8001508 <npf_ftoa_rev+0xac>
    if (f_bits & 0x7fffff) {
 80014a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d014      	beq.n	80014da <npf_ftoa_rev+0x7e>
      for (int i = 0; i < 3; ++i) { *buf++ = (char)("NAN"[i] + case_adj); }
 80014b0:	2300      	movs	r3, #0
 80014b2:	643b      	str	r3, [r7, #64]	; 0x40
 80014b4:	e00d      	b.n	80014d2 <npf_ftoa_rev+0x76>
 80014b6:	4a56      	ldr	r2, [pc, #344]	; (8001610 <npf_ftoa_rev+0x1b4>)
 80014b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014ba:	4413      	add	r3, r2
 80014bc:	7819      	ldrb	r1, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	60fa      	str	r2, [r7, #12]
 80014c4:	79fa      	ldrb	r2, [r7, #7]
 80014c6:	440a      	add	r2, r1
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014ce:	3301      	adds	r3, #1
 80014d0:	643b      	str	r3, [r7, #64]	; 0x40
 80014d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	ddee      	ble.n	80014b6 <npf_ftoa_rev+0x5a>
 80014d8:	e013      	b.n	8001502 <npf_ftoa_rev+0xa6>
    } else {
      for (int i = 0; i < 3; ++i) { *buf++ = (char)("FNI"[i] + case_adj); }
 80014da:	2300      	movs	r3, #0
 80014dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014de:	e00d      	b.n	80014fc <npf_ftoa_rev+0xa0>
 80014e0:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <npf_ftoa_rev+0x1b8>)
 80014e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014e4:	4413      	add	r3, r2
 80014e6:	7819      	ldrb	r1, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	60fa      	str	r2, [r7, #12]
 80014ee:	79fa      	ldrb	r2, [r7, #7]
 80014f0:	440a      	add	r2, r1
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014f8:	3301      	adds	r3, #1
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014fe:	2b02      	cmp	r3, #2
 8001500:	ddee      	ble.n	80014e0 <npf_ftoa_rev+0x84>
    }
    return -3;
 8001502:	f06f 0302 	mvn.w	r3, #2
 8001506:	e07f      	b.n	8001608 <npf_ftoa_rev+0x1ac>
  }

  uint64_t int_part, frac_part;
  int frac_base10_neg_exp;
  if (npf_fsplit_abs(f, &int_part, &frac_part, &frac_base10_neg_exp) == 0) {
 8001508:	edd7 7a02 	vldr	s15, [r7, #8]
 800150c:	f107 0214 	add.w	r2, r7, #20
 8001510:	f107 0118 	add.w	r1, r7, #24
 8001514:	f107 0320 	add.w	r3, r7, #32
 8001518:	4618      	mov	r0, r3
 800151a:	eeb0 0a67 	vmov.f32	s0, s15
 800151e:	f7ff fde1 	bl	80010e4 <npf_fsplit_abs>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d116      	bne.n	8001556 <npf_ftoa_rev+0xfa>
    for (int i = 0; i < 3; ++i) { *buf++ = (char)("ROO"[i] + case_adj); }
 8001528:	2300      	movs	r3, #0
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
 800152c:	e00d      	b.n	800154a <npf_ftoa_rev+0xee>
 800152e:	4a3a      	ldr	r2, [pc, #232]	; (8001618 <npf_ftoa_rev+0x1bc>)
 8001530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001532:	4413      	add	r3, r2
 8001534:	7819      	ldrb	r1, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	60fa      	str	r2, [r7, #12]
 800153c:	79fa      	ldrb	r2, [r7, #7]
 800153e:	440a      	add	r2, r1
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001546:	3301      	adds	r3, #1
 8001548:	63bb      	str	r3, [r7, #56]	; 0x38
 800154a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154c:	2b02      	cmp	r3, #2
 800154e:	ddee      	ble.n	800152e <npf_ftoa_rev+0xd2>
    return -3;
 8001550:	f06f 0302 	mvn.w	r3, #2
 8001554:	e058      	b.n	8001608 <npf_ftoa_rev+0x1ac>
  }

  char *dst = buf;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	637b      	str	r3, [r7, #52]	; 0x34

  while (frac_part) { // write the fractional digits
 800155a:	e01a      	b.n	8001592 <npf_ftoa_rev+0x136>
    *dst++ = (char)('0' + (frac_part % 10));
 800155c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001560:	f04f 020a 	mov.w	r2, #10
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	f7ff f96c 	bl	8000844 <__aeabi_uldivmod>
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001570:	1c59      	adds	r1, r3, #1
 8001572:	6379      	str	r1, [r7, #52]	; 0x34
 8001574:	3230      	adds	r2, #48	; 0x30
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]
    frac_part /= 10;
 800157a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800157e:	f04f 020a 	mov.w	r2, #10
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	f7ff f95d 	bl	8000844 <__aeabi_uldivmod>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  while (frac_part) { // write the fractional digits
 8001592:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	d1e0      	bne.n	800155c <npf_ftoa_rev+0x100>
  }

  // write the 0 digits between the . and the first fractional digit
  while (frac_base10_neg_exp-- > 0) { *dst++ = '0'; }
 800159a:	e004      	b.n	80015a6 <npf_ftoa_rev+0x14a>
 800159c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	637a      	str	r2, [r7, #52]	; 0x34
 80015a2:	2230      	movs	r2, #48	; 0x30
 80015a4:	701a      	strb	r2, [r3, #0]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	1e5a      	subs	r2, r3, #1
 80015aa:	617a      	str	r2, [r7, #20]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	dcf5      	bgt.n	800159c <npf_ftoa_rev+0x140>
  *out_frac_chars = (int)(dst - buf);
 80015b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad2      	subs	r2, r2, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	601a      	str	r2, [r3, #0]
  *dst++ = '.';
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	637a      	str	r2, [r7, #52]	; 0x34
 80015c0:	222e      	movs	r2, #46	; 0x2e
 80015c2:	701a      	strb	r2, [r3, #0]

  // write the integer digits
  do { *dst++ = (char)('0' + (int_part % 10)); int_part /= 10; } while (int_part);
 80015c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015c8:	f04f 020a 	mov.w	r2, #10
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	f7ff f938 	bl	8000844 <__aeabi_uldivmod>
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d8:	1c59      	adds	r1, r3, #1
 80015da:	6379      	str	r1, [r7, #52]	; 0x34
 80015dc:	3230      	adds	r2, #48	; 0x30
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015e6:	f04f 020a 	mov.w	r2, #10
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	f7ff f929 	bl	8000844 <__aeabi_uldivmod>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80015fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015fe:	4313      	orrs	r3, r2
 8001600:	d1e0      	bne.n	80015c4 <npf_ftoa_rev+0x168>
  return (int)(dst - buf);
 8001602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1ad3      	subs	r3, r2, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	3748      	adds	r7, #72	; 0x48
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	08006d94 	.word	0x08006d94
 8001614:	08006d98 	.word	0x08006d98
 8001618:	08006d9c 	.word	0x08006d9c

0800161c <npf_bufputc>:
  #undef NPF_CLZ
#endif
}
#endif

void npf_bufputc(int c, void *ctx) {
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  npf_bufputc_ctx_t *bpc = (npf_bufputc_ctx_t *)ctx;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	60fb      	str	r3, [r7, #12]
  if (bpc->cur < bpc->len) { bpc->dst[bpc->cur++] = (char)c; }
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	429a      	cmp	r2, r3
 8001634:	d20a      	bcs.n	800164c <npf_bufputc+0x30>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	1c58      	adds	r0, r3, #1
 8001640:	68f9      	ldr	r1, [r7, #12]
 8001642:	6088      	str	r0, [r1, #8]
 8001644:	4413      	add	r3, r2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	701a      	strb	r2, [r3, #0]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <npf_bufputc_nop>:

void npf_bufputc_nop(int c, void *ctx) { (void)c; (void)ctx; }
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <npf_putc_cnt>:
  npf_putc pc;
  void *ctx;
  int n;
} npf_cnt_putc_ctx_t;

static void npf_putc_cnt(int c, void *ctx) {
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
  npf_cnt_putc_ctx_t *pc_cnt = (npf_cnt_putc_ctx_t *)ctx;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	60fb      	str	r3, [r7, #12]
  ++pc_cnt->n;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	609a      	str	r2, [r3, #8]
  pc_cnt->pc(c, pc_cnt->ctx); // sibling-call optimization
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	6852      	ldr	r2, [r2, #4]
 800168e:	4611      	mov	r1, r2
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	4798      	blx	r3
}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <npf_vpprintf>:
  case NPF_FMT_SPEC_LEN_MOD_##MOD: val = (CAST_TO)va_arg(args, EXTRACT_AS); break

#define NPF_WRITEBACK(MOD, TYPE) \
  case NPF_FMT_SPEC_LEN_MOD_##MOD: *(va_arg(args, TYPE *)) = (TYPE)pc_cnt.n; break

int npf_vpprintf(npf_putc pc, void *pc_ctx, char const *format, va_list args) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b0a8      	sub	sp, #160	; 0xa0
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	603b      	str	r3, [r7, #0]
  npf_format_spec_t fs;
  char const *cur = format;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  npf_cnt_putc_ctx_t pc_cnt;
  pc_cnt.pc = pc;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
  pc_cnt.ctx = pc_ctx;
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	63bb      	str	r3, [r7, #56]	; 0x38
  pc_cnt.n = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	63fb      	str	r3, [r7, #60]	; 0x3c

  while (*cur) {
 80016bc:	e3a0      	b.n	8001e00 <npf_vpprintf+0x764>
    int const fs_len = (*cur != '%') ? 0 : npf_parse_format_spec(cur, &fs);
 80016be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b25      	cmp	r3, #37	; 0x25
 80016c6:	d108      	bne.n	80016da <npf_vpprintf+0x3e>
 80016c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016cc:	4619      	mov	r1, r3
 80016ce:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80016d2:	f7ff fa49 	bl	8000b68 <npf_parse_format_spec>
 80016d6:	4603      	mov	r3, r0
 80016d8:	e000      	b.n	80016dc <npf_vpprintf+0x40>
 80016da:	2300      	movs	r3, #0
 80016dc:	663b      	str	r3, [r7, #96]	; 0x60
    if (!fs_len) { NPF_PUTC(*cur++); continue; }
 80016de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10d      	bne.n	8001700 <npf_vpprintf+0x64>
 80016e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016f6:	4619      	mov	r1, r3
 80016f8:	4610      	mov	r0, r2
 80016fa:	f7ff ffb8 	bl	800166e <npf_putc_cnt>
 80016fe:	e37f      	b.n	8001e00 <npf_vpprintf+0x764>
    cur += fs_len;
 8001700:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001702:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001706:	4413      	add	r3, r2
 8001708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    // Extract star-args immediately
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    if (fs.field_width_opt == NPF_FMT_SPEC_OPT_STAR) {
 800170c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001710:	2b02      	cmp	r3, #2
 8001712:	d110      	bne.n	8001736 <npf_vpprintf+0x9a>
      fs.field_width_opt = NPF_FMT_SPEC_OPT_LITERAL;
 8001714:	2301      	movs	r3, #1
 8001716:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      fs.field_width = va_arg(args, int);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	1d1a      	adds	r2, r3, #4
 800171e:	603a      	str	r2, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	647b      	str	r3, [r7, #68]	; 0x44
      if (fs.field_width < 0) {
 8001724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001726:	2b00      	cmp	r3, #0
 8001728:	da05      	bge.n	8001736 <npf_vpprintf+0x9a>
        fs.field_width = -fs.field_width;
 800172a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800172c:	425b      	negs	r3, r3
 800172e:	647b      	str	r3, [r7, #68]	; 0x44
        fs.left_justified = 1;
 8001730:	2301      	movs	r3, #1
 8001732:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
      }
    }
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    if (fs.prec_opt == NPF_FMT_SPEC_OPT_STAR) {
 8001736:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800173a:	2b02      	cmp	r3, #2
 800173c:	d10d      	bne.n	800175a <npf_vpprintf+0xbe>
      fs.prec_opt = NPF_FMT_SPEC_OPT_NONE;
 800173e:	2300      	movs	r3, #0
 8001740:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      fs.prec = va_arg(args, int);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	1d1a      	adds	r2, r3, #4
 8001748:	603a      	str	r2, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (fs.prec >= 0) { fs.prec_opt = NPF_FMT_SPEC_OPT_LITERAL; }
 800174e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001750:	2b00      	cmp	r3, #0
 8001752:	db02      	blt.n	800175a <npf_vpprintf+0xbe>
 8001754:	2301      	movs	r3, #1
 8001756:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    }
#endif

    union { char cbuf_mem[32]; npf_uint_t binval; } u;
    char *cbuf = u.cbuf_mem, sign_c = 0;
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001762:	2300      	movs	r3, #0
 8001764:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    int cbuf_len = 0, need_0x = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    int field_pad = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    char pad_c = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    int prec_pad = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    int zero = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
#endif
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    int frac_chars = 0, inf_or_nan = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
 800178e:	2300      	movs	r3, #0
 8001790:	67bb      	str	r3, [r7, #120]	; 0x78
#endif

    // Extract and convert the argument to string, point cbuf at the text.
    switch (fs.conv_spec) {
 8001792:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001796:	2b0b      	cmp	r3, #11
 8001798:	f200 81c3 	bhi.w	8001b22 <npf_vpprintf+0x486>
 800179c:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <npf_vpprintf+0x108>)
 800179e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a2:	bf00      	nop
 80017a4:	080017d5 	.word	0x080017d5
 80017a8:	080017e5 	.word	0x080017e5
 80017ac:	080017fd 	.word	0x080017fd
 80017b0:	0800183f 	.word	0x0800183f
 80017b4:	080018f3 	.word	0x080018f3
 80017b8:	080018f3 	.word	0x080018f3
 80017bc:	080018f3 	.word	0x080018f3
 80017c0:	08001a2f 	.word	0x08001a2f
 80017c4:	08001a51 	.word	0x08001a51
 80017c8:	08001a51 	.word	0x08001a51
 80017cc:	08001a51 	.word	0x08001a51
 80017d0:	08001a51 	.word	0x08001a51
      case NPF_FMT_SPEC_CONV_PERCENT:
        *cbuf = '%';
 80017d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017d8:	2225      	movs	r2, #37	; 0x25
 80017da:	701a      	strb	r2, [r3, #0]
        cbuf_len = 1;
 80017dc:	2301      	movs	r3, #1
 80017de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 80017e2:	e1a3      	b.n	8001b2c <npf_vpprintf+0x490>

      case NPF_FMT_SPEC_CONV_CHAR:
        *cbuf = (char)va_arg(args, int);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	1d1a      	adds	r2, r3, #4
 80017e8:	603a      	str	r2, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017f2:	701a      	strb	r2, [r3, #0]
        cbuf_len = 1;
 80017f4:	2301      	movs	r3, #1
 80017f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 80017fa:	e197      	b.n	8001b2c <npf_vpprintf+0x490>

      case NPF_FMT_SPEC_CONV_STRING: {
        cbuf = va_arg(args, char *);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	1d1a      	adds	r2, r3, #4
 8001800:	603a      	str	r2, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
        for (char const *s = cbuf;
 8001808:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800180c:	677b      	str	r3, [r7, #116]	; 0x74
 800180e:	e007      	b.n	8001820 <npf_vpprintf+0x184>
             *s && ((fs.prec_opt == NPF_FMT_SPEC_OPT_NONE) || (cbuf_len < fs.prec));
             ++s, ++cbuf_len);
 8001810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001812:	3301      	adds	r3, #1
 8001814:	677b      	str	r3, [r7, #116]	; 0x74
 8001816:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800181a:	3301      	adds	r3, #1
 800181c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
             *s && ((fs.prec_opt == NPF_FMT_SPEC_OPT_NONE) || (cbuf_len < fs.prec));
 8001820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001822:	781b      	ldrb	r3, [r3, #0]
        for (char const *s = cbuf;
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 817e 	beq.w	8001b26 <npf_vpprintf+0x48a>
             *s && ((fs.prec_opt == NPF_FMT_SPEC_OPT_NONE) || (cbuf_len < fs.prec));
 800182a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0ee      	beq.n	8001810 <npf_vpprintf+0x174>
 8001832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001834:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001838:	429a      	cmp	r2, r3
 800183a:	dbe9      	blt.n	8001810 <npf_vpprintf+0x174>
#else
        for (char const *s = cbuf; *s; ++s, ++cbuf_len); // strlen
#endif
      } break;
 800183c:	e173      	b.n	8001b26 <npf_vpprintf+0x48a>

      case NPF_FMT_SPEC_CONV_SIGNED_INT: {
        npf_int_t val = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	673b      	str	r3, [r7, #112]	; 0x70
        switch (fs.length_modifier) {
 8001842:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001846:	2b04      	cmp	r3, #4
 8001848:	d82c      	bhi.n	80018a4 <npf_vpprintf+0x208>
 800184a:	a201      	add	r2, pc, #4	; (adr r2, 8001850 <npf_vpprintf+0x1b4>)
 800184c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001850:	08001865 	.word	0x08001865
 8001854:	08001871 	.word	0x08001871
 8001858:	0800187f 	.word	0x0800187f
 800185c:	0800188b 	.word	0x0800188b
 8001860:	08001899 	.word	0x08001899
          NPF_EXTRACT(NONE, int, int);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	1d1a      	adds	r2, r3, #4
 8001868:	603a      	str	r2, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	673b      	str	r3, [r7, #112]	; 0x70
 800186e:	e01a      	b.n	80018a6 <npf_vpprintf+0x20a>
          NPF_EXTRACT(SHORT, short, int);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	1d1a      	adds	r2, r3, #4
 8001874:	603a      	str	r2, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b21b      	sxth	r3, r3
 800187a:	673b      	str	r3, [r7, #112]	; 0x70
 800187c:	e013      	b.n	80018a6 <npf_vpprintf+0x20a>
          NPF_EXTRACT(LONG_DOUBLE, int, int);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	1d1a      	adds	r2, r3, #4
 8001882:	603a      	str	r2, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	673b      	str	r3, [r7, #112]	; 0x70
 8001888:	e00d      	b.n	80018a6 <npf_vpprintf+0x20a>
          NPF_EXTRACT(CHAR, char, int);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	1d1a      	adds	r2, r3, #4
 800188e:	603a      	str	r2, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	673b      	str	r3, [r7, #112]	; 0x70
 8001896:	e006      	b.n	80018a6 <npf_vpprintf+0x20a>
          NPF_EXTRACT(LONG, long, long);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	1d1a      	adds	r2, r3, #4
 800189c:	603a      	str	r2, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	673b      	str	r3, [r7, #112]	; 0x70
 80018a2:	e000      	b.n	80018a6 <npf_vpprintf+0x20a>
          NPF_EXTRACT(LARGE_LONG_LONG, long long, long long);
          NPF_EXTRACT(LARGE_INTMAX, intmax_t, intmax_t);
          NPF_EXTRACT(LARGE_SIZET, ssize_t, ssize_t);
          NPF_EXTRACT(LARGE_PTRDIFFT, ptrdiff_t, ptrdiff_t);
#endif
          default: break;
 80018a4:	bf00      	nop
        }

        sign_c = (val < 0) ? '-' : fs.prepend;
 80018a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db02      	blt.n	80018b2 <npf_vpprintf+0x216>
 80018ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018b0:	e000      	b.n	80018b4 <npf_vpprintf+0x218>
 80018b2:	232d      	movs	r3, #45	; 0x2d
 80018b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = !val;
 80018b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bf0c      	ite	eq
 80018be:	2301      	moveq	r3, #1
 80018c0:	2300      	movne	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        // special case, if prec and value are 0, skip
        if (!val && (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec) {
 80018c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <npf_vpprintf+0x246>
 80018cc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d106      	bne.n	80018e2 <npf_vpprintf+0x246>
 80018d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <npf_vpprintf+0x246>
          cbuf_len = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        } else
#endif
        { cbuf_len = npf_itoa_rev(cbuf, val); }
      } break;
 80018e0:	e124      	b.n	8001b2c <npf_vpprintf+0x490>
        { cbuf_len = npf_itoa_rev(cbuf, val); }
 80018e2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80018e4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80018e8:	f7ff fb86 	bl	8000ff8 <npf_itoa_rev>
 80018ec:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
      } break;
 80018f0:	e11c      	b.n	8001b2c <npf_vpprintf+0x490>
      case NPF_FMT_SPEC_CONV_BINARY:
#endif
      case NPF_FMT_SPEC_CONV_OCTAL:
      case NPF_FMT_SPEC_CONV_HEX_INT:
      case NPF_FMT_SPEC_CONV_UNSIGNED_INT: {
        npf_uint_t val = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	66fb      	str	r3, [r7, #108]	; 0x6c

        switch (fs.length_modifier) {
 80018f6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d82c      	bhi.n	8001958 <npf_vpprintf+0x2bc>
 80018fe:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <npf_vpprintf+0x268>)
 8001900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001904:	08001919 	.word	0x08001919
 8001908:	08001925 	.word	0x08001925
 800190c:	08001933 	.word	0x08001933
 8001910:	0800193f 	.word	0x0800193f
 8001914:	0800194d 	.word	0x0800194d
          NPF_EXTRACT(NONE, unsigned, unsigned);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	1d1a      	adds	r2, r3, #4
 800191c:	603a      	str	r2, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001922:	e01a      	b.n	800195a <npf_vpprintf+0x2be>
          NPF_EXTRACT(SHORT, unsigned short, unsigned);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	1d1a      	adds	r2, r3, #4
 8001928:	603a      	str	r2, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	b29b      	uxth	r3, r3
 800192e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001930:	e013      	b.n	800195a <npf_vpprintf+0x2be>
          NPF_EXTRACT(LONG_DOUBLE, unsigned, unsigned);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	1d1a      	adds	r2, r3, #4
 8001936:	603a      	str	r2, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800193c:	e00d      	b.n	800195a <npf_vpprintf+0x2be>
          NPF_EXTRACT(CHAR, unsigned char, unsigned);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	1d1a      	adds	r2, r3, #4
 8001942:	603a      	str	r2, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	66fb      	str	r3, [r7, #108]	; 0x6c
 800194a:	e006      	b.n	800195a <npf_vpprintf+0x2be>
          NPF_EXTRACT(LONG, unsigned long, unsigned long);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	1d1a      	adds	r2, r3, #4
 8001950:	603a      	str	r2, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001956:	e000      	b.n	800195a <npf_vpprintf+0x2be>
          NPF_EXTRACT(LARGE_LONG_LONG, unsigned long long, unsigned long long);
          NPF_EXTRACT(LARGE_INTMAX, uintmax_t, uintmax_t);
          NPF_EXTRACT(LARGE_SIZET, size_t, size_t);
          NPF_EXTRACT(LARGE_PTRDIFFT, size_t, size_t);
#endif
          default: break;
 8001958:	bf00      	nop
        }

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = !val;
 800195a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf0c      	ite	eq
 8001960:	2301      	moveq	r3, #1
 8001962:	2300      	movne	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        if (!val && (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec) {
 8001968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800196a:	2b00      	cmp	r3, #0
 800196c:	d111      	bne.n	8001992 <npf_vpprintf+0x2f6>
 800196e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10d      	bne.n	8001992 <npf_vpprintf+0x2f6>
 8001976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10a      	bne.n	8001992 <npf_vpprintf+0x2f6>
          // Zero value and explicitly-requested zero precision means "print nothing".
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 800197c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001980:	2b04      	cmp	r3, #4
 8001982:	d11f      	bne.n	80019c4 <npf_vpprintf+0x328>
 8001984:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01b      	beq.n	80019c4 <npf_vpprintf+0x328>
            fs.prec = 1; // octal special case, print a single '0'
 800198c:	2301      	movs	r3, #1
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 8001990:	e018      	b.n	80019c4 <npf_vpprintf+0x328>
        if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) {
          cbuf_len = npf_bin_len(val); u.binval = val;
        } else
#endif
        {
          unsigned const base = (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) ?
 8001992:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
            8u : ((fs.conv_spec == NPF_FMT_SPEC_CONV_HEX_INT) ? 16u : 10u);
 8001996:	2b04      	cmp	r3, #4
 8001998:	d007      	beq.n	80019aa <npf_vpprintf+0x30e>
 800199a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800199e:	2b05      	cmp	r3, #5
 80019a0:	d101      	bne.n	80019a6 <npf_vpprintf+0x30a>
 80019a2:	2310      	movs	r3, #16
 80019a4:	e002      	b.n	80019ac <npf_vpprintf+0x310>
 80019a6:	230a      	movs	r3, #10
 80019a8:	e000      	b.n	80019ac <npf_vpprintf+0x310>
 80019aa:	2308      	movs	r3, #8
          unsigned const base = (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) ?
 80019ac:	65bb      	str	r3, [r7, #88]	; 0x58
          cbuf_len = npf_utoa_rev(cbuf, val, base, (unsigned)fs.case_adjust);
 80019ae:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80019b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019b4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80019b6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80019ba:	f7ff fb5b 	bl	8001074 <npf_utoa_rev>
 80019be:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 80019c2:	e000      	b.n	80019c6 <npf_vpprintf+0x32a>
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 80019c4:	bf00      	nop
        }

        if (val && fs.alt_form && (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL)) {
 80019c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d012      	beq.n	80019f2 <npf_vpprintf+0x356>
 80019cc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00e      	beq.n	80019f2 <npf_vpprintf+0x356>
 80019d4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d10a      	bne.n	80019f2 <npf_vpprintf+0x356>
          cbuf[cbuf_len++] = '0'; // OK to add leading octal '0' immediately.
 80019dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80019e6:	461a      	mov	r2, r3
 80019e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019ec:	4413      	add	r3, r2
 80019ee:	2230      	movs	r2, #48	; 0x30
 80019f0:	701a      	strb	r2, [r3, #0]
        }

        if (val && fs.alt_form) { // 0x or 0b but can't write it yet.
 80019f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 8098 	beq.w	8001b2a <npf_vpprintf+0x48e>
 80019fa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8093 	beq.w	8001b2a <npf_vpprintf+0x48e>
          if (fs.conv_spec == NPF_FMT_SPEC_CONV_HEX_INT) { need_0x = 'X'; }
 8001a04:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d102      	bne.n	8001a12 <npf_vpprintf+0x376>
 8001a0c:	2358      	movs	r3, #88	; 0x58
 8001a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#if NANOPRINTF_USE_BINARY_FORMAT_SPECIFIERS == 1
          else if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) { need_0x = 'B'; }
#endif
          if (need_0x) { need_0x += fs.case_adjust; }
 8001a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8087 	beq.w	8001b2a <npf_vpprintf+0x48e>
 8001a1c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001a20:	461a      	mov	r2, r3
 8001a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a26:	4413      	add	r3, r2
 8001a28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
      } break;
 8001a2c:	e07d      	b.n	8001b2a <npf_vpprintf+0x48e>

      case NPF_FMT_SPEC_CONV_POINTER: {
        cbuf_len =
          npf_utoa_rev(cbuf, (npf_uint_t)(uintptr_t)va_arg(args, void *), 16, 'a'-'A');
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	1d1a      	adds	r2, r3, #4
 8001a32:	603a      	str	r2, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	2320      	movs	r3, #32
 8001a3a:	2210      	movs	r2, #16
 8001a3c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001a40:	f7ff fb18 	bl	8001074 <npf_utoa_rev>
 8001a44:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        need_0x = 'x';
 8001a48:	2378      	movs	r3, #120	; 0x78
 8001a4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      } break;
 8001a4e:	e06d      	b.n	8001b2c <npf_vpprintf+0x490>
      case NPF_FMT_SPEC_CONV_FLOAT_DEC:
      case NPF_FMT_SPEC_CONV_FLOAT_SCI:
      case NPF_FMT_SPEC_CONV_FLOAT_SHORTEST:
      case NPF_FMT_SPEC_CONV_FLOAT_HEX: {
        float val;
        if (fs.length_modifier == NPF_FMT_SPEC_LEN_MOD_LONG_DOUBLE) {
 8001a50:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d10f      	bne.n	8001a78 <npf_vpprintf+0x3dc>
          val = (float)va_arg(args, long double);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	3307      	adds	r3, #7
 8001a5c:	f023 0307 	bic.w	r3, r3, #7
 8001a60:	f103 0208 	add.w	r2, r3, #8
 8001a64:	603a      	str	r2, [r7, #0]
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f7fe fe99 	bl	80007a4 <__aeabi_d2f>
 8001a72:	4603      	mov	r3, r0
 8001a74:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a76:	e00e      	b.n	8001a96 <npf_vpprintf+0x3fa>
        } else {
          val = (float)va_arg(args, double);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	3307      	adds	r3, #7
 8001a7c:	f023 0307 	bic.w	r3, r3, #7
 8001a80:	f103 0208 	add.w	r2, r3, #8
 8001a84:	603a      	str	r2, [r7, #0]
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7fe fe89 	bl	80007a4 <__aeabi_d2f>
 8001a92:	4603      	mov	r3, r0
 8001a94:	66bb      	str	r3, [r7, #104]	; 0x68
        }

        sign_c = (val < 0.f) ? '-' : fs.prepend;
 8001a96:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa2:	d501      	bpl.n	8001aa8 <npf_vpprintf+0x40c>
 8001aa4:	232d      	movs	r3, #45	; 0x2d
 8001aa6:	e001      	b.n	8001aac <npf_vpprintf+0x410>
 8001aa8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001aac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = (val == 0.f);
 8001ab0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ab4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abc:	bf0c      	ite	eq
 8001abe:	2301      	moveq	r3, #1
 8001ac0:	2300      	movne	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        cbuf_len = npf_ftoa_rev(cbuf, val, fs.case_adjust, &frac_chars);
 8001ac6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001aca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ace:	4619      	mov	r1, r3
 8001ad0:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8001ad4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001ad8:	f7ff fcc0 	bl	800145c <npf_ftoa_rev>
 8001adc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if (cbuf_len < 0) {
 8001ae0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da07      	bge.n	8001af8 <npf_vpprintf+0x45c>
          cbuf_len = -cbuf_len;
 8001ae8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001aec:	425b      	negs	r3, r3
 8001aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
          inf_or_nan = 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	67bb      	str	r3, [r7, #120]	; 0x78
        } else {
          int const prec_adj = npf_max(0, frac_chars - fs.prec);
          cbuf += prec_adj;
          cbuf_len -= prec_adj;
        }
      } break;
 8001af6:	e019      	b.n	8001b2c <npf_vpprintf+0x490>
          int const prec_adj = npf_max(0, frac_chars - fs.prec);
 8001af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	4619      	mov	r1, r3
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7ff f821 	bl	8000b48 <npf_max>
 8001b06:	65f8      	str	r0, [r7, #92]	; 0x5c
          cbuf += prec_adj;
 8001b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b0e:	4413      	add	r3, r2
 8001b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
          cbuf_len -= prec_adj;
 8001b14:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      } break;
 8001b20:	e004      	b.n	8001b2c <npf_vpprintf+0x490>
#endif
      default: break;
 8001b22:	bf00      	nop
 8001b24:	e002      	b.n	8001b2c <npf_vpprintf+0x490>
      } break;
 8001b26:	bf00      	nop
 8001b28:	e000      	b.n	8001b2c <npf_vpprintf+0x490>
      } break;
 8001b2a:	bf00      	nop
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Compute the field width pad character
    if (fs.field_width_opt == NPF_FMT_SPEC_OPT_LITERAL) {
 8001b2c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d124      	bne.n	8001b7e <npf_vpprintf+0x4e2>
      if (fs.leading_zero_pad) { // '0' flag is only legal with numeric types
 8001b34:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01d      	beq.n	8001b78 <npf_vpprintf+0x4dc>
        if ((fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) &&
 8001b3c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d01c      	beq.n	8001b7e <npf_vpprintf+0x4e2>
            (fs.conv_spec != NPF_FMT_SPEC_CONV_CHAR) &&
 8001b44:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
        if ((fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) &&
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d018      	beq.n	8001b7e <npf_vpprintf+0x4e2>
            (fs.conv_spec != NPF_FMT_SPEC_CONV_PERCENT)) {
 8001b4c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
            (fs.conv_spec != NPF_FMT_SPEC_CONV_CHAR) &&
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d014      	beq.n	8001b7e <npf_vpprintf+0x4e2>
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
          if ((fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec && zero) {
 8001b54:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d109      	bne.n	8001b70 <npf_vpprintf+0x4d4>
 8001b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d106      	bne.n	8001b70 <npf_vpprintf+0x4d4>
 8001b62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <npf_vpprintf+0x4d4>
            pad_c = ' ';
 8001b68:	2320      	movs	r3, #32
 8001b6a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001b6e:	e006      	b.n	8001b7e <npf_vpprintf+0x4e2>
          } else
#endif
          { pad_c = '0'; }
 8001b70:	2330      	movs	r3, #48	; 0x30
 8001b72:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001b76:	e002      	b.n	8001b7e <npf_vpprintf+0x4e2>
        }
      } else { pad_c = ' '; }
 8001b78:	2320      	movs	r3, #32
 8001b7a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }
#endif

    // Compute the number of bytes to truncate or '0'-pad.
    if (fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) {
 8001b7e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d014      	beq.n	8001bb0 <npf_vpprintf+0x514>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      if (!inf_or_nan) { // float precision is after the decimal point
 8001b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d111      	bne.n	8001bb0 <npf_vpprintf+0x514>
        int const prec_start =
          (fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DEC) ? frac_chars : cbuf_len;
 8001b8c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d101      	bne.n	8001b98 <npf_vpprintf+0x4fc>
 8001b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b96:	e001      	b.n	8001b9c <npf_vpprintf+0x500>
 8001b98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        int const prec_start =
 8001b9c:	657b      	str	r3, [r7, #84]	; 0x54
        prec_pad = npf_max(0, fs.prec - prec_start);
 8001b9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7fe ffce 	bl	8000b48 <npf_max>
 8001bac:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
#endif
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Given the full converted length, how many pad bytes?
    field_pad = fs.field_width - cbuf_len - !!sign_c;
 8001bb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2201      	movne	r2, #1
 8001bc2:	2200      	moveq	r2, #0
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	1a9b      	subs	r3, r3, r2
 8001bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (need_0x) { field_pad -= 2; }
 8001bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d004      	beq.n	8001bde <npf_vpprintf+0x542>
 8001bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bd8:	3b02      	subs	r3, #2
 8001bda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    if ((fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DEC) && !fs.prec && !fs.alt_form) {
 8001bde:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d10b      	bne.n	8001bfe <npf_vpprintf+0x562>
 8001be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d108      	bne.n	8001bfe <npf_vpprintf+0x562>
 8001bec:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d104      	bne.n	8001bfe <npf_vpprintf+0x562>
      ++field_pad; // 0-pad, no decimal point.
 8001bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    field_pad -= prec_pad;
 8001bfe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001c02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#endif
    field_pad = npf_max(0, field_pad);
 8001c0c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7fe ff99 	bl	8000b48 <npf_max>
 8001c16:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
#endif // NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Apply right-justified field width if requested
    if (!fs.left_justified && pad_c) { // If leading zeros pad, sign goes first.
 8001c1a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d14d      	bne.n	8001cbe <npf_vpprintf+0x622>
 8001c22:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d049      	beq.n	8001cbe <npf_vpprintf+0x622>
      if (pad_c == '0') {
 8001c2a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001c2e:	2b30      	cmp	r3, #48	; 0x30
 8001c30:	d128      	bne.n	8001c84 <npf_vpprintf+0x5e8>
        if (sign_c) { NPF_PUTC(sign_c); sign_c = 0; }
 8001c32:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00a      	beq.n	8001c50 <npf_vpprintf+0x5b4>
 8001c3a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001c3e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fd12 	bl	800166e <npf_putc_cnt>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        // Pad byte is '0', write '0x' before '0' pad chars.
        if (need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 8001c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d015      	beq.n	8001c84 <npf_vpprintf+0x5e8>
 8001c58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	2030      	movs	r0, #48	; 0x30
 8001c60:	f7ff fd05 	bl	800166e <npf_putc_cnt>
 8001c64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001c6e:	f7ff fcfe 	bl	800166e <npf_putc_cnt>
      }
      while (field_pad-- > 0) { NPF_PUTC(pad_c); }
 8001c72:	e007      	b.n	8001c84 <npf_vpprintf+0x5e8>
 8001c74:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001c78:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fcf5 	bl	800166e <npf_putc_cnt>
 8001c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c88:	1e5a      	subs	r2, r3, #1
 8001c8a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	dcf0      	bgt.n	8001c74 <npf_vpprintf+0x5d8>
      // Pad byte is ' ', write '0x' after ' ' pad chars but before number.
      if ((pad_c != '0') && need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 8001c92:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001c96:	2b30      	cmp	r3, #48	; 0x30
 8001c98:	d023      	beq.n	8001ce2 <npf_vpprintf+0x646>
 8001c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01f      	beq.n	8001ce2 <npf_vpprintf+0x646>
 8001ca2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	2030      	movs	r0, #48	; 0x30
 8001caa:	f7ff fce0 	bl	800166e <npf_putc_cnt>
 8001cae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001cb8:	f7ff fcd9 	bl	800166e <npf_putc_cnt>
 8001cbc:	e011      	b.n	8001ce2 <npf_vpprintf+0x646>
    } else
#endif
    { if (need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); } } // no pad, '0x' requested.
 8001cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00e      	beq.n	8001ce4 <npf_vpprintf+0x648>
 8001cc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cca:	4619      	mov	r1, r3
 8001ccc:	2030      	movs	r0, #48	; 0x30
 8001cce:	f7ff fcce 	bl	800166e <npf_putc_cnt>
 8001cd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001cdc:	f7ff fcc7 	bl	800166e <npf_putc_cnt>
 8001ce0:	e000      	b.n	8001ce4 <npf_vpprintf+0x648>
      if ((pad_c != '0') && need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 8001ce2:	bf00      	nop

    // Write the converted payload
    if (fs.conv_spec == NPF_FMT_SPEC_CONV_STRING) {
 8001ce4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d117      	bne.n	8001d1c <npf_vpprintf+0x680>
      for (int i = 0; i < cbuf_len; ++i) { NPF_PUTC(cbuf[i]); }
 8001cec:	2300      	movs	r3, #0
 8001cee:	667b      	str	r3, [r7, #100]	; 0x64
 8001cf0:	e00e      	b.n	8001d10 <npf_vpprintf+0x674>
 8001cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cf4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001cf8:	4413      	add	r3, r2
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f7ff fcb2 	bl	800166e <npf_putc_cnt>
 8001d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	667b      	str	r3, [r7, #100]	; 0x64
 8001d10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001d12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d16:	429a      	cmp	r2, r3
 8001d18:	dbeb      	blt.n	8001cf2 <npf_vpprintf+0x656>
 8001d1a:	e059      	b.n	8001dd0 <npf_vpprintf+0x734>
    } else {
      if (sign_c) { NPF_PUTC(sign_c); }
 8001d1c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <npf_vpprintf+0x698>
 8001d24:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d28:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fc9d 	bl	800166e <npf_putc_cnt>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      if (fs.conv_spec != NPF_FMT_SPEC_CONV_FLOAT_DEC) {
 8001d34:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d00e      	beq.n	8001d5a <npf_vpprintf+0x6be>
#endif

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
        while (prec_pad-- > 0) { NPF_PUTC('0'); } // int precision leads.
 8001d3c:	e005      	b.n	8001d4a <npf_vpprintf+0x6ae>
 8001d3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d42:	4619      	mov	r1, r3
 8001d44:	2030      	movs	r0, #48	; 0x30
 8001d46:	f7ff fc92 	bl	800166e <npf_putc_cnt>
 8001d4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d4e:	1e5a      	subs	r2, r3, #1
 8001d50:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	dcf2      	bgt.n	8001d3e <npf_vpprintf+0x6a2>
 8001d58:	e01e      	b.n	8001d98 <npf_vpprintf+0x6fc>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      } else {
        // if 0 precision, skip the fractional part and '.'
        // if 0 prec + alternative form, keep the '.'
        if (!fs.prec && !fs.alt_form) { ++cbuf; --cbuf_len; }
 8001d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d11b      	bne.n	8001d98 <npf_vpprintf+0x6fc>
 8001d60:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d117      	bne.n	8001d98 <npf_vpprintf+0x6fc>
 8001d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d76:	3b01      	subs	r3, #1
 8001d78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#if NANOPRINTF_USE_BINARY_FORMAT_SPECIFIERS == 1
      if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) {
        while (cbuf_len) { NPF_PUTC('0' + ((u.binval >> --cbuf_len) & 1)); }
      } else
#endif
      { while (cbuf_len-- > 0) { NPF_PUTC(cbuf[cbuf_len]); } } // payload is reversed
 8001d7c:	e00c      	b.n	8001d98 <npf_vpprintf+0x6fc>
 8001d7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d82:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001d86:	4413      	add	r3, r2
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d90:	4619      	mov	r1, r3
 8001d92:	4610      	mov	r0, r2
 8001d94:	f7ff fc6b 	bl	800166e <npf_putc_cnt>
 8001d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d9c:	1e5a      	subs	r2, r3, #1
 8001d9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	dceb      	bgt.n	8001d7e <npf_vpprintf+0x6e2>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      // real precision comes after the number.
      if ((fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DEC) && !inf_or_nan) {
 8001da6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d110      	bne.n	8001dd0 <npf_vpprintf+0x734>
 8001dae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10d      	bne.n	8001dd0 <npf_vpprintf+0x734>
        while (prec_pad-- > 0) { NPF_PUTC('0'); }
 8001db4:	e005      	b.n	8001dc2 <npf_vpprintf+0x726>
 8001db6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dba:	4619      	mov	r1, r3
 8001dbc:	2030      	movs	r0, #48	; 0x30
 8001dbe:	f7ff fc56 	bl	800166e <npf_putc_cnt>
 8001dc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dc6:	1e5a      	subs	r2, r3, #1
 8001dc8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	dcf2      	bgt.n	8001db6 <npf_vpprintf+0x71a>
      }
#endif
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    if (fs.left_justified && pad_c) { // Apply left-justified field width
 8001dd0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <npf_vpprintf+0x764>
 8001dd8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00f      	beq.n	8001e00 <npf_vpprintf+0x764>
      while (field_pad-- > 0) { NPF_PUTC(pad_c); }
 8001de0:	e007      	b.n	8001df2 <npf_vpprintf+0x756>
 8001de2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001de6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fc3e 	bl	800166e <npf_putc_cnt>
 8001df2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001df6:	1e5a      	subs	r2, r3, #1
 8001df8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	dcf0      	bgt.n	8001de2 <npf_vpprintf+0x746>
  while (*cur) {
 8001e00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f47f ac59 	bne.w	80016be <npf_vpprintf+0x22>
    }
#endif
  }

  return pc_cnt.n;
 8001e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	37a0      	adds	r7, #160	; 0xa0
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop

08001e18 <npf_snprintf>:
  int const rv = npf_vpprintf(pc, pc_ctx, format, val);
  va_end(val);
  return rv;
}

int npf_snprintf(char *buffer, size_t bufsz, const char *format, ...) {
 8001e18:	b40c      	push	{r2, r3}
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
  va_list val;
  va_start(val, format);
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	60bb      	str	r3, [r7, #8]
  int const rv = npf_vsnprintf(buffer, bufsz, format, val);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	6839      	ldr	r1, [r7, #0]
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f809 	bl	8001e48 <npf_vsnprintf>
 8001e36:	60f8      	str	r0, [r7, #12]
  va_end(val);
  return rv;
 8001e38:	68fb      	ldr	r3, [r7, #12]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e44:	b002      	add	sp, #8
 8001e46:	4770      	bx	lr

08001e48 <npf_vsnprintf>:

int npf_vsnprintf(char *buffer, size_t bufsz, char const *format, va_list vlist) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
  npf_bufputc_ctx_t bufputc_ctx;
  bufputc_ctx.dst = buffer;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	617b      	str	r3, [r7, #20]
  bufputc_ctx.len = bufsz;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	61bb      	str	r3, [r7, #24]
  bufputc_ctx.cur = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]

  npf_putc const pc = buffer ? npf_bufputc : npf_bufputc_nop;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <npf_vsnprintf+0x24>
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <npf_vsnprintf+0x50>)
 8001e6a:	e000      	b.n	8001e6e <npf_vsnprintf+0x26>
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <npf_vsnprintf+0x54>)
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
  int const n = npf_vpprintf(pc, &bufputc_ctx, format, vlist);
 8001e70:	f107 0114 	add.w	r1, r7, #20
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e7a:	f7ff fc0f 	bl	800169c <npf_vpprintf>
 8001e7e:	6238      	str	r0, [r7, #32]
  pc('\0', &bufputc_ctx);
 8001e80:	f107 0214 	add.w	r2, r7, #20
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	4611      	mov	r1, r2
 8001e88:	2000      	movs	r0, #0
 8001e8a:	4798      	blx	r3
  if (bufsz && (n >= (int)bufsz)) { buffer[0] = '\0'; }
#elif defined(NANOPRINTF_SNPRINTF_SAFE_TRIM_STRING_ON_OVERFLOW)
  if (bufsz && (n >= (int)bufsz)) { buffer[bufsz - 1] = '\0'; }
#endif

  return n;
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3728      	adds	r7, #40	; 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	0800161d 	.word	0x0800161d
 8001e9c:	08001659 	.word	0x08001659

08001ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	f6ad 3d78 	subw	sp, sp, #2936	; 0xb78
 8001ea6:	af02      	add	r7, sp, #8
	uint16_t notched[NOTCHED_SIZE];
	uint16_t h[H_SIZE];
	float t[T_SIZE];
	float l1[L1_SIZE];

	memset(x, 0, sizeof(x));
 8001ea8:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001eac:	2206      	movs	r2, #6
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 ff5b 	bl	8006d6c <memset>
	memset(y, 0, sizeof(y));
 8001eb6:	f607 23f4 	addw	r3, r7, #2804	; 0xaf4
 8001eba:	220c      	movs	r2, #12
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f004 ff54 	bl	8006d6c <memset>

	uint16_t input;
	float y_val;
	uint16_t notched_val;
	float notched_bar_val = 0;
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	f607 3268 	addw	r2, r7, #2920	; 0xb68
 8001ecc:	6013      	str	r3, [r2, #0]
	short h_hat_val = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8a7 3b44 	strh.w	r3, [r7, #2884]	; 0xb44
	uint16_t h_val = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8a7 3b42 	strh.w	r3, [r7, #2882]	; 0xb42
	float t_val1, t_val2;
	float t_val = 0;
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	f607 323c 	addw	r2, r7, #2876	; 0xb3c
 8001ee2:	6013      	str	r3, [r2, #0]
	float l1_val = 0;
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	f607 3264 	addw	r2, r7, #2916	; 0xb64
 8001eec:	6013      	str	r3, [r2, #0]
	float l2_val = 0;
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	f507 6236 	add.w	r2, r7, #2912	; 0xb60
 8001ef6:	6013      	str	r3, [r2, #0]
	float th_val = 0;
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 8001f00:	6013      	str	r3, [r2, #0]
	float theta;

	uint16_t i;
	uint16_t j;
	uint16_t i_notched = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8a7 3b5c 	strh.w	r3, [r7, #2908]	; 0xb5c
	uint16_t i_h = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8a7 3b5a 	strh.w	r3, [r7, #2906]	; 0xb5a
	uint16_t i_t = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8a7 3b58 	strh.w	r3, [r7, #2904]	; 0xb58
	uint16_t i_l1 = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8a7 3b56 	strh.w	r3, [r7, #2902]	; 0xb56

	uint8_t prev_aoi;
	uint8_t aoi = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 3b55 	strb.w	r3, [r7, #2901]	; 0xb55

	uint16_t i_onset;
	uint16_t i_offset;
	uint16_t i_cand_max;
	uint16_t i_curr_max = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8a7 3b50 	strh.w	r3, [r7, #2896]	; 0xb50
	uint16_t i_prev_max;

	uint16_t rr;
	float bpm = 0;
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	f607 3248 	addw	r2, r7, #2888	; 0xb48
 8001f2e:	6013      	str	r3, [r2, #0]

	uint8_t led_counter = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f887 3b47 	strb.w	r3, [r7, #2887]	; 0xb47
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f36:	f001 f845 	bl	8002fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f3a:	f000 fc23 	bl	8002784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f3e:	f000 fd79 	bl	8002a34 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f42:	f000 fd51 	bl	80029e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f46:	f000 fd1f 	bl	8002988 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001f4a:	f000 fc75 	bl	8002838 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001f4e:	f000 fce3 	bl	8002918 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
 8001f52:	4ac4      	ldr	r2, [pc, #784]	; (8002264 <main+0x3c4>)
 8001f54:	2100      	movs	r1, #0
 8001f56:	48c4      	ldr	r0, [pc, #784]	; (8002268 <main+0x3c8>)
 8001f58:	f002 fa68 	bl	800442c <HAL_DMA_RegisterCallback>
  HAL_TIM_Base_Start_IT(&htim6);
 8001f5c:	48c3      	ldr	r0, [pc, #780]	; (800226c <main+0x3cc>)
 8001f5e:	f004 f89f 	bl	80060a0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (fs_elapsed_flag) {
 8001f62:	4bc3      	ldr	r3, [pc, #780]	; (8002270 <main+0x3d0>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0fb      	beq.n	8001f62 <main+0xc2>
		  fs_elapsed_flag = 0;
 8001f6a:	4bc1      	ldr	r3, [pc, #772]	; (8002270 <main+0x3d0>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]

		  if (led_counter > 0) {
 8001f70:	f897 3b47 	ldrb.w	r3, [r7, #2887]	; 0xb47
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d012      	beq.n	8001f9e <main+0xfe>
			  if (led_counter == (FS / 20) + 1) {
 8001f78:	f897 3b47 	ldrb.w	r3, [r7, #2887]	; 0xb47
 8001f7c:	2b13      	cmp	r3, #19
 8001f7e:	d109      	bne.n	8001f94 <main+0xf4>
				  led_counter = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f887 3b47 	strb.w	r3, [r7, #2887]	; 0xb47
				  HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2120      	movs	r1, #32
 8001f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8e:	f002 fc6d 	bl	800486c <HAL_GPIO_WritePin>
 8001f92:	e004      	b.n	8001f9e <main+0xfe>
			  } else {
				  led_counter++;
 8001f94:	f897 3b47 	ldrb.w	r3, [r7, #2887]	; 0xb47
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f887 3b47 	strb.w	r3, [r7, #2887]	; 0xb47
			  }
		  }

		  if (HAL_GPIO_ReadPin(AD8232_LOD_GPIO_Port, AD8232_LOD_Pin) == GPIO_PIN_SET) {
 8001f9e:	2104      	movs	r1, #4
 8001fa0:	48b4      	ldr	r0, [pc, #720]	; (8002274 <main+0x3d4>)
 8001fa2:	f002 fc4b 	bl	800483c <HAL_GPIO_ReadPin>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d134      	bne.n	8002016 <main+0x176>
			  memset(x, 0, sizeof(x));
 8001fac:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001fb0:	2206      	movs	r2, #6
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 fed9 	bl	8006d6c <memset>
			  memset(y, 0, sizeof(y));
 8001fba:	f607 23f4 	addw	r3, r7, #2804	; 0xaf4
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 fed2 	bl	8006d6c <memset>
			  notched_bar_val = 0;
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	f607 3268 	addw	r2, r7, #2920	; 0xb68
 8001fd0:	6013      	str	r3, [r2, #0]
			  l1_val = 0;
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	f607 3264 	addw	r2, r7, #2916	; 0xb64
 8001fda:	6013      	str	r3, [r2, #0]
			  l2_val = 0;
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	f507 6236 	add.w	r2, r7, #2912	; 0xb60
 8001fe4:	6013      	str	r3, [r2, #0]
			  i_notched = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8a7 3b5c 	strh.w	r3, [r7, #2908]	; 0xb5c
			  i_h = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8a7 3b5a 	strh.w	r3, [r7, #2906]	; 0xb5a
			  i_t = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f8a7 3b58 	strh.w	r3, [r7, #2904]	; 0xb58
			  i_l1 = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8a7 3b56 	strh.w	r3, [r7, #2902]	; 0xb56
			  aoi = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f887 3b55 	strb.w	r3, [r7, #2901]	; 0xb55
			  i_curr_max = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	f8a7 3b50 	strh.w	r3, [r7, #2896]	; 0xb50
			  bpm = 0;
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	f607 3248 	addw	r2, r7, #2888	; 0xb48
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	e7a5      	b.n	8001f62 <main+0xc2>
		  } else {
			  HAL_ADC_Start(&hadc1);
 8002016:	4898      	ldr	r0, [pc, #608]	; (8002278 <main+0x3d8>)
 8002018:	f001 f9cc 	bl	80033b4 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800201c:	f04f 31ff 	mov.w	r1, #4294967295
 8002020:	4895      	ldr	r0, [pc, #596]	; (8002278 <main+0x3d8>)
 8002022:	f001 fa7d 	bl	8003520 <HAL_ADC_PollForConversion>
			  input = HAL_ADC_GetValue(&hadc1);
 8002026:	4894      	ldr	r0, [pc, #592]	; (8002278 <main+0x3d8>)
 8002028:	f001 fb48 	bl	80036bc <HAL_ADC_GetValue>
 800202c:	4603      	mov	r3, r0
 800202e:	f8a7 3b36 	strh.w	r3, [r7, #2870]	; 0xb36

			  for (i = 0; i < 2; i++) {
 8002032:	2300      	movs	r3, #0
 8002034:	f8a7 3b5e 	strh.w	r3, [r7, #2910]	; 0xb5e
 8002038:	e027      	b.n	800208a <main+0x1ea>
				  x[i] = x[i + 1];
 800203a:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 800203e:	3301      	adds	r3, #1
 8002040:	f8b7 2b5e 	ldrh.w	r2, [r7, #2910]	; 0xb5e
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 800204a:	443b      	add	r3, r7
 800204c:	f833 1c70 	ldrh.w	r1, [r3, #-112]
 8002050:	0053      	lsls	r3, r2, #1
 8002052:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 8002056:	443b      	add	r3, r7
 8002058:	460a      	mov	r2, r1
 800205a:	f823 2c70 	strh.w	r2, [r3, #-112]
				  y[i] = y[i + 1];
 800205e:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 8002068:	0092      	lsls	r2, r2, #2
 800206a:	f502 6237 	add.w	r2, r2, #2928	; 0xb70
 800206e:	443a      	add	r2, r7
 8002070:	3a7c      	subs	r2, #124	; 0x7c
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 800207a:	443b      	add	r3, r7
 800207c:	3b7c      	subs	r3, #124	; 0x7c
 800207e:	601a      	str	r2, [r3, #0]
			  for (i = 0; i < 2; i++) {
 8002080:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 8002084:	3301      	adds	r3, #1
 8002086:	f8a7 3b5e 	strh.w	r3, [r7, #2910]	; 0xb5e
 800208a:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 800208e:	2b01      	cmp	r3, #1
 8002090:	d9d3      	bls.n	800203a <main+0x19a>
			  }
			  x[2] = input;
 8002092:	f8b7 3b36 	ldrh.w	r3, [r7, #2870]	; 0xb36
 8002096:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04

			  y_val = 0;
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	f607 326c 	addw	r2, r7, #2924	; 0xb6c
 80020a2:	6013      	str	r3, [r2, #0]
			  for (i = 0; i < 3; i++) {
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8a7 3b5e 	strh.w	r3, [r7, #2910]	; 0xb5e
 80020aa:	e043      	b.n	8002134 <main+0x294>
				  y_val += B[i] * x[2 - i];
 80020ac:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 80020b0:	4a72      	ldr	r2, [pc, #456]	; (800227c <main+0x3dc>)
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	ed93 7a00 	vldr	s14, [r3]
 80020ba:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 80020be:	f1c3 0302 	rsb	r3, r3, #2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 80020c8:	443b      	add	r3, r7
 80020ca:	f833 3c70 	ldrh.w	r3, [r3, #-112]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020da:	f607 336c 	addw	r3, r7, #2924	; 0xb6c
 80020de:	ed93 7a00 	vldr	s14, [r3]
 80020e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e6:	f607 336c 	addw	r3, r7, #2924	; 0xb6c
 80020ea:	edc3 7a00 	vstr	s15, [r3]
				  y_val -= A[i] * y[2 - i];
 80020ee:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 80020f2:	4a63      	ldr	r2, [pc, #396]	; (8002280 <main+0x3e0>)
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	ed93 7a00 	vldr	s14, [r3]
 80020fc:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 8002100:	f1c3 0302 	rsb	r3, r3, #2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 800210a:	443b      	add	r3, r7
 800210c:	3b7c      	subs	r3, #124	; 0x7c
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002116:	f607 336c 	addw	r3, r7, #2924	; 0xb6c
 800211a:	ed93 7a00 	vldr	s14, [r3]
 800211e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002122:	f607 336c 	addw	r3, r7, #2924	; 0xb6c
 8002126:	edc3 7a00 	vstr	s15, [r3]
			  for (i = 0; i < 3; i++) {
 800212a:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 800212e:	3301      	adds	r3, #1
 8002130:	f8a7 3b5e 	strh.w	r3, [r7, #2910]	; 0xb5e
 8002134:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 8002138:	2b02      	cmp	r3, #2
 800213a:	d9b7      	bls.n	80020ac <main+0x20c>
			  }
			  y[2] = y_val;
 800213c:	f607 336c 	addw	r3, r7, #2924	; 0xb6c
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f607 22fc 	addw	r2, r7, #2812	; 0xafc
 8002146:	6013      	str	r3, [r2, #0]

			  notched_val = (uint16_t) y_val;
 8002148:	f607 336c 	addw	r3, r7, #2924	; 0xb6c
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002154:	ee17 3a90 	vmov	r3, s15
 8002158:	f8a7 3b34 	strh.w	r3, [r7, #2868]	; 0xb34
			  if (i_notched == NOTCHED_SIZE) {
 800215c:	f8b7 3b5c 	ldrh.w	r3, [r7, #2908]	; 0xb5c
 8002160:	2b34      	cmp	r3, #52	; 0x34
 8002162:	d123      	bne.n	80021ac <main+0x30c>
				  for (i = 0; i < NOTCHED_SIZE - 1; i++) {
 8002164:	2300      	movs	r3, #0
 8002166:	f8a7 3b5e 	strh.w	r3, [r7, #2910]	; 0xb5e
 800216a:	e016      	b.n	800219a <main+0x2fa>
					  notched[i] = notched[i + 1];
 800216c:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 8002170:	3301      	adds	r3, #1
 8002172:	f8b7 2b5e 	ldrh.w	r2, [r7, #2910]	; 0xb5e
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 800217c:	443b      	add	r3, r7
 800217e:	f833 1ce4 	ldrh.w	r1, [r3, #-228]
 8002182:	0053      	lsls	r3, r2, #1
 8002184:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 8002188:	443b      	add	r3, r7
 800218a:	460a      	mov	r2, r1
 800218c:	f823 2ce4 	strh.w	r2, [r3, #-228]
				  for (i = 0; i < NOTCHED_SIZE - 1; i++) {
 8002190:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 8002194:	3301      	adds	r3, #1
 8002196:	f8a7 3b5e 	strh.w	r3, [r7, #2910]	; 0xb5e
 800219a:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 800219e:	2b32      	cmp	r3, #50	; 0x32
 80021a0:	d9e4      	bls.n	800216c <main+0x2cc>
				  }
				  i_notched--;
 80021a2:	f8b7 3b5c 	ldrh.w	r3, [r7, #2908]	; 0xb5c
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f8a7 3b5c 	strh.w	r3, [r7, #2908]	; 0xb5c
			  }
			  notched[i_notched++] = notched_val;
 80021ac:	f8b7 3b5c 	ldrh.w	r3, [r7, #2908]	; 0xb5c
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	f8a7 2b5c 	strh.w	r2, [r7, #2908]	; 0xb5c
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 80021bc:	443b      	add	r3, r7
 80021be:	f8b7 2b34 	ldrh.w	r2, [r7, #2868]	; 0xb34
 80021c2:	f823 2ce4 	strh.w	r2, [r3, #-228]

			  notched_bar_val += (float) notched_val / WINDOW(N);
 80021c6:	f8b7 3b34 	ldrh.w	r3, [r7, #2868]	; 0xb34
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021d2:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002284 <main+0x3e4>
 80021d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021da:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 80021de:	ed93 7a00 	vldr	s14, [r3]
 80021e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e6:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 80021ea:	edc3 7a00 	vstr	s15, [r3]
			  if (i_notched > WINDOW(N)) {
 80021ee:	f8b7 3b5c 	ldrh.w	r3, [r7, #2908]	; 0xb5c
 80021f2:	2b33      	cmp	r3, #51	; 0x33
 80021f4:	f67f aeb5 	bls.w	8001f62 <main+0xc2>
				  notched_bar_val -= (float) notched[0] / WINDOW(N);
 80021f8:	f8b7 3a8c 	ldrh.w	r3, [r7, #2700]	; 0xa8c
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002204:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002284 <main+0x3e4>
 8002208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800220c:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8002210:	ed93 7a00 	vldr	s14, [r3]
 8002214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002218:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800221c:	edc3 7a00 	vstr	s15, [r3]

				  h_hat_val = notched_val - notched_bar_val;
 8002220:	f8b7 3b34 	ldrh.w	r3, [r7, #2868]	; 0xb34
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800222c:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800223c:	ee17 3a90 	vmov	r3, s15
 8002240:	f8a7 3b44 	strh.w	r3, [r7, #2884]	; 0xb44

				  h_val = ABS(h_hat_val);
 8002244:	f9b7 3b44 	ldrsh.w	r3, [r7, #2884]	; 0xb44
 8002248:	2b00      	cmp	r3, #0
 800224a:	bfb8      	it	lt
 800224c:	425b      	neglt	r3, r3
 800224e:	f8a7 3b42 	strh.w	r3, [r7, #2882]	; 0xb42

				  if (i_h == H_SIZE) {
 8002252:	f8b7 3b5a 	ldrh.w	r3, [r7, #2906]	; 0xb5a
 8002256:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 800225a:	d147      	bne.n	80022ec <main+0x44c>
					  for (i = 0; i < H_SIZE - 1; i++) {
 800225c:	2300      	movs	r3, #0
 800225e:	f8a7 3b5e 	strh.w	r3, [r7, #2910]	; 0xb5e
 8002262:	e029      	b.n	80022b8 <main+0x418>
 8002264:	08002c1d 	.word	0x08002c1d
 8002268:	200001a8 	.word	0x200001a8
 800226c:	200000d4 	.word	0x200000d4
 8002270:	200001ec 	.word	0x200001ec
 8002274:	48000c00 	.word	0x48000c00
 8002278:	20000040 	.word	0x20000040
 800227c:	20000000 	.word	0x20000000
 8002280:	2000000c 	.word	0x2000000c
 8002284:	424c0000 	.word	0x424c0000
 8002288:	43968000 	.word	0x43968000
						  h[i] = h[i + 1];
 800228c:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 8002290:	1c59      	adds	r1, r3, #1
 8002292:	f8b7 2b5e 	ldrh.w	r2, [r7, #2910]	; 0xb5e
 8002296:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800229a:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 800229e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80022a2:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80022a6:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 80022aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					  for (i = 0; i < H_SIZE - 1; i++) {
 80022ae:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 80022b2:	3301      	adds	r3, #1
 80022b4:	f8a7 3b5e 	strh.w	r3, [r7, #2910]	; 0xb5e
 80022b8:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 80022bc:	f240 22ce 	movw	r2, #718	; 0x2ce
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d9e3      	bls.n	800228c <main+0x3ec>
					  }
					  i_h--;
 80022c4:	f8b7 3b5a 	ldrh.w	r3, [r7, #2906]	; 0xb5a
 80022c8:	3b01      	subs	r3, #1
 80022ca:	f8a7 3b5a 	strh.w	r3, [r7, #2906]	; 0xb5a
					  i_onset--;
 80022ce:	f8b7 3b52 	ldrh.w	r3, [r7, #2898]	; 0xb52
 80022d2:	3b01      	subs	r3, #1
 80022d4:	f8a7 3b52 	strh.w	r3, [r7, #2898]	; 0xb52
					  i_curr_max--;
 80022d8:	f8b7 3b50 	ldrh.w	r3, [r7, #2896]	; 0xb50
 80022dc:	3b01      	subs	r3, #1
 80022de:	f8a7 3b50 	strh.w	r3, [r7, #2896]	; 0xb50
					  i_prev_max--;
 80022e2:	f8b7 3b4e 	ldrh.w	r3, [r7, #2894]	; 0xb4e
 80022e6:	3b01      	subs	r3, #1
 80022e8:	f8a7 3b4e 	strh.w	r3, [r7, #2894]	; 0xb4e
				  }
				  h[i_h++] = h_val;
 80022ec:	f8b7 3b5a 	ldrh.w	r3, [r7, #2906]	; 0xb5a
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	f8a7 2b5a 	strh.w	r2, [r7, #2906]	; 0xb5a
 80022f6:	4619      	mov	r1, r3
 80022f8:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80022fc:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 8002300:	f8b7 2b42 	ldrh.w	r2, [r7, #2882]	; 0xb42
 8002304:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]

				  if (i_h >= WINDOW(S)) {
 8002308:	f8b7 3b5a 	ldrh.w	r3, [r7, #2906]	; 0xb5a
 800230c:	2b0e      	cmp	r3, #14
 800230e:	f240 81ca 	bls.w	80026a6 <main+0x806>
					  j = i_h - 1;
 8002312:	f8b7 3b5a 	ldrh.w	r3, [r7, #2906]	; 0xb5a
 8002316:	3b01      	subs	r3, #1
 8002318:	f8a7 3b32 	strh.w	r3, [r7, #2866]	; 0xb32
					  t_val1 = h[j - S] - h[j - (2 * S)];
 800231c:	f8b7 3b32 	ldrh.w	r3, [r7, #2866]	; 0xb32
 8002320:	1fda      	subs	r2, r3, #7
 8002322:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8002326:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 800232a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800232e:	4619      	mov	r1, r3
 8002330:	f8b7 3b32 	ldrh.w	r3, [r7, #2866]	; 0xb32
 8002334:	f1a3 020e 	sub.w	r2, r3, #14
 8002338:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800233c:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 8002340:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002344:	1acb      	subs	r3, r1, r3
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800234e:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8002352:	edc3 7a00 	vstr	s15, [r3]
					  t_val2 = h[j - S] - h[j];
 8002356:	f8b7 3b32 	ldrh.w	r3, [r7, #2866]	; 0xb32
 800235a:	1fda      	subs	r2, r3, #7
 800235c:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8002360:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 8002364:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002368:	4619      	mov	r1, r3
 800236a:	f8b7 2b32 	ldrh.w	r2, [r7, #2866]	; 0xb32
 800236e:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8002372:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 8002376:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800237a:	1acb      	subs	r3, r1, r3
 800237c:	ee07 3a90 	vmov	s15, r3
 8002380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002384:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002388:	edc3 7a00 	vstr	s15, [r3]
					  t_val = t_val1 * t_val2;
 800238c:	f607 332c 	addw	r3, r7, #2860	; 0xb2c
 8002390:	ed93 7a00 	vldr	s14, [r3]
 8002394:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a0:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 80023a4:	edc3 7a00 	vstr	s15, [r3]

					  if (i_t == T_SIZE) {
 80023a8:	f8b7 3b58 	ldrh.w	r3, [r7, #2904]	; 0xb58
 80023ac:	2b0c      	cmp	r3, #12
 80023ae:	d124      	bne.n	80023fa <main+0x55a>
						  for (i = 0; i < T_SIZE - 1; i++) {
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8a7 3b5e 	strh.w	r3, [r7, #2910]	; 0xb5e
 80023b6:	e017      	b.n	80023e8 <main+0x548>
							  t[i] = t[i + 1];
 80023b8:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 80023c2:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 80023c6:	f2a1 61b4 	subw	r1, r1, #1716	; 0x6b4
 80023ca:	0092      	lsls	r2, r2, #2
 80023cc:	440a      	add	r2, r1
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 80023d4:	f2a1 61b4 	subw	r1, r1, #1716	; 0x6b4
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	601a      	str	r2, [r3, #0]
						  for (i = 0; i < T_SIZE - 1; i++) {
 80023de:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 80023e2:	3301      	adds	r3, #1
 80023e4:	f8a7 3b5e 	strh.w	r3, [r7, #2910]	; 0xb5e
 80023e8:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 80023ec:	2b0a      	cmp	r3, #10
 80023ee:	d9e3      	bls.n	80023b8 <main+0x518>
						  }
						  i_t--;
 80023f0:	f8b7 3b58 	ldrh.w	r3, [r7, #2904]	; 0xb58
 80023f4:	3b01      	subs	r3, #1
 80023f6:	f8a7 3b58 	strh.w	r3, [r7, #2904]	; 0xb58
					  }
					  t[i_t++] = t_val;
 80023fa:	f8b7 3b58 	ldrh.w	r3, [r7, #2904]	; 0xb58
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	f8a7 2b58 	strh.w	r2, [r7, #2904]	; 0xb58
 8002404:	4619      	mov	r1, r3
 8002406:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800240a:	f2a3 62b4 	subw	r2, r3, #1716	; 0x6b4
 800240e:	008b      	lsls	r3, r1, #2
 8002410:	4413      	add	r3, r2
 8002412:	f607 323c 	addw	r2, r7, #2876	; 0xb3c
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	601a      	str	r2, [r3, #0]

					  l1_val += t_val / WINDOW(L);
 800241a:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 800241e:	ed93 7a00 	vldr	s14, [r3]
 8002422:	eef2 6a06 	vmov.f32	s13, #38	; 0x41300000  11.0
 8002426:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800242a:	f607 3364 	addw	r3, r7, #2916	; 0xb64
 800242e:	ed93 7a00 	vldr	s14, [r3]
 8002432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002436:	f607 3364 	addw	r3, r7, #2916	; 0xb64
 800243a:	edc3 7a00 	vstr	s15, [r3]
					  if (i_t > WINDOW(L)) {
 800243e:	f8b7 3b58 	ldrh.w	r3, [r7, #2904]	; 0xb58
 8002442:	2b0b      	cmp	r3, #11
 8002444:	f240 812f 	bls.w	80026a6 <main+0x806>
						  l1_val -= t[0] / WINDOW(L);
 8002448:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800244c:	f2a3 63b4 	subw	r3, r3, #1716	; 0x6b4
 8002450:	ed93 7a00 	vldr	s14, [r3]
 8002454:	eef2 6a06 	vmov.f32	s13, #38	; 0x41300000  11.0
 8002458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800245c:	f607 3364 	addw	r3, r7, #2916	; 0xb64
 8002460:	ed93 7a00 	vldr	s14, [r3]
 8002464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002468:	f607 3364 	addw	r3, r7, #2916	; 0xb64
 800246c:	edc3 7a00 	vstr	s15, [r3]

						  if (i_l1 == L1_SIZE) {
 8002470:	f8b7 3b56 	ldrh.w	r3, [r7, #2902]	; 0xb56
 8002474:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8002478:	d125      	bne.n	80024c6 <main+0x626>
							  for (i = 0; i < L1_SIZE - 1; i++) {
 800247a:	2300      	movs	r3, #0
 800247c:	f8a7 3b5e 	strh.w	r3, [r7, #2910]	; 0xb5e
 8002480:	e017      	b.n	80024b2 <main+0x612>
								  l1[i] = l1[i + 1];
 8002482:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 800248c:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 8002490:	f6a1 316c 	subw	r1, r1, #2924	; 0xb6c
 8002494:	0092      	lsls	r2, r2, #2
 8002496:	440a      	add	r2, r1
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800249e:	f6a1 316c 	subw	r1, r1, #2924	; 0xb6c
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	601a      	str	r2, [r3, #0]
							  for (i = 0; i < L1_SIZE - 1; i++) {
 80024a8:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 80024ac:	3301      	adds	r3, #1
 80024ae:	f8a7 3b5e 	strh.w	r3, [r7, #2910]	; 0xb5e
 80024b2:	f8b7 3b5e 	ldrh.w	r3, [r7, #2910]	; 0xb5e
 80024b6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80024ba:	d9e2      	bls.n	8002482 <main+0x5e2>
							  }
							  i_l1--;
 80024bc:	f8b7 3b56 	ldrh.w	r3, [r7, #2902]	; 0xb56
 80024c0:	3b01      	subs	r3, #1
 80024c2:	f8a7 3b56 	strh.w	r3, [r7, #2902]	; 0xb56
						  }
						  l1[i_l1++] = l1_val;
 80024c6:	f8b7 3b56 	ldrh.w	r3, [r7, #2902]	; 0xb56
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	f8a7 2b56 	strh.w	r2, [r7, #2902]	; 0xb56
 80024d0:	4619      	mov	r1, r3
 80024d2:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80024d6:	f6a3 326c 	subw	r2, r3, #2924	; 0xb6c
 80024da:	008b      	lsls	r3, r1, #2
 80024dc:	4413      	add	r3, r2
 80024de:	f607 3264 	addw	r2, r7, #2916	; 0xb64
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	601a      	str	r2, [r3, #0]

						  l2_val += l1_val / WINDOW(M);
 80024e6:	f607 3364 	addw	r3, r7, #2916	; 0xb64
 80024ea:	ed93 7a00 	vldr	s14, [r3]
 80024ee:	ed5f 6a9a 	vldr	s13, [pc, #-616]	; 8002288 <main+0x3e8>
 80024f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024f6:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 80024fa:	ed93 7a00 	vldr	s14, [r3]
 80024fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002502:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8002506:	edc3 7a00 	vstr	s15, [r3]
						  if (i_l1 > WINDOW(M)) {
 800250a:	f8b7 3b56 	ldrh.w	r3, [r7, #2902]	; 0xb56
 800250e:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8002512:	d313      	bcc.n	800253c <main+0x69c>
							  l2_val -= l1[0] / WINDOW(M);
 8002514:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8002518:	f6a3 336c 	subw	r3, r3, #2924	; 0xb6c
 800251c:	ed93 7a00 	vldr	s14, [r3]
 8002520:	ed5f 6aa7 	vldr	s13, [pc, #-668]	; 8002288 <main+0x3e8>
 8002524:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002528:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800252c:	ed93 7a00 	vldr	s14, [r3]
 8002530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002534:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8002538:	edc3 7a00 	vstr	s15, [r3]
						  }

						  if (i_l1 > M + 1) {
 800253c:	f8b7 3b56 	ldrh.w	r3, [r7, #2902]	; 0xb56
 8002540:	2b97      	cmp	r3, #151	; 0x97
 8002542:	f240 80b0 	bls.w	80026a6 <main+0x806>
							  theta = 0.25 * l2_val;
 8002546:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002556:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 800255a:	edc3 7a00 	vstr	s15, [r3]
							  th_val = BETA*l2_val + theta;
 800255e:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	f7fe f8c6 	bl	80006f4 <__aeabi_f2d>
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	4b7e      	ldr	r3, [pc, #504]	; (8002768 <main+0x8c8>)
 800256e:	f7fd fe33 	bl	80001d8 <__aeabi_dmul>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4614      	mov	r4, r2
 8002578:	461d      	mov	r5, r3
 800257a:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	f7fe f8b8 	bl	80006f4 <__aeabi_f2d>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4620      	mov	r0, r4
 800258a:	4629      	mov	r1, r5
 800258c:	f7fd ff54 	bl	8000438 <__adddf3>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	f7fe f904 	bl	80007a4 <__aeabi_d2f>
 800259c:	4603      	mov	r3, r0
 800259e:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 80025a2:	6013      	str	r3, [r2, #0]

							  prev_aoi = aoi;
 80025a4:	f897 3b55 	ldrb.w	r3, [r7, #2901]	; 0xb55
 80025a8:	f887 3b23 	strb.w	r3, [r7, #2851]	; 0xb23
							  aoi = l1_val >= th_val ? 1 : 0;
 80025ac:	f607 3364 	addw	r3, r7, #2916	; 0xb64
 80025b0:	ed93 7a00 	vldr	s14, [r3]
 80025b4:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c4:	bfac      	ite	ge
 80025c6:	2301      	movge	r3, #1
 80025c8:	2300      	movlt	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f887 3b55 	strb.w	r3, [r7, #2901]	; 0xb55

							  if (aoi - prev_aoi == 1) {
 80025d0:	f897 2b55 	ldrb.w	r2, [r7, #2901]	; 0xb55
 80025d4:	f897 3b23 	ldrb.w	r3, [r7, #2851]	; 0xb23
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d104      	bne.n	80025e8 <main+0x748>
								  i_onset = i_h;
 80025de:	f8b7 3b5a 	ldrh.w	r3, [r7, #2906]	; 0xb5a
 80025e2:	f8a7 3b52 	strh.w	r3, [r7, #2898]	; 0xb52
 80025e6:	e05e      	b.n	80026a6 <main+0x806>
							  } else if (aoi - prev_aoi == -1) {
 80025e8:	f897 2b55 	ldrb.w	r2, [r7, #2901]	; 0xb55
 80025ec:	f897 3b23 	ldrb.w	r3, [r7, #2851]	; 0xb23
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d156      	bne.n	80026a6 <main+0x806>
								  i_offset = i_h;
 80025f8:	f8b7 3b5a 	ldrh.w	r3, [r7, #2906]	; 0xb5a
 80025fc:	f8a7 3b20 	strh.w	r3, [r7, #2848]	; 0xb20
								  i_cand_max = max_index(h, i_onset, i_offset);
 8002600:	f8b7 2b20 	ldrh.w	r2, [r7, #2848]	; 0xb20
 8002604:	f8b7 1b52 	ldrh.w	r1, [r7, #2898]	; 0xb52
 8002608:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fa91 	bl	8002b34 <max_index>
 8002612:	4603      	mov	r3, r0
 8002614:	f8a7 3b1e 	strh.w	r3, [r7, #2846]	; 0xb1e

								  if (i_curr_max == 0) {
 8002618:	f8b7 3b50 	ldrh.w	r3, [r7, #2896]	; 0xb50
 800261c:	2b00      	cmp	r3, #0
 800261e:	d104      	bne.n	800262a <main+0x78a>
									  i_curr_max = i_cand_max;
 8002620:	f8b7 3b1e 	ldrh.w	r3, [r7, #2846]	; 0xb1e
 8002624:	f8a7 3b50 	strh.w	r3, [r7, #2896]	; 0xb50
 8002628:	e03d      	b.n	80026a6 <main+0x806>
								  } else {
									  if (i_cand_max - i_curr_max < MIN_RR_DIST) {
 800262a:	f8b7 2b1e 	ldrh.w	r2, [r7, #2846]	; 0xb1e
 800262e:	f8b7 3b50 	ldrh.w	r3, [r7, #2896]	; 0xb50
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b61      	cmp	r3, #97	; 0x61
 8002636:	dc16      	bgt.n	8002666 <main+0x7c6>
										  if (h[i_cand_max] > h[i_curr_max]) {
 8002638:	f8b7 2b1e 	ldrh.w	r2, [r7, #2846]	; 0xb1e
 800263c:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8002640:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 8002644:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002648:	f8b7 1b50 	ldrh.w	r1, [r7, #2896]	; 0xb50
 800264c:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8002650:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 8002654:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002658:	429a      	cmp	r2, r3
 800265a:	d924      	bls.n	80026a6 <main+0x806>
											  i_curr_max = i_cand_max;
 800265c:	f8b7 3b1e 	ldrh.w	r3, [r7, #2846]	; 0xb1e
 8002660:	f8a7 3b50 	strh.w	r3, [r7, #2896]	; 0xb50
 8002664:	e01f      	b.n	80026a6 <main+0x806>
										  }
									  } else {
										  r_peak_detected_flag = 1;
 8002666:	4b41      	ldr	r3, [pc, #260]	; (800276c <main+0x8cc>)
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
										  i_prev_max = i_curr_max;
 800266c:	f8b7 3b50 	ldrh.w	r3, [r7, #2896]	; 0xb50
 8002670:	f8a7 3b4e 	strh.w	r3, [r7, #2894]	; 0xb4e
										  i_curr_max = i_cand_max;
 8002674:	f8b7 3b1e 	ldrh.w	r3, [r7, #2846]	; 0xb1e
 8002678:	f8a7 3b50 	strh.w	r3, [r7, #2896]	; 0xb50
										  rr = i_curr_max - i_prev_max;
 800267c:	f8b7 2b50 	ldrh.w	r2, [r7, #2896]	; 0xb50
 8002680:	f8b7 3b4e 	ldrh.w	r3, [r7, #2894]	; 0xb4e
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f8a7 3b1c 	strh.w	r3, [r7, #2844]	; 0xb1c
										  bpm = 60.0 * FS / (float) rr;
 800268a:	f8b7 3b1c 	ldrh.w	r3, [r7, #2844]	; 0xb1c
 800268e:	ee07 3a90 	vmov	s15, r3
 8002692:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002696:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002770 <main+0x8d0>
 800269a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800269e:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 80026a2:	edc3 7a00 	vstr	s15, [r3]
								  }
							  }
						  }
					  }
				  }
				  if (r_peak_detected_flag) {
 80026a6:	4b31      	ldr	r3, [pc, #196]	; (800276c <main+0x8cc>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d038      	beq.n	8002720 <main+0x880>
					  r_peak_detected_flag = 0;
 80026ae:	4b2f      	ldr	r3, [pc, #188]	; (800276c <main+0x8cc>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]

					  HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_SET);
 80026b4:	2201      	movs	r2, #1
 80026b6:	2120      	movs	r1, #32
 80026b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026bc:	f002 f8d6 	bl	800486c <HAL_GPIO_WritePin>
					  led_counter++;
 80026c0:	f897 3b47 	ldrb.w	r3, [r7, #2887]	; 0xb47
 80026c4:	3301      	adds	r3, #1
 80026c6:	f887 3b47 	strb.w	r3, [r7, #2887]	; 0xb47

					  npf_snprintf(msg, 20, "%hi,%hu\r\n", h_hat_val, rounded(bpm));
 80026ca:	f9b7 4b44 	ldrsh.w	r4, [r7, #2884]	; 0xb44
 80026ce:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 80026d2:	ed93 0a00 	vldr	s0, [r3]
 80026d6:	f000 fa5f 	bl	8002b98 <rounded>
 80026da:	4603      	mov	r3, r0
 80026dc:	f607 3008 	addw	r0, r7, #2824	; 0xb08
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	4623      	mov	r3, r4
 80026e4:	4a23      	ldr	r2, [pc, #140]	; (8002774 <main+0x8d4>)
 80026e6:	2114      	movs	r1, #20
 80026e8:	f7ff fb96 	bl	8001e18 <npf_snprintf>
					  huart2.Instance->CR3 |= USART_CR3_DMAT;
 80026ec:	4b22      	ldr	r3, [pc, #136]	; (8002778 <main+0x8d8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	4b21      	ldr	r3, [pc, #132]	; (8002778 <main+0x8d8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026fa:	609a      	str	r2, [r3, #8]
					  HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg, (uint32_t)&huart2.Instance->TDR, strlen(msg));
 80026fc:	f607 3408 	addw	r4, r7, #2824	; 0xb08
 8002700:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <main+0x8d8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	3328      	adds	r3, #40	; 0x28
 8002706:	461d      	mov	r5, r3
 8002708:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fd5b 	bl	80001c8 <strlen>
 8002712:	4603      	mov	r3, r0
 8002714:	462a      	mov	r2, r5
 8002716:	4621      	mov	r1, r4
 8002718:	4818      	ldr	r0, [pc, #96]	; (800277c <main+0x8dc>)
 800271a:	f001 fd85 	bl	8004228 <HAL_DMA_Start_IT>
 800271e:	e420      	b.n	8001f62 <main+0xc2>
				  } else {
					  npf_snprintf(msg, 20, "%hi\r\n", h_hat_val);
 8002720:	f9b7 3b44 	ldrsh.w	r3, [r7, #2884]	; 0xb44
 8002724:	f607 3008 	addw	r0, r7, #2824	; 0xb08
 8002728:	4a15      	ldr	r2, [pc, #84]	; (8002780 <main+0x8e0>)
 800272a:	2114      	movs	r1, #20
 800272c:	f7ff fb74 	bl	8001e18 <npf_snprintf>
					  huart2.Instance->CR3 |= USART_CR3_DMAT;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <main+0x8d8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <main+0x8d8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800273e:	609a      	str	r2, [r3, #8]
					  HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg, (uint32_t)&huart2.Instance->TDR, strlen(msg));
 8002740:	f607 3408 	addw	r4, r7, #2824	; 0xb08
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <main+0x8d8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3328      	adds	r3, #40	; 0x28
 800274a:	461d      	mov	r5, r3
 800274c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd fd39 	bl	80001c8 <strlen>
 8002756:	4603      	mov	r3, r0
 8002758:	462a      	mov	r2, r5
 800275a:	4621      	mov	r1, r4
 800275c:	4807      	ldr	r0, [pc, #28]	; (800277c <main+0x8dc>)
 800275e:	f001 fd63 	bl	8004228 <HAL_DMA_Start_IT>
	  if (fs_elapsed_flag) {
 8002762:	f7ff bbfe 	b.w	8001f62 <main+0xc2>
 8002766:	bf00      	nop
 8002768:	40040000 	.word	0x40040000
 800276c:	200001ed 	.word	0x200001ed
 8002770:	46a8c000 	.word	0x46a8c000
 8002774:	08006da0 	.word	0x08006da0
 8002778:	20000120 	.word	0x20000120
 800277c:	200001a8 	.word	0x200001a8
 8002780:	08006dac 	.word	0x08006dac

08002784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b096      	sub	sp, #88	; 0x58
 8002788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800278a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800278e:	2228      	movs	r2, #40	; 0x28
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f004 faea 	bl	8006d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027a8:	463b      	mov	r3, r7
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	611a      	str	r2, [r3, #16]
 80027b6:	615a      	str	r2, [r3, #20]
 80027b8:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027ba:	2302      	movs	r3, #2
 80027bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027be:	2301      	movs	r3, #1
 80027c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027c2:	2310      	movs	r3, #16
 80027c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027c6:	2302      	movs	r3, #2
 80027c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027ca:	2300      	movs	r3, #0
 80027cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80027ce:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80027d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027d8:	4618      	mov	r0, r3
 80027da:	f002 f85f 	bl	800489c <HAL_RCC_OscConfig>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80027e4:	f000 fa44 	bl	8002c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e8:	230f      	movs	r3, #15
 80027ea:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027ec:	2302      	movs	r3, #2
 80027ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027f0:	2300      	movs	r3, #0
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027fa:	2300      	movs	r3, #0
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027fe:	f107 031c 	add.w	r3, r7, #28
 8002802:	2102      	movs	r1, #2
 8002804:	4618      	mov	r0, r3
 8002806:	f003 f887 	bl	8005918 <HAL_RCC_ClockConfig>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002810:	f000 fa2e 	bl	8002c70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800281c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800281e:	463b      	mov	r3, r7
 8002820:	4618      	mov	r0, r3
 8002822:	f003 faaf 	bl	8005d84 <HAL_RCCEx_PeriphCLKConfig>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800282c:	f000 fa20 	bl	8002c70 <Error_Handler>
  }
}
 8002830:	bf00      	nop
 8002832:	3758      	adds	r7, #88	; 0x58
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800283e:	f107 031c 	add.w	r3, r7, #28
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
 8002858:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800285a:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <MX_ADC1_Init+0xdc>)
 800285c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002860:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002862:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <MX_ADC1_Init+0xdc>)
 8002864:	2200      	movs	r2, #0
 8002866:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002868:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <MX_ADC1_Init+0xdc>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800286e:	4b29      	ldr	r3, [pc, #164]	; (8002914 <MX_ADC1_Init+0xdc>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <MX_ADC1_Init+0xdc>)
 8002876:	2201      	movs	r2, #1
 8002878:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <MX_ADC1_Init+0xdc>)
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <MX_ADC1_Init+0xdc>)
 8002884:	2200      	movs	r2, #0
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002888:	4b22      	ldr	r3, [pc, #136]	; (8002914 <MX_ADC1_Init+0xdc>)
 800288a:	2201      	movs	r2, #1
 800288c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800288e:	4b21      	ldr	r3, [pc, #132]	; (8002914 <MX_ADC1_Init+0xdc>)
 8002890:	2200      	movs	r2, #0
 8002892:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <MX_ADC1_Init+0xdc>)
 8002896:	2201      	movs	r2, #1
 8002898:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800289a:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <MX_ADC1_Init+0xdc>)
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028a2:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <MX_ADC1_Init+0xdc>)
 80028a4:	2204      	movs	r2, #4
 80028a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <MX_ADC1_Init+0xdc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <MX_ADC1_Init+0xdc>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028b4:	4817      	ldr	r0, [pc, #92]	; (8002914 <MX_ADC1_Init+0xdc>)
 80028b6:	f000 fbeb 	bl	8003090 <HAL_ADC_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80028c0:	f000 f9d6 	bl	8002c70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4619      	mov	r1, r3
 80028ce:	4811      	ldr	r0, [pc, #68]	; (8002914 <MX_ADC1_Init+0xdc>)
 80028d0:	f001 f9c2 	bl	8003c58 <HAL_ADCEx_MultiModeConfigChannel>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80028da:	f000 f9c9 	bl	8002c70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80028de:	2301      	movs	r3, #1
 80028e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028e2:	2301      	movs	r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4806      	ldr	r0, [pc, #24]	; (8002914 <MX_ADC1_Init+0xdc>)
 80028fc:	f000 feec 	bl	80036d8 <HAL_ADC_ConfigChannel>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8002906:	f000 f9b3 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800290a:	bf00      	nop
 800290c:	3728      	adds	r7, #40	; 0x28
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000040 	.word	0x20000040

08002918 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002928:	4b15      	ldr	r3, [pc, #84]	; (8002980 <MX_TIM6_Init+0x68>)
 800292a:	4a16      	ldr	r2, [pc, #88]	; (8002984 <MX_TIM6_Init+0x6c>)
 800292c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 421;
 800292e:	4b14      	ldr	r3, [pc, #80]	; (8002980 <MX_TIM6_Init+0x68>)
 8002930:	f240 12a5 	movw	r2, #421	; 0x1a5
 8002934:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <MX_TIM6_Init+0x68>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 422;
 800293c:	4b10      	ldr	r3, [pc, #64]	; (8002980 <MX_TIM6_Init+0x68>)
 800293e:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8002942:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002944:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <MX_TIM6_Init+0x68>)
 8002946:	2200      	movs	r2, #0
 8002948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800294a:	480d      	ldr	r0, [pc, #52]	; (8002980 <MX_TIM6_Init+0x68>)
 800294c:	f003 fb50 	bl	8005ff0 <HAL_TIM_Base_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002956:	f000 f98b 	bl	8002c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	4619      	mov	r1, r3
 8002966:	4806      	ldr	r0, [pc, #24]	; (8002980 <MX_TIM6_Init+0x68>)
 8002968:	f003 fdb6 	bl	80064d8 <HAL_TIMEx_MasterConfigSynchronization>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002972:	f000 f97d 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200000d4 	.word	0x200000d4
 8002984:	40001000 	.word	0x40001000

08002988 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800298c:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 800298e:	4a15      	ldr	r2, [pc, #84]	; (80029e4 <MX_USART2_UART_Init+0x5c>)
 8002990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 8002994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029ae:	220c      	movs	r2, #12
 80029b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029ca:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_USART2_UART_Init+0x58>)
 80029cc:	f003 fe10 	bl	80065f0 <HAL_UART_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80029d6:	f000 f94b 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000120 	.word	0x20000120
 80029e4:	40004400 	.word	0x40004400

080029e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <MX_DMA_Init+0x48>)
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <MX_DMA_Init+0x48>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6153      	str	r3, [r2, #20]
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <MX_DMA_Init+0x48>)
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	200b      	movs	r0, #11
 8002a0c:	f001 fb8f 	bl	800412e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a10:	200b      	movs	r0, #11
 8002a12:	f001 fba8 	bl	8004166 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2100      	movs	r1, #0
 8002a1a:	2011      	movs	r0, #17
 8002a1c:	f001 fb87 	bl	800412e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002a20:	2011      	movs	r0, #17
 8002a22:	f001 fba0 	bl	8004166 <HAL_NVIC_EnableIRQ>

}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000

08002a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	60da      	str	r2, [r3, #12]
 8002a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4a:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	4a36      	ldr	r2, [pc, #216]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002a50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a54:	6153      	str	r3, [r2, #20]
 8002a56:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a62:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	4a30      	ldr	r2, [pc, #192]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002a68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a6c:	6153      	str	r3, [r2, #20]
 8002a6e:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	4a2a      	ldr	r2, [pc, #168]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a84:	6153      	str	r3, [r2, #20]
 8002a86:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a92:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	4a24      	ldr	r2, [pc, #144]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a9c:	6153      	str	r3, [r2, #20]
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab4:	6153      	str	r3, [r2, #20]
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <MX_GPIO_Init+0xf4>)
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2120      	movs	r1, #32
 8002ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aca:	f001 fecf 	bl	800486c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ad4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4811      	ldr	r0, [pc, #68]	; (8002b2c <MX_GPIO_Init+0xf8>)
 8002ae6:	f001 fd37 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_Led_Pin */
  GPIO_InitStruct.Pin = Green_Led_Pin;
 8002aea:	2320      	movs	r3, #32
 8002aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	2300      	movs	r3, #0
 8002af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Green_Led_GPIO_Port, &GPIO_InitStruct);
 8002afa:	f107 0314 	add.w	r3, r7, #20
 8002afe:	4619      	mov	r1, r3
 8002b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b04:	f001 fd28 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD8232_LOD_Pin */
  GPIO_InitStruct.Pin = AD8232_LOD_Pin;
 8002b08:	2304      	movs	r3, #4
 8002b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AD8232_LOD_GPIO_Port, &GPIO_InitStruct);
 8002b14:	f107 0314 	add.w	r3, r7, #20
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4805      	ldr	r0, [pc, #20]	; (8002b30 <MX_GPIO_Init+0xfc>)
 8002b1c:	f001 fd1c 	bl	8004558 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b20:	bf00      	nop
 8002b22:	3728      	adds	r7, #40	; 0x28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	48000800 	.word	0x48000800
 8002b30:	48000c00 	.word	0x48000c00

08002b34 <max_index>:

/* USER CODE BEGIN 4 */
uint16_t max_index(uint16_t arr[], uint16_t start_idx, uint16_t end_idx) {
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
 8002b40:	4613      	mov	r3, r2
 8002b42:	803b      	strh	r3, [r7, #0]

    uint16_t max_value = arr[start_idx];
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	81fb      	strh	r3, [r7, #14]
    uint16_t max_index = start_idx;
 8002b50:	887b      	ldrh	r3, [r7, #2]
 8002b52:	81bb      	strh	r3, [r7, #12]

    for (uint16_t i = start_idx + 1; i <= end_idx; i++) {
 8002b54:	887b      	ldrh	r3, [r7, #2]
 8002b56:	3301      	adds	r3, #1
 8002b58:	817b      	strh	r3, [r7, #10]
 8002b5a:	e012      	b.n	8002b82 <max_index+0x4e>
        if (arr[i] > max_value) {
 8002b5c:	897b      	ldrh	r3, [r7, #10]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	89fa      	ldrh	r2, [r7, #14]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d207      	bcs.n	8002b7c <max_index+0x48>
            max_value = arr[i];
 8002b6c:	897b      	ldrh	r3, [r7, #10]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	81fb      	strh	r3, [r7, #14]
            max_index = i;
 8002b78:	897b      	ldrh	r3, [r7, #10]
 8002b7a:	81bb      	strh	r3, [r7, #12]
    for (uint16_t i = start_idx + 1; i <= end_idx; i++) {
 8002b7c:	897b      	ldrh	r3, [r7, #10]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	817b      	strh	r3, [r7, #10]
 8002b82:	897a      	ldrh	r2, [r7, #10]
 8002b84:	883b      	ldrh	r3, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d9e8      	bls.n	8002b5c <max_index+0x28>
        }
    }

    return max_index;
 8002b8a:	89bb      	ldrh	r3, [r7, #12]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <rounded>:
uint8_t rounded(float num) {
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (num < 0.0f) {
 8002ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bae:	d501      	bpl.n	8002bb4 <rounded+0x1c>
		return 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e02a      	b.n	8002c0a <rounded+0x72>
	} else if (num > 255.0f) {
 8002bb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bb8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002c18 <rounded+0x80>
 8002bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	dd01      	ble.n	8002bca <rounded+0x32>
		return 255;
 8002bc6:	23ff      	movs	r3, #255	; 0xff
 8002bc8:	e01f      	b.n	8002c0a <rounded+0x72>
	} else {
		uint8_t int_part = (uint8_t) num;
 8002bca:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd2:	edc7 7a00 	vstr	s15, [r7]
 8002bd6:	783b      	ldrb	r3, [r7, #0]
 8002bd8:	73fb      	strb	r3, [r7, #15]
		float frac_part = num - int_part;
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	ee07 3a90 	vmov	s15, r3
 8002be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bec:	edc7 7a02 	vstr	s15, [r7, #8]

		if (frac_part >= 0.5f) {
 8002bf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bf4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c00:	db02      	blt.n	8002c08 <rounded+0x70>
			int_part++;
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	3301      	adds	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
		}
		return int_part;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	437f0000 	.word	0x437f0000

08002c1c <DMATransferComplete>:

void DMATransferComplete(DMA_HandleTypeDef *hdma) {
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  // Disable UART DMA mode
  huart2.Instance->CR3 &= ~USART_CR3_DMAT;
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <DMATransferComplete+0x24>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <DMATransferComplete+0x24>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c32:	609a      	str	r2, [r3, #8]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	20000120 	.word	0x20000120

08002c44 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a05      	ldr	r2, [pc, #20]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d102      	bne.n	8002c5c <HAL_TIM_PeriodElapsedCallback+0x18>
		fs_elapsed_flag = 1;
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
	}
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40001000 	.word	0x40001000
 8002c6c:	200001ec 	.word	0x200001ec

08002c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c74:	b672      	cpsid	i
}
 8002c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <Error_Handler+0x8>
	...

08002c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c82:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <HAL_MspInit+0x44>)
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	4a0e      	ldr	r2, [pc, #56]	; (8002cc0 <HAL_MspInit+0x44>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6193      	str	r3, [r2, #24]
 8002c8e:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <HAL_MspInit+0x44>)
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_MspInit+0x44>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <HAL_MspInit+0x44>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	61d3      	str	r3, [r2, #28]
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_MspInit+0x44>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002cb2:	2007      	movs	r0, #7
 8002cb4:	f001 fa30 	bl	8004118 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ce4:	d14c      	bne.n	8002d80 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002ce6:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <HAL_ADC_MspInit+0xc4>)
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	4a27      	ldr	r2, [pc, #156]	; (8002d88 <HAL_ADC_MspInit+0xc4>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	6153      	str	r3, [r2, #20]
 8002cf2:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_ADC_MspInit+0xc4>)
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfe:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <HAL_ADC_MspInit+0xc4>)
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	4a21      	ldr	r2, [pc, #132]	; (8002d88 <HAL_ADC_MspInit+0xc4>)
 8002d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d08:	6153      	str	r3, [r2, #20]
 8002d0a:	4b1f      	ldr	r3, [pc, #124]	; (8002d88 <HAL_ADC_MspInit+0xc4>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d16:	2301      	movs	r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d22:	f107 0314 	add.w	r3, r7, #20
 8002d26:	4619      	mov	r1, r3
 8002d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d2c:	f001 fc14 	bl	8004558 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002d30:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <HAL_ADC_MspInit+0xc8>)
 8002d32:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <HAL_ADC_MspInit+0xcc>)
 8002d34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_ADC_MspInit+0xc8>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d3c:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <HAL_ADC_MspInit+0xc8>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_ADC_MspInit+0xc8>)
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d48:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_ADC_MspInit+0xc8>)
 8002d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <HAL_ADC_MspInit+0xc8>)
 8002d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_ADC_MspInit+0xc8>)
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_ADC_MspInit+0xc8>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d64:	4809      	ldr	r0, [pc, #36]	; (8002d8c <HAL_ADC_MspInit+0xc8>)
 8002d66:	f001 fa18 	bl	800419a <HAL_DMA_Init>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8002d70:	f7ff ff7e 	bl	8002c70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <HAL_ADC_MspInit+0xc8>)
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <HAL_ADC_MspInit+0xc8>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d80:	bf00      	nop
 8002d82:	3728      	adds	r7, #40	; 0x28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	20000090 	.word	0x20000090
 8002d90:	40020008 	.word	0x40020008

08002d94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <HAL_TIM_Base_MspInit+0x44>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d113      	bne.n	8002dce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <HAL_TIM_Base_MspInit+0x48>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <HAL_TIM_Base_MspInit+0x48>)
 8002dac:	f043 0310 	orr.w	r3, r3, #16
 8002db0:	61d3      	str	r3, [r2, #28]
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <HAL_TIM_Base_MspInit+0x48>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	2036      	movs	r0, #54	; 0x36
 8002dc4:	f001 f9b3 	bl	800412e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8002dc8:	2036      	movs	r0, #54	; 0x36
 8002dca:	f001 f9cc 	bl	8004166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40001000 	.word	0x40001000
 8002ddc:	40021000 	.word	0x40021000

08002de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a2b      	ldr	r2, [pc, #172]	; (8002eac <HAL_UART_MspInit+0xcc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d14f      	bne.n	8002ea2 <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e02:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <HAL_UART_MspInit+0xd0>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	4a2a      	ldr	r2, [pc, #168]	; (8002eb0 <HAL_UART_MspInit+0xd0>)
 8002e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0c:	61d3      	str	r3, [r2, #28]
 8002e0e:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <HAL_UART_MspInit+0xd0>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_UART_MspInit+0xd0>)
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	4a24      	ldr	r2, [pc, #144]	; (8002eb0 <HAL_UART_MspInit+0xd0>)
 8002e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e24:	6153      	str	r3, [r2, #20]
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_UART_MspInit+0xd0>)
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002e32:	f248 0304 	movw	r3, #32772	; 0x8004
 8002e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e40:	2303      	movs	r3, #3
 8002e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e44:	2307      	movs	r3, #7
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e52:	f001 fb81 	bl	8004558 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002e56:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <HAL_UART_MspInit+0xd4>)
 8002e58:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <HAL_UART_MspInit+0xd8>)
 8002e5a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e5c:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_UART_MspInit+0xd4>)
 8002e5e:	2210      	movs	r2, #16
 8002e60:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e62:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <HAL_UART_MspInit+0xd4>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e68:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_UART_MspInit+0xd4>)
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <HAL_UART_MspInit+0xd4>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <HAL_UART_MspInit+0xd4>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <HAL_UART_MspInit+0xd4>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <HAL_UART_MspInit+0xd4>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e86:	480b      	ldr	r0, [pc, #44]	; (8002eb4 <HAL_UART_MspInit+0xd4>)
 8002e88:	f001 f987 	bl	800419a <HAL_DMA_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8002e92:	f7ff feed 	bl	8002c70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a06      	ldr	r2, [pc, #24]	; (8002eb4 <HAL_UART_MspInit+0xd4>)
 8002e9a:	671a      	str	r2, [r3, #112]	; 0x70
 8002e9c:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <HAL_UART_MspInit+0xd4>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ea2:	bf00      	nop
 8002ea4:	3728      	adds	r7, #40	; 0x28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40004400 	.word	0x40004400
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	200001a8 	.word	0x200001a8
 8002eb8:	40020080 	.word	0x40020080

08002ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ec0:	e7fe      	b.n	8002ec0 <NMI_Handler+0x4>

08002ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec6:	e7fe      	b.n	8002ec6 <HardFault_Handler+0x4>

08002ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ecc:	e7fe      	b.n	8002ecc <MemManage_Handler+0x4>

08002ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed2:	e7fe      	b.n	8002ed2 <BusFault_Handler+0x4>

08002ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed8:	e7fe      	b.n	8002ed8 <UsageFault_Handler+0x4>

08002eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f08:	f000 f8a2 	bl	8003050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f14:	4802      	ldr	r0, [pc, #8]	; (8002f20 <DMA1_Channel1_IRQHandler+0x10>)
 8002f16:	f001 f9e6 	bl	80042e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000090 	.word	0x20000090

08002f24 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <DMA1_Channel7_IRQHandler+0x10>)
 8002f2a:	f001 f9dc 	bl	80042e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	200001a8 	.word	0x200001a8

08002f38 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <TIM6_DAC1_IRQHandler+0x10>)
 8002f3e:	f003 f90b 	bl	8006158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200000d4 	.word	0x200000d4

08002f4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <SystemInit+0x20>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f56:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <SystemInit+0x20>)
 8002f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fa8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f74:	f7ff ffea 	bl	8002f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f78:	480c      	ldr	r0, [pc, #48]	; (8002fac <LoopForever+0x6>)
  ldr r1, =_edata
 8002f7a:	490d      	ldr	r1, [pc, #52]	; (8002fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f7c:	4a0d      	ldr	r2, [pc, #52]	; (8002fb4 <LoopForever+0xe>)
  movs r3, #0
 8002f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f80:	e002      	b.n	8002f88 <LoopCopyDataInit>

08002f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f86:	3304      	adds	r3, #4

08002f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f8c:	d3f9      	bcc.n	8002f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f90:	4c0a      	ldr	r4, [pc, #40]	; (8002fbc <LoopForever+0x16>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f94:	e001      	b.n	8002f9a <LoopFillZerobss>

08002f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f98:	3204      	adds	r2, #4

08002f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f9c:	d3fb      	bcc.n	8002f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f9e:	f003 fec1 	bl	8006d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fa2:	f7fe ff7d 	bl	8001ea0 <main>

08002fa6 <LoopForever>:

LoopForever:
    b LoopForever
 8002fa6:	e7fe      	b.n	8002fa6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fa8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002fb4:	08006dfc 	.word	0x08006dfc
  ldr r2, =_sbss
 8002fb8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002fbc:	200001f4 	.word	0x200001f4

08002fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fc0:	e7fe      	b.n	8002fc0 <ADC1_2_IRQHandler>
	...

08002fc4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <HAL_Init+0x28>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a07      	ldr	r2, [pc, #28]	; (8002fec <HAL_Init+0x28>)
 8002fce:	f043 0310 	orr.w	r3, r3, #16
 8002fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	f001 f89f 	bl	8004118 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f000 f808 	bl	8002ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fe0:	f7ff fe4c 	bl	8002c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40022000 	.word	0x40022000

08002ff0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_InitTick+0x54>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <HAL_InitTick+0x58>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4619      	mov	r1, r3
 8003002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003006:	fbb3 f3f1 	udiv	r3, r3, r1
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	4618      	mov	r0, r3
 8003010:	f001 f8b7 	bl	8004182 <HAL_SYSTICK_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e00e      	b.n	800303c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b0f      	cmp	r3, #15
 8003022:	d80a      	bhi.n	800303a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003024:	2200      	movs	r2, #0
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	f001 f87f 	bl	800412e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003030:	4a06      	ldr	r2, [pc, #24]	; (800304c <HAL_InitTick+0x5c>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	e000      	b.n	800303c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000018 	.word	0x20000018
 8003048:	20000020 	.word	0x20000020
 800304c:	2000001c 	.word	0x2000001c

08003050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_IncTick+0x20>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_IncTick+0x24>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4413      	add	r3, r2
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <HAL_IncTick+0x24>)
 8003062:	6013      	str	r3, [r2, #0]
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000020 	.word	0x20000020
 8003074:	200001f0 	.word	0x200001f0

08003078 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return uwTick;  
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <HAL_GetTick+0x14>)
 800307e:	681b      	ldr	r3, [r3, #0]
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	200001f0 	.word	0x200001f0

08003090 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b09a      	sub	sp, #104	; 0x68
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e172      	b.n	8003396 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d176      	bne.n	80031b0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d152      	bne.n	8003170 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff fded 	bl	8002cc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d13b      	bne.n	8003170 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fed7 	bl	8003eac <ADC_Disable>
 80030fe:	4603      	mov	r3, r0
 8003100:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	d12f      	bne.n	8003170 <HAL_ADC_Init+0xe0>
 8003110:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003114:	2b00      	cmp	r3, #0
 8003116:	d12b      	bne.n	8003170 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003120:	f023 0302 	bic.w	r3, r3, #2
 8003124:	f043 0202 	orr.w	r2, r3, #2
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800313a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800314a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800314c:	4b94      	ldr	r3, [pc, #592]	; (80033a0 <HAL_ADC_Init+0x310>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a94      	ldr	r2, [pc, #592]	; (80033a4 <HAL_ADC_Init+0x314>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	0c9a      	lsrs	r2, r3, #18
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003162:	e002      	b.n	800316a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	3b01      	subs	r3, #1
 8003168:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f9      	bne.n	8003164 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800318c:	d110      	bne.n	80031b0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f023 0312 	bic.w	r3, r3, #18
 8003196:	f043 0210 	orr.w	r2, r3, #16
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f043 0201 	orr.w	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f040 80df 	bne.w	800337c <HAL_ADC_Init+0x2ec>
 80031be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f040 80da 	bne.w	800337c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 80d2 	bne.w	800337c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031e0:	f043 0202 	orr.w	r2, r3, #2
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031e8:	4b6f      	ldr	r3, [pc, #444]	; (80033a8 <HAL_ADC_Init+0x318>)
 80031ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f4:	d102      	bne.n	80031fc <HAL_ADC_Init+0x16c>
 80031f6:	4b6d      	ldr	r3, [pc, #436]	; (80033ac <HAL_ADC_Init+0x31c>)
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e002      	b.n	8003202 <HAL_ADC_Init+0x172>
 80031fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003200:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d108      	bne.n	8003222 <HAL_ADC_Init+0x192>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_ADC_Init+0x192>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_ADC_Init+0x194>
 8003222:	2300      	movs	r3, #0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d11c      	bne.n	8003262 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003228:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800322a:	2b00      	cmp	r3, #0
 800322c:	d010      	beq.n	8003250 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d107      	bne.n	800324a <HAL_ADC_Init+0x1ba>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_ADC_Init+0x1ba>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_ADC_Init+0x1bc>
 800324a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800324c:	2b00      	cmp	r3, #0
 800324e:	d108      	bne.n	8003262 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	431a      	orrs	r2, r3
 800325e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003260:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	7e5b      	ldrb	r3, [r3, #25]
 8003266:	035b      	lsls	r3, r3, #13
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800326c:	2a01      	cmp	r2, #1
 800326e:	d002      	beq.n	8003276 <HAL_ADC_Init+0x1e6>
 8003270:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003274:	e000      	b.n	8003278 <HAL_ADC_Init+0x1e8>
 8003276:	2200      	movs	r2, #0
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4313      	orrs	r3, r2
 8003286:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003288:	4313      	orrs	r3, r2
 800328a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d11b      	bne.n	80032ce <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7e5b      	ldrb	r3, [r3, #25]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	3b01      	subs	r3, #1
 80032a4:	045a      	lsls	r2, r3, #17
 80032a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ae:	663b      	str	r3, [r7, #96]	; 0x60
 80032b0:	e00d      	b.n	80032ce <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f043 0201 	orr.w	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d007      	beq.n	80032e6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	4313      	orrs	r3, r2
 80032e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032e2:	4313      	orrs	r3, r2
 80032e4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d114      	bne.n	800331e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003302:	f023 0302 	bic.w	r3, r3, #2
 8003306:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	7e1b      	ldrb	r3, [r3, #24]
 800330c:	039a      	lsls	r2, r3, #14
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4313      	orrs	r3, r2
 8003318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800331a:	4313      	orrs	r3, r2
 800331c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_ADC_Init+0x320>)
 8003326:	4013      	ands	r3, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800332e:	430b      	orrs	r3, r1
 8003330:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d10c      	bne.n	8003354 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	f023 010f 	bic.w	r1, r3, #15
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	1e5a      	subs	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
 8003352:	e007      	b.n	8003364 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 020f 	bic.w	r2, r2, #15
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f023 0303 	bic.w	r3, r3, #3
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
 800337a:	e00a      	b.n	8003392 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	f023 0312 	bic.w	r3, r3, #18
 8003384:	f043 0210 	orr.w	r2, r3, #16
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800338c:	2301      	movs	r3, #1
 800338e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003392:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003396:	4618      	mov	r0, r3
 8003398:	3768      	adds	r7, #104	; 0x68
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000018 	.word	0x20000018
 80033a4:	431bde83 	.word	0x431bde83
 80033a8:	50000300 	.word	0x50000300
 80033ac:	50000100 	.word	0x50000100
 80033b0:	fff0c007 	.word	0xfff0c007

080033b4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f040 809c 	bne.w	8003508 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_ADC_Start+0x2a>
 80033da:	2302      	movs	r3, #2
 80033dc:	e097      	b.n	800350e <HAL_ADC_Start+0x15a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fcfc 	bl	8003de4 <ADC_Enable>
 80033ec:	4603      	mov	r3, r0
 80033ee:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 8083 	bne.w	80034fe <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800340c:	4b42      	ldr	r3, [pc, #264]	; (8003518 <HAL_ADC_Start+0x164>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <HAL_ADC_Start+0x6e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003420:	d115      	bne.n	800344e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d027      	beq.n	800348c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003444:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800344c:	e01e      	b.n	800348c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003462:	d004      	beq.n	800346e <HAL_ADC_Start+0xba>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2c      	ldr	r2, [pc, #176]	; (800351c <HAL_ADC_Start+0x168>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10e      	bne.n	800348c <HAL_ADC_Start+0xd8>
 800346e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003484:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003498:	d106      	bne.n	80034a8 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f023 0206 	bic.w	r2, r3, #6
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
 80034a6:	e002      	b.n	80034ae <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	221c      	movs	r2, #28
 80034bc:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80034be:	4b16      	ldr	r3, [pc, #88]	; (8003518 <HAL_ADC_Start+0x164>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d010      	beq.n	80034ec <HAL_ADC_Start+0x138>
 80034ca:	4b13      	ldr	r3, [pc, #76]	; (8003518 <HAL_ADC_Start+0x164>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d00a      	beq.n	80034ec <HAL_ADC_Start+0x138>
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_ADC_Start+0x164>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	2b09      	cmp	r3, #9
 80034e0:	d004      	beq.n	80034ec <HAL_ADC_Start+0x138>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ea:	d10f      	bne.n	800350c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0204 	orr.w	r2, r2, #4
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	e006      	b.n	800350c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003506:	e001      	b.n	800350c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003508:	2302      	movs	r3, #2
 800350a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	50000300 	.word	0x50000300
 800351c:	50000100 	.word	0x50000100

08003520 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800352a:	2300      	movs	r3, #0
 800352c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	2b08      	cmp	r3, #8
 8003534:	d102      	bne.n	800353c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003536:	2308      	movs	r3, #8
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e02e      	b.n	800359a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800353c:	4b5e      	ldr	r3, [pc, #376]	; (80036b8 <HAL_ADC_PollForConversion+0x198>)
 800353e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	2b00      	cmp	r3, #0
 800354a:	d112      	bne.n	8003572 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d11d      	bne.n	8003596 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f043 0220 	orr.w	r2, r3, #32
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e09d      	b.n	80036ae <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e08b      	b.n	80036ae <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003596:	230c      	movs	r3, #12
 8003598:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800359a:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_ADC_PollForConversion+0x198>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <HAL_ADC_PollForConversion+0x90>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ae:	d104      	bne.n	80035ba <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	e003      	b.n	80035c2 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80035ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80035c2:	f7ff fd59 	bl	8003078 <HAL_GetTick>
 80035c6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80035c8:	e021      	b.n	800360e <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d01d      	beq.n	800360e <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <HAL_ADC_PollForConversion+0xc8>
 80035d8:	f7ff fd4e 	bl	8003078 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d212      	bcs.n	800360e <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f043 0204 	orr.w	r2, r3, #4
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e04f      	b.n	80036ae <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0d6      	beq.n	80035ca <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003632:	2b00      	cmp	r3, #0
 8003634:	d131      	bne.n	800369a <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800363c:	2b00      	cmp	r3, #0
 800363e:	d12c      	bne.n	800369a <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b08      	cmp	r3, #8
 800364c:	d125      	bne.n	800369a <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d112      	bne.n	8003682 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d112      	bne.n	800369a <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
 8003680:	e00b      	b.n	800369a <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f043 0201 	orr.w	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d103      	bne.n	80036ac <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	50000300 	.word	0x50000300

080036bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036d8:	b480      	push	{r7}
 80036da:	b09b      	sub	sp, #108	; 0x6c
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x22>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e2a4      	b.n	8003c44 <HAL_ADC_ConfigChannel+0x56c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	f040 8288 	bne.w	8003c22 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b04      	cmp	r3, #4
 8003718:	d81c      	bhi.n	8003754 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	461a      	mov	r2, r3
 800372e:	231f      	movs	r3, #31
 8003730:	4093      	lsls	r3, r2
 8003732:	43db      	mvns	r3, r3
 8003734:	4019      	ands	r1, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fa00 f203 	lsl.w	r2, r0, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	631a      	str	r2, [r3, #48]	; 0x30
 8003752:	e063      	b.n	800381c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b09      	cmp	r3, #9
 800375a:	d81e      	bhi.n	800379a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	3b1e      	subs	r3, #30
 8003770:	221f      	movs	r2, #31
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	4019      	ands	r1, r3
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	3b1e      	subs	r3, #30
 800378c:	fa00 f203 	lsl.w	r2, r0, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	635a      	str	r2, [r3, #52]	; 0x34
 8003798:	e040      	b.n	800381c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b0e      	cmp	r3, #14
 80037a0:	d81e      	bhi.n	80037e0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4413      	add	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	3b3c      	subs	r3, #60	; 0x3c
 80037b6:	221f      	movs	r2, #31
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	4019      	ands	r1, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	4413      	add	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	3b3c      	subs	r3, #60	; 0x3c
 80037d2:	fa00 f203 	lsl.w	r2, r0, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
 80037de:	e01d      	b.n	800381c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4413      	add	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	3b5a      	subs	r3, #90	; 0x5a
 80037f4:	221f      	movs	r2, #31
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	4019      	ands	r1, r3
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4413      	add	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	3b5a      	subs	r3, #90	; 0x5a
 8003810:	fa00 f203 	lsl.w	r2, r0, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b00      	cmp	r3, #0
 8003828:	f040 80e5 	bne.w	80039f6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b09      	cmp	r3, #9
 8003832:	d91c      	bls.n	800386e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6999      	ldr	r1, [r3, #24]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	4413      	add	r3, r2
 8003844:	3b1e      	subs	r3, #30
 8003846:	2207      	movs	r2, #7
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	4019      	ands	r1, r3
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	6898      	ldr	r0, [r3, #8]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4613      	mov	r3, r2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4413      	add	r3, r2
 800385e:	3b1e      	subs	r3, #30
 8003860:	fa00 f203 	lsl.w	r2, r0, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	619a      	str	r2, [r3, #24]
 800386c:	e019      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6959      	ldr	r1, [r3, #20]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4413      	add	r3, r2
 800387e:	2207      	movs	r2, #7
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	4019      	ands	r1, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	6898      	ldr	r0, [r3, #8]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	4413      	add	r3, r2
 8003896:	fa00 f203 	lsl.w	r2, r0, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	08db      	lsrs	r3, r3, #3
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	3b01      	subs	r3, #1
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d84f      	bhi.n	8003964 <HAL_ADC_ConfigChannel+0x28c>
 80038c4:	a201      	add	r2, pc, #4	; (adr r2, 80038cc <HAL_ADC_ConfigChannel+0x1f4>)
 80038c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ca:	bf00      	nop
 80038cc:	080038dd 	.word	0x080038dd
 80038d0:	080038ff 	.word	0x080038ff
 80038d4:	08003921 	.word	0x08003921
 80038d8:	08003943 	.word	0x08003943
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038e2:	4b94      	ldr	r3, [pc, #592]	; (8003b34 <HAL_ADC_ConfigChannel+0x45c>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	0691      	lsls	r1, r2, #26
 80038ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038ee:	430a      	orrs	r2, r1
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80038fa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80038fc:	e07e      	b.n	80039fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003904:	4b8b      	ldr	r3, [pc, #556]	; (8003b34 <HAL_ADC_ConfigChannel+0x45c>)
 8003906:	4013      	ands	r3, r2
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	0691      	lsls	r1, r2, #26
 800390e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003910:	430a      	orrs	r2, r1
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800391c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800391e:	e06d      	b.n	80039fc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003926:	4b83      	ldr	r3, [pc, #524]	; (8003b34 <HAL_ADC_ConfigChannel+0x45c>)
 8003928:	4013      	ands	r3, r2
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	0691      	lsls	r1, r2, #26
 8003930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003932:	430a      	orrs	r2, r1
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800393e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003940:	e05c      	b.n	80039fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003948:	4b7a      	ldr	r3, [pc, #488]	; (8003b34 <HAL_ADC_ConfigChannel+0x45c>)
 800394a:	4013      	ands	r3, r2
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	0691      	lsls	r1, r2, #26
 8003952:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003954:	430a      	orrs	r2, r1
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003960:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003962:	e04b      	b.n	80039fc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	069b      	lsls	r3, r3, #26
 8003974:	429a      	cmp	r2, r3
 8003976:	d107      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003986:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800398e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	069b      	lsls	r3, r3, #26
 8003998:	429a      	cmp	r2, r3
 800399a:	d107      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039aa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	069b      	lsls	r3, r3, #26
 80039bc:	429a      	cmp	r2, r3
 80039be:	d107      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039ce:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	069b      	lsls	r3, r3, #26
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d10a      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039f2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80039f4:	e001      	b.n	80039fa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80039f6:	bf00      	nop
 80039f8:	e000      	b.n	80039fc <HAL_ADC_ConfigChannel+0x324>
      break;
 80039fa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d108      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x344>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x344>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x346>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f040 810a 	bne.w	8003c38 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d00f      	beq.n	8003a4c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	400a      	ands	r2, r1
 8003a46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003a4a:	e049      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b09      	cmp	r3, #9
 8003a6c:	d91c      	bls.n	8003aa8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6999      	ldr	r1, [r3, #24]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3b1b      	subs	r3, #27
 8003a80:	2207      	movs	r2, #7
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	4019      	ands	r1, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6898      	ldr	r0, [r3, #8]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	3b1b      	subs	r3, #27
 8003a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	619a      	str	r2, [r3, #24]
 8003aa6:	e01b      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6959      	ldr	r1, [r3, #20]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	4413      	add	r3, r2
 8003aba:	2207      	movs	r2, #7
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	4019      	ands	r1, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	6898      	ldr	r0, [r3, #8]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	4613      	mov	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4413      	add	r3, r2
 8003ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ae0:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <HAL_ADC_ConfigChannel+0x460>)
 8003ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d105      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d015      	beq.n	8003b24 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003afc:	2b11      	cmp	r3, #17
 8003afe:	d105      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00b      	beq.n	8003b24 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003b10:	2b12      	cmp	r3, #18
 8003b12:	f040 8091 	bne.w	8003c38 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f040 808a 	bne.w	8003c38 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b2c:	d108      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x468>
 8003b2e:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <HAL_ADC_ConfigChannel+0x464>)
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	e008      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x46e>
 8003b34:	83fff000 	.word	0x83fff000
 8003b38:	50000300 	.word	0x50000300
 8003b3c:	50000100 	.word	0x50000100
 8003b40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b44:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d108      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x48e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x48e>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x490>
 8003b66:	2300      	movs	r3, #0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d150      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003b6c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d010      	beq.n	8003b94 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d107      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x4b6>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x4b6>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x4b8>
 8003b8e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d13c      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d11d      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x500>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ba4:	d118      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003bb2:	4b27      	ldr	r3, [pc, #156]	; (8003c50 <HAL_ADC_ConfigChannel+0x578>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <HAL_ADC_ConfigChannel+0x57c>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	0c9a      	lsrs	r2, r3, #18
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003bc8:	e002      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f9      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003bd6:	e02e      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b11      	cmp	r3, #17
 8003bde:	d10b      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x520>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be8:	d106      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003bf6:	e01e      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b12      	cmp	r3, #18
 8003bfe:	d11a      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c0a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003c0c:	e013      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f043 0220 	orr.w	r2, r3, #32
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003c20:	e00a      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f043 0220 	orr.w	r2, r3, #32
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003c34:	e000      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003c36:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003c40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	376c      	adds	r7, #108	; 0x6c
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	20000018 	.word	0x20000018
 8003c54:	431bde83 	.word	0x431bde83

08003c58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b099      	sub	sp, #100	; 0x64
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c70:	d102      	bne.n	8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003c72:	4b5a      	ldr	r3, [pc, #360]	; (8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	e002      	b.n	8003c7e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8003c78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c7c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0a2      	b.n	8003dce <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e09b      	b.n	8003dce <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d17f      	bne.n	8003dac <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d179      	bne.n	8003dac <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cb8:	4b49      	ldr	r3, [pc, #292]	; (8003de0 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8003cba:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d040      	beq.n	8003d46 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	6859      	ldr	r1, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cd6:	035b      	lsls	r3, r3, #13
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cde:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d108      	bne.n	8003d00 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003d00:	2300      	movs	r3, #0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d15c      	bne.n	8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d107      	bne.n	8003d22 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8003d22:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d14b      	bne.n	8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003d28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d30:	f023 030f 	bic.w	r3, r3, #15
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	6811      	ldr	r1, [r2, #0]
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	6892      	ldr	r2, [r2, #8]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d42:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d44:	e03c      	b.n	8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d50:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d108      	bne.n	8003d72 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d123      	bne.n	8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d107      	bne.n	8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003d94:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d112      	bne.n	8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003da2:	f023 030f 	bic.w	r3, r3, #15
 8003da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003da8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003daa:	e009      	b.n	8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f043 0220 	orr.w	r2, r3, #32
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003dbe:	e000      	b.n	8003dc2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dc0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003dca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3764      	adds	r7, #100	; 0x64
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	50000100 	.word	0x50000100
 8003de0:	50000300 	.word	0x50000300

08003de4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d108      	bne.n	8003e10 <ADC_Enable+0x2c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <ADC_Enable+0x2c>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <ADC_Enable+0x2e>
 8003e10:	2300      	movs	r3, #0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d143      	bne.n	8003e9e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <ADC_Enable+0xc4>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00d      	beq.n	8003e40 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	f043 0210 	orr.w	r2, r3, #16
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e34:	f043 0201 	orr.w	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e02f      	b.n	8003ea0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003e50:	f7ff f912 	bl	8003078 <HAL_GetTick>
 8003e54:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e56:	e01b      	b.n	8003e90 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e58:	f7ff f90e 	bl	8003078 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d914      	bls.n	8003e90 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d00d      	beq.n	8003e90 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	f043 0210 	orr.w	r2, r3, #16
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e84:	f043 0201 	orr.w	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e007      	b.n	8003ea0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d1dc      	bne.n	8003e58 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	8000003f 	.word	0x8000003f

08003eac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d108      	bne.n	8003ed8 <ADC_Disable+0x2c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <ADC_Disable+0x2c>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <ADC_Disable+0x2e>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d047      	beq.n	8003f6e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 030d 	and.w	r3, r3, #13
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d10f      	bne.n	8003f0c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0202 	orr.w	r2, r2, #2
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2203      	movs	r2, #3
 8003f02:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003f04:	f7ff f8b8 	bl	8003078 <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003f0a:	e029      	b.n	8003f60 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	f043 0210 	orr.w	r2, r3, #16
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	f043 0201 	orr.w	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e023      	b.n	8003f70 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f28:	f7ff f8a6 	bl	8003078 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d914      	bls.n	8003f60 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d10d      	bne.n	8003f60 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	f043 0210 	orr.w	r2, r3, #16
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f54:	f043 0201 	orr.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e007      	b.n	8003f70 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d0dc      	beq.n	8003f28 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <__NVIC_SetPriorityGrouping+0x44>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f94:	4013      	ands	r3, r2
 8003f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003faa:	4a04      	ldr	r2, [pc, #16]	; (8003fbc <__NVIC_SetPriorityGrouping+0x44>)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	60d3      	str	r3, [r2, #12]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	0a1b      	lsrs	r3, r3, #8
 8003fca:	f003 0307 	and.w	r3, r3, #7
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	e000ed00 	.word	0xe000ed00

08003fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	db0b      	blt.n	8004006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	f003 021f 	and.w	r2, r3, #31
 8003ff4:	4907      	ldr	r1, [pc, #28]	; (8004014 <__NVIC_EnableIRQ+0x38>)
 8003ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8004002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	e000e100 	.word	0xe000e100

08004018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	6039      	str	r1, [r7, #0]
 8004022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004028:	2b00      	cmp	r3, #0
 800402a:	db0a      	blt.n	8004042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	b2da      	uxtb	r2, r3
 8004030:	490c      	ldr	r1, [pc, #48]	; (8004064 <__NVIC_SetPriority+0x4c>)
 8004032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004036:	0112      	lsls	r2, r2, #4
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	440b      	add	r3, r1
 800403c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004040:	e00a      	b.n	8004058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	b2da      	uxtb	r2, r3
 8004046:	4908      	ldr	r1, [pc, #32]	; (8004068 <__NVIC_SetPriority+0x50>)
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	3b04      	subs	r3, #4
 8004050:	0112      	lsls	r2, r2, #4
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	440b      	add	r3, r1
 8004056:	761a      	strb	r2, [r3, #24]
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000e100 	.word	0xe000e100
 8004068:	e000ed00 	.word	0xe000ed00

0800406c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800406c:	b480      	push	{r7}
 800406e:	b089      	sub	sp, #36	; 0x24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f1c3 0307 	rsb	r3, r3, #7
 8004086:	2b04      	cmp	r3, #4
 8004088:	bf28      	it	cs
 800408a:	2304      	movcs	r3, #4
 800408c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	3304      	adds	r3, #4
 8004092:	2b06      	cmp	r3, #6
 8004094:	d902      	bls.n	800409c <NVIC_EncodePriority+0x30>
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	3b03      	subs	r3, #3
 800409a:	e000      	b.n	800409e <NVIC_EncodePriority+0x32>
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a0:	f04f 32ff 	mov.w	r2, #4294967295
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43da      	mvns	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	401a      	ands	r2, r3
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040b4:	f04f 31ff 	mov.w	r1, #4294967295
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	fa01 f303 	lsl.w	r3, r1, r3
 80040be:	43d9      	mvns	r1, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c4:	4313      	orrs	r3, r2
         );
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3724      	adds	r7, #36	; 0x24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3b01      	subs	r3, #1
 80040e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040e4:	d301      	bcc.n	80040ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040e6:	2301      	movs	r3, #1
 80040e8:	e00f      	b.n	800410a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <SysTick_Config+0x40>)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040f2:	210f      	movs	r1, #15
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295
 80040f8:	f7ff ff8e 	bl	8004018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <SysTick_Config+0x40>)
 80040fe:	2200      	movs	r2, #0
 8004100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004102:	4b04      	ldr	r3, [pc, #16]	; (8004114 <SysTick_Config+0x40>)
 8004104:	2207      	movs	r2, #7
 8004106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	e000e010 	.word	0xe000e010

08004118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ff29 	bl	8003f78 <__NVIC_SetPriorityGrouping>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b086      	sub	sp, #24
 8004132:	af00      	add	r7, sp, #0
 8004134:	4603      	mov	r3, r0
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004140:	f7ff ff3e 	bl	8003fc0 <__NVIC_GetPriorityGrouping>
 8004144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	6978      	ldr	r0, [r7, #20]
 800414c:	f7ff ff8e 	bl	800406c <NVIC_EncodePriority>
 8004150:	4602      	mov	r2, r0
 8004152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004156:	4611      	mov	r1, r2
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff ff5d 	bl	8004018 <__NVIC_SetPriority>
}
 800415e:	bf00      	nop
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	4603      	mov	r3, r0
 800416e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff ff31 	bl	8003fdc <__NVIC_EnableIRQ>
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff ffa2 	bl	80040d4 <SysTick_Config>
 8004190:	4603      	mov	r3, r0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e037      	b.n	8004220 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80041ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80041d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f988 	bl	8004518 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}  
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_DMA_Start_IT+0x20>
 8004244:	2302      	movs	r3, #2
 8004246:	e04a      	b.n	80042de <HAL_DMA_Start_IT+0xb6>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004256:	2b01      	cmp	r3, #1
 8004258:	d13a      	bne.n	80042d0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2202      	movs	r2, #2
 800425e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f91c 	bl	80044bc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 020e 	orr.w	r2, r2, #14
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e00f      	b.n	80042be <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 020a 	orr.w	r2, r2, #10
 80042ac:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0204 	bic.w	r2, r2, #4
 80042bc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e005      	b.n	80042dc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
 80042da:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
} 
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	2204      	movs	r2, #4
 8004304:	409a      	lsls	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4013      	ands	r3, r2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d024      	beq.n	8004358 <HAL_DMA_IRQHandler+0x72>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01f      	beq.n	8004358 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d107      	bne.n	8004336 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0204 	bic.w	r2, r2, #4
 8004334:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433e:	2104      	movs	r1, #4
 8004340:	fa01 f202 	lsl.w	r2, r1, r2
 8004344:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d06a      	beq.n	8004424 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004356:	e065      	b.n	8004424 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	2202      	movs	r2, #2
 800435e:	409a      	lsls	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d02c      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xdc>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d027      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10b      	bne.n	8004398 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 020a 	bic.w	r2, r2, #10
 800438e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a0:	2102      	movs	r1, #2
 80043a2:	fa01 f202 	lsl.w	r2, r1, r2
 80043a6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d035      	beq.n	8004424 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80043c0:	e030      	b.n	8004424 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	2208      	movs	r2, #8
 80043c8:	409a      	lsls	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4013      	ands	r3, r2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d028      	beq.n	8004424 <HAL_DMA_IRQHandler+0x13e>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d023      	beq.n	8004424 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 020e 	bic.w	r2, r2, #14
 80043ea:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	2101      	movs	r1, #1
 80043f6:	fa01 f202 	lsl.w	r2, r1, r2
 80043fa:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
    }
  }
}  
 8004422:	e7ff      	b.n	8004424 <HAL_DMA_IRQHandler+0x13e>
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	460b      	mov	r3, r1
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_DMA_RegisterCallback+0x20>
 8004448:	2302      	movs	r3, #2
 800444a:	e031      	b.n	80044b0 <HAL_DMA_RegisterCallback+0x84>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800445a:	2b01      	cmp	r3, #1
 800445c:	d121      	bne.n	80044a2 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 800445e:	7afb      	ldrb	r3, [r7, #11]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d81b      	bhi.n	800449c <HAL_DMA_RegisterCallback+0x70>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <HAL_DMA_RegisterCallback+0x40>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	0800447d 	.word	0x0800447d
 8004470:	08004485 	.word	0x08004485
 8004474:	0800448d 	.word	0x0800448d
 8004478:	08004495 	.word	0x08004495
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	629a      	str	r2, [r3, #40]	; 0x28
           break;
 8004482:	e010      	b.n	80044a6 <HAL_DMA_RegisterCallback+0x7a>
       
     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	62da      	str	r2, [r3, #44]	; 0x2c
           break;         
 800448a:	e00c      	b.n	80044a6 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	631a      	str	r2, [r3, #48]	; 0x30
           break;         
 8004492:	e008      	b.n	80044a6 <HAL_DMA_RegisterCallback+0x7a>
           
     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	635a      	str	r2, [r3, #52]	; 0x34
           break; 
 800449a:	e004      	b.n	80044a6 <HAL_DMA_RegisterCallback+0x7a>
           
     default:
           status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	75fb      	strb	r3, [r7, #23]
           break;                                                            
 80044a0:	e001      	b.n	80044a6 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	371c      	adds	r7, #28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	2101      	movs	r1, #1
 80044d4:	fa01 f202 	lsl.w	r2, r1, r2
 80044d8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b10      	cmp	r3, #16
 80044e8:	d108      	bne.n	80044fc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044fa:	e007      	b.n	800450c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	4b09      	ldr	r3, [pc, #36]	; (800454c <DMA_CalcBaseAndBitshift+0x34>)
 8004528:	4413      	add	r3, r2
 800452a:	4a09      	ldr	r2, [pc, #36]	; (8004550 <DMA_CalcBaseAndBitshift+0x38>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	009a      	lsls	r2, r3, #2
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a06      	ldr	r2, [pc, #24]	; (8004554 <DMA_CalcBaseAndBitshift+0x3c>)
 800453c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	bffdfff8 	.word	0xbffdfff8
 8004550:	cccccccd 	.word	0xcccccccd
 8004554:	40020000 	.word	0x40020000

08004558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004566:	e14e      	b.n	8004806 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	2101      	movs	r1, #1
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	4013      	ands	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8140 	beq.w	8004800 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d005      	beq.n	8004598 <HAL_GPIO_Init+0x40>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d130      	bne.n	80045fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	2203      	movs	r2, #3
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4013      	ands	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045ce:	2201      	movs	r2, #1
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4013      	ands	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	f003 0201 	and.w	r2, r3, #1
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b03      	cmp	r3, #3
 8004604:	d017      	beq.n	8004636 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	2203      	movs	r2, #3
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	43db      	mvns	r3, r3
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4013      	ands	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d123      	bne.n	800468a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	08da      	lsrs	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3208      	adds	r2, #8
 800464a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800464e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	220f      	movs	r2, #15
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43db      	mvns	r3, r3
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4013      	ands	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	08da      	lsrs	r2, r3, #3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3208      	adds	r2, #8
 8004684:	6939      	ldr	r1, [r7, #16]
 8004686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4013      	ands	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 0203 	and.w	r2, r3, #3
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 809a 	beq.w	8004800 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046cc:	4b55      	ldr	r3, [pc, #340]	; (8004824 <HAL_GPIO_Init+0x2cc>)
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	4a54      	ldr	r2, [pc, #336]	; (8004824 <HAL_GPIO_Init+0x2cc>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6193      	str	r3, [r2, #24]
 80046d8:	4b52      	ldr	r3, [pc, #328]	; (8004824 <HAL_GPIO_Init+0x2cc>)
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046e4:	4a50      	ldr	r2, [pc, #320]	; (8004828 <HAL_GPIO_Init+0x2d0>)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	089b      	lsrs	r3, r3, #2
 80046ea:	3302      	adds	r3, #2
 80046ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	220f      	movs	r2, #15
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800470e:	d013      	beq.n	8004738 <HAL_GPIO_Init+0x1e0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a46      	ldr	r2, [pc, #280]	; (800482c <HAL_GPIO_Init+0x2d4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00d      	beq.n	8004734 <HAL_GPIO_Init+0x1dc>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a45      	ldr	r2, [pc, #276]	; (8004830 <HAL_GPIO_Init+0x2d8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <HAL_GPIO_Init+0x1d8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a44      	ldr	r2, [pc, #272]	; (8004834 <HAL_GPIO_Init+0x2dc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <HAL_GPIO_Init+0x1d4>
 8004728:	2303      	movs	r3, #3
 800472a:	e006      	b.n	800473a <HAL_GPIO_Init+0x1e2>
 800472c:	2305      	movs	r3, #5
 800472e:	e004      	b.n	800473a <HAL_GPIO_Init+0x1e2>
 8004730:	2302      	movs	r3, #2
 8004732:	e002      	b.n	800473a <HAL_GPIO_Init+0x1e2>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_GPIO_Init+0x1e2>
 8004738:	2300      	movs	r3, #0
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	f002 0203 	and.w	r2, r2, #3
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	4093      	lsls	r3, r2
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800474a:	4937      	ldr	r1, [pc, #220]	; (8004828 <HAL_GPIO_Init+0x2d0>)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	3302      	adds	r3, #2
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004758:	4b37      	ldr	r3, [pc, #220]	; (8004838 <HAL_GPIO_Init+0x2e0>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	43db      	mvns	r3, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4013      	ands	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800477c:	4a2e      	ldr	r2, [pc, #184]	; (8004838 <HAL_GPIO_Init+0x2e0>)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004782:	4b2d      	ldr	r3, [pc, #180]	; (8004838 <HAL_GPIO_Init+0x2e0>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	43db      	mvns	r3, r3
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4013      	ands	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80047a6:	4a24      	ldr	r2, [pc, #144]	; (8004838 <HAL_GPIO_Init+0x2e0>)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047ac:	4b22      	ldr	r3, [pc, #136]	; (8004838 <HAL_GPIO_Init+0x2e0>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4013      	ands	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80047d0:	4a19      	ldr	r2, [pc, #100]	; (8004838 <HAL_GPIO_Init+0x2e0>)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047d6:	4b18      	ldr	r3, [pc, #96]	; (8004838 <HAL_GPIO_Init+0x2e0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	43db      	mvns	r3, r3
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4013      	ands	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80047fa:	4a0f      	ldr	r2, [pc, #60]	; (8004838 <HAL_GPIO_Init+0x2e0>)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	3301      	adds	r3, #1
 8004804:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	f47f aea9 	bne.w	8004568 <HAL_GPIO_Init+0x10>
  }
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40021000 	.word	0x40021000
 8004828:	40010000 	.word	0x40010000
 800482c:	48000400 	.word	0x48000400
 8004830:	48000800 	.word	0x48000800
 8004834:	48000c00 	.word	0x48000c00
 8004838:	40010400 	.word	0x40010400

0800483c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	887b      	ldrh	r3, [r7, #2]
 800484e:	4013      	ands	r3, r2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
 8004858:	e001      	b.n	800485e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800485e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	807b      	strh	r3, [r7, #2]
 8004878:	4613      	mov	r3, r2
 800487a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800487c:	787b      	ldrb	r3, [r7, #1]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004882:	887a      	ldrh	r2, [r7, #2]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004888:	e002      	b.n	8004890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800488a:	887a      	ldrh	r2, [r7, #2]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048ac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d102      	bne.n	80048c2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	f001 b823 	b.w	8005908 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 817d 	beq.w	8004bd2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80048d8:	4bbc      	ldr	r3, [pc, #752]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 030c 	and.w	r3, r3, #12
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d00c      	beq.n	80048fe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048e4:	4bb9      	ldr	r3, [pc, #740]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 030c 	and.w	r3, r3, #12
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d15c      	bne.n	80049aa <HAL_RCC_OscConfig+0x10e>
 80048f0:	4bb6      	ldr	r3, [pc, #728]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d155      	bne.n	80049aa <HAL_RCC_OscConfig+0x10e>
 80048fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004902:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004906:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800490a:	fa93 f3a3 	rbit	r3, r3
 800490e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004912:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004916:	fab3 f383 	clz	r3, r3
 800491a:	b2db      	uxtb	r3, r3
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b01      	cmp	r3, #1
 8004928:	d102      	bne.n	8004930 <HAL_RCC_OscConfig+0x94>
 800492a:	4ba8      	ldr	r3, [pc, #672]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	e015      	b.n	800495c <HAL_RCC_OscConfig+0xc0>
 8004930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004934:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004938:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800493c:	fa93 f3a3 	rbit	r3, r3
 8004940:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004948:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800494c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004950:	fa93 f3a3 	rbit	r3, r3
 8004954:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004958:	4b9c      	ldr	r3, [pc, #624]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004960:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004964:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004968:	fa92 f2a2 	rbit	r2, r2
 800496c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004970:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004974:	fab2 f282 	clz	r2, r2
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	f042 0220 	orr.w	r2, r2, #32
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	f002 021f 	and.w	r2, r2, #31
 8004984:	2101      	movs	r1, #1
 8004986:	fa01 f202 	lsl.w	r2, r1, r2
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 811f 	beq.w	8004bd0 <HAL_RCC_OscConfig+0x334>
 8004992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004996:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f040 8116 	bne.w	8004bd0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	f000 bfaf 	b.w	8005908 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ba:	d106      	bne.n	80049ca <HAL_RCC_OscConfig+0x12e>
 80049bc:	4b83      	ldr	r3, [pc, #524]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a82      	ldr	r2, [pc, #520]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 80049c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	e036      	b.n	8004a38 <HAL_RCC_OscConfig+0x19c>
 80049ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x158>
 80049da:	4b7c      	ldr	r3, [pc, #496]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a7b      	ldr	r2, [pc, #492]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 80049e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	4b79      	ldr	r3, [pc, #484]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a78      	ldr	r2, [pc, #480]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 80049ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e021      	b.n	8004a38 <HAL_RCC_OscConfig+0x19c>
 80049f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCC_OscConfig+0x184>
 8004a06:	4b71      	ldr	r3, [pc, #452]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a70      	ldr	r2, [pc, #448]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 8004a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	4b6e      	ldr	r3, [pc, #440]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a6d      	ldr	r2, [pc, #436]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCC_OscConfig+0x19c>
 8004a20:	4b6a      	ldr	r3, [pc, #424]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a69      	ldr	r2, [pc, #420]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 8004a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	4b67      	ldr	r3, [pc, #412]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a66      	ldr	r2, [pc, #408]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 8004a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a36:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a38:	4b64      	ldr	r3, [pc, #400]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	f023 020f 	bic.w	r2, r3, #15
 8004a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	495f      	ldr	r1, [pc, #380]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d059      	beq.n	8004b16 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a62:	f7fe fb09 	bl	8003078 <HAL_GetTick>
 8004a66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6a:	e00a      	b.n	8004a82 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a6c:	f7fe fb04 	bl	8003078 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b64      	cmp	r3, #100	; 0x64
 8004a7a:	d902      	bls.n	8004a82 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	f000 bf43 	b.w	8005908 <HAL_RCC_OscConfig+0x106c>
 8004a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a86:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004a8e:	fa93 f3a3 	rbit	r3, r3
 8004a92:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004a96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	fab3 f383 	clz	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d102      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x218>
 8004aae:	4b47      	ldr	r3, [pc, #284]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	e015      	b.n	8004ae0 <HAL_RCC_OscConfig+0x244>
 8004ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ab8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004ac0:	fa93 f3a3 	rbit	r3, r3
 8004ac4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004acc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004ad0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004ad4:	fa93 f3a3 	rbit	r3, r3
 8004ad8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004adc:	4b3b      	ldr	r3, [pc, #236]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ae4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004ae8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004aec:	fa92 f2a2 	rbit	r2, r2
 8004af0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004af4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004af8:	fab2 f282 	clz	r2, r2
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	f042 0220 	orr.w	r2, r2, #32
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	f002 021f 	and.w	r2, r2, #31
 8004b08:	2101      	movs	r1, #1
 8004b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0ab      	beq.n	8004a6c <HAL_RCC_OscConfig+0x1d0>
 8004b14:	e05d      	b.n	8004bd2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b16:	f7fe faaf 	bl	8003078 <HAL_GetTick>
 8004b1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fe faaa 	bl	8003078 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b64      	cmp	r3, #100	; 0x64
 8004b2e:	d902      	bls.n	8004b36 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	f000 bee9 	b.w	8005908 <HAL_RCC_OscConfig+0x106c>
 8004b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b3a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004b42:	fa93 f3a3 	rbit	r3, r3
 8004b46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004b4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4e:	fab3 f383 	clz	r3, r3
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d102      	bne.n	8004b68 <HAL_RCC_OscConfig+0x2cc>
 8004b62:	4b1a      	ldr	r3, [pc, #104]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	e015      	b.n	8004b94 <HAL_RCC_OscConfig+0x2f8>
 8004b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b6c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b70:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004b74:	fa93 f3a3 	rbit	r3, r3
 8004b78:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b80:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004b84:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004b88:	fa93 f3a3 	rbit	r3, r3
 8004b8c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004b90:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <HAL_RCC_OscConfig+0x330>)
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b98:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004b9c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004ba0:	fa92 f2a2 	rbit	r2, r2
 8004ba4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004ba8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004bac:	fab2 f282 	clz	r2, r2
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	f042 0220 	orr.w	r2, r2, #32
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	f002 021f 	and.w	r2, r2, #31
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1ab      	bne.n	8004b20 <HAL_RCC_OscConfig+0x284>
 8004bc8:	e003      	b.n	8004bd2 <HAL_RCC_OscConfig+0x336>
 8004bca:	bf00      	nop
 8004bcc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 817d 	beq.w	8004ee2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004be8:	4ba6      	ldr	r3, [pc, #664]	; (8004e84 <HAL_RCC_OscConfig+0x5e8>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00b      	beq.n	8004c0c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004bf4:	4ba3      	ldr	r3, [pc, #652]	; (8004e84 <HAL_RCC_OscConfig+0x5e8>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 030c 	and.w	r3, r3, #12
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d172      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x44a>
 8004c00:	4ba0      	ldr	r3, [pc, #640]	; (8004e84 <HAL_RCC_OscConfig+0x5e8>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d16c      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x44a>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c12:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004c16:	fa93 f3a3 	rbit	r3, r3
 8004c1a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004c1e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c22:	fab3 f383 	clz	r3, r3
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d102      	bne.n	8004c3c <HAL_RCC_OscConfig+0x3a0>
 8004c36:	4b93      	ldr	r3, [pc, #588]	; (8004e84 <HAL_RCC_OscConfig+0x5e8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	e013      	b.n	8004c64 <HAL_RCC_OscConfig+0x3c8>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c42:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004c46:	fa93 f3a3 	rbit	r3, r3
 8004c4a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004c4e:	2302      	movs	r3, #2
 8004c50:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004c54:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004c58:	fa93 f3a3 	rbit	r3, r3
 8004c5c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004c60:	4b88      	ldr	r3, [pc, #544]	; (8004e84 <HAL_RCC_OscConfig+0x5e8>)
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	2202      	movs	r2, #2
 8004c66:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004c6a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004c6e:	fa92 f2a2 	rbit	r2, r2
 8004c72:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004c76:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004c7a:	fab2 f282 	clz	r2, r2
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	f042 0220 	orr.w	r2, r2, #32
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	f002 021f 	and.w	r2, r2, #31
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCC_OscConfig+0x410>
 8004c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d002      	beq.n	8004cac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f000 be2e 	b.w	8005908 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cac:	4b75      	ldr	r3, [pc, #468]	; (8004e84 <HAL_RCC_OscConfig+0x5e8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	21f8      	movs	r1, #248	; 0xf8
 8004cc2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004cca:	fa91 f1a1 	rbit	r1, r1
 8004cce:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004cd2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004cd6:	fab1 f181 	clz	r1, r1
 8004cda:	b2c9      	uxtb	r1, r1
 8004cdc:	408b      	lsls	r3, r1
 8004cde:	4969      	ldr	r1, [pc, #420]	; (8004e84 <HAL_RCC_OscConfig+0x5e8>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce4:	e0fd      	b.n	8004ee2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 8088 	beq.w	8004e08 <HAL_RCC_OscConfig+0x56c>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004d02:	fa93 f3a3 	rbit	r3, r3
 8004d06:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004d0a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d0e:	fab3 f383 	clz	r3, r3
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	461a      	mov	r2, r3
 8004d20:	2301      	movs	r3, #1
 8004d22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d24:	f7fe f9a8 	bl	8003078 <HAL_GetTick>
 8004d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2c:	e00a      	b.n	8004d44 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d2e:	f7fe f9a3 	bl	8003078 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d902      	bls.n	8004d44 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	f000 bde2 	b.w	8005908 <HAL_RCC_OscConfig+0x106c>
 8004d44:	2302      	movs	r3, #2
 8004d46:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004d4e:	fa93 f3a3 	rbit	r3, r3
 8004d52:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004d56:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5a:	fab3 f383 	clz	r3, r3
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d102      	bne.n	8004d74 <HAL_RCC_OscConfig+0x4d8>
 8004d6e:	4b45      	ldr	r3, [pc, #276]	; (8004e84 <HAL_RCC_OscConfig+0x5e8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	e013      	b.n	8004d9c <HAL_RCC_OscConfig+0x500>
 8004d74:	2302      	movs	r3, #2
 8004d76:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004d7e:	fa93 f3a3 	rbit	r3, r3
 8004d82:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004d86:	2302      	movs	r3, #2
 8004d88:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004d8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004d90:	fa93 f3a3 	rbit	r3, r3
 8004d94:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004d98:	4b3a      	ldr	r3, [pc, #232]	; (8004e84 <HAL_RCC_OscConfig+0x5e8>)
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004da2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004da6:	fa92 f2a2 	rbit	r2, r2
 8004daa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004dae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004db2:	fab2 f282 	clz	r2, r2
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	f042 0220 	orr.w	r2, r2, #32
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	f002 021f 	and.w	r2, r2, #31
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0af      	beq.n	8004d2e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dce:	4b2d      	ldr	r3, [pc, #180]	; (8004e84 <HAL_RCC_OscConfig+0x5e8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	21f8      	movs	r1, #248	; 0xf8
 8004de4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004dec:	fa91 f1a1 	rbit	r1, r1
 8004df0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004df4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004df8:	fab1 f181 	clz	r1, r1
 8004dfc:	b2c9      	uxtb	r1, r1
 8004dfe:	408b      	lsls	r3, r1
 8004e00:	4920      	ldr	r1, [pc, #128]	; (8004e84 <HAL_RCC_OscConfig+0x5e8>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	600b      	str	r3, [r1, #0]
 8004e06:	e06c      	b.n	8004ee2 <HAL_RCC_OscConfig+0x646>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e12:	fa93 f3a3 	rbit	r3, r3
 8004e16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004e1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e1e:	fab3 f383 	clz	r3, r3
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2300      	movs	r3, #0
 8004e32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e34:	f7fe f920 	bl	8003078 <HAL_GetTick>
 8004e38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e3e:	f7fe f91b 	bl	8003078 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d902      	bls.n	8004e54 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	f000 bd5a 	b.w	8005908 <HAL_RCC_OscConfig+0x106c>
 8004e54:	2302      	movs	r3, #2
 8004e56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e5e:	fa93 f3a3 	rbit	r3, r3
 8004e62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e6a:	fab3 f383 	clz	r3, r3
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	095b      	lsrs	r3, r3, #5
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d104      	bne.n	8004e88 <HAL_RCC_OscConfig+0x5ec>
 8004e7e:	4b01      	ldr	r3, [pc, #4]	; (8004e84 <HAL_RCC_OscConfig+0x5e8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	e015      	b.n	8004eb0 <HAL_RCC_OscConfig+0x614>
 8004e84:	40021000 	.word	0x40021000
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e92:	fa93 f3a3 	rbit	r3, r3
 8004e96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ea0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ea4:	fa93 f3a3 	rbit	r3, r3
 8004ea8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004eac:	4bc8      	ldr	r3, [pc, #800]	; (80051d0 <HAL_RCC_OscConfig+0x934>)
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004eb6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004eba:	fa92 f2a2 	rbit	r2, r2
 8004ebe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004ec2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004ec6:	fab2 f282 	clz	r2, r2
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	f042 0220 	orr.w	r2, r2, #32
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	f002 021f 	and.w	r2, r2, #31
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ad      	bne.n	8004e3e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 8110 	beq.w	8005118 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d079      	beq.n	8004ffc <HAL_RCC_OscConfig+0x760>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f12:	fa93 f3a3 	rbit	r3, r3
 8004f16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1e:	fab3 f383 	clz	r3, r3
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	4bab      	ldr	r3, [pc, #684]	; (80051d4 <HAL_RCC_OscConfig+0x938>)
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	2301      	movs	r3, #1
 8004f30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f32:	f7fe f8a1 	bl	8003078 <HAL_GetTick>
 8004f36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f3c:	f7fe f89c 	bl	8003078 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d902      	bls.n	8004f52 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	f000 bcdb 	b.w	8005908 <HAL_RCC_OscConfig+0x106c>
 8004f52:	2302      	movs	r3, #2
 8004f54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f5c:	fa93 f3a3 	rbit	r3, r3
 8004f60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f68:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f74:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	fa93 f2a3 	rbit	r2, r3
 8004f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f90:	2202      	movs	r2, #2
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	fa93 f2a3 	rbit	r2, r3
 8004fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004faa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fac:	4b88      	ldr	r3, [pc, #544]	; (80051d0 <HAL_RCC_OscConfig+0x934>)
 8004fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004fb8:	2102      	movs	r1, #2
 8004fba:	6019      	str	r1, [r3, #0]
 8004fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	fa93 f1a3 	rbit	r1, r3
 8004fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004fd2:	6019      	str	r1, [r3, #0]
  return result;
 8004fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	fab3 f383 	clz	r3, r3
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	2101      	movs	r1, #1
 8004ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0a0      	beq.n	8004f3c <HAL_RCC_OscConfig+0x6a0>
 8004ffa:	e08d      	b.n	8005118 <HAL_RCC_OscConfig+0x87c>
 8004ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005000:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005004:	2201      	movs	r2, #1
 8005006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	fa93 f2a3 	rbit	r2, r3
 8005016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800501a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800501e:	601a      	str	r2, [r3, #0]
  return result;
 8005020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005024:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005028:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800502a:	fab3 f383 	clz	r3, r3
 800502e:	b2db      	uxtb	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	4b68      	ldr	r3, [pc, #416]	; (80051d4 <HAL_RCC_OscConfig+0x938>)
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	461a      	mov	r2, r3
 800503a:	2300      	movs	r3, #0
 800503c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800503e:	f7fe f81b 	bl	8003078 <HAL_GetTick>
 8005042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005046:	e00a      	b.n	800505e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005048:	f7fe f816 	bl	8003078 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d902      	bls.n	800505e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	f000 bc55 	b.w	8005908 <HAL_RCC_OscConfig+0x106c>
 800505e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005062:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005066:	2202      	movs	r2, #2
 8005068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	fa93 f2a3 	rbit	r2, r3
 8005078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005086:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800508a:	2202      	movs	r2, #2
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005092:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	fa93 f2a3 	rbit	r2, r3
 800509c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ae:	2202      	movs	r2, #2
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	fa93 f2a3 	rbit	r2, r3
 80050c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80050c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ca:	4b41      	ldr	r3, [pc, #260]	; (80051d0 <HAL_RCC_OscConfig+0x934>)
 80050cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80050d6:	2102      	movs	r1, #2
 80050d8:	6019      	str	r1, [r3, #0]
 80050da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	fa93 f1a3 	rbit	r1, r3
 80050e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80050f0:	6019      	str	r1, [r3, #0]
  return result;
 80050f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	fab3 f383 	clz	r3, r3
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	2101      	movs	r1, #1
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	4013      	ands	r3, r2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d197      	bne.n	8005048 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 81a1 	beq.w	8005470 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800512e:	2300      	movs	r3, #0
 8005130:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005134:	4b26      	ldr	r3, [pc, #152]	; (80051d0 <HAL_RCC_OscConfig+0x934>)
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d116      	bne.n	800516e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005140:	4b23      	ldr	r3, [pc, #140]	; (80051d0 <HAL_RCC_OscConfig+0x934>)
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	4a22      	ldr	r2, [pc, #136]	; (80051d0 <HAL_RCC_OscConfig+0x934>)
 8005146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800514a:	61d3      	str	r3, [r2, #28]
 800514c:	4b20      	ldr	r3, [pc, #128]	; (80051d0 <HAL_RCC_OscConfig+0x934>)
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005158:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005162:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005166:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800516e:	4b1a      	ldr	r3, [pc, #104]	; (80051d8 <HAL_RCC_OscConfig+0x93c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005176:	2b00      	cmp	r3, #0
 8005178:	d11a      	bne.n	80051b0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800517a:	4b17      	ldr	r3, [pc, #92]	; (80051d8 <HAL_RCC_OscConfig+0x93c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a16      	ldr	r2, [pc, #88]	; (80051d8 <HAL_RCC_OscConfig+0x93c>)
 8005180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005184:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005186:	f7fd ff77 	bl	8003078 <HAL_GetTick>
 800518a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518e:	e009      	b.n	80051a4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005190:	f7fd ff72 	bl	8003078 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b64      	cmp	r3, #100	; 0x64
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e3b1      	b.n	8005908 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <HAL_RCC_OscConfig+0x93c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0ef      	beq.n	8005190 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d10d      	bne.n	80051dc <HAL_RCC_OscConfig+0x940>
 80051c0:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <HAL_RCC_OscConfig+0x934>)
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	4a02      	ldr	r2, [pc, #8]	; (80051d0 <HAL_RCC_OscConfig+0x934>)
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	6213      	str	r3, [r2, #32]
 80051cc:	e03c      	b.n	8005248 <HAL_RCC_OscConfig+0x9ac>
 80051ce:	bf00      	nop
 80051d0:	40021000 	.word	0x40021000
 80051d4:	10908120 	.word	0x10908120
 80051d8:	40007000 	.word	0x40007000
 80051dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10c      	bne.n	8005206 <HAL_RCC_OscConfig+0x96a>
 80051ec:	4bc1      	ldr	r3, [pc, #772]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	4ac0      	ldr	r2, [pc, #768]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	6213      	str	r3, [r2, #32]
 80051f8:	4bbe      	ldr	r3, [pc, #760]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	4abd      	ldr	r2, [pc, #756]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 80051fe:	f023 0304 	bic.w	r3, r3, #4
 8005202:	6213      	str	r3, [r2, #32]
 8005204:	e020      	b.n	8005248 <HAL_RCC_OscConfig+0x9ac>
 8005206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	2b05      	cmp	r3, #5
 8005214:	d10c      	bne.n	8005230 <HAL_RCC_OscConfig+0x994>
 8005216:	4bb7      	ldr	r3, [pc, #732]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	4ab6      	ldr	r2, [pc, #728]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 800521c:	f043 0304 	orr.w	r3, r3, #4
 8005220:	6213      	str	r3, [r2, #32]
 8005222:	4bb4      	ldr	r3, [pc, #720]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	4ab3      	ldr	r2, [pc, #716]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 8005228:	f043 0301 	orr.w	r3, r3, #1
 800522c:	6213      	str	r3, [r2, #32]
 800522e:	e00b      	b.n	8005248 <HAL_RCC_OscConfig+0x9ac>
 8005230:	4bb0      	ldr	r3, [pc, #704]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	4aaf      	ldr	r2, [pc, #700]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	6213      	str	r3, [r2, #32]
 800523c:	4bad      	ldr	r3, [pc, #692]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	4aac      	ldr	r2, [pc, #688]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 8005242:	f023 0304 	bic.w	r3, r3, #4
 8005246:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8081 	beq.w	800535c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800525a:	f7fd ff0d 	bl	8003078 <HAL_GetTick>
 800525e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005262:	e00b      	b.n	800527c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005264:	f7fd ff08 	bl	8003078 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	f241 3288 	movw	r2, #5000	; 0x1388
 8005274:	4293      	cmp	r3, r2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e345      	b.n	8005908 <HAL_RCC_OscConfig+0x106c>
 800527c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005280:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005284:	2202      	movs	r2, #2
 8005286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	fa93 f2a3 	rbit	r2, r3
 8005296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800529a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80052a8:	2202      	movs	r2, #2
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	fa93 f2a3 	rbit	r2, r3
 80052ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80052c2:	601a      	str	r2, [r3, #0]
  return result;
 80052c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80052cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ce:	fab3 f383 	clz	r3, r3
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	095b      	lsrs	r3, r3, #5
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	f043 0302 	orr.w	r3, r3, #2
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d102      	bne.n	80052e8 <HAL_RCC_OscConfig+0xa4c>
 80052e2:	4b84      	ldr	r3, [pc, #528]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	e013      	b.n	8005310 <HAL_RCC_OscConfig+0xa74>
 80052e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80052f0:	2202      	movs	r2, #2
 80052f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	fa93 f2a3 	rbit	r2, r3
 8005302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005306:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	4b79      	ldr	r3, [pc, #484]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005314:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005318:	2102      	movs	r1, #2
 800531a:	6011      	str	r1, [r2, #0]
 800531c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005320:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	fa92 f1a2 	rbit	r1, r2
 800532a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800532e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005332:	6011      	str	r1, [r2, #0]
  return result;
 8005334:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005338:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	fab2 f282 	clz	r2, r2
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	f002 021f 	and.w	r2, r2, #31
 800534e:	2101      	movs	r1, #1
 8005350:	fa01 f202 	lsl.w	r2, r1, r2
 8005354:	4013      	ands	r3, r2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d084      	beq.n	8005264 <HAL_RCC_OscConfig+0x9c8>
 800535a:	e07f      	b.n	800545c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535c:	f7fd fe8c 	bl	8003078 <HAL_GetTick>
 8005360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005364:	e00b      	b.n	800537e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005366:	f7fd fe87 	bl	8003078 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	f241 3288 	movw	r2, #5000	; 0x1388
 8005376:	4293      	cmp	r3, r2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e2c4      	b.n	8005908 <HAL_RCC_OscConfig+0x106c>
 800537e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005382:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005386:	2202      	movs	r2, #2
 8005388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800538e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	fa93 f2a3 	rbit	r2, r3
 8005398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800539c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80053aa:	2202      	movs	r2, #2
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	fa93 f2a3 	rbit	r2, r3
 80053bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80053c4:	601a      	str	r2, [r3, #0]
  return result;
 80053c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80053ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d0:	fab3 f383 	clz	r3, r3
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	f043 0302 	orr.w	r3, r3, #2
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d102      	bne.n	80053ea <HAL_RCC_OscConfig+0xb4e>
 80053e4:	4b43      	ldr	r3, [pc, #268]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	e013      	b.n	8005412 <HAL_RCC_OscConfig+0xb76>
 80053ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80053f2:	2202      	movs	r2, #2
 80053f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	fa93 f2a3 	rbit	r2, r3
 8005404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005408:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	4b39      	ldr	r3, [pc, #228]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005416:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800541a:	2102      	movs	r1, #2
 800541c:	6011      	str	r1, [r2, #0]
 800541e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005422:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	fa92 f1a2 	rbit	r1, r2
 800542c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005430:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005434:	6011      	str	r1, [r2, #0]
  return result;
 8005436:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800543a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	fab2 f282 	clz	r2, r2
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	f002 021f 	and.w	r2, r2, #31
 8005450:	2101      	movs	r1, #1
 8005452:	fa01 f202 	lsl.w	r2, r1, r2
 8005456:	4013      	ands	r3, r2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d184      	bne.n	8005366 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800545c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005460:	2b01      	cmp	r3, #1
 8005462:	d105      	bne.n	8005470 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005464:	4b23      	ldr	r3, [pc, #140]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	4a22      	ldr	r2, [pc, #136]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 800546a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800546e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 8242 	beq.w	8005906 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005482:	4b1c      	ldr	r3, [pc, #112]	; (80054f4 <HAL_RCC_OscConfig+0xc58>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	2b08      	cmp	r3, #8
 800548c:	f000 8213 	beq.w	80058b6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005494:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	2b02      	cmp	r3, #2
 800549e:	f040 8162 	bne.w	8005766 <HAL_RCC_OscConfig+0xeca>
 80054a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80054aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	fa93 f2a3 	rbit	r2, r3
 80054be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80054c6:	601a      	str	r2, [r3, #0]
  return result;
 80054c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054cc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80054d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d2:	fab3 f383 	clz	r3, r3
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	461a      	mov	r2, r3
 80054e4:	2300      	movs	r3, #0
 80054e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e8:	f7fd fdc6 	bl	8003078 <HAL_GetTick>
 80054ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054f0:	e00c      	b.n	800550c <HAL_RCC_OscConfig+0xc70>
 80054f2:	bf00      	nop
 80054f4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054f8:	f7fd fdbe 	bl	8003078 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e1fd      	b.n	8005908 <HAL_RCC_OscConfig+0x106c>
 800550c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005510:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	fa93 f2a3 	rbit	r2, r3
 8005528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005530:	601a      	str	r2, [r3, #0]
  return result;
 8005532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005536:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800553a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800553c:	fab3 f383 	clz	r3, r3
 8005540:	b2db      	uxtb	r3, r3
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	d102      	bne.n	8005556 <HAL_RCC_OscConfig+0xcba>
 8005550:	4bb0      	ldr	r3, [pc, #704]	; (8005814 <HAL_RCC_OscConfig+0xf78>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	e027      	b.n	80055a6 <HAL_RCC_OscConfig+0xd0a>
 8005556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800555a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800555e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005568:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	fa93 f2a3 	rbit	r2, r3
 8005572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005576:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005580:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800558e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	fa93 f2a3 	rbit	r2, r3
 8005598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800559c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	4b9c      	ldr	r3, [pc, #624]	; (8005814 <HAL_RCC_OscConfig+0xf78>)
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055aa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80055ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055b2:	6011      	str	r1, [r2, #0]
 80055b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055b8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	fa92 f1a2 	rbit	r1, r2
 80055c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055c6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80055ca:	6011      	str	r1, [r2, #0]
  return result;
 80055cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055d0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	fab2 f282 	clz	r2, r2
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	f042 0220 	orr.w	r2, r2, #32
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	f002 021f 	and.w	r2, r2, #31
 80055e6:	2101      	movs	r1, #1
 80055e8:	fa01 f202 	lsl.w	r2, r1, r2
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d182      	bne.n	80054f8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055f2:	4b88      	ldr	r3, [pc, #544]	; (8005814 <HAL_RCC_OscConfig+0xf78>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80055fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800560a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	430b      	orrs	r3, r1
 8005614:	497f      	ldr	r1, [pc, #508]	; (8005814 <HAL_RCC_OscConfig+0xf78>)
 8005616:	4313      	orrs	r3, r2
 8005618:	604b      	str	r3, [r1, #4]
 800561a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800561e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005622:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	fa93 f2a3 	rbit	r2, r3
 8005636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800563a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800563e:	601a      	str	r2, [r3, #0]
  return result;
 8005640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005644:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005648:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800564a:	fab3 f383 	clz	r3, r3
 800564e:	b2db      	uxtb	r3, r3
 8005650:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005654:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	461a      	mov	r2, r3
 800565c:	2301      	movs	r3, #1
 800565e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005660:	f7fd fd0a 	bl	8003078 <HAL_GetTick>
 8005664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005668:	e009      	b.n	800567e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800566a:	f7fd fd05 	bl	8003078 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e144      	b.n	8005908 <HAL_RCC_OscConfig+0x106c>
 800567e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005682:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800568a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005690:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	fa93 f2a3 	rbit	r2, r3
 800569a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800569e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80056a2:	601a      	str	r2, [r3, #0]
  return result;
 80056a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80056ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056ae:	fab3 f383 	clz	r3, r3
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	f043 0301 	orr.w	r3, r3, #1
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d102      	bne.n	80056c8 <HAL_RCC_OscConfig+0xe2c>
 80056c2:	4b54      	ldr	r3, [pc, #336]	; (8005814 <HAL_RCC_OscConfig+0xf78>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	e027      	b.n	8005718 <HAL_RCC_OscConfig+0xe7c>
 80056c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056cc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80056d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056da:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	fa93 f2a3 	rbit	r2, r3
 80056e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80056f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005700:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	fa93 f2a3 	rbit	r2, r3
 800570a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800570e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	4b3f      	ldr	r3, [pc, #252]	; (8005814 <HAL_RCC_OscConfig+0xf78>)
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800571c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005720:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005724:	6011      	str	r1, [r2, #0]
 8005726:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800572a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	fa92 f1a2 	rbit	r1, r2
 8005734:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005738:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800573c:	6011      	str	r1, [r2, #0]
  return result;
 800573e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005742:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	fab2 f282 	clz	r2, r2
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	f042 0220 	orr.w	r2, r2, #32
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	f002 021f 	and.w	r2, r2, #31
 8005758:	2101      	movs	r1, #1
 800575a:	fa01 f202 	lsl.w	r2, r1, r2
 800575e:	4013      	ands	r3, r2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d082      	beq.n	800566a <HAL_RCC_OscConfig+0xdce>
 8005764:	e0cf      	b.n	8005906 <HAL_RCC_OscConfig+0x106a>
 8005766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800576a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800576e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005778:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	fa93 f2a3 	rbit	r2, r3
 8005782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005786:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800578a:	601a      	str	r2, [r3, #0]
  return result;
 800578c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005790:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005794:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005796:	fab3 f383 	clz	r3, r3
 800579a:	b2db      	uxtb	r3, r3
 800579c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	461a      	mov	r2, r3
 80057a8:	2300      	movs	r3, #0
 80057aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ac:	f7fd fc64 	bl	8003078 <HAL_GetTick>
 80057b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057b4:	e009      	b.n	80057ca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b6:	f7fd fc5f 	bl	8003078 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e09e      	b.n	8005908 <HAL_RCC_OscConfig+0x106c>
 80057ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80057d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057dc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	fa93 f2a3 	rbit	r2, r3
 80057e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80057ee:	601a      	str	r2, [r3, #0]
  return result;
 80057f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80057f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057fa:	fab3 f383 	clz	r3, r3
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b01      	cmp	r3, #1
 800580c:	d104      	bne.n	8005818 <HAL_RCC_OscConfig+0xf7c>
 800580e:	4b01      	ldr	r3, [pc, #4]	; (8005814 <HAL_RCC_OscConfig+0xf78>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	e029      	b.n	8005868 <HAL_RCC_OscConfig+0xfcc>
 8005814:	40021000 	.word	0x40021000
 8005818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800581c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005820:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800582a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	fa93 f2a3 	rbit	r2, r3
 8005834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005838:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005842:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005846:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005850:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	fa93 f2a3 	rbit	r2, r3
 800585a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800585e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	4b2b      	ldr	r3, [pc, #172]	; (8005914 <HAL_RCC_OscConfig+0x1078>)
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800586c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005870:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005874:	6011      	str	r1, [r2, #0]
 8005876:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800587a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800587e:	6812      	ldr	r2, [r2, #0]
 8005880:	fa92 f1a2 	rbit	r1, r2
 8005884:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005888:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800588c:	6011      	str	r1, [r2, #0]
  return result;
 800588e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005892:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005896:	6812      	ldr	r2, [r2, #0]
 8005898:	fab2 f282 	clz	r2, r2
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	f042 0220 	orr.w	r2, r2, #32
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	f002 021f 	and.w	r2, r2, #31
 80058a8:	2101      	movs	r1, #1
 80058aa:	fa01 f202 	lsl.w	r2, r1, r2
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d180      	bne.n	80057b6 <HAL_RCC_OscConfig+0xf1a>
 80058b4:	e027      	b.n	8005906 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e01e      	b.n	8005908 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <HAL_RCC_OscConfig+0x1078>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80058d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80058d6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80058da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d10b      	bne.n	8005902 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80058ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80058ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80058f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80058fe:	429a      	cmp	r2, r3
 8005900:	d001      	beq.n	8005906 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	40021000 	.word	0x40021000

08005918 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b09e      	sub	sp, #120	; 0x78
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e162      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005930:	4b90      	ldr	r3, [pc, #576]	; (8005b74 <HAL_RCC_ClockConfig+0x25c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d910      	bls.n	8005960 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593e:	4b8d      	ldr	r3, [pc, #564]	; (8005b74 <HAL_RCC_ClockConfig+0x25c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f023 0207 	bic.w	r2, r3, #7
 8005946:	498b      	ldr	r1, [pc, #556]	; (8005b74 <HAL_RCC_ClockConfig+0x25c>)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	4313      	orrs	r3, r2
 800594c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800594e:	4b89      	ldr	r3, [pc, #548]	; (8005b74 <HAL_RCC_ClockConfig+0x25c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d001      	beq.n	8005960 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e14a      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800596c:	4b82      	ldr	r3, [pc, #520]	; (8005b78 <HAL_RCC_ClockConfig+0x260>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	497f      	ldr	r1, [pc, #508]	; (8005b78 <HAL_RCC_ClockConfig+0x260>)
 800597a:	4313      	orrs	r3, r2
 800597c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 80dc 	beq.w	8005b44 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d13c      	bne.n	8005a0e <HAL_RCC_ClockConfig+0xf6>
 8005994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005998:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800599c:	fa93 f3a3 	rbit	r3, r3
 80059a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80059a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a4:	fab3 f383 	clz	r3, r3
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	095b      	lsrs	r3, r3, #5
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d102      	bne.n	80059be <HAL_RCC_ClockConfig+0xa6>
 80059b8:	4b6f      	ldr	r3, [pc, #444]	; (8005b78 <HAL_RCC_ClockConfig+0x260>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	e00f      	b.n	80059de <HAL_RCC_ClockConfig+0xc6>
 80059be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	667b      	str	r3, [r7, #100]	; 0x64
 80059cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059d0:	663b      	str	r3, [r7, #96]	; 0x60
 80059d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059d4:	fa93 f3a3 	rbit	r3, r3
 80059d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059da:	4b67      	ldr	r3, [pc, #412]	; (8005b78 <HAL_RCC_ClockConfig+0x260>)
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80059e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059e6:	fa92 f2a2 	rbit	r2, r2
 80059ea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80059ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059ee:	fab2 f282 	clz	r2, r2
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	f042 0220 	orr.w	r2, r2, #32
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	f002 021f 	and.w	r2, r2, #31
 80059fe:	2101      	movs	r1, #1
 8005a00:	fa01 f202 	lsl.w	r2, r1, r2
 8005a04:	4013      	ands	r3, r2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d17b      	bne.n	8005b02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e0f3      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d13c      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x178>
 8005a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a1a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a1e:	fa93 f3a3 	rbit	r3, r3
 8005a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a26:	fab3 f383 	clz	r3, r3
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	f043 0301 	orr.w	r3, r3, #1
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d102      	bne.n	8005a40 <HAL_RCC_ClockConfig+0x128>
 8005a3a:	4b4f      	ldr	r3, [pc, #316]	; (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	e00f      	b.n	8005a60 <HAL_RCC_ClockConfig+0x148>
 8005a40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a48:	fa93 f3a3 	rbit	r3, r3
 8005a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a52:	643b      	str	r3, [r7, #64]	; 0x40
 8005a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a56:	fa93 f3a3 	rbit	r3, r3
 8005a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a5c:	4b46      	ldr	r3, [pc, #280]	; (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a64:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a68:	fa92 f2a2 	rbit	r2, r2
 8005a6c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a70:	fab2 f282 	clz	r2, r2
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	f042 0220 	orr.w	r2, r2, #32
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	f002 021f 	and.w	r2, r2, #31
 8005a80:	2101      	movs	r1, #1
 8005a82:	fa01 f202 	lsl.w	r2, r1, r2
 8005a86:	4013      	ands	r3, r2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d13a      	bne.n	8005b02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e0b2      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x2de>
 8005a90:	2302      	movs	r3, #2
 8005a92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	fa93 f3a3 	rbit	r3, r3
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a9e:	fab3 f383 	clz	r3, r3
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d102      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x1a0>
 8005ab2:	4b31      	ldr	r3, [pc, #196]	; (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	e00d      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x1bc>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	fa93 f3a3 	rbit	r3, r3
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	623b      	str	r3, [r7, #32]
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	fa93 f3a3 	rbit	r3, r3
 8005ace:	61fb      	str	r3, [r7, #28]
 8005ad0:	4b29      	ldr	r3, [pc, #164]	; (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	61ba      	str	r2, [r7, #24]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	fa92 f2a2 	rbit	r2, r2
 8005ade:	617a      	str	r2, [r7, #20]
  return result;
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	fab2 f282 	clz	r2, r2
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	f042 0220 	orr.w	r2, r2, #32
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	f002 021f 	and.w	r2, r2, #31
 8005af2:	2101      	movs	r1, #1
 8005af4:	fa01 f202 	lsl.w	r2, r1, r2
 8005af8:	4013      	ands	r3, r2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e079      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b02:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f023 0203 	bic.w	r2, r3, #3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	491a      	ldr	r1, [pc, #104]	; (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b14:	f7fd fab0 	bl	8003078 <HAL_GetTick>
 8005b18:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b1a:	e00a      	b.n	8005b32 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b1c:	f7fd faac 	bl	8003078 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e061      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b32:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f003 020c 	and.w	r2, r3, #12
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d1eb      	bne.n	8005b1c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b44:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <HAL_RCC_ClockConfig+0x25c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d214      	bcs.n	8005b7c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b52:	4b08      	ldr	r3, [pc, #32]	; (8005b74 <HAL_RCC_ClockConfig+0x25c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f023 0207 	bic.w	r2, r3, #7
 8005b5a:	4906      	ldr	r1, [pc, #24]	; (8005b74 <HAL_RCC_ClockConfig+0x25c>)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b62:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <HAL_RCC_ClockConfig+0x25c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d005      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e040      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x2de>
 8005b74:	40022000 	.word	0x40022000
 8005b78:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d008      	beq.n	8005b9a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b88:	4b1d      	ldr	r3, [pc, #116]	; (8005c00 <HAL_RCC_ClockConfig+0x2e8>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	491a      	ldr	r1, [pc, #104]	; (8005c00 <HAL_RCC_ClockConfig+0x2e8>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d009      	beq.n	8005bba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ba6:	4b16      	ldr	r3, [pc, #88]	; (8005c00 <HAL_RCC_ClockConfig+0x2e8>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	4912      	ldr	r1, [pc, #72]	; (8005c00 <HAL_RCC_ClockConfig+0x2e8>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005bba:	f000 f829 	bl	8005c10 <HAL_RCC_GetSysClockFreq>
 8005bbe:	4601      	mov	r1, r0
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <HAL_RCC_ClockConfig+0x2e8>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc8:	22f0      	movs	r2, #240	; 0xf0
 8005bca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	fa92 f2a2 	rbit	r2, r2
 8005bd2:	60fa      	str	r2, [r7, #12]
  return result;
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	fab2 f282 	clz	r2, r2
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	40d3      	lsrs	r3, r2
 8005bde:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <HAL_RCC_ClockConfig+0x2ec>)
 8005be0:	5cd3      	ldrb	r3, [r2, r3]
 8005be2:	fa21 f303 	lsr.w	r3, r1, r3
 8005be6:	4a08      	ldr	r2, [pc, #32]	; (8005c08 <HAL_RCC_ClockConfig+0x2f0>)
 8005be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005bea:	4b08      	ldr	r3, [pc, #32]	; (8005c0c <HAL_RCC_ClockConfig+0x2f4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fd f9fe 	bl	8002ff0 <HAL_InitTick>
  
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3778      	adds	r7, #120	; 0x78
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40021000 	.word	0x40021000
 8005c04:	08006db4 	.word	0x08006db4
 8005c08:	20000018 	.word	0x20000018
 8005c0c:	2000001c 	.word	0x2000001c

08005c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b08b      	sub	sp, #44	; 0x2c
 8005c14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	61fb      	str	r3, [r7, #28]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005c2a:	4b29      	ldr	r3, [pc, #164]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f003 030c 	and.w	r3, r3, #12
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d002      	beq.n	8005c40 <HAL_RCC_GetSysClockFreq+0x30>
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d003      	beq.n	8005c46 <HAL_RCC_GetSysClockFreq+0x36>
 8005c3e:	e03c      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c40:	4b24      	ldr	r3, [pc, #144]	; (8005cd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c42:	623b      	str	r3, [r7, #32]
      break;
 8005c44:	e03c      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005c4c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005c50:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	fa92 f2a2 	rbit	r2, r2
 8005c58:	607a      	str	r2, [r7, #4]
  return result;
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	fab2 f282 	clz	r2, r2
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	40d3      	lsrs	r3, r2
 8005c64:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005c66:	5cd3      	ldrb	r3, [r2, r3]
 8005c68:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005c6a:	4b19      	ldr	r3, [pc, #100]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	220f      	movs	r2, #15
 8005c74:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	fa92 f2a2 	rbit	r2, r2
 8005c7c:	60fa      	str	r2, [r7, #12]
  return result;
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	fab2 f282 	clz	r2, r2
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	40d3      	lsrs	r3, r2
 8005c88:	4a14      	ldr	r2, [pc, #80]	; (8005cdc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005c8a:	5cd3      	ldrb	r3, [r2, r3]
 8005c8c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d008      	beq.n	8005caa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005c98:	4a0e      	ldr	r2, [pc, #56]	; (8005cd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca8:	e004      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	4a0c      	ldr	r2, [pc, #48]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	623b      	str	r3, [r7, #32]
      break;
 8005cb8:	e002      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005cba:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005cbc:	623b      	str	r3, [r7, #32]
      break;
 8005cbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	372c      	adds	r7, #44	; 0x2c
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	007a1200 	.word	0x007a1200
 8005cd8:	08006dcc 	.word	0x08006dcc
 8005cdc:	08006ddc 	.word	0x08006ddc
 8005ce0:	003d0900 	.word	0x003d0900

08005ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ce8:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cea:	681b      	ldr	r3, [r3, #0]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	20000018 	.word	0x20000018

08005cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005d02:	f7ff ffef 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 8005d06:	4601      	mov	r1, r0
 8005d08:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d10:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005d14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	fa92 f2a2 	rbit	r2, r2
 8005d1c:	603a      	str	r2, [r7, #0]
  return result;
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	fab2 f282 	clz	r2, r2
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	40d3      	lsrs	r3, r2
 8005d28:	4a04      	ldr	r2, [pc, #16]	; (8005d3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8005d2a:	5cd3      	ldrb	r3, [r2, r3]
 8005d2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	08006dc4 	.word	0x08006dc4

08005d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005d46:	f7ff ffcd 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005d54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005d58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	fa92 f2a2 	rbit	r2, r2
 8005d60:	603a      	str	r2, [r7, #0]
  return result;
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	fab2 f282 	clz	r2, r2
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	40d3      	lsrs	r3, r2
 8005d6c:	4a04      	ldr	r2, [pc, #16]	; (8005d80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005d6e:	5cd3      	ldrb	r3, [r2, r3]
 8005d70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	08006dc4 	.word	0x08006dc4

08005d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b092      	sub	sp, #72	; 0x48
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005d94:	2300      	movs	r3, #0
 8005d96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 80cd 	beq.w	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005da8:	4b8e      	ldr	r3, [pc, #568]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10e      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005db4:	4b8b      	ldr	r3, [pc, #556]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	4a8a      	ldr	r2, [pc, #552]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	61d3      	str	r3, [r2, #28]
 8005dc0:	4b88      	ldr	r3, [pc, #544]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd2:	4b85      	ldr	r3, [pc, #532]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d118      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dde:	4b82      	ldr	r3, [pc, #520]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a81      	ldr	r2, [pc, #516]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dea:	f7fd f945 	bl	8003078 <HAL_GetTick>
 8005dee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df0:	e008      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df2:	f7fd f941 	bl	8003078 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b64      	cmp	r3, #100	; 0x64
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e0ea      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e04:	4b78      	ldr	r3, [pc, #480]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0f0      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e10:	4b74      	ldr	r3, [pc, #464]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e18:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d07d      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d076      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e2e:	4b6d      	ldr	r3, [pc, #436]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e3c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	fa93 f3a3 	rbit	r3, r3
 8005e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e48:	fab3 f383 	clz	r3, r3
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	4b66      	ldr	r3, [pc, #408]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	461a      	mov	r2, r3
 8005e58:	2301      	movs	r3, #1
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e64:	fa93 f3a3 	rbit	r3, r3
 8005e68:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e6c:	fab3 f383 	clz	r3, r3
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	4b5d      	ldr	r3, [pc, #372]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e76:	4413      	add	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e80:	4a58      	ldr	r2, [pc, #352]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e84:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d045      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e90:	f7fd f8f2 	bl	8003078 <HAL_GetTick>
 8005e94:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e96:	e00a      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e98:	f7fd f8ee 	bl	8003078 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e095      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	fa93 f3a3 	rbit	r3, r3
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eba:	2302      	movs	r3, #2
 8005ebc:	623b      	str	r3, [r7, #32]
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	fa93 f3a3 	rbit	r3, r3
 8005ec4:	61fb      	str	r3, [r7, #28]
  return result;
 8005ec6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec8:	fab3 f383 	clz	r3, r3
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	095b      	lsrs	r3, r3, #5
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	f043 0302 	orr.w	r3, r3, #2
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d102      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005edc:	4b41      	ldr	r3, [pc, #260]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	e007      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	fa93 f3a3 	rbit	r3, r3
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	4b3d      	ldr	r3, [pc, #244]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	613a      	str	r2, [r7, #16]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	fa92 f2a2 	rbit	r2, r2
 8005efc:	60fa      	str	r2, [r7, #12]
  return result;
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	fab2 f282 	clz	r2, r2
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	f002 021f 	and.w	r2, r2, #31
 8005f10:	2101      	movs	r1, #1
 8005f12:	fa01 f202 	lsl.w	r2, r1, r2
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0bd      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005f1c:	4b31      	ldr	r3, [pc, #196]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	492e      	ldr	r1, [pc, #184]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d105      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f36:	4b2b      	ldr	r3, [pc, #172]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	4a2a      	ldr	r2, [pc, #168]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f40:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f4e:	4b25      	ldr	r3, [pc, #148]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	f023 0203 	bic.w	r2, r3, #3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	4922      	ldr	r1, [pc, #136]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f6c:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f70:	f023 0210 	bic.w	r2, r3, #16
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	491a      	ldr	r1, [pc, #104]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d008      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f8a:	4b16      	ldr	r3, [pc, #88]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	4913      	ldr	r1, [pc, #76]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d008      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005fa8:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	490b      	ldr	r1, [pc, #44]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d008      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005fc6:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	4904      	ldr	r1, [pc, #16]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3748      	adds	r7, #72	; 0x48
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	40007000 	.word	0x40007000
 8005fec:	10908100 	.word	0x10908100

08005ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e049      	b.n	8006096 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fc febc 	bl	8002d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3304      	adds	r3, #4
 800602c:	4619      	mov	r1, r3
 800602e:	4610      	mov	r0, r2
 8006030:	f000 f9da 	bl	80063e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d001      	beq.n	80060b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e040      	b.n	800613a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0201 	orr.w	r2, r2, #1
 80060ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a1c      	ldr	r2, [pc, #112]	; (8006148 <HAL_TIM_Base_Start_IT+0xa8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00e      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0x58>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e2:	d009      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0x58>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a18      	ldr	r2, [pc, #96]	; (800614c <HAL_TIM_Base_Start_IT+0xac>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d004      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0x58>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a17      	ldr	r2, [pc, #92]	; (8006150 <HAL_TIM_Base_Start_IT+0xb0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d115      	bne.n	8006124 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	4b15      	ldr	r3, [pc, #84]	; (8006154 <HAL_TIM_Base_Start_IT+0xb4>)
 8006100:	4013      	ands	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b06      	cmp	r3, #6
 8006108:	d015      	beq.n	8006136 <HAL_TIM_Base_Start_IT+0x96>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006110:	d011      	beq.n	8006136 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0201 	orr.w	r2, r2, #1
 8006120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006122:	e008      	b.n	8006136 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	e000      	b.n	8006138 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006136:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40012c00 	.word	0x40012c00
 800614c:	40000400 	.word	0x40000400
 8006150:	40014000 	.word	0x40014000
 8006154:	00010007 	.word	0x00010007

08006158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b02      	cmp	r3, #2
 800616c:	d122      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b02      	cmp	r3, #2
 800617a:	d11b      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0202 	mvn.w	r2, #2
 8006184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f905 	bl	80063aa <HAL_TIM_IC_CaptureCallback>
 80061a0:	e005      	b.n	80061ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f8f7 	bl	8006396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f908 	bl	80063be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d122      	bne.n	8006208 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d11b      	bne.n	8006208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0204 	mvn.w	r2, #4
 80061d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2202      	movs	r2, #2
 80061de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f8db 	bl	80063aa <HAL_TIM_IC_CaptureCallback>
 80061f4:	e005      	b.n	8006202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f8cd 	bl	8006396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f8de 	bl	80063be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b08      	cmp	r3, #8
 8006214:	d122      	bne.n	800625c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f003 0308 	and.w	r3, r3, #8
 8006220:	2b08      	cmp	r3, #8
 8006222:	d11b      	bne.n	800625c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0208 	mvn.w	r2, #8
 800622c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2204      	movs	r2, #4
 8006232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f8b1 	bl	80063aa <HAL_TIM_IC_CaptureCallback>
 8006248:	e005      	b.n	8006256 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f8a3 	bl	8006396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f8b4 	bl	80063be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f003 0310 	and.w	r3, r3, #16
 8006266:	2b10      	cmp	r3, #16
 8006268:	d122      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b10      	cmp	r3, #16
 8006276:	d11b      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0210 	mvn.w	r2, #16
 8006280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2208      	movs	r2, #8
 8006286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f887 	bl	80063aa <HAL_TIM_IC_CaptureCallback>
 800629c:	e005      	b.n	80062aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f879 	bl	8006396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f88a 	bl	80063be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d10e      	bne.n	80062dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d107      	bne.n	80062dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0201 	mvn.w	r2, #1
 80062d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7fc fcb4 	bl	8002c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e6:	2b80      	cmp	r3, #128	; 0x80
 80062e8:	d10e      	bne.n	8006308 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f4:	2b80      	cmp	r3, #128	; 0x80
 80062f6:	d107      	bne.n	8006308 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f960 	bl	80065c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006316:	d10e      	bne.n	8006336 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006322:	2b80      	cmp	r3, #128	; 0x80
 8006324:	d107      	bne.n	8006336 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800632e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f953 	bl	80065dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006340:	2b40      	cmp	r3, #64	; 0x40
 8006342:	d10e      	bne.n	8006362 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d107      	bne.n	8006362 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800635a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f838 	bl	80063d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b20      	cmp	r3, #32
 800636e:	d10e      	bne.n	800638e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b20      	cmp	r3, #32
 800637c:	d107      	bne.n	800638e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f06f 0220 	mvn.w	r2, #32
 8006386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f913 	bl	80065b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800638e:	bf00      	nop
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
	...

080063e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a32      	ldr	r2, [pc, #200]	; (80064c4 <TIM_Base_SetConfig+0xdc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d007      	beq.n	8006410 <TIM_Base_SetConfig+0x28>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006406:	d003      	beq.n	8006410 <TIM_Base_SetConfig+0x28>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a2f      	ldr	r2, [pc, #188]	; (80064c8 <TIM_Base_SetConfig+0xe0>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d108      	bne.n	8006422 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a27      	ldr	r2, [pc, #156]	; (80064c4 <TIM_Base_SetConfig+0xdc>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d013      	beq.n	8006452 <TIM_Base_SetConfig+0x6a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006430:	d00f      	beq.n	8006452 <TIM_Base_SetConfig+0x6a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a24      	ldr	r2, [pc, #144]	; (80064c8 <TIM_Base_SetConfig+0xe0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00b      	beq.n	8006452 <TIM_Base_SetConfig+0x6a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a23      	ldr	r2, [pc, #140]	; (80064cc <TIM_Base_SetConfig+0xe4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d007      	beq.n	8006452 <TIM_Base_SetConfig+0x6a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a22      	ldr	r2, [pc, #136]	; (80064d0 <TIM_Base_SetConfig+0xe8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d003      	beq.n	8006452 <TIM_Base_SetConfig+0x6a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a21      	ldr	r2, [pc, #132]	; (80064d4 <TIM_Base_SetConfig+0xec>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d108      	bne.n	8006464 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a0e      	ldr	r2, [pc, #56]	; (80064c4 <TIM_Base_SetConfig+0xdc>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00b      	beq.n	80064a8 <TIM_Base_SetConfig+0xc0>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a0e      	ldr	r2, [pc, #56]	; (80064cc <TIM_Base_SetConfig+0xe4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d007      	beq.n	80064a8 <TIM_Base_SetConfig+0xc0>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a0d      	ldr	r2, [pc, #52]	; (80064d0 <TIM_Base_SetConfig+0xe8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_Base_SetConfig+0xc0>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a0c      	ldr	r2, [pc, #48]	; (80064d4 <TIM_Base_SetConfig+0xec>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d103      	bne.n	80064b0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	691a      	ldr	r2, [r3, #16]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	615a      	str	r2, [r3, #20]
}
 80064b6:	bf00      	nop
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	40012c00 	.word	0x40012c00
 80064c8:	40000400 	.word	0x40000400
 80064cc:	40014000 	.word	0x40014000
 80064d0:	40014400 	.word	0x40014400
 80064d4:	40014800 	.word	0x40014800

080064d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d101      	bne.n	80064f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e054      	b.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a24      	ldr	r2, [pc, #144]	; (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d108      	bne.n	800652c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006520:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00e      	beq.n	800656e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006558:	d009      	beq.n	800656e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a13      	ldr	r2, [pc, #76]	; (80065ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d004      	beq.n	800656e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a11      	ldr	r2, [pc, #68]	; (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d10c      	bne.n	8006588 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	4313      	orrs	r3, r2
 800657e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40012c00 	.word	0x40012c00
 80065ac:	40000400 	.word	0x40000400
 80065b0:	40014000 	.word	0x40014000

080065b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e040      	b.n	8006684 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fc fbe4 	bl	8002de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2224      	movs	r2, #36	; 0x24
 800661c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0201 	bic.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f82c 	bl	800668c <UART_SetConfig>
 8006634:	4603      	mov	r3, r0
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e022      	b.n	8006684 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f956 	bl	80068f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800665a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800666a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f9dd 	bl	8006a3c <UART_CheckIdleState>
 8006682:	4603      	mov	r3, r0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	4b8a      	ldr	r3, [pc, #552]	; (80068e0 <UART_SetConfig+0x254>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	6979      	ldr	r1, [r7, #20]
 80066c0:	430b      	orrs	r3, r1
 80066c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a78      	ldr	r2, [pc, #480]	; (80068e4 <UART_SetConfig+0x258>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d120      	bne.n	800674a <UART_SetConfig+0xbe>
 8006708:	4b77      	ldr	r3, [pc, #476]	; (80068e8 <UART_SetConfig+0x25c>)
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	f003 0303 	and.w	r3, r3, #3
 8006710:	2b03      	cmp	r3, #3
 8006712:	d817      	bhi.n	8006744 <UART_SetConfig+0xb8>
 8006714:	a201      	add	r2, pc, #4	; (adr r2, 800671c <UART_SetConfig+0x90>)
 8006716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671a:	bf00      	nop
 800671c:	0800672d 	.word	0x0800672d
 8006720:	08006739 	.word	0x08006739
 8006724:	0800673f 	.word	0x0800673f
 8006728:	08006733 	.word	0x08006733
 800672c:	2300      	movs	r3, #0
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e01d      	b.n	800676e <UART_SetConfig+0xe2>
 8006732:	2302      	movs	r3, #2
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e01a      	b.n	800676e <UART_SetConfig+0xe2>
 8006738:	2304      	movs	r3, #4
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e017      	b.n	800676e <UART_SetConfig+0xe2>
 800673e:	2308      	movs	r3, #8
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e014      	b.n	800676e <UART_SetConfig+0xe2>
 8006744:	2310      	movs	r3, #16
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e011      	b.n	800676e <UART_SetConfig+0xe2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a67      	ldr	r2, [pc, #412]	; (80068ec <UART_SetConfig+0x260>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d102      	bne.n	800675a <UART_SetConfig+0xce>
 8006754:	2300      	movs	r3, #0
 8006756:	77fb      	strb	r3, [r7, #31]
 8006758:	e009      	b.n	800676e <UART_SetConfig+0xe2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a64      	ldr	r2, [pc, #400]	; (80068f0 <UART_SetConfig+0x264>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d102      	bne.n	800676a <UART_SetConfig+0xde>
 8006764:	2300      	movs	r3, #0
 8006766:	77fb      	strb	r3, [r7, #31]
 8006768:	e001      	b.n	800676e <UART_SetConfig+0xe2>
 800676a:	2310      	movs	r3, #16
 800676c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006776:	d15a      	bne.n	800682e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006778:	7ffb      	ldrb	r3, [r7, #31]
 800677a:	2b08      	cmp	r3, #8
 800677c:	d827      	bhi.n	80067ce <UART_SetConfig+0x142>
 800677e:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <UART_SetConfig+0xf8>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	080067a9 	.word	0x080067a9
 8006788:	080067b1 	.word	0x080067b1
 800678c:	080067b9 	.word	0x080067b9
 8006790:	080067cf 	.word	0x080067cf
 8006794:	080067bf 	.word	0x080067bf
 8006798:	080067cf 	.word	0x080067cf
 800679c:	080067cf 	.word	0x080067cf
 80067a0:	080067cf 	.word	0x080067cf
 80067a4:	080067c7 	.word	0x080067c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067a8:	f7ff faa8 	bl	8005cfc <HAL_RCC_GetPCLK1Freq>
 80067ac:	61b8      	str	r0, [r7, #24]
        break;
 80067ae:	e013      	b.n	80067d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067b0:	f7ff fac6 	bl	8005d40 <HAL_RCC_GetPCLK2Freq>
 80067b4:	61b8      	str	r0, [r7, #24]
        break;
 80067b6:	e00f      	b.n	80067d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067b8:	4b4e      	ldr	r3, [pc, #312]	; (80068f4 <UART_SetConfig+0x268>)
 80067ba:	61bb      	str	r3, [r7, #24]
        break;
 80067bc:	e00c      	b.n	80067d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067be:	f7ff fa27 	bl	8005c10 <HAL_RCC_GetSysClockFreq>
 80067c2:	61b8      	str	r0, [r7, #24]
        break;
 80067c4:	e008      	b.n	80067d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ca:	61bb      	str	r3, [r7, #24]
        break;
 80067cc:	e004      	b.n	80067d8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	77bb      	strb	r3, [r7, #30]
        break;
 80067d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d074      	beq.n	80068c8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	005a      	lsls	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	085b      	lsrs	r3, r3, #1
 80067e8:	441a      	add	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	2b0f      	cmp	r3, #15
 80067f8:	d916      	bls.n	8006828 <UART_SetConfig+0x19c>
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006800:	d212      	bcs.n	8006828 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	b29b      	uxth	r3, r3
 8006806:	f023 030f 	bic.w	r3, r3, #15
 800680a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	b29b      	uxth	r3, r3
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	b29a      	uxth	r2, r3
 8006818:	89fb      	ldrh	r3, [r7, #14]
 800681a:	4313      	orrs	r3, r2
 800681c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	89fa      	ldrh	r2, [r7, #14]
 8006824:	60da      	str	r2, [r3, #12]
 8006826:	e04f      	b.n	80068c8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	77bb      	strb	r3, [r7, #30]
 800682c:	e04c      	b.n	80068c8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800682e:	7ffb      	ldrb	r3, [r7, #31]
 8006830:	2b08      	cmp	r3, #8
 8006832:	d828      	bhi.n	8006886 <UART_SetConfig+0x1fa>
 8006834:	a201      	add	r2, pc, #4	; (adr r2, 800683c <UART_SetConfig+0x1b0>)
 8006836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683a:	bf00      	nop
 800683c:	08006861 	.word	0x08006861
 8006840:	08006869 	.word	0x08006869
 8006844:	08006871 	.word	0x08006871
 8006848:	08006887 	.word	0x08006887
 800684c:	08006877 	.word	0x08006877
 8006850:	08006887 	.word	0x08006887
 8006854:	08006887 	.word	0x08006887
 8006858:	08006887 	.word	0x08006887
 800685c:	0800687f 	.word	0x0800687f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006860:	f7ff fa4c 	bl	8005cfc <HAL_RCC_GetPCLK1Freq>
 8006864:	61b8      	str	r0, [r7, #24]
        break;
 8006866:	e013      	b.n	8006890 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006868:	f7ff fa6a 	bl	8005d40 <HAL_RCC_GetPCLK2Freq>
 800686c:	61b8      	str	r0, [r7, #24]
        break;
 800686e:	e00f      	b.n	8006890 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006870:	4b20      	ldr	r3, [pc, #128]	; (80068f4 <UART_SetConfig+0x268>)
 8006872:	61bb      	str	r3, [r7, #24]
        break;
 8006874:	e00c      	b.n	8006890 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006876:	f7ff f9cb 	bl	8005c10 <HAL_RCC_GetSysClockFreq>
 800687a:	61b8      	str	r0, [r7, #24]
        break;
 800687c:	e008      	b.n	8006890 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800687e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006882:	61bb      	str	r3, [r7, #24]
        break;
 8006884:	e004      	b.n	8006890 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	77bb      	strb	r3, [r7, #30]
        break;
 800688e:	bf00      	nop
    }

    if (pclk != 0U)
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d018      	beq.n	80068c8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	085a      	lsrs	r2, r3, #1
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	441a      	add	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b0f      	cmp	r3, #15
 80068ae:	d909      	bls.n	80068c4 <UART_SetConfig+0x238>
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b6:	d205      	bcs.n	80068c4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60da      	str	r2, [r3, #12]
 80068c2:	e001      	b.n	80068c8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80068d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3720      	adds	r7, #32
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	efff69f3 	.word	0xefff69f3
 80068e4:	40013800 	.word	0x40013800
 80068e8:	40021000 	.word	0x40021000
 80068ec:	40004400 	.word	0x40004400
 80068f0:	40004800 	.word	0x40004800
 80068f4:	007a1200 	.word	0x007a1200

080068f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00a      	beq.n	8006922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	f003 0304 	and.w	r3, r3, #4
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01a      	beq.n	8006a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f6:	d10a      	bne.n	8006a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	605a      	str	r2, [r3, #4]
  }
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b098      	sub	sp, #96	; 0x60
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a4c:	f7fc fb14 	bl	8003078 <HAL_GetTick>
 8006a50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d12e      	bne.n	8006abe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f88c 	bl	8006b8c <UART_WaitOnFlagUntilTimeout>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d021      	beq.n	8006abe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	461a      	mov	r2, r3
 8006a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a98:	647b      	str	r3, [r7, #68]	; 0x44
 8006a9a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e6      	bne.n	8006a7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e062      	b.n	8006b84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d149      	bne.n	8006b60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f856 	bl	8006b8c <UART_WaitOnFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d03c      	beq.n	8006b60 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	623b      	str	r3, [r7, #32]
   return(result);
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	461a      	mov	r2, r3
 8006b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b04:	633b      	str	r3, [r7, #48]	; 0x30
 8006b06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e6      	bne.n	8006ae6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	e853 3f00 	ldrex	r3, [r3]
 8006b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f023 0301 	bic.w	r3, r3, #1
 8006b2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3308      	adds	r3, #8
 8006b36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b38:	61fa      	str	r2, [r7, #28]
 8006b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	69b9      	ldr	r1, [r7, #24]
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	617b      	str	r3, [r7, #20]
   return(result);
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e5      	bne.n	8006b18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e011      	b.n	8006b84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2220      	movs	r2, #32
 8006b64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3758      	adds	r7, #88	; 0x58
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b9c:	e049      	b.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba4:	d045      	beq.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba6:	f7fc fa67 	bl	8003078 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d302      	bcc.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e048      	b.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0304 	and.w	r3, r3, #4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d031      	beq.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	f003 0308 	and.w	r3, r3, #8
 8006bd8:	2b08      	cmp	r3, #8
 8006bda:	d110      	bne.n	8006bfe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2208      	movs	r2, #8
 8006be2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f838 	bl	8006c5a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2208      	movs	r2, #8
 8006bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e029      	b.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c0c:	d111      	bne.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 f81e 	bl	8006c5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2220      	movs	r2, #32
 8006c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e00f      	b.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	bf0c      	ite	eq
 8006c42:	2301      	moveq	r3, #1
 8006c44:	2300      	movne	r3, #0
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d0a6      	beq.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b095      	sub	sp, #84	; 0x54
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6a:	e853 3f00 	ldrex	r3, [r3]
 8006c6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c80:	643b      	str	r3, [r7, #64]	; 0x40
 8006c82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e6      	bne.n	8006c62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3308      	adds	r3, #8
 8006c9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	f023 0301 	bic.w	r3, r3, #1
 8006caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e5      	bne.n	8006c94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d118      	bne.n	8006d02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f023 0310 	bic.w	r3, r3, #16
 8006ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6979      	ldr	r1, [r7, #20]
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e6      	bne.n	8006cd0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006d16:	bf00      	nop
 8006d18:	3754      	adds	r7, #84	; 0x54
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
	...

08006d24 <__libc_init_array>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	4d0d      	ldr	r5, [pc, #52]	; (8006d5c <__libc_init_array+0x38>)
 8006d28:	4c0d      	ldr	r4, [pc, #52]	; (8006d60 <__libc_init_array+0x3c>)
 8006d2a:	1b64      	subs	r4, r4, r5
 8006d2c:	10a4      	asrs	r4, r4, #2
 8006d2e:	2600      	movs	r6, #0
 8006d30:	42a6      	cmp	r6, r4
 8006d32:	d109      	bne.n	8006d48 <__libc_init_array+0x24>
 8006d34:	4d0b      	ldr	r5, [pc, #44]	; (8006d64 <__libc_init_array+0x40>)
 8006d36:	4c0c      	ldr	r4, [pc, #48]	; (8006d68 <__libc_init_array+0x44>)
 8006d38:	f000 f820 	bl	8006d7c <_init>
 8006d3c:	1b64      	subs	r4, r4, r5
 8006d3e:	10a4      	asrs	r4, r4, #2
 8006d40:	2600      	movs	r6, #0
 8006d42:	42a6      	cmp	r6, r4
 8006d44:	d105      	bne.n	8006d52 <__libc_init_array+0x2e>
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4c:	4798      	blx	r3
 8006d4e:	3601      	adds	r6, #1
 8006d50:	e7ee      	b.n	8006d30 <__libc_init_array+0xc>
 8006d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d56:	4798      	blx	r3
 8006d58:	3601      	adds	r6, #1
 8006d5a:	e7f2      	b.n	8006d42 <__libc_init_array+0x1e>
 8006d5c:	08006df4 	.word	0x08006df4
 8006d60:	08006df4 	.word	0x08006df4
 8006d64:	08006df4 	.word	0x08006df4
 8006d68:	08006df8 	.word	0x08006df8

08006d6c <memset>:
 8006d6c:	4402      	add	r2, r0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d100      	bne.n	8006d76 <memset+0xa>
 8006d74:	4770      	bx	lr
 8006d76:	f803 1b01 	strb.w	r1, [r3], #1
 8006d7a:	e7f9      	b.n	8006d70 <memset+0x4>

08006d7c <_init>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	bf00      	nop
 8006d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d82:	bc08      	pop	{r3}
 8006d84:	469e      	mov	lr, r3
 8006d86:	4770      	bx	lr

08006d88 <_fini>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	bf00      	nop
 8006d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8e:	bc08      	pop	{r3}
 8006d90:	469e      	mov	lr, r3
 8006d92:	4770      	bx	lr
