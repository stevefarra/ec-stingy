
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004308  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080043c0  080043c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004484  08004484  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004484  08004484  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004484  08004484  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800448c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000070  080044fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080044fc  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012189  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002326  00000000  00000000  00032221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00034548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  000354a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176ab  00000000  00000000  00036320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012019  00000000  00000000  0004d9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098451  00000000  00000000  0005f9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7e35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bac  00000000  00000000  000f7e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080043a8 	.word	0x080043a8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	080043a8 	.word	0x080043a8

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000416:	f000 fb71 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041a:	f000 f84f 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041e:	f000 f98b 	bl	8000738 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000422:	f000 f893 	bl	800054c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000426:	f000 f939 	bl	800069c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800042a:	f000 f8f9 	bl	8000620 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Start TIM6 (10 kHz)
  HAL_TIM_Base_Start(&htim6);
 800042e:	4b1f      	ldr	r3, [pc, #124]	; (80004ac <main+0x9c>)
 8000430:	0018      	movs	r0, r3
 8000432:	f002 fb05 	bl	8002a40 <HAL_TIM_Base_Start>

  // Capture current value of TIM6 (microseconds)
  tim6_val = __HAL_TIM_GET_COUNTER(&htim6);
 8000436:	4b1d      	ldr	r3, [pc, #116]	; (80004ac <main+0x9c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800043c:	230e      	movs	r3, #14
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Check if 500 us has elapsed
	  if (__HAL_TIM_GET_COUNTER(&htim6) - tim6_val >= 5) {
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <main+0x9c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000448:	240e      	movs	r4, #14
 800044a:	193b      	adds	r3, r7, r4
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	1ad3      	subs	r3, r2, r3
 8000450:	2b04      	cmp	r3, #4
 8000452:	d9f6      	bls.n	8000442 <main+0x32>

		  // Read value from ADC
		  HAL_ADC_Start(&hadc1);
 8000454:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <main+0xa0>)
 8000456:	0018      	movs	r0, r3
 8000458:	f000 feb4 	bl	80011c4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800045c:	2301      	movs	r3, #1
 800045e:	425a      	negs	r2, r3
 8000460:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <main+0xa0>)
 8000462:	0011      	movs	r1, r2
 8000464:	0018      	movs	r0, r3
 8000466:	f000 fefb 	bl	8001260 <HAL_ADC_PollForConversion>
		  raw = HAL_ADC_GetValue(&hadc1);
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <main+0xa0>)
 800046c:	0018      	movs	r0, r3
 800046e:	f000 ff8b 	bl	8001388 <HAL_ADC_GetValue>
 8000472:	0002      	movs	r2, r0
 8000474:	210c      	movs	r1, #12
 8000476:	187b      	adds	r3, r7, r1
 8000478:	801a      	strh	r2, [r3, #0]

		  // Convert to string and print
		  sprintf(msg, "%hu\r\n", raw);
 800047a:	187b      	adds	r3, r7, r1
 800047c:	881a      	ldrh	r2, [r3, #0]
 800047e:	490d      	ldr	r1, [pc, #52]	; (80004b4 <main+0xa4>)
 8000480:	003b      	movs	r3, r7
 8000482:	0018      	movs	r0, r3
 8000484:	f003 fb26 	bl	8003ad4 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000488:	003b      	movs	r3, r7
 800048a:	0018      	movs	r0, r3
 800048c:	f7ff fe38 	bl	8000100 <strlen>
 8000490:	0003      	movs	r3, r0
 8000492:	b29a      	uxth	r2, r3
 8000494:	2301      	movs	r3, #1
 8000496:	425b      	negs	r3, r3
 8000498:	0039      	movs	r1, r7
 800049a:	4807      	ldr	r0, [pc, #28]	; (80004b8 <main+0xa8>)
 800049c:	f002 fdc4 	bl	8003028 <HAL_UART_Transmit>

		  // Reset counter
		  tim6_val = __HAL_TIM_GET_COUNTER(&htim6);
 80004a0:	4b02      	ldr	r3, [pc, #8]	; (80004ac <main+0x9c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	801a      	strh	r2, [r3, #0]
	  if (__HAL_TIM_GET_COUNTER(&htim6) - tim6_val >= 5) {
 80004aa:	e7ca      	b.n	8000442 <main+0x32>
 80004ac:	200000f0 	.word	0x200000f0
 80004b0:	2000008c 	.word	0x2000008c
 80004b4:	080043c0 	.word	0x080043c0
 80004b8:	2000013c 	.word	0x2000013c

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b093      	sub	sp, #76	; 0x4c
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	2414      	movs	r4, #20
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	0018      	movs	r0, r3
 80004c8:	2334      	movs	r3, #52	; 0x34
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f003 faf9 	bl	8003ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	2310      	movs	r3, #16
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f003 faf2 	bl	8003ac4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fc19 	bl	8001d1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	2202      	movs	r2, #2
 80004ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	0052      	lsls	r2, r2, #1
 80004f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2240      	movs	r2, #64	; 0x40
 8000502:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050a:	193b      	adds	r3, r7, r4
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fc51 	bl	8001db4 <HAL_RCC_OscConfig>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000516:	f000 f973 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2207      	movs	r2, #7
 800051e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2100      	movs	r1, #0
 8000536:	0018      	movs	r0, r3
 8000538:	f001 ff4c 	bl	80023d4 <HAL_RCC_ClockConfig>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000540:	f000 f95e 	bl	8000800 <Error_Handler>
  }
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b013      	add	sp, #76	; 0x4c
 800054a:	bd90      	pop	{r4, r7, pc}

0800054c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	0018      	movs	r0, r3
 8000556:	230c      	movs	r3, #12
 8000558:	001a      	movs	r2, r3
 800055a:	2100      	movs	r1, #0
 800055c:	f003 fab2 	bl	8003ac4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000560:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <MX_ADC1_Init+0xcc>)
 8000562:	4a2e      	ldr	r2, [pc, #184]	; (800061c <MX_ADC1_Init+0xd0>)
 8000564:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000566:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <MX_ADC1_Init+0xcc>)
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	05d2      	lsls	r2, r2, #23
 800056c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800056e:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <MX_ADC1_Init+0xcc>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <MX_ADC1_Init+0xcc>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800057a:	4b27      	ldr	r3, [pc, #156]	; (8000618 <MX_ADC1_Init+0xcc>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000580:	4b25      	ldr	r3, [pc, #148]	; (8000618 <MX_ADC1_Init+0xcc>)
 8000582:	2204      	movs	r2, #4
 8000584:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000586:	4b24      	ldr	r3, [pc, #144]	; (8000618 <MX_ADC1_Init+0xcc>)
 8000588:	2200      	movs	r2, #0
 800058a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <MX_ADC1_Init+0xcc>)
 800058e:	2200      	movs	r2, #0
 8000590:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000592:	4b21      	ldr	r3, [pc, #132]	; (8000618 <MX_ADC1_Init+0xcc>)
 8000594:	2200      	movs	r2, #0
 8000596:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <MX_ADC1_Init+0xcc>)
 800059a:	2201      	movs	r2, #1
 800059c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <MX_ADC1_Init+0xcc>)
 80005a0:	2220      	movs	r2, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <MX_ADC1_Init+0xcc>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ac:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <MX_ADC1_Init+0xcc>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <MX_ADC1_Init+0xcc>)
 80005b4:	222c      	movs	r2, #44	; 0x2c
 80005b6:	2100      	movs	r1, #0
 80005b8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <MX_ADC1_Init+0xcc>)
 80005bc:	2200      	movs	r2, #0
 80005be:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <MX_ADC1_Init+0xcc>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_ADC1_Init+0xcc>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_ADC1_Init+0xcc>)
 80005ce:	223c      	movs	r2, #60	; 0x3c
 80005d0:	2100      	movs	r1, #0
 80005d2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_ADC1_Init+0xcc>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_ADC1_Init+0xcc>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 fc49 	bl	8000e74 <HAL_ADC_Init>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80005e6:	f000 f90b 	bl	8000800 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2201      	movs	r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fc:	1d3a      	adds	r2, r7, #4
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_ADC1_Init+0xcc>)
 8000600:	0011      	movs	r1, r2
 8000602:	0018      	movs	r0, r3
 8000604:	f000 fecc 	bl	80013a0 <HAL_ADC_ConfigChannel>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800060c:	f000 f8f8 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b004      	add	sp, #16
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000008c 	.word	0x2000008c
 800061c:	40012400 	.word	0x40012400

08000620 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	0018      	movs	r0, r3
 800062a:	230c      	movs	r3, #12
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f003 fa48 	bl	8003ac4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_TIM6_Init+0x6c>)
 8000636:	4a16      	ldr	r2, [pc, #88]	; (8000690 <MX_TIM6_Init+0x70>)
 8000638:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_TIM6_Init+0x6c>)
 800063c:	4a15      	ldr	r2, [pc, #84]	; (8000694 <MX_TIM6_Init+0x74>)
 800063e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_TIM6_Init+0x6c>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_TIM6_Init+0x6c>)
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <MX_TIM6_Init+0x78>)
 800064a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_TIM6_Init+0x6c>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_TIM6_Init+0x6c>)
 8000654:	0018      	movs	r0, r3
 8000656:	f002 f99b 	bl	8002990 <HAL_TIM_Base_Init>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800065e:	f000 f8cf 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800066e:	1d3a      	adds	r2, r7, #4
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_TIM6_Init+0x6c>)
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f002 fc01 	bl	8002e7c <HAL_TIMEx_MasterConfigSynchronization>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800067e:	f000 f8bf 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b004      	add	sp, #16
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	200000f0 	.word	0x200000f0
 8000690:	40001000 	.word	0x40001000
 8000694:	0000063f 	.word	0x0000063f
 8000698:	0000ffff 	.word	0x0000ffff

0800069c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006a2:	4a24      	ldr	r2, [pc, #144]	; (8000734 <MX_USART2_UART_Init+0x98>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006a8:	22e1      	movs	r2, #225	; 0xe1
 80006aa:	0252      	lsls	r2, r2, #9
 80006ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f002 fc48 	bl	8002f7c <HAL_UART_Init>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006f0:	f000 f886 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	0018      	movs	r0, r3
 80006fa:	f003 f8d9 	bl	80038b0 <HAL_UARTEx_SetTxFifoThreshold>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000702:	f000 f87d 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_USART2_UART_Init+0x94>)
 8000708:	2100      	movs	r1, #0
 800070a:	0018      	movs	r0, r3
 800070c:	f003 f910 	bl	8003930 <HAL_UARTEx_SetRxFifoThreshold>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000714:	f000 f874 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <MX_USART2_UART_Init+0x94>)
 800071a:	0018      	movs	r0, r3
 800071c:	f003 f88e 	bl	800383c <HAL_UARTEx_DisableFifoMode>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000724:	f000 f86c 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	2000013c 	.word	0x2000013c
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b089      	sub	sp, #36	; 0x24
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	240c      	movs	r4, #12
 8000740:	193b      	adds	r3, r7, r4
 8000742:	0018      	movs	r0, r3
 8000744:	2314      	movs	r3, #20
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f003 f9bb 	bl	8003ac4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <MX_GPIO_Init+0xc0>)
 8000750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <MX_GPIO_Init+0xc0>)
 8000754:	2104      	movs	r1, #4
 8000756:	430a      	orrs	r2, r1
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
 800075a:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <MX_GPIO_Init+0xc0>)
 800075c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800075e:	2204      	movs	r2, #4
 8000760:	4013      	ands	r3, r2
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000766:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <MX_GPIO_Init+0xc0>)
 8000768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800076a:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <MX_GPIO_Init+0xc0>)
 800076c:	2120      	movs	r1, #32
 800076e:	430a      	orrs	r2, r1
 8000770:	635a      	str	r2, [r3, #52]	; 0x34
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_GPIO_Init+0xc0>)
 8000774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000776:	2220      	movs	r2, #32
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_GPIO_Init+0xc0>)
 8000780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_GPIO_Init+0xc0>)
 8000784:	2101      	movs	r1, #1
 8000786:	430a      	orrs	r2, r1
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_GPIO_Init+0xc0>)
 800078c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|DEBUG_Pin, GPIO_PIN_SET);
 8000796:	2384      	movs	r3, #132	; 0x84
 8000798:	00d9      	lsls	r1, r3, #3
 800079a:	23a0      	movs	r3, #160	; 0xa0
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2201      	movs	r2, #1
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 fa9d 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PUSHBUTTON_Pin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	0192      	lsls	r2, r2, #6
 80007ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <MX_GPIO_Init+0xc4>)
 80007be:	0019      	movs	r1, r3
 80007c0:	0010      	movs	r0, r2
 80007c2:	f001 f929 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DEBUG_Pin;
 80007c6:	0021      	movs	r1, r4
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2284      	movs	r2, #132	; 0x84
 80007cc:	00d2      	lsls	r2, r2, #3
 80007ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2201      	movs	r2, #1
 80007d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	187a      	adds	r2, r7, r1
 80007e4:	23a0      	movs	r3, #160	; 0xa0
 80007e6:	05db      	lsls	r3, r3, #23
 80007e8:	0011      	movs	r1, r2
 80007ea:	0018      	movs	r0, r3
 80007ec:	f001 f914 	bl	8001a18 <HAL_GPIO_Init>

}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b009      	add	sp, #36	; 0x24
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	50000800 	.word	0x50000800

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x44>)
 8000814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_MspInit+0x44>)
 8000818:	2101      	movs	r1, #1
 800081a:	430a      	orrs	r2, r1
 800081c:	641a      	str	r2, [r3, #64]	; 0x40
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_MspInit+0x44>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	2201      	movs	r2, #1
 8000824:	4013      	ands	r3, r2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x44>)
 800082c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_MspInit+0x44>)
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0549      	lsls	r1, r1, #21
 8000834:	430a      	orrs	r2, r1
 8000836:	63da      	str	r2, [r3, #60]	; 0x3c
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_MspInit+0x44>)
 800083a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	055b      	lsls	r3, r3, #21
 8000840:	4013      	ands	r3, r2
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b08b      	sub	sp, #44	; 0x2c
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	2414      	movs	r4, #20
 800085e:	193b      	adds	r3, r7, r4
 8000860:	0018      	movs	r0, r3
 8000862:	2314      	movs	r3, #20
 8000864:	001a      	movs	r2, r3
 8000866:	2100      	movs	r1, #0
 8000868:	f003 f92c 	bl	8003ac4 <memset>
  if(hadc->Instance==ADC1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <HAL_ADC_MspInit+0x80>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d129      	bne.n	80008ca <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_ADC_MspInit+0x84>)
 8000878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <HAL_ADC_MspInit+0x84>)
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	0349      	lsls	r1, r1, #13
 8000880:	430a      	orrs	r2, r1
 8000882:	641a      	str	r2, [r3, #64]	; 0x40
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <HAL_ADC_MspInit+0x84>)
 8000886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	035b      	lsls	r3, r3, #13
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_ADC_MspInit+0x84>)
 8000894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_ADC_MspInit+0x84>)
 8000898:	2101      	movs	r1, #1
 800089a:	430a      	orrs	r2, r1
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <HAL_ADC_MspInit+0x84>)
 80008a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a2:	2201      	movs	r2, #1
 80008a4:	4013      	ands	r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2201      	movs	r2, #1
 80008ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2203      	movs	r2, #3
 80008b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	193a      	adds	r2, r7, r4
 80008be:	23a0      	movs	r3, #160	; 0xa0
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	0011      	movs	r1, r2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f001 f8a7 	bl	8001a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b00b      	add	sp, #44	; 0x2c
 80008d0:	bd90      	pop	{r4, r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	40012400 	.word	0x40012400
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <HAL_TIM_Base_MspInit+0x44>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d113      	bne.n	8000916 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_TIM_Base_MspInit+0x48>)
 80008f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_TIM_Base_MspInit+0x48>)
 80008f4:	2110      	movs	r1, #16
 80008f6:	430a      	orrs	r2, r1
 80008f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_TIM_Base_MspInit+0x48>)
 80008fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008fe:	2210      	movs	r2, #16
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2011      	movs	r0, #17
 800090c:	f001 f852 	bl	80019b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000910:	2011      	movs	r0, #17
 8000912:	f001 f864 	bl	80019de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b004      	add	sp, #16
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	40001000 	.word	0x40001000
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b091      	sub	sp, #68	; 0x44
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	232c      	movs	r3, #44	; 0x2c
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	0018      	movs	r0, r3
 8000936:	2314      	movs	r3, #20
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f003 f8c2 	bl	8003ac4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000940:	2410      	movs	r4, #16
 8000942:	193b      	adds	r3, r7, r4
 8000944:	0018      	movs	r0, r3
 8000946:	231c      	movs	r3, #28
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f003 f8ba 	bl	8003ac4 <memset>
  if(huart->Instance==USART2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a22      	ldr	r2, [pc, #136]	; (80009e0 <HAL_UART_MspInit+0xb8>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d13e      	bne.n	80009d8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2202      	movs	r2, #2
 800095e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000966:	193b      	adds	r3, r7, r4
 8000968:	0018      	movs	r0, r3
 800096a:	f001 fedd 	bl	8002728 <HAL_RCCEx_PeriphCLKConfig>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000972:	f7ff ff45 	bl	8000800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <HAL_UART_MspInit+0xbc>)
 8000978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <HAL_UART_MspInit+0xbc>)
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	0289      	lsls	r1, r1, #10
 8000980:	430a      	orrs	r2, r1
 8000982:	63da      	str	r2, [r3, #60]	; 0x3c
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <HAL_UART_MspInit+0xbc>)
 8000986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	029b      	lsls	r3, r3, #10
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <HAL_UART_MspInit+0xbc>)
 8000994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <HAL_UART_MspInit+0xbc>)
 8000998:	2101      	movs	r1, #1
 800099a:	430a      	orrs	r2, r1
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_UART_MspInit+0xbc>)
 80009a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a2:	2201      	movs	r2, #1
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009aa:	212c      	movs	r1, #44	; 0x2c
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	220c      	movs	r2, #12
 80009b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2202      	movs	r2, #2
 80009b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2201      	movs	r2, #1
 80009c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	187a      	adds	r2, r7, r1
 80009cc:	23a0      	movs	r3, #160	; 0xa0
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	0011      	movs	r1, r2
 80009d2:	0018      	movs	r0, r3
 80009d4:	f001 f820 	bl	8001a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b011      	add	sp, #68	; 0x44
 80009de:	bd90      	pop	{r4, r7, pc}
 80009e0:	40004400 	.word	0x40004400
 80009e4:	40021000 	.word	0x40021000

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0c:	f000 f8e0 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <TIM6_IRQHandler+0x14>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f002 f85c 	bl	8002adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	200000f0 	.word	0x200000f0

08000a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <_sbrk+0x5c>)
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <_sbrk+0x60>)
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <_sbrk+0x64>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <_sbrk+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	18d3      	adds	r3, r2, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d207      	bcs.n	8000a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a60:	f003 f806 	bl	8003a70 <__errno>
 8000a64:	0003      	movs	r3, r0
 8000a66:	220c      	movs	r2, #12
 8000a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	e009      	b.n	8000a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	18d2      	adds	r2, r2, r3
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <_sbrk+0x64>)
 8000a80:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a82:	68fb      	ldr	r3, [r7, #12]
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b006      	add	sp, #24
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20009000 	.word	0x20009000
 8000a90:	00000400 	.word	0x00000400
 8000a94:	200001d0 	.word	0x200001d0
 8000a98:	200001e8 	.word	0x200001e8

08000a9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aaa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aac:	f7ff fff6 	bl	8000a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	; (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	; (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ad6:	f002 ffd1 	bl	8003a7c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ada:	f7ff fc99 	bl	8000410 <main>

08000ade <LoopForever>:

LoopForever:
  b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   r0, =_estack
 8000ae0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000aec:	0800448c 	.word	0x0800448c
  ldr r2, =_sbss
 8000af0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000af4:	200001e8 	.word	0x200001e8

08000af8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_IRQHandler>
	...

08000afc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_Init+0x3c>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_Init+0x3c>)
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	0049      	lsls	r1, r1, #1
 8000b12:	430a      	orrs	r2, r1
 8000b14:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 f810 	bl	8000b3c <HAL_InitTick>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e001      	b.n	8000b2c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fe70 	bl	800080c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781b      	ldrb	r3, [r3, #0]
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b44:	230f      	movs	r3, #15
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_InitTick+0x88>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d02b      	beq.n	8000bac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_InitTick+0x8c>)
 8000b56:	681c      	ldr	r4, [r3, #0]
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_InitTick+0x88>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	23fa      	movs	r3, #250	; 0xfa
 8000b60:	0098      	lsls	r0, r3, #2
 8000b62:	f7ff fadf 	bl	8000124 <__udivsi3>
 8000b66:	0003      	movs	r3, r0
 8000b68:	0019      	movs	r1, r3
 8000b6a:	0020      	movs	r0, r4
 8000b6c:	f7ff fada 	bl	8000124 <__udivsi3>
 8000b70:	0003      	movs	r3, r0
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 ff43 	bl	80019fe <HAL_SYSTICK_Config>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d112      	bne.n	8000ba2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d80a      	bhi.n	8000b98 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	2301      	movs	r3, #1
 8000b86:	425b      	negs	r3, r3
 8000b88:	2200      	movs	r2, #0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 ff12 	bl	80019b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_InitTick+0x90>)
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e00d      	b.n	8000bb4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b98:	230f      	movs	r3, #15
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e008      	b.n	8000bb4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
 8000baa:	e003      	b.n	8000bb4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bac:	230f      	movs	r3, #15
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	781b      	ldrb	r3, [r3, #0]
}
 8000bba:	0018      	movs	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b005      	add	sp, #20
 8000bc0:	bd90      	pop	{r4, r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_IncTick+0x1c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	001a      	movs	r2, r3
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	18d2      	adds	r2, r2, r3
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_IncTick+0x20>)
 8000be2:	601a      	str	r2, [r3, #0]
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	200001d4 	.word	0x200001d4

08000bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b02      	ldr	r3, [pc, #8]	; (8000c04 <HAL_GetTick+0x10>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	200001d4 	.word	0x200001d4

08000c08 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000c18:	401a      	ands	r2, r3
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]
}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b002      	add	sp, #8
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	fe3fffff 	.word	0xfe3fffff

08000c30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	23e0      	movs	r3, #224	; 0xe0
 8000c3e:	045b      	lsls	r3, r3, #17
 8000c40:	4013      	ands	r3, r2
}
 8000c42:	0018      	movs	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b002      	add	sp, #8
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	400a      	ands	r2, r1
 8000c60:	2107      	movs	r1, #7
 8000c62:	4091      	lsls	r1, r2
 8000c64:	000a      	movs	r2, r1
 8000c66:	43d2      	mvns	r2, r2
 8000c68:	401a      	ands	r2, r3
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	400b      	ands	r3, r1
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	4099      	lsls	r1, r3
 8000c74:	000b      	movs	r3, r1
 8000c76:	431a      	orrs	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b004      	add	sp, #16
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	2104      	movs	r1, #4
 8000c96:	400a      	ands	r2, r1
 8000c98:	2107      	movs	r1, #7
 8000c9a:	4091      	lsls	r1, r2
 8000c9c:	000a      	movs	r2, r1
 8000c9e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ca6:	40da      	lsrs	r2, r3
 8000ca8:	0013      	movs	r3, r2
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	23c0      	movs	r3, #192	; 0xc0
 8000cc0:	011b      	lsls	r3, r3, #4
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	d101      	bne.n	8000cca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e000      	b.n	8000ccc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	211f      	movs	r1, #31
 8000ce8:	400a      	ands	r2, r1
 8000cea:	210f      	movs	r1, #15
 8000cec:	4091      	lsls	r1, r2
 8000cee:	000a      	movs	r2, r1
 8000cf0:	43d2      	mvns	r2, r2
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	0e9b      	lsrs	r3, r3, #26
 8000cf8:	210f      	movs	r1, #15
 8000cfa:	4019      	ands	r1, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	201f      	movs	r0, #31
 8000d00:	4003      	ands	r3, r0
 8000d02:	4099      	lsls	r1, r3
 8000d04:	000b      	movs	r3, r1
 8000d06:	431a      	orrs	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b004      	add	sp, #16
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	035b      	lsls	r3, r3, #13
 8000d26:	0b5b      	lsrs	r3, r3, #13
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	0352      	lsls	r2, r2, #13
 8000d48:	0b52      	lsrs	r2, r2, #13
 8000d4a:	43d2      	mvns	r2, r2
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	68ba      	ldr	r2, [r7, #8]
 8000d6e:	0212      	lsls	r2, r2, #8
 8000d70:	43d2      	mvns	r2, r2
 8000d72:	401a      	ands	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
 8000d7c:	4904      	ldr	r1, [pc, #16]	; (8000d90 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000d7e:	400b      	ands	r3, r1
 8000d80:	431a      	orrs	r2, r3
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b004      	add	sp, #16
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	07ffff00 	.word	0x07ffff00

08000d94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <LL_ADC_EnableInternalRegulator+0x24>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	0552      	lsls	r2, r2, #21
 8000da8:	431a      	orrs	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b002      	add	sp, #8
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	6fffffe8 	.word	0x6fffffe8

08000dbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	055b      	lsls	r3, r3, #21
 8000dcc:	401a      	ands	r2, r3
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	055b      	lsls	r3, r3, #21
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d101      	bne.n	8000dda <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <LL_ADC_Enable+0x20>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	2201      	movs	r2, #1
 8000df6:	431a      	orrs	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b002      	add	sp, #8
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	7fffffe8 	.word	0x7fffffe8

08000e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2201      	movs	r2, #1
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <LL_ADC_IsEnabled+0x18>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e000      	b.n	8000e22 <LL_ADC_IsEnabled+0x1a>
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <LL_ADC_REG_StartConversion+0x20>)
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b002      	add	sp, #8
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	7fffffe8 	.word	0x7fffffe8

08000e50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	d101      	bne.n	8000e68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e64:	2301      	movs	r3, #1
 8000e66:	e000      	b.n	8000e6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e7c:	231f      	movs	r3, #31
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e17f      	b.n	800119a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10a      	bne.n	8000eb8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff fcd5 	bl	8000854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2254      	movs	r2, #84	; 0x54
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff ff7d 	bl	8000dbc <LL_ADC_IsInternalRegulatorEnabled>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d115      	bne.n	8000ef2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff ff62 	bl	8000d94 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ed0:	4bb4      	ldr	r3, [pc, #720]	; (80011a4 <HAL_ADC_Init+0x330>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	49b4      	ldr	r1, [pc, #720]	; (80011a8 <HAL_ADC_Init+0x334>)
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff f924 	bl	8000124 <__udivsi3>
 8000edc:	0003      	movs	r3, r0
 8000ede:	3301      	adds	r3, #1
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000ee4:	e002      	b.n	8000eec <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f9      	bne.n	8000ee6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff ff60 	bl	8000dbc <LL_ADC_IsInternalRegulatorEnabled>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d10f      	bne.n	8000f20 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f04:	2210      	movs	r2, #16
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f10:	2201      	movs	r2, #1
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f18:	231f      	movs	r3, #31
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff ff93 	bl	8000e50 <LL_ADC_REG_IsConversionOngoing>
 8000f2a:	0003      	movs	r3, r0
 8000f2c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	2210      	movs	r2, #16
 8000f34:	4013      	ands	r3, r2
 8000f36:	d000      	beq.n	8000f3a <HAL_ADC_Init+0xc6>
 8000f38:	e122      	b.n	8001180 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d000      	beq.n	8000f42 <HAL_ADC_Init+0xce>
 8000f40:	e11e      	b.n	8001180 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	4a99      	ldr	r2, [pc, #612]	; (80011ac <HAL_ADC_Init+0x338>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	0018      	movs	r0, r3
 8000f58:	f7ff ff56 	bl	8000e08 <LL_ADC_IsEnabled>
 8000f5c:	1e03      	subs	r3, r0, #0
 8000f5e:	d000      	beq.n	8000f62 <HAL_ADC_Init+0xee>
 8000f60:	e0ad      	b.n	80010be <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7e1b      	ldrb	r3, [r3, #24]
 8000f6a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f6c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7e5b      	ldrb	r3, [r3, #25]
 8000f72:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f74:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7e9b      	ldrb	r3, [r3, #26]
 8000f7a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f7c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <HAL_ADC_Init+0x118>
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	015b      	lsls	r3, r3, #5
 8000f8a:	e000      	b.n	8000f8e <HAL_ADC_Init+0x11a>
 8000f8c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f8e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f94:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	da04      	bge.n	8000fa8 <HAL_ADC_Init+0x134>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	085b      	lsrs	r3, r3, #1
 8000fa6:	e001      	b.n	8000fac <HAL_ADC_Init+0x138>
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000fac:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	212c      	movs	r1, #44	; 0x2c
 8000fb2:	5c5b      	ldrb	r3, [r3, r1]
 8000fb4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fb6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2220      	movs	r2, #32
 8000fc2:	5c9b      	ldrb	r3, [r3, r2]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d115      	bne.n	8000ff4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7e9b      	ldrb	r3, [r3, #26]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d105      	bne.n	8000fdc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	2280      	movs	r2, #128	; 0x80
 8000fd4:	0252      	lsls	r2, r2, #9
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
 8000fda:	e00b      	b.n	8000ff4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fec:	2201      	movs	r2, #1
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00a      	beq.n	8001012 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001000:	23e0      	movs	r3, #224	; 0xe0
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800100a:	4313      	orrs	r3, r2
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	4a65      	ldr	r2, [pc, #404]	; (80011b0 <HAL_ADC_Init+0x33c>)
 800101a:	4013      	ands	r3, r2
 800101c:	0019      	movs	r1, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	430a      	orrs	r2, r1
 8001026:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	0f9b      	lsrs	r3, r3, #30
 800102e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001034:	4313      	orrs	r3, r2
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4313      	orrs	r3, r2
 800103a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	223c      	movs	r2, #60	; 0x3c
 8001040:	5c9b      	ldrb	r3, [r3, r2]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d111      	bne.n	800106a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	0f9b      	lsrs	r3, r3, #30
 800104c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001052:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001058:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800105e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	4313      	orrs	r3, r2
 8001064:	2201      	movs	r2, #1
 8001066:	4313      	orrs	r3, r2
 8001068:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <HAL_ADC_Init+0x340>)
 8001072:	4013      	ands	r3, r2
 8001074:	0019      	movs	r1, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	430a      	orrs	r2, r1
 800107e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	23c0      	movs	r3, #192	; 0xc0
 8001086:	061b      	lsls	r3, r3, #24
 8001088:	429a      	cmp	r2, r3
 800108a:	d018      	beq.n	80010be <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	05db      	lsls	r3, r3, #23
 8001094:	429a      	cmp	r2, r3
 8001096:	d012      	beq.n	80010be <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	061b      	lsls	r3, r3, #24
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d00c      	beq.n	80010be <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <HAL_ADC_Init+0x344>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a44      	ldr	r2, [pc, #272]	; (80011bc <HAL_ADC_Init+0x348>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	0019      	movs	r1, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	23f0      	movs	r3, #240	; 0xf0
 80010b4:	039b      	lsls	r3, r3, #14
 80010b6:	401a      	ands	r2, r3
 80010b8:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <HAL_ADC_Init+0x344>)
 80010ba:	430a      	orrs	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c6:	001a      	movs	r2, r3
 80010c8:	2100      	movs	r1, #0
 80010ca:	f7ff fdbe 	bl	8000c4a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d6:	493a      	ldr	r1, [pc, #232]	; (80011c0 <HAL_ADC_Init+0x34c>)
 80010d8:	001a      	movs	r2, r3
 80010da:	f7ff fdb6 	bl	8000c4a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d109      	bne.n	80010fa <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2110      	movs	r1, #16
 80010f2:	4249      	negs	r1, r1
 80010f4:	430a      	orrs	r2, r1
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
 80010f8:	e018      	b.n	800112c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691a      	ldr	r2, [r3, #16]
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	039b      	lsls	r3, r3, #14
 8001102:	429a      	cmp	r2, r3
 8001104:	d112      	bne.n	800112c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	3b01      	subs	r3, #1
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	221c      	movs	r2, #28
 8001116:	4013      	ands	r3, r2
 8001118:	2210      	movs	r2, #16
 800111a:	4252      	negs	r2, r2
 800111c:	409a      	lsls	r2, r3
 800111e:	0011      	movs	r1, r2
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	430a      	orrs	r2, r1
 800112a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2100      	movs	r1, #0
 8001132:	0018      	movs	r0, r3
 8001134:	f7ff fda6 	bl	8000c84 <LL_ADC_GetSamplingTimeCommonChannels>
 8001138:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800113e:	429a      	cmp	r2, r3
 8001140:	d10b      	bne.n	800115a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114c:	2203      	movs	r2, #3
 800114e:	4393      	bics	r3, r2
 8001150:	2201      	movs	r2, #1
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001158:	e01c      	b.n	8001194 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	2212      	movs	r2, #18
 8001160:	4393      	bics	r3, r2
 8001162:	2210      	movs	r2, #16
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116e:	2201      	movs	r2, #1
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001176:	231f      	movs	r3, #31
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800117e:	e009      	b.n	8001194 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	2210      	movs	r2, #16
 8001186:	431a      	orrs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800118c:	231f      	movs	r3, #31
 800118e:	18fb      	adds	r3, r7, r3
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001194:	231f      	movs	r3, #31
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	781b      	ldrb	r3, [r3, #0]
}
 800119a:	0018      	movs	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	b008      	add	sp, #32
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	20000000 	.word	0x20000000
 80011a8:	00030d40 	.word	0x00030d40
 80011ac:	fffffefd 	.word	0xfffffefd
 80011b0:	fffe0201 	.word	0xfffe0201
 80011b4:	1ffffc02 	.word	0x1ffffc02
 80011b8:	40012708 	.word	0x40012708
 80011bc:	ffc3ffff 	.word	0xffc3ffff
 80011c0:	07ffff04 	.word	0x07ffff04

080011c4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff fe3d 	bl	8000e50 <LL_ADC_REG_IsConversionOngoing>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d135      	bne.n	8001246 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2254      	movs	r2, #84	; 0x54
 80011de:	5c9b      	ldrb	r3, [r3, r2]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <HAL_ADC_Start+0x24>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e035      	b.n	8001254 <HAL_ADC_Start+0x90>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2254      	movs	r2, #84	; 0x54
 80011ec:	2101      	movs	r1, #1
 80011ee:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80011f0:	250f      	movs	r5, #15
 80011f2:	197c      	adds	r4, r7, r5
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	0018      	movs	r0, r3
 80011f8:	f000 faaa 	bl	8001750 <ADC_Enable>
 80011fc:	0003      	movs	r3, r0
 80011fe:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001200:	197b      	adds	r3, r7, r5
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d119      	bne.n	800123c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	4a13      	ldr	r2, [pc, #76]	; (800125c <HAL_ADC_Start+0x98>)
 800120e:	4013      	ands	r3, r2
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	0052      	lsls	r2, r2, #1
 8001214:	431a      	orrs	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	221c      	movs	r2, #28
 8001226:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2254      	movs	r2, #84	; 0x54
 800122c:	2100      	movs	r1, #0
 800122e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	0018      	movs	r0, r3
 8001236:	f7ff fdf9 	bl	8000e2c <LL_ADC_REG_StartConversion>
 800123a:	e008      	b.n	800124e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2254      	movs	r2, #84	; 0x54
 8001240:	2100      	movs	r1, #0
 8001242:	5499      	strb	r1, [r3, r2]
 8001244:	e003      	b.n	800124e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001246:	230f      	movs	r3, #15
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	2202      	movs	r2, #2
 800124c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800124e:	230f      	movs	r3, #15
 8001250:	18fb      	adds	r3, r7, r3
 8001252:	781b      	ldrb	r3, [r3, #0]
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b004      	add	sp, #16
 800125a:	bdb0      	pop	{r4, r5, r7, pc}
 800125c:	fffff0fe 	.word	0xfffff0fe

08001260 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	2b08      	cmp	r3, #8
 8001270:	d102      	bne.n	8001278 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001272:	2308      	movs	r3, #8
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	e00f      	b.n	8001298 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2201      	movs	r2, #1
 8001280:	4013      	ands	r3, r2
 8001282:	d007      	beq.n	8001294 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001288:	2220      	movs	r2, #32
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e072      	b.n	800137a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001294:	2304      	movs	r3, #4
 8001296:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001298:	f7ff fcac 	bl	8000bf4 <HAL_GetTick>
 800129c:	0003      	movs	r3, r0
 800129e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80012a0:	e01f      	b.n	80012e2 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	d01c      	beq.n	80012e2 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80012a8:	f7ff fca4 	bl	8000bf4 <HAL_GetTick>
 80012ac:	0002      	movs	r2, r0
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d302      	bcc.n	80012be <HAL_ADC_PollForConversion+0x5e>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d111      	bne.n	80012e2 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4013      	ands	r3, r2
 80012c8:	d10b      	bne.n	80012e2 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	2204      	movs	r2, #4
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2254      	movs	r2, #84	; 0x54
 80012da:	2100      	movs	r1, #0
 80012dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e04b      	b.n	800137a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	d0d9      	beq.n	80012a2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff fcd6 	bl	8000cb2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001306:	1e03      	subs	r3, r0, #0
 8001308:	d02e      	beq.n	8001368 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7e9b      	ldrb	r3, [r3, #26]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d12a      	bne.n	8001368 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2208      	movs	r2, #8
 800131a:	4013      	ands	r3, r2
 800131c:	2b08      	cmp	r3, #8
 800131e:	d123      	bne.n	8001368 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff fd93 	bl	8000e50 <LL_ADC_REG_IsConversionOngoing>
 800132a:	1e03      	subs	r3, r0, #0
 800132c:	d110      	bne.n	8001350 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	210c      	movs	r1, #12
 800133a:	438a      	bics	r2, r1
 800133c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <HAL_ADC_PollForConversion+0x124>)
 8001344:	4013      	ands	r3, r2
 8001346:	2201      	movs	r2, #1
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	659a      	str	r2, [r3, #88]	; 0x58
 800134e:	e00b      	b.n	8001368 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001354:	2220      	movs	r2, #32
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001360:	2201      	movs	r2, #1
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7e1b      	ldrb	r3, [r3, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d103      	bne.n	8001378 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	220c      	movs	r2, #12
 8001376:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	b004      	add	sp, #16
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	fffffefe 	.word	0xfffffefe

08001388 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001396:	0018      	movs	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013aa:	2317      	movs	r3, #23
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2254      	movs	r2, #84	; 0x54
 80013ba:	5c9b      	ldrb	r3, [r3, r2]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x24>
 80013c0:	2302      	movs	r3, #2
 80013c2:	e1c0      	b.n	8001746 <HAL_ADC_ConfigChannel+0x3a6>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2254      	movs	r2, #84	; 0x54
 80013c8:	2101      	movs	r1, #1
 80013ca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff fd3d 	bl	8000e50 <LL_ADC_REG_IsConversionOngoing>
 80013d6:	1e03      	subs	r3, r0, #0
 80013d8:	d000      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x3c>
 80013da:	e1a3      	b.n	8001724 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d100      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x46>
 80013e4:	e143      	b.n	800166e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691a      	ldr	r2, [r3, #16]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	061b      	lsls	r3, r3, #24
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d004      	beq.n	80013fc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013f6:	4ac1      	ldr	r2, [pc, #772]	; (80016fc <HAL_ADC_ConfigChannel+0x35c>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d108      	bne.n	800140e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0019      	movs	r1, r3
 8001406:	0010      	movs	r0, r2
 8001408:	f7ff fc84 	bl	8000d14 <LL_ADC_REG_SetSequencerChAdd>
 800140c:	e0c9      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	211f      	movs	r1, #31
 8001418:	400b      	ands	r3, r1
 800141a:	210f      	movs	r1, #15
 800141c:	4099      	lsls	r1, r3
 800141e:	000b      	movs	r3, r1
 8001420:	43db      	mvns	r3, r3
 8001422:	4013      	ands	r3, r2
 8001424:	0019      	movs	r1, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	035b      	lsls	r3, r3, #13
 800142c:	0b5b      	lsrs	r3, r3, #13
 800142e:	d105      	bne.n	800143c <HAL_ADC_ConfigChannel+0x9c>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	0e9b      	lsrs	r3, r3, #26
 8001436:	221f      	movs	r2, #31
 8001438:	4013      	ands	r3, r2
 800143a:	e098      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2201      	movs	r2, #1
 8001442:	4013      	ands	r3, r2
 8001444:	d000      	beq.n	8001448 <HAL_ADC_ConfigChannel+0xa8>
 8001446:	e091      	b.n	800156c <HAL_ADC_ConfigChannel+0x1cc>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2202      	movs	r2, #2
 800144e:	4013      	ands	r3, r2
 8001450:	d000      	beq.n	8001454 <HAL_ADC_ConfigChannel+0xb4>
 8001452:	e089      	b.n	8001568 <HAL_ADC_ConfigChannel+0x1c8>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2204      	movs	r2, #4
 800145a:	4013      	ands	r3, r2
 800145c:	d000      	beq.n	8001460 <HAL_ADC_ConfigChannel+0xc0>
 800145e:	e081      	b.n	8001564 <HAL_ADC_ConfigChannel+0x1c4>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2208      	movs	r2, #8
 8001466:	4013      	ands	r3, r2
 8001468:	d000      	beq.n	800146c <HAL_ADC_ConfigChannel+0xcc>
 800146a:	e079      	b.n	8001560 <HAL_ADC_ConfigChannel+0x1c0>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2210      	movs	r2, #16
 8001472:	4013      	ands	r3, r2
 8001474:	d000      	beq.n	8001478 <HAL_ADC_ConfigChannel+0xd8>
 8001476:	e071      	b.n	800155c <HAL_ADC_ConfigChannel+0x1bc>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2220      	movs	r2, #32
 800147e:	4013      	ands	r3, r2
 8001480:	d000      	beq.n	8001484 <HAL_ADC_ConfigChannel+0xe4>
 8001482:	e069      	b.n	8001558 <HAL_ADC_ConfigChannel+0x1b8>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2240      	movs	r2, #64	; 0x40
 800148a:	4013      	ands	r3, r2
 800148c:	d000      	beq.n	8001490 <HAL_ADC_ConfigChannel+0xf0>
 800148e:	e061      	b.n	8001554 <HAL_ADC_ConfigChannel+0x1b4>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	4013      	ands	r3, r2
 8001498:	d000      	beq.n	800149c <HAL_ADC_ConfigChannel+0xfc>
 800149a:	e059      	b.n	8001550 <HAL_ADC_ConfigChannel+0x1b0>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4013      	ands	r3, r2
 80014a6:	d151      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1ac>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4013      	ands	r3, r2
 80014b2:	d149      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x1a8>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4013      	ands	r3, r2
 80014be:	d141      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1a4>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4013      	ands	r3, r2
 80014ca:	d139      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x1a0>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	015b      	lsls	r3, r3, #5
 80014d4:	4013      	ands	r3, r2
 80014d6:	d131      	bne.n	800153c <HAL_ADC_ConfigChannel+0x19c>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	019b      	lsls	r3, r3, #6
 80014e0:	4013      	ands	r3, r2
 80014e2:	d129      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x198>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	01db      	lsls	r3, r3, #7
 80014ec:	4013      	ands	r3, r2
 80014ee:	d121      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x194>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	4013      	ands	r3, r2
 80014fa:	d119      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x190>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	025b      	lsls	r3, r3, #9
 8001504:	4013      	ands	r3, r2
 8001506:	d111      	bne.n	800152c <HAL_ADC_ConfigChannel+0x18c>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	029b      	lsls	r3, r3, #10
 8001510:	4013      	ands	r3, r2
 8001512:	d109      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x188>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	02db      	lsls	r3, r3, #11
 800151c:	4013      	ands	r3, r2
 800151e:	d001      	beq.n	8001524 <HAL_ADC_ConfigChannel+0x184>
 8001520:	2312      	movs	r3, #18
 8001522:	e024      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 8001524:	2300      	movs	r3, #0
 8001526:	e022      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 8001528:	2311      	movs	r3, #17
 800152a:	e020      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 800152c:	2310      	movs	r3, #16
 800152e:	e01e      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 8001530:	230f      	movs	r3, #15
 8001532:	e01c      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 8001534:	230e      	movs	r3, #14
 8001536:	e01a      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 8001538:	230d      	movs	r3, #13
 800153a:	e018      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 800153c:	230c      	movs	r3, #12
 800153e:	e016      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 8001540:	230b      	movs	r3, #11
 8001542:	e014      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 8001544:	230a      	movs	r3, #10
 8001546:	e012      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 8001548:	2309      	movs	r3, #9
 800154a:	e010      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 800154c:	2308      	movs	r3, #8
 800154e:	e00e      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 8001550:	2307      	movs	r3, #7
 8001552:	e00c      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 8001554:	2306      	movs	r3, #6
 8001556:	e00a      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 8001558:	2305      	movs	r3, #5
 800155a:	e008      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 800155c:	2304      	movs	r3, #4
 800155e:	e006      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 8001560:	2303      	movs	r3, #3
 8001562:	e004      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 8001564:	2302      	movs	r3, #2
 8001566:	e002      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <HAL_ADC_ConfigChannel+0x1ce>
 800156c:	2300      	movs	r3, #0
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	6852      	ldr	r2, [r2, #4]
 8001572:	201f      	movs	r0, #31
 8001574:	4002      	ands	r2, r0
 8001576:	4093      	lsls	r3, r2
 8001578:	000a      	movs	r2, r1
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	429a      	cmp	r2, r3
 800158e:	d808      	bhi.n	80015a2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	001a      	movs	r2, r3
 800159e:	f7ff fb99 	bl	8000cd4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	6819      	ldr	r1, [r3, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	001a      	movs	r2, r3
 80015b0:	f7ff fbd4 	bl	8000d5c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db00      	blt.n	80015be <HAL_ADC_ConfigChannel+0x21e>
 80015bc:	e0bc      	b.n	8001738 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015be:	4b50      	ldr	r3, [pc, #320]	; (8001700 <HAL_ADC_ConfigChannel+0x360>)
 80015c0:	0018      	movs	r0, r3
 80015c2:	f7ff fb35 	bl	8000c30 <LL_ADC_GetCommonPathInternalCh>
 80015c6:	0003      	movs	r3, r0
 80015c8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a4d      	ldr	r2, [pc, #308]	; (8001704 <HAL_ADC_ConfigChannel+0x364>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d122      	bne.n	800161a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	041b      	lsls	r3, r3, #16
 80015da:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015dc:	d11d      	bne.n	800161a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	0412      	lsls	r2, r2, #16
 80015e4:	4313      	orrs	r3, r2
 80015e6:	4a46      	ldr	r2, [pc, #280]	; (8001700 <HAL_ADC_ConfigChannel+0x360>)
 80015e8:	0019      	movs	r1, r3
 80015ea:	0010      	movs	r0, r2
 80015ec:	f7ff fb0c 	bl	8000c08 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015f0:	4b45      	ldr	r3, [pc, #276]	; (8001708 <HAL_ADC_ConfigChannel+0x368>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4945      	ldr	r1, [pc, #276]	; (800170c <HAL_ADC_ConfigChannel+0x36c>)
 80015f6:	0018      	movs	r0, r3
 80015f8:	f7fe fd94 	bl	8000124 <__udivsi3>
 80015fc:	0003      	movs	r3, r0
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	0013      	movs	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	189b      	adds	r3, r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800160a:	e002      	b.n	8001612 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3b01      	subs	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f9      	bne.n	800160c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001618:	e08e      	b.n	8001738 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a3c      	ldr	r2, [pc, #240]	; (8001710 <HAL_ADC_ConfigChannel+0x370>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d10e      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	045b      	lsls	r3, r3, #17
 800162a:	4013      	ands	r3, r2
 800162c:	d109      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	0452      	lsls	r2, r2, #17
 8001634:	4313      	orrs	r3, r2
 8001636:	4a32      	ldr	r2, [pc, #200]	; (8001700 <HAL_ADC_ConfigChannel+0x360>)
 8001638:	0019      	movs	r1, r3
 800163a:	0010      	movs	r0, r2
 800163c:	f7ff fae4 	bl	8000c08 <LL_ADC_SetCommonPathInternalCh>
 8001640:	e07a      	b.n	8001738 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a33      	ldr	r2, [pc, #204]	; (8001714 <HAL_ADC_ConfigChannel+0x374>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d000      	beq.n	800164e <HAL_ADC_ConfigChannel+0x2ae>
 800164c:	e074      	b.n	8001738 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	03db      	lsls	r3, r3, #15
 8001654:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001656:	d000      	beq.n	800165a <HAL_ADC_ConfigChannel+0x2ba>
 8001658:	e06e      	b.n	8001738 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	03d2      	lsls	r2, r2, #15
 8001660:	4313      	orrs	r3, r2
 8001662:	4a27      	ldr	r2, [pc, #156]	; (8001700 <HAL_ADC_ConfigChannel+0x360>)
 8001664:	0019      	movs	r1, r3
 8001666:	0010      	movs	r0, r2
 8001668:	f7ff face 	bl	8000c08 <LL_ADC_SetCommonPathInternalCh>
 800166c:	e064      	b.n	8001738 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	061b      	lsls	r3, r3, #24
 8001676:	429a      	cmp	r2, r3
 8001678:	d004      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800167e:	4a1f      	ldr	r2, [pc, #124]	; (80016fc <HAL_ADC_ConfigChannel+0x35c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d107      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0019      	movs	r1, r3
 800168e:	0010      	movs	r0, r2
 8001690:	f7ff fb51 	bl	8000d36 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	da4d      	bge.n	8001738 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_ADC_ConfigChannel+0x360>)
 800169e:	0018      	movs	r0, r3
 80016a0:	f7ff fac6 	bl	8000c30 <LL_ADC_GetCommonPathInternalCh>
 80016a4:	0003      	movs	r3, r0
 80016a6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a15      	ldr	r2, [pc, #84]	; (8001704 <HAL_ADC_ConfigChannel+0x364>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d108      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4a18      	ldr	r2, [pc, #96]	; (8001718 <HAL_ADC_ConfigChannel+0x378>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_ADC_ConfigChannel+0x360>)
 80016ba:	0019      	movs	r1, r3
 80016bc:	0010      	movs	r0, r2
 80016be:	f7ff faa3 	bl	8000c08 <LL_ADC_SetCommonPathInternalCh>
 80016c2:	e039      	b.n	8001738 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a11      	ldr	r2, [pc, #68]	; (8001710 <HAL_ADC_ConfigChannel+0x370>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d108      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4a12      	ldr	r2, [pc, #72]	; (800171c <HAL_ADC_ConfigChannel+0x37c>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_ADC_ConfigChannel+0x360>)
 80016d6:	0019      	movs	r1, r3
 80016d8:	0010      	movs	r0, r2
 80016da:	f7ff fa95 	bl	8000c08 <LL_ADC_SetCommonPathInternalCh>
 80016de:	e02b      	b.n	8001738 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <HAL_ADC_ConfigChannel+0x374>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d126      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <HAL_ADC_ConfigChannel+0x380>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	4a03      	ldr	r2, [pc, #12]	; (8001700 <HAL_ADC_ConfigChannel+0x360>)
 80016f2:	0019      	movs	r1, r3
 80016f4:	0010      	movs	r0, r2
 80016f6:	f7ff fa87 	bl	8000c08 <LL_ADC_SetCommonPathInternalCh>
 80016fa:	e01d      	b.n	8001738 <HAL_ADC_ConfigChannel+0x398>
 80016fc:	80000004 	.word	0x80000004
 8001700:	40012708 	.word	0x40012708
 8001704:	b0001000 	.word	0xb0001000
 8001708:	20000000 	.word	0x20000000
 800170c:	00030d40 	.word	0x00030d40
 8001710:	b8004000 	.word	0xb8004000
 8001714:	b4002000 	.word	0xb4002000
 8001718:	ff7fffff 	.word	0xff7fffff
 800171c:	feffffff 	.word	0xfeffffff
 8001720:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	2220      	movs	r2, #32
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001730:	2317      	movs	r3, #23
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2254      	movs	r2, #84	; 0x54
 800173c:	2100      	movs	r1, #0
 800173e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001740:	2317      	movs	r3, #23
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	781b      	ldrb	r3, [r3, #0]
}
 8001746:	0018      	movs	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	b006      	add	sp, #24
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)

08001750 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff fb51 	bl	8000e08 <LL_ADC_IsEnabled>
 8001766:	1e03      	subs	r3, r0, #0
 8001768:	d000      	beq.n	800176c <ADC_Enable+0x1c>
 800176a:	e069      	b.n	8001840 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	4a36      	ldr	r2, [pc, #216]	; (800184c <ADC_Enable+0xfc>)
 8001774:	4013      	ands	r3, r2
 8001776:	d00d      	beq.n	8001794 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	2210      	movs	r2, #16
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	2201      	movs	r2, #1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e056      	b.n	8001842 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0018      	movs	r0, r3
 800179a:	f7ff fb23 	bl	8000de4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800179e:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <ADC_Enable+0x100>)
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff fa45 	bl	8000c30 <LL_ADC_GetCommonPathInternalCh>
 80017a6:	0002      	movs	r2, r0
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	041b      	lsls	r3, r3, #16
 80017ac:	4013      	ands	r3, r2
 80017ae:	d00f      	beq.n	80017d0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <ADC_Enable+0x104>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4928      	ldr	r1, [pc, #160]	; (8001858 <ADC_Enable+0x108>)
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7fe fcb4 	bl	8000124 <__udivsi3>
 80017bc:	0003      	movs	r3, r0
 80017be:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80017c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80017c2:	e002      	b.n	80017ca <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f9      	bne.n	80017c4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7e5b      	ldrb	r3, [r3, #25]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d033      	beq.n	8001840 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fa0c 	bl	8000bf4 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017e0:	e027      	b.n	8001832 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7ff fb0e 	bl	8000e08 <LL_ADC_IsEnabled>
 80017ec:	1e03      	subs	r3, r0, #0
 80017ee:	d104      	bne.n	80017fa <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff faf5 	bl	8000de4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017fa:	f7ff f9fb 	bl	8000bf4 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d914      	bls.n	8001832 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2201      	movs	r2, #1
 8001810:	4013      	ands	r3, r2
 8001812:	2b01      	cmp	r3, #1
 8001814:	d00d      	beq.n	8001832 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	2210      	movs	r2, #16
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001826:	2201      	movs	r2, #1
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e007      	b.n	8001842 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2201      	movs	r2, #1
 800183a:	4013      	ands	r3, r2
 800183c:	2b01      	cmp	r3, #1
 800183e:	d1d0      	bne.n	80017e2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b004      	add	sp, #16
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	80000017 	.word	0x80000017
 8001850:	40012708 	.word	0x40012708
 8001854:	20000000 	.word	0x20000000
 8001858:	00030d40 	.word	0x00030d40

0800185c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	0002      	movs	r2, r0
 8001864:	1dfb      	adds	r3, r7, #7
 8001866:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001868:	1dfb      	adds	r3, r7, #7
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b7f      	cmp	r3, #127	; 0x7f
 800186e:	d809      	bhi.n	8001884 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001870:	1dfb      	adds	r3, r7, #7
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	001a      	movs	r2, r3
 8001876:	231f      	movs	r3, #31
 8001878:	401a      	ands	r2, r3
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <__NVIC_EnableIRQ+0x30>)
 800187c:	2101      	movs	r1, #1
 800187e:	4091      	lsls	r1, r2
 8001880:	000a      	movs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b002      	add	sp, #8
 800188a:	bd80      	pop	{r7, pc}
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	0002      	movs	r2, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b7f      	cmp	r3, #127	; 0x7f
 80018a4:	d828      	bhi.n	80018f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a6:	4a2f      	ldr	r2, [pc, #188]	; (8001964 <__NVIC_SetPriority+0xd4>)
 80018a8:	1dfb      	adds	r3, r7, #7
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	33c0      	adds	r3, #192	; 0xc0
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	589b      	ldr	r3, [r3, r2]
 80018b6:	1dfa      	adds	r2, r7, #7
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	0011      	movs	r1, r2
 80018bc:	2203      	movs	r2, #3
 80018be:	400a      	ands	r2, r1
 80018c0:	00d2      	lsls	r2, r2, #3
 80018c2:	21ff      	movs	r1, #255	; 0xff
 80018c4:	4091      	lsls	r1, r2
 80018c6:	000a      	movs	r2, r1
 80018c8:	43d2      	mvns	r2, r2
 80018ca:	401a      	ands	r2, r3
 80018cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	019b      	lsls	r3, r3, #6
 80018d2:	22ff      	movs	r2, #255	; 0xff
 80018d4:	401a      	ands	r2, r3
 80018d6:	1dfb      	adds	r3, r7, #7
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	0018      	movs	r0, r3
 80018dc:	2303      	movs	r3, #3
 80018de:	4003      	ands	r3, r0
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018e4:	481f      	ldr	r0, [pc, #124]	; (8001964 <__NVIC_SetPriority+0xd4>)
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	430a      	orrs	r2, r1
 80018f0:	33c0      	adds	r3, #192	; 0xc0
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018f6:	e031      	b.n	800195c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f8:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <__NVIC_SetPriority+0xd8>)
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	0019      	movs	r1, r3
 8001900:	230f      	movs	r3, #15
 8001902:	400b      	ands	r3, r1
 8001904:	3b08      	subs	r3, #8
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3306      	adds	r3, #6
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	18d3      	adds	r3, r2, r3
 800190e:	3304      	adds	r3, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	1dfa      	adds	r2, r7, #7
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	0011      	movs	r1, r2
 8001918:	2203      	movs	r2, #3
 800191a:	400a      	ands	r2, r1
 800191c:	00d2      	lsls	r2, r2, #3
 800191e:	21ff      	movs	r1, #255	; 0xff
 8001920:	4091      	lsls	r1, r2
 8001922:	000a      	movs	r2, r1
 8001924:	43d2      	mvns	r2, r2
 8001926:	401a      	ands	r2, r3
 8001928:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	019b      	lsls	r3, r3, #6
 800192e:	22ff      	movs	r2, #255	; 0xff
 8001930:	401a      	ands	r2, r3
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	0018      	movs	r0, r3
 8001938:	2303      	movs	r3, #3
 800193a:	4003      	ands	r3, r0
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001940:	4809      	ldr	r0, [pc, #36]	; (8001968 <__NVIC_SetPriority+0xd8>)
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	001c      	movs	r4, r3
 8001948:	230f      	movs	r3, #15
 800194a:	4023      	ands	r3, r4
 800194c:	3b08      	subs	r3, #8
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	430a      	orrs	r2, r1
 8001952:	3306      	adds	r3, #6
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	18c3      	adds	r3, r0, r3
 8001958:	3304      	adds	r3, #4
 800195a:	601a      	str	r2, [r3, #0]
}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b003      	add	sp, #12
 8001962:	bd90      	pop	{r4, r7, pc}
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	1e5a      	subs	r2, r3, #1
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	045b      	lsls	r3, r3, #17
 800197c:	429a      	cmp	r2, r3
 800197e:	d301      	bcc.n	8001984 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001980:	2301      	movs	r3, #1
 8001982:	e010      	b.n	80019a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <SysTick_Config+0x44>)
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	3a01      	subs	r2, #1
 800198a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198c:	2301      	movs	r3, #1
 800198e:	425b      	negs	r3, r3
 8001990:	2103      	movs	r1, #3
 8001992:	0018      	movs	r0, r3
 8001994:	f7ff ff7c 	bl	8001890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x44>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x44>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	210f      	movs	r1, #15
 80019c0:	187b      	adds	r3, r7, r1
 80019c2:	1c02      	adds	r2, r0, #0
 80019c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	187b      	adds	r3, r7, r1
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b25b      	sxtb	r3, r3
 80019ce:	0011      	movs	r1, r2
 80019d0:	0018      	movs	r0, r3
 80019d2:	f7ff ff5d 	bl	8001890 <__NVIC_SetPriority>
}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b004      	add	sp, #16
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	0002      	movs	r2, r0
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ea:	1dfb      	adds	r3, r7, #7
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	0018      	movs	r0, r3
 80019f2:	f7ff ff33 	bl	800185c <__NVIC_EnableIRQ>
}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b002      	add	sp, #8
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff ffaf 	bl	800196c <SysTick_Config>
 8001a0e:	0003      	movs	r3, r0
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b002      	add	sp, #8
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a26:	e147      	b.n	8001cb8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4091      	lsls	r1, r2
 8001a32:	000a      	movs	r2, r1
 8001a34:	4013      	ands	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d100      	bne.n	8001a40 <HAL_GPIO_Init+0x28>
 8001a3e:	e138      	b.n	8001cb2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2203      	movs	r2, #3
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d005      	beq.n	8001a58 <HAL_GPIO_Init+0x40>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2203      	movs	r2, #3
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d130      	bne.n	8001aba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	409a      	lsls	r2, r3
 8001a66:	0013      	movs	r3, r2
 8001a68:	43da      	mvns	r2, r3
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	0013      	movs	r3, r2
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a8e:	2201      	movs	r2, #1
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
 8001a94:	0013      	movs	r3, r2
 8001a96:	43da      	mvns	r2, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	0013      	movs	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2203      	movs	r2, #3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d017      	beq.n	8001af6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	0013      	movs	r3, r2
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	0013      	movs	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2203      	movs	r2, #3
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d123      	bne.n	8001b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	58d3      	ldr	r3, [r2, r3]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2207      	movs	r2, #7
 8001b14:	4013      	ands	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	220f      	movs	r2, #15
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	0013      	movs	r3, r2
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2107      	movs	r1, #7
 8001b2e:	400b      	ands	r3, r1
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	409a      	lsls	r2, r3
 8001b34:	0013      	movs	r3, r2
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	08da      	lsrs	r2, r3, #3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3208      	adds	r2, #8
 8001b44:	0092      	lsls	r2, r2, #2
 8001b46:	6939      	ldr	r1, [r7, #16]
 8001b48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	2203      	movs	r2, #3
 8001b56:	409a      	lsls	r2, r3
 8001b58:	0013      	movs	r3, r2
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2203      	movs	r2, #3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	0013      	movs	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	23c0      	movs	r3, #192	; 0xc0
 8001b84:	029b      	lsls	r3, r3, #10
 8001b86:	4013      	ands	r3, r2
 8001b88:	d100      	bne.n	8001b8c <HAL_GPIO_Init+0x174>
 8001b8a:	e092      	b.n	8001cb2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b8c:	4a50      	ldr	r2, [pc, #320]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	3318      	adds	r3, #24
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	589b      	ldr	r3, [r3, r2]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	0013      	movs	r3, r2
 8001ba8:	43da      	mvns	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	23a0      	movs	r3, #160	; 0xa0
 8001bb4:	05db      	lsls	r3, r3, #23
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d013      	beq.n	8001be2 <HAL_GPIO_Init+0x1ca>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a45      	ldr	r2, [pc, #276]	; (8001cd4 <HAL_GPIO_Init+0x2bc>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00d      	beq.n	8001bde <HAL_GPIO_Init+0x1c6>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a44      	ldr	r2, [pc, #272]	; (8001cd8 <HAL_GPIO_Init+0x2c0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d007      	beq.n	8001bda <HAL_GPIO_Init+0x1c2>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a43      	ldr	r2, [pc, #268]	; (8001cdc <HAL_GPIO_Init+0x2c4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_GPIO_Init+0x1be>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x1cc>
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x1cc>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x1cc>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x1cc>
 8001be2:	2300      	movs	r3, #0
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	2103      	movs	r1, #3
 8001be8:	400a      	ands	r2, r1
 8001bea:	00d2      	lsls	r2, r2, #3
 8001bec:	4093      	lsls	r3, r2
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001bf4:	4936      	ldr	r1, [pc, #216]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3318      	adds	r3, #24
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c02:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	035b      	lsls	r3, r3, #13
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c26:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c2c:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	43da      	mvns	r2, r3
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	039b      	lsls	r3, r3, #14
 8001c44:	4013      	ands	r3, r2
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c56:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001c58:	2384      	movs	r3, #132	; 0x84
 8001c5a:	58d3      	ldr	r3, [r2, r3]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	43da      	mvns	r2, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	029b      	lsls	r3, r3, #10
 8001c70:	4013      	ands	r3, r2
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c7c:	4914      	ldr	r1, [pc, #80]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001c7e:	2284      	movs	r2, #132	; 0x84
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001c84:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	58d3      	ldr	r3, [r2, r3]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	025b      	lsls	r3, r3, #9
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001caa:	4909      	ldr	r1, [pc, #36]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001cac:	2280      	movs	r2, #128	; 0x80
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	40da      	lsrs	r2, r3
 8001cc0:	1e13      	subs	r3, r2, #0
 8001cc2:	d000      	beq.n	8001cc6 <HAL_GPIO_Init+0x2ae>
 8001cc4:	e6b0      	b.n	8001a28 <HAL_GPIO_Init+0x10>
  }
}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	46c0      	nop			; (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b006      	add	sp, #24
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021800 	.word	0x40021800
 8001cd4:	50000400 	.word	0x50000400
 8001cd8:	50000800 	.word	0x50000800
 8001cdc:	50000c00 	.word	0x50000c00

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	0008      	movs	r0, r1
 8001cea:	0011      	movs	r1, r2
 8001cec:	1cbb      	adds	r3, r7, #2
 8001cee:	1c02      	adds	r2, r0, #0
 8001cf0:	801a      	strh	r2, [r3, #0]
 8001cf2:	1c7b      	adds	r3, r7, #1
 8001cf4:	1c0a      	adds	r2, r1, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cf8:	1c7b      	adds	r3, r7, #1
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d00:	1cbb      	adds	r3, r7, #2
 8001d02:	881a      	ldrh	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d08:	e003      	b.n	8001d12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d0a:	1cbb      	adds	r3, r7, #2
 8001d0c:	881a      	ldrh	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b002      	add	sp, #8
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d11f      	bne.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	0013      	movs	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	189b      	adds	r3, r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4912      	ldr	r1, [pc, #72]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f7fe f9e8 	bl	8000124 <__udivsi3>
 8001d54:	0003      	movs	r3, r0
 8001d56:	3301      	adds	r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d5a:	e008      	b.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	e001      	b.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e009      	b.n	8001d82 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	401a      	ands	r2, r3
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d0ed      	beq.n	8001d5c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b004      	add	sp, #16
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	fffff9ff 	.word	0xfffff9ff
 8001d94:	20000000 	.word	0x20000000
 8001d98:	000f4240 	.word	0x000f4240

08001d9c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	23e0      	movs	r3, #224	; 0xe0
 8001da6:	01db      	lsls	r3, r3, #7
 8001da8:	4013      	ands	r3, r2
}
 8001daa:	0018      	movs	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e2f3      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d100      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x1e>
 8001dd0:	e07c      	b.n	8001ecc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd2:	4bc3      	ldr	r3, [pc, #780]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2238      	movs	r2, #56	; 0x38
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ddc:	4bc0      	ldr	r3, [pc, #768]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2203      	movs	r2, #3
 8001de2:	4013      	ands	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d102      	bne.n	8001df2 <HAL_RCC_OscConfig+0x3e>
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d002      	beq.n	8001df8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d10b      	bne.n	8001e10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	4bb9      	ldr	r3, [pc, #740]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	029b      	lsls	r3, r3, #10
 8001e00:	4013      	ands	r3, r2
 8001e02:	d062      	beq.n	8001eca <HAL_RCC_OscConfig+0x116>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d15e      	bne.n	8001eca <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e2ce      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	025b      	lsls	r3, r3, #9
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_OscConfig+0x78>
 8001e1c:	4bb0      	ldr	r3, [pc, #704]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4baf      	ldr	r3, [pc, #700]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001e22:	2180      	movs	r1, #128	; 0x80
 8001e24:	0249      	lsls	r1, r1, #9
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e020      	b.n	8001e6e <HAL_RCC_OscConfig+0xba>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	23a0      	movs	r3, #160	; 0xa0
 8001e32:	02db      	lsls	r3, r3, #11
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d10e      	bne.n	8001e56 <HAL_RCC_OscConfig+0xa2>
 8001e38:	4ba9      	ldr	r3, [pc, #676]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4ba8      	ldr	r3, [pc, #672]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	02c9      	lsls	r1, r1, #11
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	4ba6      	ldr	r3, [pc, #664]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4ba5      	ldr	r3, [pc, #660]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	0249      	lsls	r1, r1, #9
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e00b      	b.n	8001e6e <HAL_RCC_OscConfig+0xba>
 8001e56:	4ba2      	ldr	r3, [pc, #648]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4ba1      	ldr	r3, [pc, #644]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001e5c:	49a1      	ldr	r1, [pc, #644]	; (80020e4 <HAL_RCC_OscConfig+0x330>)
 8001e5e:	400a      	ands	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	4b9f      	ldr	r3, [pc, #636]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4b9e      	ldr	r3, [pc, #632]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001e68:	499f      	ldr	r1, [pc, #636]	; (80020e8 <HAL_RCC_OscConfig+0x334>)
 8001e6a:	400a      	ands	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d014      	beq.n	8001ea0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7fe febd 	bl	8000bf4 <HAL_GetTick>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e80:	f7fe feb8 	bl	8000bf4 <HAL_GetTick>
 8001e84:	0002      	movs	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	; 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e28d      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e92:	4b93      	ldr	r3, [pc, #588]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	029b      	lsls	r3, r3, #10
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0xcc>
 8001e9e:	e015      	b.n	8001ecc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fea8 	bl	8000bf4 <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eaa:	f7fe fea3 	bl	8000bf4 <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b64      	cmp	r3, #100	; 0x64
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e278      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ebc:	4b88      	ldr	r3, [pc, #544]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	029b      	lsls	r3, r3, #10
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d1f0      	bne.n	8001eaa <HAL_RCC_OscConfig+0xf6>
 8001ec8:	e000      	b.n	8001ecc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d100      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x124>
 8001ed6:	e099      	b.n	800200c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed8:	4b81      	ldr	r3, [pc, #516]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2238      	movs	r2, #56	; 0x38
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee2:	4b7f      	ldr	r3, [pc, #508]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	4013      	ands	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d102      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x144>
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d002      	beq.n	8001efe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d135      	bne.n	8001f6a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001efe:	4b78      	ldr	r3, [pc, #480]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4013      	ands	r3, r2
 8001f08:	d005      	beq.n	8001f16 <HAL_RCC_OscConfig+0x162>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e24b      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4b72      	ldr	r3, [pc, #456]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4a74      	ldr	r2, [pc, #464]	; (80020ec <HAL_RCC_OscConfig+0x338>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	0019      	movs	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	021a      	lsls	r2, r3, #8
 8001f26:	4b6e      	ldr	r3, [pc, #440]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d112      	bne.n	8001f58 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f32:	4b6b      	ldr	r3, [pc, #428]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a6e      	ldr	r2, [pc, #440]	; (80020f0 <HAL_RCC_OscConfig+0x33c>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	4b67      	ldr	r3, [pc, #412]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f46:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0adb      	lsrs	r3, r3, #11
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	4013      	ands	r3, r2
 8001f50:	4a68      	ldr	r2, [pc, #416]	; (80020f4 <HAL_RCC_OscConfig+0x340>)
 8001f52:	40da      	lsrs	r2, r3
 8001f54:	4b68      	ldr	r3, [pc, #416]	; (80020f8 <HAL_RCC_OscConfig+0x344>)
 8001f56:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f58:	4b68      	ldr	r3, [pc, #416]	; (80020fc <HAL_RCC_OscConfig+0x348>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7fe fded 	bl	8000b3c <HAL_InitTick>
 8001f62:	1e03      	subs	r3, r0, #0
 8001f64:	d051      	beq.n	800200a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e221      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d030      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f72:	4b5b      	ldr	r3, [pc, #364]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a5e      	ldr	r2, [pc, #376]	; (80020f0 <HAL_RCC_OscConfig+0x33c>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f86:	4b56      	ldr	r3, [pc, #344]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b55      	ldr	r3, [pc, #340]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001f8c:	2180      	movs	r1, #128	; 0x80
 8001f8e:	0049      	lsls	r1, r1, #1
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7fe fe2e 	bl	8000bf4 <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7fe fe29 	bl	8000bf4 <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1fe      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b48      	ldr	r3, [pc, #288]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a4a      	ldr	r2, [pc, #296]	; (80020ec <HAL_RCC_OscConfig+0x338>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	021a      	lsls	r2, r3, #8
 8001fcc:	4b44      	ldr	r3, [pc, #272]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	e01b      	b.n	800200c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001fd4:	4b42      	ldr	r3, [pc, #264]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001fda:	4949      	ldr	r1, [pc, #292]	; (8002100 <HAL_RCC_OscConfig+0x34c>)
 8001fdc:	400a      	ands	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fe08 	bl	8000bf4 <HAL_GetTick>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fea:	f7fe fe03 	bl	8000bf4 <HAL_GetTick>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e1d8      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ffc:	4b38      	ldr	r3, [pc, #224]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4013      	ands	r3, r2
 8002006:	d1f0      	bne.n	8001fea <HAL_RCC_OscConfig+0x236>
 8002008:	e000      	b.n	800200c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800200a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2208      	movs	r2, #8
 8002012:	4013      	ands	r3, r2
 8002014:	d047      	beq.n	80020a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002016:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2238      	movs	r2, #56	; 0x38
 800201c:	4013      	ands	r3, r2
 800201e:	2b18      	cmp	r3, #24
 8002020:	d10a      	bne.n	8002038 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002022:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8002024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002026:	2202      	movs	r2, #2
 8002028:	4013      	ands	r3, r2
 800202a:	d03c      	beq.n	80020a6 <HAL_RCC_OscConfig+0x2f2>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d138      	bne.n	80020a6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e1ba      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d019      	beq.n	8002074 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8002042:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002044:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8002046:	2101      	movs	r1, #1
 8002048:	430a      	orrs	r2, r1
 800204a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe fdd2 	bl	8000bf4 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002056:	f7fe fdcd 	bl	8000bf4 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e1a2      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 800206a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206c:	2202      	movs	r2, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d0f1      	beq.n	8002056 <HAL_RCC_OscConfig+0x2a2>
 8002072:	e018      	b.n	80020a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002074:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 8002076:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 800207a:	2101      	movs	r1, #1
 800207c:	438a      	bics	r2, r1
 800207e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7fe fdb8 	bl	8000bf4 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208a:	f7fe fdb3 	bl	8000bf4 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e188      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 800209e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d1f1      	bne.n	800208a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2204      	movs	r2, #4
 80020ac:	4013      	ands	r3, r2
 80020ae:	d100      	bne.n	80020b2 <HAL_RCC_OscConfig+0x2fe>
 80020b0:	e0c6      	b.n	8002240 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	231f      	movs	r3, #31
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2238      	movs	r2, #56	; 0x38
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b20      	cmp	r3, #32
 80020c4:	d11e      	bne.n	8002104 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_RCC_OscConfig+0x32c>)
 80020c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ca:	2202      	movs	r2, #2
 80020cc:	4013      	ands	r3, r2
 80020ce:	d100      	bne.n	80020d2 <HAL_RCC_OscConfig+0x31e>
 80020d0:	e0b6      	b.n	8002240 <HAL_RCC_OscConfig+0x48c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d000      	beq.n	80020dc <HAL_RCC_OscConfig+0x328>
 80020da:	e0b1      	b.n	8002240 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e166      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
 80020e0:	40021000 	.word	0x40021000
 80020e4:	fffeffff 	.word	0xfffeffff
 80020e8:	fffbffff 	.word	0xfffbffff
 80020ec:	ffff80ff 	.word	0xffff80ff
 80020f0:	ffffc7ff 	.word	0xffffc7ff
 80020f4:	00f42400 	.word	0x00f42400
 80020f8:	20000000 	.word	0x20000000
 80020fc:	20000004 	.word	0x20000004
 8002100:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002104:	4bac      	ldr	r3, [pc, #688]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 8002106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	055b      	lsls	r3, r3, #21
 800210c:	4013      	ands	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_RCC_OscConfig+0x360>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <HAL_RCC_OscConfig+0x362>
 8002114:	2300      	movs	r3, #0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d011      	beq.n	800213e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	4ba7      	ldr	r3, [pc, #668]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 800211c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800211e:	4ba6      	ldr	r3, [pc, #664]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 8002120:	2180      	movs	r1, #128	; 0x80
 8002122:	0549      	lsls	r1, r1, #21
 8002124:	430a      	orrs	r2, r1
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c
 8002128:	4ba3      	ldr	r3, [pc, #652]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 800212a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	055b      	lsls	r3, r3, #21
 8002130:	4013      	ands	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002136:	231f      	movs	r3, #31
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213e:	4b9f      	ldr	r3, [pc, #636]	; (80023bc <HAL_RCC_OscConfig+0x608>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4013      	ands	r3, r2
 8002148:	d11a      	bne.n	8002180 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800214a:	4b9c      	ldr	r3, [pc, #624]	; (80023bc <HAL_RCC_OscConfig+0x608>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4b9b      	ldr	r3, [pc, #620]	; (80023bc <HAL_RCC_OscConfig+0x608>)
 8002150:	2180      	movs	r1, #128	; 0x80
 8002152:	0049      	lsls	r1, r1, #1
 8002154:	430a      	orrs	r2, r1
 8002156:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002158:	f7fe fd4c 	bl	8000bf4 <HAL_GetTick>
 800215c:	0003      	movs	r3, r0
 800215e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002162:	f7fe fd47 	bl	8000bf4 <HAL_GetTick>
 8002166:	0002      	movs	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e11c      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002174:	4b91      	ldr	r3, [pc, #580]	; (80023bc <HAL_RCC_OscConfig+0x608>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4013      	ands	r3, r2
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x3e2>
 8002188:	4b8b      	ldr	r3, [pc, #556]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 800218a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800218c:	4b8a      	ldr	r3, [pc, #552]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 800218e:	2101      	movs	r1, #1
 8002190:	430a      	orrs	r2, r1
 8002192:	65da      	str	r2, [r3, #92]	; 0x5c
 8002194:	e01c      	b.n	80021d0 <HAL_RCC_OscConfig+0x41c>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b05      	cmp	r3, #5
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x404>
 800219e:	4b86      	ldr	r3, [pc, #536]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80021a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021a2:	4b85      	ldr	r3, [pc, #532]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80021a4:	2104      	movs	r1, #4
 80021a6:	430a      	orrs	r2, r1
 80021a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80021aa:	4b83      	ldr	r3, [pc, #524]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80021ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021ae:	4b82      	ldr	r3, [pc, #520]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	430a      	orrs	r2, r1
 80021b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80021b6:	e00b      	b.n	80021d0 <HAL_RCC_OscConfig+0x41c>
 80021b8:	4b7f      	ldr	r3, [pc, #508]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80021ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021bc:	4b7e      	ldr	r3, [pc, #504]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80021be:	2101      	movs	r1, #1
 80021c0:	438a      	bics	r2, r1
 80021c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80021c4:	4b7c      	ldr	r3, [pc, #496]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80021c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021c8:	4b7b      	ldr	r3, [pc, #492]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80021ca:	2104      	movs	r1, #4
 80021cc:	438a      	bics	r2, r1
 80021ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d014      	beq.n	8002202 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fd0c 	bl	8000bf4 <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e0:	e009      	b.n	80021f6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7fe fd07 	bl	8000bf4 <HAL_GetTick>
 80021e6:	0002      	movs	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	4a74      	ldr	r2, [pc, #464]	; (80023c0 <HAL_RCC_OscConfig+0x60c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0db      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f6:	4b70      	ldr	r3, [pc, #448]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	2202      	movs	r2, #2
 80021fc:	4013      	ands	r3, r2
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x42e>
 8002200:	e013      	b.n	800222a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7fe fcf7 	bl	8000bf4 <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800220a:	e009      	b.n	8002220 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f7fe fcf2 	bl	8000bf4 <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	4a6a      	ldr	r2, [pc, #424]	; (80023c0 <HAL_RCC_OscConfig+0x60c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0c6      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002220:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 8002222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002224:	2202      	movs	r2, #2
 8002226:	4013      	ands	r3, r2
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800222a:	231f      	movs	r3, #31
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d105      	bne.n	8002240 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002234:	4b60      	ldr	r3, [pc, #384]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 8002236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002238:	4b5f      	ldr	r3, [pc, #380]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 800223a:	4962      	ldr	r1, [pc, #392]	; (80023c4 <HAL_RCC_OscConfig+0x610>)
 800223c:	400a      	ands	r2, r1
 800223e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <HAL_RCC_OscConfig+0x496>
 8002248:	e0b0      	b.n	80023ac <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800224a:	4b5b      	ldr	r3, [pc, #364]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2238      	movs	r2, #56	; 0x38
 8002250:	4013      	ands	r3, r2
 8002252:	2b10      	cmp	r3, #16
 8002254:	d100      	bne.n	8002258 <HAL_RCC_OscConfig+0x4a4>
 8002256:	e078      	b.n	800234a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d153      	bne.n	8002308 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	4b55      	ldr	r3, [pc, #340]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b54      	ldr	r3, [pc, #336]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 8002266:	4958      	ldr	r1, [pc, #352]	; (80023c8 <HAL_RCC_OscConfig+0x614>)
 8002268:	400a      	ands	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7fe fcc2 	bl	8000bf4 <HAL_GetTick>
 8002270:	0003      	movs	r3, r0
 8002272:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002276:	f7fe fcbd 	bl	8000bf4 <HAL_GetTick>
 800227a:	0002      	movs	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e092      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002288:	4b4b      	ldr	r3, [pc, #300]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	049b      	lsls	r3, r3, #18
 8002290:	4013      	ands	r3, r2
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002294:	4b48      	ldr	r3, [pc, #288]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a4c      	ldr	r2, [pc, #304]	; (80023cc <HAL_RCC_OscConfig+0x618>)
 800229a:	4013      	ands	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1a      	ldr	r2, [r3, #32]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	431a      	orrs	r2, r3
 80022bc:	4b3e      	ldr	r3, [pc, #248]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b3c      	ldr	r3, [pc, #240]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	0449      	lsls	r1, r1, #17
 80022cc:	430a      	orrs	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80022d0:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80022d6:	2180      	movs	r1, #128	; 0x80
 80022d8:	0549      	lsls	r1, r1, #21
 80022da:	430a      	orrs	r2, r1
 80022dc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022de:	f7fe fc89 	bl	8000bf4 <HAL_GetTick>
 80022e2:	0003      	movs	r3, r0
 80022e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7fe fc84 	bl	8000bf4 <HAL_GetTick>
 80022ec:	0002      	movs	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e059      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fa:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	049b      	lsls	r3, r3, #18
 8002302:	4013      	ands	r3, r2
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x534>
 8002306:	e051      	b.n	80023ac <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002308:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 800230e:	492e      	ldr	r1, [pc, #184]	; (80023c8 <HAL_RCC_OscConfig+0x614>)
 8002310:	400a      	ands	r2, r1
 8002312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe fc6e 	bl	8000bf4 <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe fc69 	bl	8000bf4 <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e03e      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	049b      	lsls	r3, r3, #18
 8002338:	4013      	ands	r3, r2
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 8002342:	4923      	ldr	r1, [pc, #140]	; (80023d0 <HAL_RCC_OscConfig+0x61c>)
 8002344:	400a      	ands	r2, r1
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	e030      	b.n	80023ac <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e02b      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002356:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <HAL_RCC_OscConfig+0x604>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2203      	movs	r2, #3
 8002360:	401a      	ands	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	429a      	cmp	r2, r3
 8002368:	d11e      	bne.n	80023a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2270      	movs	r2, #112	; 0x70
 800236e:	401a      	ands	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d117      	bne.n	80023a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	23fe      	movs	r3, #254	; 0xfe
 800237c:	01db      	lsls	r3, r3, #7
 800237e:	401a      	ands	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d10e      	bne.n	80023a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	23f8      	movs	r3, #248	; 0xf8
 800238e:	039b      	lsls	r3, r3, #14
 8002390:	401a      	ands	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d106      	bne.n	80023a8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	0f5b      	lsrs	r3, r3, #29
 800239e:	075a      	lsls	r2, r3, #29
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b008      	add	sp, #32
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40007000 	.word	0x40007000
 80023c0:	00001388 	.word	0x00001388
 80023c4:	efffffff 	.word	0xefffffff
 80023c8:	feffffff 	.word	0xfeffffff
 80023cc:	1fc1808c 	.word	0x1fc1808c
 80023d0:	effefffc 	.word	0xeffefffc

080023d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0e9      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e8:	4b76      	ldr	r3, [pc, #472]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2207      	movs	r2, #7
 80023ee:	4013      	ands	r3, r2
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d91e      	bls.n	8002434 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b73      	ldr	r3, [pc, #460]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2207      	movs	r2, #7
 80023fc:	4393      	bics	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	4b70      	ldr	r3, [pc, #448]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002408:	f7fe fbf4 	bl	8000bf4 <HAL_GetTick>
 800240c:	0003      	movs	r3, r0
 800240e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002410:	e009      	b.n	8002426 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002412:	f7fe fbef 	bl	8000bf4 <HAL_GetTick>
 8002416:	0002      	movs	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	4a6a      	ldr	r2, [pc, #424]	; (80025c8 <HAL_RCC_ClockConfig+0x1f4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e0ca      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002426:	4b67      	ldr	r3, [pc, #412]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2207      	movs	r2, #7
 800242c:	4013      	ands	r3, r2
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d1ee      	bne.n	8002412 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2202      	movs	r2, #2
 800243a:	4013      	ands	r3, r2
 800243c:	d015      	beq.n	800246a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2204      	movs	r2, #4
 8002444:	4013      	ands	r3, r2
 8002446:	d006      	beq.n	8002456 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002448:	4b60      	ldr	r3, [pc, #384]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	4b5f      	ldr	r3, [pc, #380]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 800244e:	21e0      	movs	r1, #224	; 0xe0
 8002450:	01c9      	lsls	r1, r1, #7
 8002452:	430a      	orrs	r2, r1
 8002454:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002456:	4b5d      	ldr	r3, [pc, #372]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4a5d      	ldr	r2, [pc, #372]	; (80025d0 <HAL_RCC_ClockConfig+0x1fc>)
 800245c:	4013      	ands	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	4b59      	ldr	r3, [pc, #356]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 8002466:	430a      	orrs	r2, r1
 8002468:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	4013      	ands	r3, r2
 8002472:	d057      	beq.n	8002524 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d107      	bne.n	800248c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800247c:	4b53      	ldr	r3, [pc, #332]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	029b      	lsls	r3, r3, #10
 8002484:	4013      	ands	r3, r2
 8002486:	d12b      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e097      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002494:	4b4d      	ldr	r3, [pc, #308]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	049b      	lsls	r3, r3, #18
 800249c:	4013      	ands	r3, r2
 800249e:	d11f      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e08b      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d107      	bne.n	80024bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ac:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4013      	ands	r3, r2
 80024b6:	d113      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e07f      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d106      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c4:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 80024c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c8:	2202      	movs	r2, #2
 80024ca:	4013      	ands	r3, r2
 80024cc:	d108      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e074      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	2202      	movs	r2, #2
 80024d8:	4013      	ands	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e06d      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024e0:	4b3a      	ldr	r3, [pc, #232]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2207      	movs	r2, #7
 80024e6:	4393      	bics	r3, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4b37      	ldr	r3, [pc, #220]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 80024f0:	430a      	orrs	r2, r1
 80024f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f4:	f7fe fb7e 	bl	8000bf4 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fc:	e009      	b.n	8002512 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fe:	f7fe fb79 	bl	8000bf4 <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	4a2f      	ldr	r2, [pc, #188]	; (80025c8 <HAL_RCC_ClockConfig+0x1f4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e054      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2238      	movs	r2, #56	; 0x38
 8002518:	401a      	ands	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	429a      	cmp	r2, r3
 8002522:	d1ec      	bne.n	80024fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2207      	movs	r2, #7
 800252a:	4013      	ands	r3, r2
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d21e      	bcs.n	8002570 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2207      	movs	r2, #7
 8002538:	4393      	bics	r3, r2
 800253a:	0019      	movs	r1, r3
 800253c:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002544:	f7fe fb56 	bl	8000bf4 <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800254c:	e009      	b.n	8002562 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254e:	f7fe fb51 	bl	8000bf4 <HAL_GetTick>
 8002552:	0002      	movs	r2, r0
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	4a1b      	ldr	r2, [pc, #108]	; (80025c8 <HAL_RCC_ClockConfig+0x1f4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e02c      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2207      	movs	r2, #7
 8002568:	4013      	ands	r3, r2
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d1ee      	bne.n	800254e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2204      	movs	r2, #4
 8002576:	4013      	ands	r3, r2
 8002578:	d009      	beq.n	800258e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800257a:	4b14      	ldr	r3, [pc, #80]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <HAL_RCC_ClockConfig+0x200>)
 8002580:	4013      	ands	r3, r2
 8002582:	0019      	movs	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800258e:	f000 f829 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8002592:	0001      	movs	r1, r0
 8002594:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	220f      	movs	r2, #15
 800259c:	401a      	ands	r2, r3
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_RCC_ClockConfig+0x204>)
 80025a0:	0092      	lsls	r2, r2, #2
 80025a2:	58d3      	ldr	r3, [r2, r3]
 80025a4:	221f      	movs	r2, #31
 80025a6:	4013      	ands	r3, r2
 80025a8:	000a      	movs	r2, r1
 80025aa:	40da      	lsrs	r2, r3
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_ClockConfig+0x208>)
 80025ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_ClockConfig+0x20c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7fe fac1 	bl	8000b3c <HAL_InitTick>
 80025ba:	0003      	movs	r3, r0
}
 80025bc:	0018      	movs	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	b004      	add	sp, #16
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40022000 	.word	0x40022000
 80025c8:	00001388 	.word	0x00001388
 80025cc:	40021000 	.word	0x40021000
 80025d0:	fffff0ff 	.word	0xfffff0ff
 80025d4:	ffff8fff 	.word	0xffff8fff
 80025d8:	080043c8 	.word	0x080043c8
 80025dc:	20000000 	.word	0x20000000
 80025e0:	20000004 	.word	0x20000004

080025e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ea:	4b3c      	ldr	r3, [pc, #240]	; (80026dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2238      	movs	r2, #56	; 0x38
 80025f0:	4013      	ands	r3, r2
 80025f2:	d10f      	bne.n	8002614 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025f4:	4b39      	ldr	r3, [pc, #228]	; (80026dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0adb      	lsrs	r3, r3, #11
 80025fa:	2207      	movs	r2, #7
 80025fc:	4013      	ands	r3, r2
 80025fe:	2201      	movs	r2, #1
 8002600:	409a      	lsls	r2, r3
 8002602:	0013      	movs	r3, r2
 8002604:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002606:	6839      	ldr	r1, [r7, #0]
 8002608:	4835      	ldr	r0, [pc, #212]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800260a:	f7fd fd8b 	bl	8000124 <__udivsi3>
 800260e:	0003      	movs	r3, r0
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	e05d      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002614:	4b31      	ldr	r3, [pc, #196]	; (80026dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2238      	movs	r2, #56	; 0x38
 800261a:	4013      	ands	r3, r2
 800261c:	2b08      	cmp	r3, #8
 800261e:	d102      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	e054      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002626:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2238      	movs	r2, #56	; 0x38
 800262c:	4013      	ands	r3, r2
 800262e:	2b10      	cmp	r3, #16
 8002630:	d138      	bne.n	80026a4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002632:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2203      	movs	r2, #3
 8002638:	4013      	ands	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800263c:	4b27      	ldr	r3, [pc, #156]	; (80026dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	2207      	movs	r2, #7
 8002644:	4013      	ands	r3, r2
 8002646:	3301      	adds	r3, #1
 8002648:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d10d      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	4824      	ldr	r0, [pc, #144]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002654:	f7fd fd66 	bl	8000124 <__udivsi3>
 8002658:	0003      	movs	r3, r0
 800265a:	0019      	movs	r1, r3
 800265c:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	227f      	movs	r2, #127	; 0x7f
 8002664:	4013      	ands	r3, r2
 8002666:	434b      	muls	r3, r1
 8002668:	617b      	str	r3, [r7, #20]
        break;
 800266a:	e00d      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	481c      	ldr	r0, [pc, #112]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002670:	f7fd fd58 	bl	8000124 <__udivsi3>
 8002674:	0003      	movs	r3, r0
 8002676:	0019      	movs	r1, r3
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	227f      	movs	r2, #127	; 0x7f
 8002680:	4013      	ands	r3, r2
 8002682:	434b      	muls	r3, r1
 8002684:	617b      	str	r3, [r7, #20]
        break;
 8002686:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0f5b      	lsrs	r3, r3, #29
 800268e:	2207      	movs	r2, #7
 8002690:	4013      	ands	r3, r2
 8002692:	3301      	adds	r3, #1
 8002694:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	6978      	ldr	r0, [r7, #20]
 800269a:	f7fd fd43 	bl	8000124 <__udivsi3>
 800269e:	0003      	movs	r3, r0
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	e015      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026a4:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2238      	movs	r2, #56	; 0x38
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d103      	bne.n	80026b8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2238      	movs	r2, #56	; 0x38
 80026be:	4013      	ands	r3, r2
 80026c0:	2b18      	cmp	r3, #24
 80026c2:	d103      	bne.n	80026cc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80026c4:	23fa      	movs	r3, #250	; 0xfa
 80026c6:	01db      	lsls	r3, r3, #7
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	e001      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026d0:	693b      	ldr	r3, [r7, #16]
}
 80026d2:	0018      	movs	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b006      	add	sp, #24
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	40021000 	.word	0x40021000
 80026e0:	00f42400 	.word	0x00f42400
 80026e4:	007a1200 	.word	0x007a1200

080026e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ec:	4b02      	ldr	r3, [pc, #8]	; (80026f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	0018      	movs	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	20000000 	.word	0x20000000

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b5b0      	push	{r4, r5, r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002700:	f7ff fff2 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 8002704:	0004      	movs	r4, r0
 8002706:	f7ff fb49 	bl	8001d9c <LL_RCC_GetAPB1Prescaler>
 800270a:	0003      	movs	r3, r0
 800270c:	0b1a      	lsrs	r2, r3, #12
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002710:	0092      	lsls	r2, r2, #2
 8002712:	58d3      	ldr	r3, [r2, r3]
 8002714:	221f      	movs	r2, #31
 8002716:	4013      	ands	r3, r2
 8002718:	40dc      	lsrs	r4, r3
 800271a:	0023      	movs	r3, r4
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	bdb0      	pop	{r4, r5, r7, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	08004408 	.word	0x08004408

08002728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002730:	2313      	movs	r3, #19
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002738:	2312      	movs	r3, #18
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	029b      	lsls	r3, r3, #10
 8002748:	4013      	ands	r3, r2
 800274a:	d100      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800274c:	e0a3      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274e:	2011      	movs	r0, #17
 8002750:	183b      	adds	r3, r7, r0
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002756:	4b86      	ldr	r3, [pc, #536]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002758:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	055b      	lsls	r3, r3, #21
 800275e:	4013      	ands	r3, r2
 8002760:	d110      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	4b83      	ldr	r3, [pc, #524]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002766:	4b82      	ldr	r3, [pc, #520]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	0549      	lsls	r1, r1, #21
 800276c:	430a      	orrs	r2, r1
 800276e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002770:	4b7f      	ldr	r3, [pc, #508]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	055b      	lsls	r3, r3, #21
 8002778:	4013      	ands	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277e:	183b      	adds	r3, r7, r0
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002784:	4b7b      	ldr	r3, [pc, #492]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b7a      	ldr	r3, [pc, #488]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800278a:	2180      	movs	r1, #128	; 0x80
 800278c:	0049      	lsls	r1, r1, #1
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002792:	f7fe fa2f 	bl	8000bf4 <HAL_GetTick>
 8002796:	0003      	movs	r3, r0
 8002798:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800279a:	e00b      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279c:	f7fe fa2a 	bl	8000bf4 <HAL_GetTick>
 80027a0:	0002      	movs	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d904      	bls.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80027aa:	2313      	movs	r3, #19
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2203      	movs	r2, #3
 80027b0:	701a      	strb	r2, [r3, #0]
        break;
 80027b2:	e005      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027b4:	4b6f      	ldr	r3, [pc, #444]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4013      	ands	r3, r2
 80027be:	d0ed      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80027c0:	2313      	movs	r3, #19
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d154      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027ca:	4b69      	ldr	r3, [pc, #420]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027ce:	23c0      	movs	r3, #192	; 0xc0
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4013      	ands	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d019      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d014      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	4a63      	ldr	r2, [pc, #396]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027f0:	4b5f      	ldr	r3, [pc, #380]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027f4:	4b5e      	ldr	r3, [pc, #376]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027f6:	2180      	movs	r1, #128	; 0x80
 80027f8:	0249      	lsls	r1, r1, #9
 80027fa:	430a      	orrs	r2, r1
 80027fc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027fe:	4b5c      	ldr	r3, [pc, #368]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002800:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002802:	4b5b      	ldr	r3, [pc, #364]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002804:	495d      	ldr	r1, [pc, #372]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002806:	400a      	ands	r2, r1
 8002808:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800280a:	4b59      	ldr	r3, [pc, #356]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2201      	movs	r2, #1
 8002814:	4013      	ands	r3, r2
 8002816:	d016      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe f9ec 	bl	8000bf4 <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002820:	e00c      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe f9e7 	bl	8000bf4 <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	4a54      	ldr	r2, [pc, #336]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d904      	bls.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002832:	2313      	movs	r3, #19
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	2203      	movs	r2, #3
 8002838:	701a      	strb	r2, [r3, #0]
            break;
 800283a:	e004      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283c:	4b4c      	ldr	r3, [pc, #304]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	2202      	movs	r2, #2
 8002842:	4013      	ands	r3, r2
 8002844:	d0ed      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002846:	2313      	movs	r3, #19
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002850:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	4a48      	ldr	r2, [pc, #288]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002856:	4013      	ands	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	4b44      	ldr	r3, [pc, #272]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002860:	430a      	orrs	r2, r1
 8002862:	65da      	str	r2, [r3, #92]	; 0x5c
 8002864:	e00c      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002866:	2312      	movs	r3, #18
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	2213      	movs	r2, #19
 800286c:	18ba      	adds	r2, r7, r2
 800286e:	7812      	ldrb	r2, [r2, #0]
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e005      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002874:	2312      	movs	r3, #18
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	2213      	movs	r2, #19
 800287a:	18ba      	adds	r2, r7, r2
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002880:	2311      	movs	r3, #17
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d105      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288a:	4b39      	ldr	r3, [pc, #228]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800288c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800288e:	4b38      	ldr	r3, [pc, #224]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002890:	493c      	ldr	r1, [pc, #240]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002892:	400a      	ands	r2, r1
 8002894:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2201      	movs	r2, #1
 800289c:	4013      	ands	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028a0:	4b33      	ldr	r3, [pc, #204]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	2203      	movs	r2, #3
 80028a6:	4393      	bics	r3, r2
 80028a8:	0019      	movs	r1, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4b30      	ldr	r3, [pc, #192]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028b0:	430a      	orrs	r2, r1
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2202      	movs	r2, #2
 80028ba:	4013      	ands	r3, r2
 80028bc:	d009      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028be:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	220c      	movs	r2, #12
 80028c4:	4393      	bics	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	4b28      	ldr	r3, [pc, #160]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028ce:	430a      	orrs	r2, r1
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2220      	movs	r2, #32
 80028d8:	4013      	ands	r3, r2
 80028da:	d009      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e0:	4a29      	ldr	r2, [pc, #164]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028ec:	430a      	orrs	r2, r1
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	01db      	lsls	r3, r3, #7
 80028f8:	4013      	ands	r3, r2
 80028fa:	d015      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028fc:	4b1c      	ldr	r3, [pc, #112]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	0899      	lsrs	r1, r3, #2
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800290a:	430a      	orrs	r2, r1
 800290c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	05db      	lsls	r3, r3, #23
 8002916:	429a      	cmp	r2, r3
 8002918:	d106      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002920:	2180      	movs	r1, #128	; 0x80
 8002922:	0249      	lsls	r1, r1, #9
 8002924:	430a      	orrs	r2, r1
 8002926:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	4013      	ands	r3, r2
 8002932:	d016      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002934:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800293a:	4013      	ands	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002944:	430a      	orrs	r2, r1
 8002946:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	01db      	lsls	r3, r3, #7
 8002950:	429a      	cmp	r2, r3
 8002952:	d106      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800295a:	2180      	movs	r1, #128	; 0x80
 800295c:	0249      	lsls	r1, r1, #9
 800295e:	430a      	orrs	r2, r1
 8002960:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002962:	2312      	movs	r3, #18
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	781b      	ldrb	r3, [r3, #0]
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	b006      	add	sp, #24
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	40007000 	.word	0x40007000
 8002978:	fffffcff 	.word	0xfffffcff
 800297c:	fffeffff 	.word	0xfffeffff
 8002980:	00001388 	.word	0x00001388
 8002984:	efffffff 	.word	0xefffffff
 8002988:	ffffcfff 	.word	0xffffcfff
 800298c:	ffff3fff 	.word	0xffff3fff

08002990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e04a      	b.n	8002a38 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	223d      	movs	r2, #61	; 0x3d
 80029a6:	5c9b      	ldrb	r3, [r3, r2]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d107      	bne.n	80029be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	223c      	movs	r2, #60	; 0x3c
 80029b2:	2100      	movs	r1, #0
 80029b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f7fd ff8f 	bl	80008dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	223d      	movs	r2, #61	; 0x3d
 80029c2:	2102      	movs	r1, #2
 80029c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3304      	adds	r3, #4
 80029ce:	0019      	movs	r1, r3
 80029d0:	0010      	movs	r0, r2
 80029d2:	f000 f9dd 	bl	8002d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2248      	movs	r2, #72	; 0x48
 80029da:	2101      	movs	r1, #1
 80029dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	223e      	movs	r2, #62	; 0x3e
 80029e2:	2101      	movs	r1, #1
 80029e4:	5499      	strb	r1, [r3, r2]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	223f      	movs	r2, #63	; 0x3f
 80029ea:	2101      	movs	r1, #1
 80029ec:	5499      	strb	r1, [r3, r2]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2240      	movs	r2, #64	; 0x40
 80029f2:	2101      	movs	r1, #1
 80029f4:	5499      	strb	r1, [r3, r2]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2241      	movs	r2, #65	; 0x41
 80029fa:	2101      	movs	r1, #1
 80029fc:	5499      	strb	r1, [r3, r2]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2242      	movs	r2, #66	; 0x42
 8002a02:	2101      	movs	r1, #1
 8002a04:	5499      	strb	r1, [r3, r2]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2243      	movs	r2, #67	; 0x43
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2244      	movs	r2, #68	; 0x44
 8002a12:	2101      	movs	r1, #1
 8002a14:	5499      	strb	r1, [r3, r2]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2245      	movs	r2, #69	; 0x45
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	5499      	strb	r1, [r3, r2]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2246      	movs	r2, #70	; 0x46
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2247      	movs	r2, #71	; 0x47
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	223d      	movs	r2, #61	; 0x3d
 8002a32:	2101      	movs	r1, #1
 8002a34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b002      	add	sp, #8
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	223d      	movs	r2, #61	; 0x3d
 8002a4c:	5c9b      	ldrb	r3, [r3, r2]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d001      	beq.n	8002a58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e034      	b.n	8002ac2 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	223d      	movs	r2, #61	; 0x3d
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a19      	ldr	r2, [pc, #100]	; (8002acc <HAL_TIM_Base_Start+0x8c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_TIM_Base_Start+0x3e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <HAL_TIM_Base_Start+0x90>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_TIM_Base_Start+0x3e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a16      	ldr	r2, [pc, #88]	; (8002ad4 <HAL_TIM_Base_Start+0x94>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d116      	bne.n	8002aac <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <HAL_TIM_Base_Start+0x98>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d016      	beq.n	8002abe <HAL_TIM_Base_Start+0x7e>
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	025b      	lsls	r3, r3, #9
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d011      	beq.n	8002abe <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aaa:	e008      	b.n	8002abe <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e000      	b.n	8002ac0 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002abe:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b004      	add	sp, #16
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	40012c00 	.word	0x40012c00
 8002ad0:	40000400 	.word	0x40000400
 8002ad4:	40014000 	.word	0x40014000
 8002ad8:	00010007 	.word	0x00010007

08002adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2202      	movs	r2, #2
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d124      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2202      	movs	r2, #2
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d11d      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2203      	movs	r2, #3
 8002b06:	4252      	negs	r2, r2
 8002b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	2203      	movs	r2, #3
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d004      	beq.n	8002b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f000 f91e 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002b24:	e007      	b.n	8002b36 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 f911 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f000 f91d 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2204      	movs	r2, #4
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d125      	bne.n	8002b96 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2204      	movs	r2, #4
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d11e      	bne.n	8002b96 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2205      	movs	r2, #5
 8002b5e:	4252      	negs	r2, r2
 8002b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2202      	movs	r2, #2
 8002b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	23c0      	movs	r3, #192	; 0xc0
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4013      	ands	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 f8f1 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002b7e:	e007      	b.n	8002b90 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 f8e4 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f000 f8f0 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d124      	bne.n	8002bee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2208      	movs	r2, #8
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d11d      	bne.n	8002bee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2209      	movs	r2, #9
 8002bb8:	4252      	negs	r2, r2
 8002bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	2203      	movs	r2, #3
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 f8c5 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002bd6:	e007      	b.n	8002be8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 f8b8 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 f8c4 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b10      	cmp	r3, #16
 8002bfa:	d125      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2210      	movs	r2, #16
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b10      	cmp	r3, #16
 8002c08:	d11e      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2211      	movs	r2, #17
 8002c10:	4252      	negs	r2, r2
 8002c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2208      	movs	r2, #8
 8002c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69da      	ldr	r2, [r3, #28]
 8002c20:	23c0      	movs	r3, #192	; 0xc0
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4013      	ands	r3, r2
 8002c26:	d004      	beq.n	8002c32 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f000 f898 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002c30:	e007      	b.n	8002c42 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f000 f88b 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 f897 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d10f      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d108      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	4252      	negs	r2, r2
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 f865 	bl	8002d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2280      	movs	r2, #128	; 0x80
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b80      	cmp	r3, #128	; 0x80
 8002c82:	d10f      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2280      	movs	r2, #128	; 0x80
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b80      	cmp	r3, #128	; 0x80
 8002c90:	d108      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2281      	movs	r2, #129	; 0x81
 8002c98:	4252      	negs	r2, r2
 8002c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 f95c 	bl	8002f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	401a      	ands	r2, r3
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d10e      	bne.n	8002cd6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b80      	cmp	r3, #128	; 0x80
 8002cc4:	d107      	bne.n	8002cd6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1c      	ldr	r2, [pc, #112]	; (8002d3c <HAL_TIM_IRQHandler+0x260>)
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f000 f94b 	bl	8002f6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	2240      	movs	r2, #64	; 0x40
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d10f      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b40      	cmp	r3, #64	; 0x40
 8002cf0:	d108      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2241      	movs	r2, #65	; 0x41
 8002cf8:	4252      	negs	r2, r2
 8002cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 f83e 	bl	8002d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d10f      	bne.n	8002d32 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d108      	bne.n	8002d32 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2221      	movs	r2, #33	; 0x21
 8002d26:	4252      	negs	r2, r2
 8002d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 f90d 	bl	8002f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b002      	add	sp, #8
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	fffffeff 	.word	0xfffffeff

08002d40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a2f      	ldr	r2, [pc, #188]	; (8002e60 <TIM_Base_SetConfig+0xd0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d003      	beq.n	8002db0 <TIM_Base_SetConfig+0x20>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a2e      	ldr	r2, [pc, #184]	; (8002e64 <TIM_Base_SetConfig+0xd4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d108      	bne.n	8002dc2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2270      	movs	r2, #112	; 0x70
 8002db4:	4393      	bics	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a26      	ldr	r2, [pc, #152]	; (8002e60 <TIM_Base_SetConfig+0xd0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d013      	beq.n	8002df2 <TIM_Base_SetConfig+0x62>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a25      	ldr	r2, [pc, #148]	; (8002e64 <TIM_Base_SetConfig+0xd4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00f      	beq.n	8002df2 <TIM_Base_SetConfig+0x62>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <TIM_Base_SetConfig+0xd8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00b      	beq.n	8002df2 <TIM_Base_SetConfig+0x62>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a23      	ldr	r2, [pc, #140]	; (8002e6c <TIM_Base_SetConfig+0xdc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <TIM_Base_SetConfig+0x62>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a22      	ldr	r2, [pc, #136]	; (8002e70 <TIM_Base_SetConfig+0xe0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d003      	beq.n	8002df2 <TIM_Base_SetConfig+0x62>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <TIM_Base_SetConfig+0xe4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d108      	bne.n	8002e04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4a20      	ldr	r2, [pc, #128]	; (8002e78 <TIM_Base_SetConfig+0xe8>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2280      	movs	r2, #128	; 0x80
 8002e08:	4393      	bics	r3, r2
 8002e0a:	001a      	movs	r2, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a0c      	ldr	r2, [pc, #48]	; (8002e60 <TIM_Base_SetConfig+0xd0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00b      	beq.n	8002e4a <TIM_Base_SetConfig+0xba>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a0d      	ldr	r2, [pc, #52]	; (8002e6c <TIM_Base_SetConfig+0xdc>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <TIM_Base_SetConfig+0xba>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a0c      	ldr	r2, [pc, #48]	; (8002e70 <TIM_Base_SetConfig+0xe0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d003      	beq.n	8002e4a <TIM_Base_SetConfig+0xba>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <TIM_Base_SetConfig+0xe4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d103      	bne.n	8002e52 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	615a      	str	r2, [r3, #20]
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b004      	add	sp, #16
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40002000 	.word	0x40002000
 8002e6c:	40014000 	.word	0x40014000
 8002e70:	40014400 	.word	0x40014400
 8002e74:	40014800 	.word	0x40014800
 8002e78:	fffffcff 	.word	0xfffffcff

08002e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	223c      	movs	r2, #60	; 0x3c
 8002e8a:	5c9b      	ldrb	r3, [r3, r2]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e04f      	b.n	8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	223c      	movs	r2, #60	; 0x3c
 8002e98:	2101      	movs	r1, #1
 8002e9a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	223d      	movs	r2, #61	; 0x3d
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a20      	ldr	r2, [pc, #128]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d108      	bne.n	8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2270      	movs	r2, #112	; 0x70
 8002ed4:	4393      	bics	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d009      	beq.n	8002f08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d004      	beq.n	8002f08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a11      	ldr	r2, [pc, #68]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d10c      	bne.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	4393      	bics	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	223d      	movs	r2, #61	; 0x3d
 8002f26:	2101      	movs	r1, #1
 8002f28:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	223c      	movs	r2, #60	; 0x3c
 8002f2e:	2100      	movs	r1, #0
 8002f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b004      	add	sp, #16
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	ff0fffff 	.word	0xff0fffff
 8002f44:	40000400 	.word	0x40000400
 8002f48:	40014000 	.word	0x40014000

08002f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b002      	add	sp, #8
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b002      	add	sp, #8
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e046      	b.n	800301c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2288      	movs	r2, #136	; 0x88
 8002f92:	589b      	ldr	r3, [r3, r2]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d107      	bne.n	8002fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2284      	movs	r2, #132	; 0x84
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7fd fcc0 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2288      	movs	r2, #136	; 0x88
 8002fac:	2124      	movs	r1, #36	; 0x24
 8002fae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f000 f8cc 	bl	8003160 <UART_SetConfig>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e024      	b.n	800301c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 fa63 	bl	80034a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	490d      	ldr	r1, [pc, #52]	; (8003024 <HAL_UART_Init+0xa8>)
 8002fee:	400a      	ands	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	212a      	movs	r1, #42	; 0x2a
 8002ffe:	438a      	bics	r2, r1
 8003000:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2101      	movs	r1, #1
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	0018      	movs	r0, r3
 8003016:	f000 fafb 	bl	8003610 <UART_CheckIdleState>
 800301a:	0003      	movs	r3, r0
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}
 8003024:	ffffb7ff 	.word	0xffffb7ff

08003028 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	; 0x28
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	1dbb      	adds	r3, r7, #6
 8003036:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2288      	movs	r2, #136	; 0x88
 800303c:	589b      	ldr	r3, [r3, r2]
 800303e:	2b20      	cmp	r3, #32
 8003040:	d000      	beq.n	8003044 <HAL_UART_Transmit+0x1c>
 8003042:	e088      	b.n	8003156 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_UART_Transmit+0x2a>
 800304a:	1dbb      	adds	r3, r7, #6
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e080      	b.n	8003158 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	015b      	lsls	r3, r3, #5
 800305e:	429a      	cmp	r2, r3
 8003060:	d109      	bne.n	8003076 <HAL_UART_Transmit+0x4e>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d105      	bne.n	8003076 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2201      	movs	r2, #1
 800306e:	4013      	ands	r3, r2
 8003070:	d001      	beq.n	8003076 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e070      	b.n	8003158 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2290      	movs	r2, #144	; 0x90
 800307a:	2100      	movs	r1, #0
 800307c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2288      	movs	r2, #136	; 0x88
 8003082:	2121      	movs	r1, #33	; 0x21
 8003084:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003086:	f7fd fdb5 	bl	8000bf4 <HAL_GetTick>
 800308a:	0003      	movs	r3, r0
 800308c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1dba      	adds	r2, r7, #6
 8003092:	2154      	movs	r1, #84	; 0x54
 8003094:	8812      	ldrh	r2, [r2, #0]
 8003096:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1dba      	adds	r2, r7, #6
 800309c:	2156      	movs	r1, #86	; 0x56
 800309e:	8812      	ldrh	r2, [r2, #0]
 80030a0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	015b      	lsls	r3, r3, #5
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d108      	bne.n	80030c0 <HAL_UART_Transmit+0x98>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d104      	bne.n	80030c0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	e003      	b.n	80030c8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030c8:	e02c      	b.n	8003124 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	0013      	movs	r3, r2
 80030d4:	2200      	movs	r2, #0
 80030d6:	2180      	movs	r1, #128	; 0x80
 80030d8:	f000 fae8 	bl	80036ac <UART_WaitOnFlagUntilTimeout>
 80030dc:	1e03      	subs	r3, r0, #0
 80030de:	d001      	beq.n	80030e4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e039      	b.n	8003158 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	001a      	movs	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	05d2      	lsls	r2, r2, #23
 80030f6:	0dd2      	lsrs	r2, r2, #23
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	3302      	adds	r3, #2
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	e007      	b.n	8003112 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	3301      	adds	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2256      	movs	r2, #86	; 0x56
 8003116:	5a9b      	ldrh	r3, [r3, r2]
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b299      	uxth	r1, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2256      	movs	r2, #86	; 0x56
 8003122:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2256      	movs	r2, #86	; 0x56
 8003128:	5a9b      	ldrh	r3, [r3, r2]
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1cc      	bne.n	80030ca <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	0013      	movs	r3, r2
 800313a:	2200      	movs	r2, #0
 800313c:	2140      	movs	r1, #64	; 0x40
 800313e:	f000 fab5 	bl	80036ac <UART_WaitOnFlagUntilTimeout>
 8003142:	1e03      	subs	r3, r0, #0
 8003144:	d001      	beq.n	800314a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e006      	b.n	8003158 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2288      	movs	r2, #136	; 0x88
 800314e:	2120      	movs	r1, #32
 8003150:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e000      	b.n	8003158 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
  }
}
 8003158:	0018      	movs	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	b008      	add	sp, #32
 800315e:	bd80      	pop	{r7, pc}

08003160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003168:	231a      	movs	r3, #26
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	4313      	orrs	r3, r2
 8003186:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4abc      	ldr	r2, [pc, #752]	; (8003480 <UART_SetConfig+0x320>)
 8003190:	4013      	ands	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	430a      	orrs	r2, r1
 800319c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4ab7      	ldr	r2, [pc, #732]	; (8003484 <UART_SetConfig+0x324>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	0019      	movs	r1, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4aae      	ldr	r2, [pc, #696]	; (8003488 <UART_SetConfig+0x328>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	0019      	movs	r1, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	430a      	orrs	r2, r1
 80031da:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	220f      	movs	r2, #15
 80031e4:	4393      	bics	r3, r2
 80031e6:	0019      	movs	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4aa4      	ldr	r2, [pc, #656]	; (800348c <UART_SetConfig+0x32c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d127      	bne.n	800324e <UART_SetConfig+0xee>
 80031fe:	4ba4      	ldr	r3, [pc, #656]	; (8003490 <UART_SetConfig+0x330>)
 8003200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003202:	2203      	movs	r2, #3
 8003204:	4013      	ands	r3, r2
 8003206:	2b03      	cmp	r3, #3
 8003208:	d017      	beq.n	800323a <UART_SetConfig+0xda>
 800320a:	d81b      	bhi.n	8003244 <UART_SetConfig+0xe4>
 800320c:	2b02      	cmp	r3, #2
 800320e:	d00a      	beq.n	8003226 <UART_SetConfig+0xc6>
 8003210:	d818      	bhi.n	8003244 <UART_SetConfig+0xe4>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <UART_SetConfig+0xbc>
 8003216:	2b01      	cmp	r3, #1
 8003218:	d00a      	beq.n	8003230 <UART_SetConfig+0xd0>
 800321a:	e013      	b.n	8003244 <UART_SetConfig+0xe4>
 800321c:	231b      	movs	r3, #27
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	e058      	b.n	80032d8 <UART_SetConfig+0x178>
 8003226:	231b      	movs	r3, #27
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	2202      	movs	r2, #2
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	e053      	b.n	80032d8 <UART_SetConfig+0x178>
 8003230:	231b      	movs	r3, #27
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	2204      	movs	r2, #4
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e04e      	b.n	80032d8 <UART_SetConfig+0x178>
 800323a:	231b      	movs	r3, #27
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	2208      	movs	r2, #8
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e049      	b.n	80032d8 <UART_SetConfig+0x178>
 8003244:	231b      	movs	r3, #27
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	2210      	movs	r2, #16
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e044      	b.n	80032d8 <UART_SetConfig+0x178>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a90      	ldr	r2, [pc, #576]	; (8003494 <UART_SetConfig+0x334>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d127      	bne.n	80032a8 <UART_SetConfig+0x148>
 8003258:	4b8d      	ldr	r3, [pc, #564]	; (8003490 <UART_SetConfig+0x330>)
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	220c      	movs	r2, #12
 800325e:	4013      	ands	r3, r2
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d017      	beq.n	8003294 <UART_SetConfig+0x134>
 8003264:	d81b      	bhi.n	800329e <UART_SetConfig+0x13e>
 8003266:	2b08      	cmp	r3, #8
 8003268:	d00a      	beq.n	8003280 <UART_SetConfig+0x120>
 800326a:	d818      	bhi.n	800329e <UART_SetConfig+0x13e>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <UART_SetConfig+0x116>
 8003270:	2b04      	cmp	r3, #4
 8003272:	d00a      	beq.n	800328a <UART_SetConfig+0x12a>
 8003274:	e013      	b.n	800329e <UART_SetConfig+0x13e>
 8003276:	231b      	movs	r3, #27
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	e02b      	b.n	80032d8 <UART_SetConfig+0x178>
 8003280:	231b      	movs	r3, #27
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	2202      	movs	r2, #2
 8003286:	701a      	strb	r2, [r3, #0]
 8003288:	e026      	b.n	80032d8 <UART_SetConfig+0x178>
 800328a:	231b      	movs	r3, #27
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	2204      	movs	r2, #4
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e021      	b.n	80032d8 <UART_SetConfig+0x178>
 8003294:	231b      	movs	r3, #27
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	2208      	movs	r2, #8
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	e01c      	b.n	80032d8 <UART_SetConfig+0x178>
 800329e:	231b      	movs	r3, #27
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	2210      	movs	r2, #16
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	e017      	b.n	80032d8 <UART_SetConfig+0x178>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a7a      	ldr	r2, [pc, #488]	; (8003498 <UART_SetConfig+0x338>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d104      	bne.n	80032bc <UART_SetConfig+0x15c>
 80032b2:	231b      	movs	r3, #27
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e00d      	b.n	80032d8 <UART_SetConfig+0x178>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a76      	ldr	r2, [pc, #472]	; (800349c <UART_SetConfig+0x33c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d104      	bne.n	80032d0 <UART_SetConfig+0x170>
 80032c6:	231b      	movs	r3, #27
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e003      	b.n	80032d8 <UART_SetConfig+0x178>
 80032d0:	231b      	movs	r3, #27
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2210      	movs	r2, #16
 80032d6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d000      	beq.n	80032e6 <UART_SetConfig+0x186>
 80032e4:	e065      	b.n	80033b2 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80032e6:	231b      	movs	r3, #27
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d015      	beq.n	800331c <UART_SetConfig+0x1bc>
 80032f0:	dc18      	bgt.n	8003324 <UART_SetConfig+0x1c4>
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d00d      	beq.n	8003312 <UART_SetConfig+0x1b2>
 80032f6:	dc15      	bgt.n	8003324 <UART_SetConfig+0x1c4>
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <UART_SetConfig+0x1a2>
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d005      	beq.n	800330c <UART_SetConfig+0x1ac>
 8003300:	e010      	b.n	8003324 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003302:	f7ff f9fb 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8003306:	0003      	movs	r3, r0
 8003308:	617b      	str	r3, [r7, #20]
        break;
 800330a:	e012      	b.n	8003332 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800330c:	4b64      	ldr	r3, [pc, #400]	; (80034a0 <UART_SetConfig+0x340>)
 800330e:	617b      	str	r3, [r7, #20]
        break;
 8003310:	e00f      	b.n	8003332 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003312:	f7ff f967 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8003316:	0003      	movs	r3, r0
 8003318:	617b      	str	r3, [r7, #20]
        break;
 800331a:	e00a      	b.n	8003332 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	617b      	str	r3, [r7, #20]
        break;
 8003322:	e006      	b.n	8003332 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003328:	231a      	movs	r3, #26
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]
        break;
 8003330:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d100      	bne.n	800333a <UART_SetConfig+0x1da>
 8003338:	e08d      	b.n	8003456 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800333e:	4b59      	ldr	r3, [pc, #356]	; (80034a4 <UART_SetConfig+0x344>)
 8003340:	0052      	lsls	r2, r2, #1
 8003342:	5ad3      	ldrh	r3, [r2, r3]
 8003344:	0019      	movs	r1, r3
 8003346:	6978      	ldr	r0, [r7, #20]
 8003348:	f7fc feec 	bl	8000124 <__udivsi3>
 800334c:	0003      	movs	r3, r0
 800334e:	005a      	lsls	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	085b      	lsrs	r3, r3, #1
 8003356:	18d2      	adds	r2, r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0019      	movs	r1, r3
 800335e:	0010      	movs	r0, r2
 8003360:	f7fc fee0 	bl	8000124 <__udivsi3>
 8003364:	0003      	movs	r3, r0
 8003366:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b0f      	cmp	r3, #15
 800336c:	d91c      	bls.n	80033a8 <UART_SetConfig+0x248>
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	025b      	lsls	r3, r3, #9
 8003374:	429a      	cmp	r2, r3
 8003376:	d217      	bcs.n	80033a8 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	b29a      	uxth	r2, r3
 800337c:	200e      	movs	r0, #14
 800337e:	183b      	adds	r3, r7, r0
 8003380:	210f      	movs	r1, #15
 8003382:	438a      	bics	r2, r1
 8003384:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	b29b      	uxth	r3, r3
 800338c:	2207      	movs	r2, #7
 800338e:	4013      	ands	r3, r2
 8003390:	b299      	uxth	r1, r3
 8003392:	183b      	adds	r3, r7, r0
 8003394:	183a      	adds	r2, r7, r0
 8003396:	8812      	ldrh	r2, [r2, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	183a      	adds	r2, r7, r0
 80033a2:	8812      	ldrh	r2, [r2, #0]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	e056      	b.n	8003456 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80033a8:	231a      	movs	r3, #26
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
 80033b0:	e051      	b.n	8003456 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033b2:	231b      	movs	r3, #27
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d015      	beq.n	80033e8 <UART_SetConfig+0x288>
 80033bc:	dc18      	bgt.n	80033f0 <UART_SetConfig+0x290>
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d00d      	beq.n	80033de <UART_SetConfig+0x27e>
 80033c2:	dc15      	bgt.n	80033f0 <UART_SetConfig+0x290>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <UART_SetConfig+0x26e>
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d005      	beq.n	80033d8 <UART_SetConfig+0x278>
 80033cc:	e010      	b.n	80033f0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ce:	f7ff f995 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 80033d2:	0003      	movs	r3, r0
 80033d4:	617b      	str	r3, [r7, #20]
        break;
 80033d6:	e012      	b.n	80033fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d8:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <UART_SetConfig+0x340>)
 80033da:	617b      	str	r3, [r7, #20]
        break;
 80033dc:	e00f      	b.n	80033fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033de:	f7ff f901 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 80033e2:	0003      	movs	r3, r0
 80033e4:	617b      	str	r3, [r7, #20]
        break;
 80033e6:	e00a      	b.n	80033fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	617b      	str	r3, [r7, #20]
        break;
 80033ee:	e006      	b.n	80033fe <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033f4:	231a      	movs	r3, #26
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
        break;
 80033fc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d028      	beq.n	8003456 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003408:	4b26      	ldr	r3, [pc, #152]	; (80034a4 <UART_SetConfig+0x344>)
 800340a:	0052      	lsls	r2, r2, #1
 800340c:	5ad3      	ldrh	r3, [r2, r3]
 800340e:	0019      	movs	r1, r3
 8003410:	6978      	ldr	r0, [r7, #20]
 8003412:	f7fc fe87 	bl	8000124 <__udivsi3>
 8003416:	0003      	movs	r3, r0
 8003418:	001a      	movs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	18d2      	adds	r2, r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	0019      	movs	r1, r3
 8003428:	0010      	movs	r0, r2
 800342a:	f7fc fe7b 	bl	8000124 <__udivsi3>
 800342e:	0003      	movs	r3, r0
 8003430:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b0f      	cmp	r3, #15
 8003436:	d90a      	bls.n	800344e <UART_SetConfig+0x2ee>
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	025b      	lsls	r3, r3, #9
 800343e:	429a      	cmp	r2, r3
 8003440:	d205      	bcs.n	800344e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	b29a      	uxth	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60da      	str	r2, [r3, #12]
 800344c:	e003      	b.n	8003456 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800344e:	231a      	movs	r3, #26
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	226a      	movs	r2, #106	; 0x6a
 800345a:	2101      	movs	r1, #1
 800345c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2268      	movs	r2, #104	; 0x68
 8003462:	2101      	movs	r1, #1
 8003464:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003472:	231a      	movs	r3, #26
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	781b      	ldrb	r3, [r3, #0]
}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	b008      	add	sp, #32
 800347e:	bd80      	pop	{r7, pc}
 8003480:	cfff69f3 	.word	0xcfff69f3
 8003484:	ffffcfff 	.word	0xffffcfff
 8003488:	11fff4ff 	.word	0x11fff4ff
 800348c:	40013800 	.word	0x40013800
 8003490:	40021000 	.word	0x40021000
 8003494:	40004400 	.word	0x40004400
 8003498:	40004800 	.word	0x40004800
 800349c:	40004c00 	.word	0x40004c00
 80034a0:	00f42400 	.word	0x00f42400
 80034a4:	08004428 	.word	0x08004428

080034a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	2201      	movs	r2, #1
 80034b6:	4013      	ands	r3, r2
 80034b8:	d00b      	beq.n	80034d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <UART_AdvFeatureConfig+0x144>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	2202      	movs	r2, #2
 80034d8:	4013      	ands	r3, r2
 80034da:	d00b      	beq.n	80034f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4a43      	ldr	r2, [pc, #268]	; (80035f0 <UART_AdvFeatureConfig+0x148>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	2204      	movs	r2, #4
 80034fa:	4013      	ands	r3, r2
 80034fc:	d00b      	beq.n	8003516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a3b      	ldr	r2, [pc, #236]	; (80035f4 <UART_AdvFeatureConfig+0x14c>)
 8003506:	4013      	ands	r3, r2
 8003508:	0019      	movs	r1, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	2208      	movs	r2, #8
 800351c:	4013      	ands	r3, r2
 800351e:	d00b      	beq.n	8003538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4a34      	ldr	r2, [pc, #208]	; (80035f8 <UART_AdvFeatureConfig+0x150>)
 8003528:	4013      	ands	r3, r2
 800352a:	0019      	movs	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	2210      	movs	r2, #16
 800353e:	4013      	ands	r3, r2
 8003540:	d00b      	beq.n	800355a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a2c      	ldr	r2, [pc, #176]	; (80035fc <UART_AdvFeatureConfig+0x154>)
 800354a:	4013      	ands	r3, r2
 800354c:	0019      	movs	r1, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	2220      	movs	r2, #32
 8003560:	4013      	ands	r3, r2
 8003562:	d00b      	beq.n	800357c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4a25      	ldr	r2, [pc, #148]	; (8003600 <UART_AdvFeatureConfig+0x158>)
 800356c:	4013      	ands	r3, r2
 800356e:	0019      	movs	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	2240      	movs	r2, #64	; 0x40
 8003582:	4013      	ands	r3, r2
 8003584:	d01d      	beq.n	80035c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <UART_AdvFeatureConfig+0x15c>)
 800358e:	4013      	ands	r3, r2
 8003590:	0019      	movs	r1, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	035b      	lsls	r3, r3, #13
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d10b      	bne.n	80035c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4a15      	ldr	r2, [pc, #84]	; (8003608 <UART_AdvFeatureConfig+0x160>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	0019      	movs	r1, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	4013      	ands	r3, r2
 80035ca:	d00b      	beq.n	80035e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4a0e      	ldr	r2, [pc, #56]	; (800360c <UART_AdvFeatureConfig+0x164>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	0019      	movs	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  }
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b002      	add	sp, #8
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	fffdffff 	.word	0xfffdffff
 80035f0:	fffeffff 	.word	0xfffeffff
 80035f4:	fffbffff 	.word	0xfffbffff
 80035f8:	ffff7fff 	.word	0xffff7fff
 80035fc:	ffffefff 	.word	0xffffefff
 8003600:	ffffdfff 	.word	0xffffdfff
 8003604:	ffefffff 	.word	0xffefffff
 8003608:	ff9fffff 	.word	0xff9fffff
 800360c:	fff7ffff 	.word	0xfff7ffff

08003610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af02      	add	r7, sp, #8
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2290      	movs	r2, #144	; 0x90
 800361c:	2100      	movs	r1, #0
 800361e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003620:	f7fd fae8 	bl	8000bf4 <HAL_GetTick>
 8003624:	0003      	movs	r3, r0
 8003626:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2208      	movs	r2, #8
 8003630:	4013      	ands	r3, r2
 8003632:	2b08      	cmp	r3, #8
 8003634:	d10c      	bne.n	8003650 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	0391      	lsls	r1, r2, #14
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <UART_CheckIdleState+0x98>)
 8003640:	9200      	str	r2, [sp, #0]
 8003642:	2200      	movs	r2, #0
 8003644:	f000 f832 	bl	80036ac <UART_WaitOnFlagUntilTimeout>
 8003648:	1e03      	subs	r3, r0, #0
 800364a:	d001      	beq.n	8003650 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e026      	b.n	800369e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2204      	movs	r2, #4
 8003658:	4013      	ands	r3, r2
 800365a:	2b04      	cmp	r3, #4
 800365c:	d10c      	bne.n	8003678 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2280      	movs	r2, #128	; 0x80
 8003662:	03d1      	lsls	r1, r2, #15
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4a10      	ldr	r2, [pc, #64]	; (80036a8 <UART_CheckIdleState+0x98>)
 8003668:	9200      	str	r2, [sp, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	f000 f81e 	bl	80036ac <UART_WaitOnFlagUntilTimeout>
 8003670:	1e03      	subs	r3, r0, #0
 8003672:	d001      	beq.n	8003678 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e012      	b.n	800369e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2288      	movs	r2, #136	; 0x88
 800367c:	2120      	movs	r1, #32
 800367e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	228c      	movs	r2, #140	; 0x8c
 8003684:	2120      	movs	r1, #32
 8003686:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2284      	movs	r2, #132	; 0x84
 8003698:	2100      	movs	r1, #0
 800369a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	0018      	movs	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b004      	add	sp, #16
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	01ffffff 	.word	0x01ffffff

080036ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b094      	sub	sp, #80	; 0x50
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	1dfb      	adds	r3, r7, #7
 80036ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036bc:	e0a7      	b.n	800380e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c0:	3301      	adds	r3, #1
 80036c2:	d100      	bne.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80036c4:	e0a3      	b.n	800380e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c6:	f7fd fa95 	bl	8000bf4 <HAL_GetTick>
 80036ca:	0002      	movs	r2, r0
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <UART_WaitOnFlagUntilTimeout+0x30>
 80036d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d13f      	bne.n	800375c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036dc:	f3ef 8310 	mrs	r3, PRIMASK
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80036e4:	647b      	str	r3, [r7, #68]	; 0x44
 80036e6:	2301      	movs	r3, #1
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	f383 8810 	msr	PRIMASK, r3
}
 80036f0:	46c0      	nop			; (mov r8, r8)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	494e      	ldr	r1, [pc, #312]	; (8003838 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80036fe:	400a      	ands	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003704:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	f383 8810 	msr	PRIMASK, r3
}
 800370c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800370e:	f3ef 8310 	mrs	r3, PRIMASK
 8003712:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003716:	643b      	str	r3, [r7, #64]	; 0x40
 8003718:	2301      	movs	r3, #1
 800371a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	f383 8810 	msr	PRIMASK, r3
}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2101      	movs	r1, #1
 8003730:	438a      	bics	r2, r1
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003736:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373a:	f383 8810 	msr	PRIMASK, r3
}
 800373e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2288      	movs	r2, #136	; 0x88
 8003744:	2120      	movs	r1, #32
 8003746:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	228c      	movs	r2, #140	; 0x8c
 800374c:	2120      	movs	r1, #32
 800374e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2284      	movs	r2, #132	; 0x84
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e069      	b.n	8003830 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2204      	movs	r2, #4
 8003764:	4013      	ands	r3, r2
 8003766:	d052      	beq.n	800380e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	401a      	ands	r2, r3
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	429a      	cmp	r2, r3
 800377a:	d148      	bne.n	800380e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2280      	movs	r2, #128	; 0x80
 8003782:	0112      	lsls	r2, r2, #4
 8003784:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003786:	f3ef 8310 	mrs	r3, PRIMASK
 800378a:	613b      	str	r3, [r7, #16]
  return(result);
 800378c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800378e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003790:	2301      	movs	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f383 8810 	msr	PRIMASK, r3
}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4924      	ldr	r1, [pc, #144]	; (8003838 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80037a8:	400a      	ands	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f383 8810 	msr	PRIMASK, r3
}
 80037b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b8:	f3ef 8310 	mrs	r3, PRIMASK
 80037bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80037be:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80037c2:	2301      	movs	r3, #1
 80037c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	f383 8810 	msr	PRIMASK, r3
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2101      	movs	r1, #1
 80037da:	438a      	bics	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
 80037de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2288      	movs	r2, #136	; 0x88
 80037ee:	2120      	movs	r1, #32
 80037f0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	228c      	movs	r2, #140	; 0x8c
 80037f6:	2120      	movs	r1, #32
 80037f8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2290      	movs	r2, #144	; 0x90
 80037fe:	2120      	movs	r1, #32
 8003800:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2284      	movs	r2, #132	; 0x84
 8003806:	2100      	movs	r1, #0
 8003808:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e010      	b.n	8003830 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	4013      	ands	r3, r2
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	425a      	negs	r2, r3
 800381e:	4153      	adcs	r3, r2
 8003820:	b2db      	uxtb	r3, r3
 8003822:	001a      	movs	r2, r3
 8003824:	1dfb      	adds	r3, r7, #7
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d100      	bne.n	800382e <UART_WaitOnFlagUntilTimeout+0x182>
 800382c:	e747      	b.n	80036be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	b014      	add	sp, #80	; 0x50
 8003836:	bd80      	pop	{r7, pc}
 8003838:	fffffe5f 	.word	0xfffffe5f

0800383c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2284      	movs	r2, #132	; 0x84
 8003848:	5c9b      	ldrb	r3, [r3, r2]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_UARTEx_DisableFifoMode+0x16>
 800384e:	2302      	movs	r3, #2
 8003850:	e027      	b.n	80038a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2284      	movs	r2, #132	; 0x84
 8003856:	2101      	movs	r1, #1
 8003858:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2288      	movs	r2, #136	; 0x88
 800385e:	2124      	movs	r1, #36	; 0x24
 8003860:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2101      	movs	r1, #1
 8003876:	438a      	bics	r2, r1
 8003878:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a0b      	ldr	r2, [pc, #44]	; (80038ac <HAL_UARTEx_DisableFifoMode+0x70>)
 800387e:	4013      	ands	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2288      	movs	r2, #136	; 0x88
 8003894:	2120      	movs	r1, #32
 8003896:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2284      	movs	r2, #132	; 0x84
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	0018      	movs	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b004      	add	sp, #16
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	dfffffff 	.word	0xdfffffff

080038b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2284      	movs	r2, #132	; 0x84
 80038be:	5c9b      	ldrb	r3, [r3, r2]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e02e      	b.n	8003926 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2284      	movs	r2, #132	; 0x84
 80038cc:	2101      	movs	r1, #1
 80038ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2288      	movs	r2, #136	; 0x88
 80038d4:	2124      	movs	r1, #36	; 0x24
 80038d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2101      	movs	r1, #1
 80038ec:	438a      	bics	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	08d9      	lsrs	r1, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	0018      	movs	r0, r3
 8003908:	f000 f854 	bl	80039b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2288      	movs	r2, #136	; 0x88
 8003918:	2120      	movs	r1, #32
 800391a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2284      	movs	r2, #132	; 0x84
 8003920:	2100      	movs	r1, #0
 8003922:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b004      	add	sp, #16
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2284      	movs	r2, #132	; 0x84
 800393e:	5c9b      	ldrb	r3, [r3, r2]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003944:	2302      	movs	r3, #2
 8003946:	e02f      	b.n	80039a8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2284      	movs	r2, #132	; 0x84
 800394c:	2101      	movs	r1, #1
 800394e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2288      	movs	r2, #136	; 0x88
 8003954:	2124      	movs	r1, #36	; 0x24
 8003956:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2101      	movs	r1, #1
 800396c:	438a      	bics	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	4a0e      	ldr	r2, [pc, #56]	; (80039b0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003978:	4013      	ands	r3, r2
 800397a:	0019      	movs	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	0018      	movs	r0, r3
 800398a:	f000 f813 	bl	80039b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2288      	movs	r2, #136	; 0x88
 800399a:	2120      	movs	r1, #32
 800399c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2284      	movs	r2, #132	; 0x84
 80039a2:	2100      	movs	r1, #0
 80039a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	0018      	movs	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b004      	add	sp, #16
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	f1ffffff 	.word	0xf1ffffff

080039b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80039b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d108      	bne.n	80039d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	226a      	movs	r2, #106	; 0x6a
 80039c8:	2101      	movs	r1, #1
 80039ca:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2268      	movs	r2, #104	; 0x68
 80039d0:	2101      	movs	r1, #1
 80039d2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80039d4:	e043      	b.n	8003a5e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80039d6:	260f      	movs	r6, #15
 80039d8:	19bb      	adds	r3, r7, r6
 80039da:	2208      	movs	r2, #8
 80039dc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80039de:	200e      	movs	r0, #14
 80039e0:	183b      	adds	r3, r7, r0
 80039e2:	2208      	movs	r2, #8
 80039e4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	0e5b      	lsrs	r3, r3, #25
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	240d      	movs	r4, #13
 80039f2:	193b      	adds	r3, r7, r4
 80039f4:	2107      	movs	r1, #7
 80039f6:	400a      	ands	r2, r1
 80039f8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	0f5b      	lsrs	r3, r3, #29
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	250c      	movs	r5, #12
 8003a06:	197b      	adds	r3, r7, r5
 8003a08:	2107      	movs	r1, #7
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a0e:	183b      	adds	r3, r7, r0
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	197a      	adds	r2, r7, r5
 8003a14:	7812      	ldrb	r2, [r2, #0]
 8003a16:	4914      	ldr	r1, [pc, #80]	; (8003a68 <UARTEx_SetNbDataToProcess+0xb4>)
 8003a18:	5c8a      	ldrb	r2, [r1, r2]
 8003a1a:	435a      	muls	r2, r3
 8003a1c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a1e:	197b      	adds	r3, r7, r5
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <UARTEx_SetNbDataToProcess+0xb8>)
 8003a24:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a26:	0019      	movs	r1, r3
 8003a28:	f7fc fc06 	bl	8000238 <__divsi3>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	b299      	uxth	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	226a      	movs	r2, #106	; 0x6a
 8003a34:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a36:	19bb      	adds	r3, r7, r6
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	193a      	adds	r2, r7, r4
 8003a3c:	7812      	ldrb	r2, [r2, #0]
 8003a3e:	490a      	ldr	r1, [pc, #40]	; (8003a68 <UARTEx_SetNbDataToProcess+0xb4>)
 8003a40:	5c8a      	ldrb	r2, [r1, r2]
 8003a42:	435a      	muls	r2, r3
 8003a44:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003a46:	193b      	adds	r3, r7, r4
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <UARTEx_SetNbDataToProcess+0xb8>)
 8003a4c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a4e:	0019      	movs	r1, r3
 8003a50:	f7fc fbf2 	bl	8000238 <__divsi3>
 8003a54:	0003      	movs	r3, r0
 8003a56:	b299      	uxth	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2268      	movs	r2, #104	; 0x68
 8003a5c:	5299      	strh	r1, [r3, r2]
}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b005      	add	sp, #20
 8003a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	08004440 	.word	0x08004440
 8003a6c:	08004448 	.word	0x08004448

08003a70 <__errno>:
 8003a70:	4b01      	ldr	r3, [pc, #4]	; (8003a78 <__errno+0x8>)
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	4770      	bx	lr
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	2000000c 	.word	0x2000000c

08003a7c <__libc_init_array>:
 8003a7c:	b570      	push	{r4, r5, r6, lr}
 8003a7e:	2600      	movs	r6, #0
 8003a80:	4d0c      	ldr	r5, [pc, #48]	; (8003ab4 <__libc_init_array+0x38>)
 8003a82:	4c0d      	ldr	r4, [pc, #52]	; (8003ab8 <__libc_init_array+0x3c>)
 8003a84:	1b64      	subs	r4, r4, r5
 8003a86:	10a4      	asrs	r4, r4, #2
 8003a88:	42a6      	cmp	r6, r4
 8003a8a:	d109      	bne.n	8003aa0 <__libc_init_array+0x24>
 8003a8c:	2600      	movs	r6, #0
 8003a8e:	f000 fc8b 	bl	80043a8 <_init>
 8003a92:	4d0a      	ldr	r5, [pc, #40]	; (8003abc <__libc_init_array+0x40>)
 8003a94:	4c0a      	ldr	r4, [pc, #40]	; (8003ac0 <__libc_init_array+0x44>)
 8003a96:	1b64      	subs	r4, r4, r5
 8003a98:	10a4      	asrs	r4, r4, #2
 8003a9a:	42a6      	cmp	r6, r4
 8003a9c:	d105      	bne.n	8003aaa <__libc_init_array+0x2e>
 8003a9e:	bd70      	pop	{r4, r5, r6, pc}
 8003aa0:	00b3      	lsls	r3, r6, #2
 8003aa2:	58eb      	ldr	r3, [r5, r3]
 8003aa4:	4798      	blx	r3
 8003aa6:	3601      	adds	r6, #1
 8003aa8:	e7ee      	b.n	8003a88 <__libc_init_array+0xc>
 8003aaa:	00b3      	lsls	r3, r6, #2
 8003aac:	58eb      	ldr	r3, [r5, r3]
 8003aae:	4798      	blx	r3
 8003ab0:	3601      	adds	r6, #1
 8003ab2:	e7f2      	b.n	8003a9a <__libc_init_array+0x1e>
 8003ab4:	08004484 	.word	0x08004484
 8003ab8:	08004484 	.word	0x08004484
 8003abc:	08004484 	.word	0x08004484
 8003ac0:	08004488 	.word	0x08004488

08003ac4 <memset>:
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	1882      	adds	r2, r0, r2
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d100      	bne.n	8003ace <memset+0xa>
 8003acc:	4770      	bx	lr
 8003ace:	7019      	strb	r1, [r3, #0]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	e7f9      	b.n	8003ac8 <memset+0x4>

08003ad4 <siprintf>:
 8003ad4:	b40e      	push	{r1, r2, r3}
 8003ad6:	b500      	push	{lr}
 8003ad8:	490b      	ldr	r1, [pc, #44]	; (8003b08 <siprintf+0x34>)
 8003ada:	b09c      	sub	sp, #112	; 0x70
 8003adc:	ab1d      	add	r3, sp, #116	; 0x74
 8003ade:	9002      	str	r0, [sp, #8]
 8003ae0:	9006      	str	r0, [sp, #24]
 8003ae2:	9107      	str	r1, [sp, #28]
 8003ae4:	9104      	str	r1, [sp, #16]
 8003ae6:	4809      	ldr	r0, [pc, #36]	; (8003b0c <siprintf+0x38>)
 8003ae8:	4909      	ldr	r1, [pc, #36]	; (8003b10 <siprintf+0x3c>)
 8003aea:	cb04      	ldmia	r3!, {r2}
 8003aec:	9105      	str	r1, [sp, #20]
 8003aee:	6800      	ldr	r0, [r0, #0]
 8003af0:	a902      	add	r1, sp, #8
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	f000 f870 	bl	8003bd8 <_svfiprintf_r>
 8003af8:	2300      	movs	r3, #0
 8003afa:	9a02      	ldr	r2, [sp, #8]
 8003afc:	7013      	strb	r3, [r2, #0]
 8003afe:	b01c      	add	sp, #112	; 0x70
 8003b00:	bc08      	pop	{r3}
 8003b02:	b003      	add	sp, #12
 8003b04:	4718      	bx	r3
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	7fffffff 	.word	0x7fffffff
 8003b0c:	2000000c 	.word	0x2000000c
 8003b10:	ffff0208 	.word	0xffff0208

08003b14 <__ssputs_r>:
 8003b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b16:	688e      	ldr	r6, [r1, #8]
 8003b18:	b085      	sub	sp, #20
 8003b1a:	0007      	movs	r7, r0
 8003b1c:	000c      	movs	r4, r1
 8003b1e:	9203      	str	r2, [sp, #12]
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	429e      	cmp	r6, r3
 8003b24:	d83c      	bhi.n	8003ba0 <__ssputs_r+0x8c>
 8003b26:	2390      	movs	r3, #144	; 0x90
 8003b28:	898a      	ldrh	r2, [r1, #12]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	421a      	tst	r2, r3
 8003b2e:	d034      	beq.n	8003b9a <__ssputs_r+0x86>
 8003b30:	6909      	ldr	r1, [r1, #16]
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	6960      	ldr	r0, [r4, #20]
 8003b36:	1a5b      	subs	r3, r3, r1
 8003b38:	9302      	str	r3, [sp, #8]
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	4343      	muls	r3, r0
 8003b3e:	0fdd      	lsrs	r5, r3, #31
 8003b40:	18ed      	adds	r5, r5, r3
 8003b42:	9b01      	ldr	r3, [sp, #4]
 8003b44:	9802      	ldr	r0, [sp, #8]
 8003b46:	3301      	adds	r3, #1
 8003b48:	181b      	adds	r3, r3, r0
 8003b4a:	106d      	asrs	r5, r5, #1
 8003b4c:	42ab      	cmp	r3, r5
 8003b4e:	d900      	bls.n	8003b52 <__ssputs_r+0x3e>
 8003b50:	001d      	movs	r5, r3
 8003b52:	0553      	lsls	r3, r2, #21
 8003b54:	d532      	bpl.n	8003bbc <__ssputs_r+0xa8>
 8003b56:	0029      	movs	r1, r5
 8003b58:	0038      	movs	r0, r7
 8003b5a:	f000 fb53 	bl	8004204 <_malloc_r>
 8003b5e:	1e06      	subs	r6, r0, #0
 8003b60:	d109      	bne.n	8003b76 <__ssputs_r+0x62>
 8003b62:	230c      	movs	r3, #12
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	2340      	movs	r3, #64	; 0x40
 8003b68:	2001      	movs	r0, #1
 8003b6a:	89a2      	ldrh	r2, [r4, #12]
 8003b6c:	4240      	negs	r0, r0
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	81a3      	strh	r3, [r4, #12]
 8003b72:	b005      	add	sp, #20
 8003b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b76:	9a02      	ldr	r2, [sp, #8]
 8003b78:	6921      	ldr	r1, [r4, #16]
 8003b7a:	f000 faba 	bl	80040f2 <memcpy>
 8003b7e:	89a3      	ldrh	r3, [r4, #12]
 8003b80:	4a14      	ldr	r2, [pc, #80]	; (8003bd4 <__ssputs_r+0xc0>)
 8003b82:	401a      	ands	r2, r3
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	4313      	orrs	r3, r2
 8003b88:	81a3      	strh	r3, [r4, #12]
 8003b8a:	9b02      	ldr	r3, [sp, #8]
 8003b8c:	6126      	str	r6, [r4, #16]
 8003b8e:	18f6      	adds	r6, r6, r3
 8003b90:	6026      	str	r6, [r4, #0]
 8003b92:	6165      	str	r5, [r4, #20]
 8003b94:	9e01      	ldr	r6, [sp, #4]
 8003b96:	1aed      	subs	r5, r5, r3
 8003b98:	60a5      	str	r5, [r4, #8]
 8003b9a:	9b01      	ldr	r3, [sp, #4]
 8003b9c:	429e      	cmp	r6, r3
 8003b9e:	d900      	bls.n	8003ba2 <__ssputs_r+0x8e>
 8003ba0:	9e01      	ldr	r6, [sp, #4]
 8003ba2:	0032      	movs	r2, r6
 8003ba4:	9903      	ldr	r1, [sp, #12]
 8003ba6:	6820      	ldr	r0, [r4, #0]
 8003ba8:	f000 faac 	bl	8004104 <memmove>
 8003bac:	68a3      	ldr	r3, [r4, #8]
 8003bae:	2000      	movs	r0, #0
 8003bb0:	1b9b      	subs	r3, r3, r6
 8003bb2:	60a3      	str	r3, [r4, #8]
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	199e      	adds	r6, r3, r6
 8003bb8:	6026      	str	r6, [r4, #0]
 8003bba:	e7da      	b.n	8003b72 <__ssputs_r+0x5e>
 8003bbc:	002a      	movs	r2, r5
 8003bbe:	0038      	movs	r0, r7
 8003bc0:	f000 fb96 	bl	80042f0 <_realloc_r>
 8003bc4:	1e06      	subs	r6, r0, #0
 8003bc6:	d1e0      	bne.n	8003b8a <__ssputs_r+0x76>
 8003bc8:	0038      	movs	r0, r7
 8003bca:	6921      	ldr	r1, [r4, #16]
 8003bcc:	f000 faae 	bl	800412c <_free_r>
 8003bd0:	e7c7      	b.n	8003b62 <__ssputs_r+0x4e>
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	fffffb7f 	.word	0xfffffb7f

08003bd8 <_svfiprintf_r>:
 8003bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bda:	b0a1      	sub	sp, #132	; 0x84
 8003bdc:	9003      	str	r0, [sp, #12]
 8003bde:	001d      	movs	r5, r3
 8003be0:	898b      	ldrh	r3, [r1, #12]
 8003be2:	000f      	movs	r7, r1
 8003be4:	0016      	movs	r6, r2
 8003be6:	061b      	lsls	r3, r3, #24
 8003be8:	d511      	bpl.n	8003c0e <_svfiprintf_r+0x36>
 8003bea:	690b      	ldr	r3, [r1, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10e      	bne.n	8003c0e <_svfiprintf_r+0x36>
 8003bf0:	2140      	movs	r1, #64	; 0x40
 8003bf2:	f000 fb07 	bl	8004204 <_malloc_r>
 8003bf6:	6038      	str	r0, [r7, #0]
 8003bf8:	6138      	str	r0, [r7, #16]
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d105      	bne.n	8003c0a <_svfiprintf_r+0x32>
 8003bfe:	230c      	movs	r3, #12
 8003c00:	9a03      	ldr	r2, [sp, #12]
 8003c02:	3801      	subs	r0, #1
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	b021      	add	sp, #132	; 0x84
 8003c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c0a:	2340      	movs	r3, #64	; 0x40
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	ac08      	add	r4, sp, #32
 8003c12:	6163      	str	r3, [r4, #20]
 8003c14:	3320      	adds	r3, #32
 8003c16:	7663      	strb	r3, [r4, #25]
 8003c18:	3310      	adds	r3, #16
 8003c1a:	76a3      	strb	r3, [r4, #26]
 8003c1c:	9507      	str	r5, [sp, #28]
 8003c1e:	0035      	movs	r5, r6
 8003c20:	782b      	ldrb	r3, [r5, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <_svfiprintf_r+0x52>
 8003c26:	2b25      	cmp	r3, #37	; 0x25
 8003c28:	d147      	bne.n	8003cba <_svfiprintf_r+0xe2>
 8003c2a:	1bab      	subs	r3, r5, r6
 8003c2c:	9305      	str	r3, [sp, #20]
 8003c2e:	42b5      	cmp	r5, r6
 8003c30:	d00c      	beq.n	8003c4c <_svfiprintf_r+0x74>
 8003c32:	0032      	movs	r2, r6
 8003c34:	0039      	movs	r1, r7
 8003c36:	9803      	ldr	r0, [sp, #12]
 8003c38:	f7ff ff6c 	bl	8003b14 <__ssputs_r>
 8003c3c:	1c43      	adds	r3, r0, #1
 8003c3e:	d100      	bne.n	8003c42 <_svfiprintf_r+0x6a>
 8003c40:	e0ae      	b.n	8003da0 <_svfiprintf_r+0x1c8>
 8003c42:	6962      	ldr	r2, [r4, #20]
 8003c44:	9b05      	ldr	r3, [sp, #20]
 8003c46:	4694      	mov	ip, r2
 8003c48:	4463      	add	r3, ip
 8003c4a:	6163      	str	r3, [r4, #20]
 8003c4c:	782b      	ldrb	r3, [r5, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d100      	bne.n	8003c54 <_svfiprintf_r+0x7c>
 8003c52:	e0a5      	b.n	8003da0 <_svfiprintf_r+0x1c8>
 8003c54:	2201      	movs	r2, #1
 8003c56:	2300      	movs	r3, #0
 8003c58:	4252      	negs	r2, r2
 8003c5a:	6062      	str	r2, [r4, #4]
 8003c5c:	a904      	add	r1, sp, #16
 8003c5e:	3254      	adds	r2, #84	; 0x54
 8003c60:	1852      	adds	r2, r2, r1
 8003c62:	1c6e      	adds	r6, r5, #1
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	60e3      	str	r3, [r4, #12]
 8003c68:	60a3      	str	r3, [r4, #8]
 8003c6a:	7013      	strb	r3, [r2, #0]
 8003c6c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c6e:	2205      	movs	r2, #5
 8003c70:	7831      	ldrb	r1, [r6, #0]
 8003c72:	4854      	ldr	r0, [pc, #336]	; (8003dc4 <_svfiprintf_r+0x1ec>)
 8003c74:	f000 fa32 	bl	80040dc <memchr>
 8003c78:	1c75      	adds	r5, r6, #1
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	d11f      	bne.n	8003cbe <_svfiprintf_r+0xe6>
 8003c7e:	6822      	ldr	r2, [r4, #0]
 8003c80:	06d3      	lsls	r3, r2, #27
 8003c82:	d504      	bpl.n	8003c8e <_svfiprintf_r+0xb6>
 8003c84:	2353      	movs	r3, #83	; 0x53
 8003c86:	a904      	add	r1, sp, #16
 8003c88:	185b      	adds	r3, r3, r1
 8003c8a:	2120      	movs	r1, #32
 8003c8c:	7019      	strb	r1, [r3, #0]
 8003c8e:	0713      	lsls	r3, r2, #28
 8003c90:	d504      	bpl.n	8003c9c <_svfiprintf_r+0xc4>
 8003c92:	2353      	movs	r3, #83	; 0x53
 8003c94:	a904      	add	r1, sp, #16
 8003c96:	185b      	adds	r3, r3, r1
 8003c98:	212b      	movs	r1, #43	; 0x2b
 8003c9a:	7019      	strb	r1, [r3, #0]
 8003c9c:	7833      	ldrb	r3, [r6, #0]
 8003c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8003ca0:	d016      	beq.n	8003cd0 <_svfiprintf_r+0xf8>
 8003ca2:	0035      	movs	r5, r6
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	200a      	movs	r0, #10
 8003ca8:	68e3      	ldr	r3, [r4, #12]
 8003caa:	782a      	ldrb	r2, [r5, #0]
 8003cac:	1c6e      	adds	r6, r5, #1
 8003cae:	3a30      	subs	r2, #48	; 0x30
 8003cb0:	2a09      	cmp	r2, #9
 8003cb2:	d94e      	bls.n	8003d52 <_svfiprintf_r+0x17a>
 8003cb4:	2900      	cmp	r1, #0
 8003cb6:	d111      	bne.n	8003cdc <_svfiprintf_r+0x104>
 8003cb8:	e017      	b.n	8003cea <_svfiprintf_r+0x112>
 8003cba:	3501      	adds	r5, #1
 8003cbc:	e7b0      	b.n	8003c20 <_svfiprintf_r+0x48>
 8003cbe:	4b41      	ldr	r3, [pc, #260]	; (8003dc4 <_svfiprintf_r+0x1ec>)
 8003cc0:	6822      	ldr	r2, [r4, #0]
 8003cc2:	1ac0      	subs	r0, r0, r3
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	4083      	lsls	r3, r0
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	002e      	movs	r6, r5
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	e7ce      	b.n	8003c6e <_svfiprintf_r+0x96>
 8003cd0:	9b07      	ldr	r3, [sp, #28]
 8003cd2:	1d19      	adds	r1, r3, #4
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	9107      	str	r1, [sp, #28]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	db01      	blt.n	8003ce0 <_svfiprintf_r+0x108>
 8003cdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cde:	e004      	b.n	8003cea <_svfiprintf_r+0x112>
 8003ce0:	425b      	negs	r3, r3
 8003ce2:	60e3      	str	r3, [r4, #12]
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	6023      	str	r3, [r4, #0]
 8003cea:	782b      	ldrb	r3, [r5, #0]
 8003cec:	2b2e      	cmp	r3, #46	; 0x2e
 8003cee:	d10a      	bne.n	8003d06 <_svfiprintf_r+0x12e>
 8003cf0:	786b      	ldrb	r3, [r5, #1]
 8003cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf4:	d135      	bne.n	8003d62 <_svfiprintf_r+0x18a>
 8003cf6:	9b07      	ldr	r3, [sp, #28]
 8003cf8:	3502      	adds	r5, #2
 8003cfa:	1d1a      	adds	r2, r3, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	9207      	str	r2, [sp, #28]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	db2b      	blt.n	8003d5c <_svfiprintf_r+0x184>
 8003d04:	9309      	str	r3, [sp, #36]	; 0x24
 8003d06:	4e30      	ldr	r6, [pc, #192]	; (8003dc8 <_svfiprintf_r+0x1f0>)
 8003d08:	2203      	movs	r2, #3
 8003d0a:	0030      	movs	r0, r6
 8003d0c:	7829      	ldrb	r1, [r5, #0]
 8003d0e:	f000 f9e5 	bl	80040dc <memchr>
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d006      	beq.n	8003d24 <_svfiprintf_r+0x14c>
 8003d16:	2340      	movs	r3, #64	; 0x40
 8003d18:	1b80      	subs	r0, r0, r6
 8003d1a:	4083      	lsls	r3, r0
 8003d1c:	6822      	ldr	r2, [r4, #0]
 8003d1e:	3501      	adds	r5, #1
 8003d20:	4313      	orrs	r3, r2
 8003d22:	6023      	str	r3, [r4, #0]
 8003d24:	7829      	ldrb	r1, [r5, #0]
 8003d26:	2206      	movs	r2, #6
 8003d28:	4828      	ldr	r0, [pc, #160]	; (8003dcc <_svfiprintf_r+0x1f4>)
 8003d2a:	1c6e      	adds	r6, r5, #1
 8003d2c:	7621      	strb	r1, [r4, #24]
 8003d2e:	f000 f9d5 	bl	80040dc <memchr>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d03c      	beq.n	8003db0 <_svfiprintf_r+0x1d8>
 8003d36:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <_svfiprintf_r+0x1f8>)
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d125      	bne.n	8003d88 <_svfiprintf_r+0x1b0>
 8003d3c:	2207      	movs	r2, #7
 8003d3e:	9b07      	ldr	r3, [sp, #28]
 8003d40:	3307      	adds	r3, #7
 8003d42:	4393      	bics	r3, r2
 8003d44:	3308      	adds	r3, #8
 8003d46:	9307      	str	r3, [sp, #28]
 8003d48:	6963      	ldr	r3, [r4, #20]
 8003d4a:	9a04      	ldr	r2, [sp, #16]
 8003d4c:	189b      	adds	r3, r3, r2
 8003d4e:	6163      	str	r3, [r4, #20]
 8003d50:	e765      	b.n	8003c1e <_svfiprintf_r+0x46>
 8003d52:	4343      	muls	r3, r0
 8003d54:	0035      	movs	r5, r6
 8003d56:	2101      	movs	r1, #1
 8003d58:	189b      	adds	r3, r3, r2
 8003d5a:	e7a6      	b.n	8003caa <_svfiprintf_r+0xd2>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	425b      	negs	r3, r3
 8003d60:	e7d0      	b.n	8003d04 <_svfiprintf_r+0x12c>
 8003d62:	2300      	movs	r3, #0
 8003d64:	200a      	movs	r0, #10
 8003d66:	001a      	movs	r2, r3
 8003d68:	3501      	adds	r5, #1
 8003d6a:	6063      	str	r3, [r4, #4]
 8003d6c:	7829      	ldrb	r1, [r5, #0]
 8003d6e:	1c6e      	adds	r6, r5, #1
 8003d70:	3930      	subs	r1, #48	; 0x30
 8003d72:	2909      	cmp	r1, #9
 8003d74:	d903      	bls.n	8003d7e <_svfiprintf_r+0x1a6>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0c5      	beq.n	8003d06 <_svfiprintf_r+0x12e>
 8003d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8003d7c:	e7c3      	b.n	8003d06 <_svfiprintf_r+0x12e>
 8003d7e:	4342      	muls	r2, r0
 8003d80:	0035      	movs	r5, r6
 8003d82:	2301      	movs	r3, #1
 8003d84:	1852      	adds	r2, r2, r1
 8003d86:	e7f1      	b.n	8003d6c <_svfiprintf_r+0x194>
 8003d88:	ab07      	add	r3, sp, #28
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	003a      	movs	r2, r7
 8003d8e:	0021      	movs	r1, r4
 8003d90:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <_svfiprintf_r+0x1fc>)
 8003d92:	9803      	ldr	r0, [sp, #12]
 8003d94:	e000      	b.n	8003d98 <_svfiprintf_r+0x1c0>
 8003d96:	bf00      	nop
 8003d98:	9004      	str	r0, [sp, #16]
 8003d9a:	9b04      	ldr	r3, [sp, #16]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	d1d3      	bne.n	8003d48 <_svfiprintf_r+0x170>
 8003da0:	89bb      	ldrh	r3, [r7, #12]
 8003da2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003da4:	065b      	lsls	r3, r3, #25
 8003da6:	d400      	bmi.n	8003daa <_svfiprintf_r+0x1d2>
 8003da8:	e72d      	b.n	8003c06 <_svfiprintf_r+0x2e>
 8003daa:	2001      	movs	r0, #1
 8003dac:	4240      	negs	r0, r0
 8003dae:	e72a      	b.n	8003c06 <_svfiprintf_r+0x2e>
 8003db0:	ab07      	add	r3, sp, #28
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	003a      	movs	r2, r7
 8003db6:	0021      	movs	r1, r4
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <_svfiprintf_r+0x1fc>)
 8003dba:	9803      	ldr	r0, [sp, #12]
 8003dbc:	f000 f87c 	bl	8003eb8 <_printf_i>
 8003dc0:	e7ea      	b.n	8003d98 <_svfiprintf_r+0x1c0>
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	08004450 	.word	0x08004450
 8003dc8:	08004456 	.word	0x08004456
 8003dcc:	0800445a 	.word	0x0800445a
 8003dd0:	00000000 	.word	0x00000000
 8003dd4:	08003b15 	.word	0x08003b15

08003dd8 <_printf_common>:
 8003dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dda:	0015      	movs	r5, r2
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	688a      	ldr	r2, [r1, #8]
 8003de0:	690b      	ldr	r3, [r1, #16]
 8003de2:	000c      	movs	r4, r1
 8003de4:	9000      	str	r0, [sp, #0]
 8003de6:	4293      	cmp	r3, r2
 8003de8:	da00      	bge.n	8003dec <_printf_common+0x14>
 8003dea:	0013      	movs	r3, r2
 8003dec:	0022      	movs	r2, r4
 8003dee:	602b      	str	r3, [r5, #0]
 8003df0:	3243      	adds	r2, #67	; 0x43
 8003df2:	7812      	ldrb	r2, [r2, #0]
 8003df4:	2a00      	cmp	r2, #0
 8003df6:	d001      	beq.n	8003dfc <_printf_common+0x24>
 8003df8:	3301      	adds	r3, #1
 8003dfa:	602b      	str	r3, [r5, #0]
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	069b      	lsls	r3, r3, #26
 8003e00:	d502      	bpl.n	8003e08 <_printf_common+0x30>
 8003e02:	682b      	ldr	r3, [r5, #0]
 8003e04:	3302      	adds	r3, #2
 8003e06:	602b      	str	r3, [r5, #0]
 8003e08:	6822      	ldr	r2, [r4, #0]
 8003e0a:	2306      	movs	r3, #6
 8003e0c:	0017      	movs	r7, r2
 8003e0e:	401f      	ands	r7, r3
 8003e10:	421a      	tst	r2, r3
 8003e12:	d027      	beq.n	8003e64 <_printf_common+0x8c>
 8003e14:	0023      	movs	r3, r4
 8003e16:	3343      	adds	r3, #67	; 0x43
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	1e5a      	subs	r2, r3, #1
 8003e1c:	4193      	sbcs	r3, r2
 8003e1e:	6822      	ldr	r2, [r4, #0]
 8003e20:	0692      	lsls	r2, r2, #26
 8003e22:	d430      	bmi.n	8003e86 <_printf_common+0xae>
 8003e24:	0022      	movs	r2, r4
 8003e26:	9901      	ldr	r1, [sp, #4]
 8003e28:	9800      	ldr	r0, [sp, #0]
 8003e2a:	9e08      	ldr	r6, [sp, #32]
 8003e2c:	3243      	adds	r2, #67	; 0x43
 8003e2e:	47b0      	blx	r6
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	d025      	beq.n	8003e80 <_printf_common+0xa8>
 8003e34:	2306      	movs	r3, #6
 8003e36:	6820      	ldr	r0, [r4, #0]
 8003e38:	682a      	ldr	r2, [r5, #0]
 8003e3a:	68e1      	ldr	r1, [r4, #12]
 8003e3c:	2500      	movs	r5, #0
 8003e3e:	4003      	ands	r3, r0
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d103      	bne.n	8003e4c <_printf_common+0x74>
 8003e44:	1a8d      	subs	r5, r1, r2
 8003e46:	43eb      	mvns	r3, r5
 8003e48:	17db      	asrs	r3, r3, #31
 8003e4a:	401d      	ands	r5, r3
 8003e4c:	68a3      	ldr	r3, [r4, #8]
 8003e4e:	6922      	ldr	r2, [r4, #16]
 8003e50:	4293      	cmp	r3, r2
 8003e52:	dd01      	ble.n	8003e58 <_printf_common+0x80>
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	18ed      	adds	r5, r5, r3
 8003e58:	2700      	movs	r7, #0
 8003e5a:	42bd      	cmp	r5, r7
 8003e5c:	d120      	bne.n	8003ea0 <_printf_common+0xc8>
 8003e5e:	2000      	movs	r0, #0
 8003e60:	e010      	b.n	8003e84 <_printf_common+0xac>
 8003e62:	3701      	adds	r7, #1
 8003e64:	68e3      	ldr	r3, [r4, #12]
 8003e66:	682a      	ldr	r2, [r5, #0]
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	42bb      	cmp	r3, r7
 8003e6c:	ddd2      	ble.n	8003e14 <_printf_common+0x3c>
 8003e6e:	0022      	movs	r2, r4
 8003e70:	2301      	movs	r3, #1
 8003e72:	9901      	ldr	r1, [sp, #4]
 8003e74:	9800      	ldr	r0, [sp, #0]
 8003e76:	9e08      	ldr	r6, [sp, #32]
 8003e78:	3219      	adds	r2, #25
 8003e7a:	47b0      	blx	r6
 8003e7c:	1c43      	adds	r3, r0, #1
 8003e7e:	d1f0      	bne.n	8003e62 <_printf_common+0x8a>
 8003e80:	2001      	movs	r0, #1
 8003e82:	4240      	negs	r0, r0
 8003e84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e86:	2030      	movs	r0, #48	; 0x30
 8003e88:	18e1      	adds	r1, r4, r3
 8003e8a:	3143      	adds	r1, #67	; 0x43
 8003e8c:	7008      	strb	r0, [r1, #0]
 8003e8e:	0021      	movs	r1, r4
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	3145      	adds	r1, #69	; 0x45
 8003e94:	7809      	ldrb	r1, [r1, #0]
 8003e96:	18a2      	adds	r2, r4, r2
 8003e98:	3243      	adds	r2, #67	; 0x43
 8003e9a:	3302      	adds	r3, #2
 8003e9c:	7011      	strb	r1, [r2, #0]
 8003e9e:	e7c1      	b.n	8003e24 <_printf_common+0x4c>
 8003ea0:	0022      	movs	r2, r4
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	9901      	ldr	r1, [sp, #4]
 8003ea6:	9800      	ldr	r0, [sp, #0]
 8003ea8:	9e08      	ldr	r6, [sp, #32]
 8003eaa:	321a      	adds	r2, #26
 8003eac:	47b0      	blx	r6
 8003eae:	1c43      	adds	r3, r0, #1
 8003eb0:	d0e6      	beq.n	8003e80 <_printf_common+0xa8>
 8003eb2:	3701      	adds	r7, #1
 8003eb4:	e7d1      	b.n	8003e5a <_printf_common+0x82>
	...

08003eb8 <_printf_i>:
 8003eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eba:	b08b      	sub	sp, #44	; 0x2c
 8003ebc:	9206      	str	r2, [sp, #24]
 8003ebe:	000a      	movs	r2, r1
 8003ec0:	3243      	adds	r2, #67	; 0x43
 8003ec2:	9307      	str	r3, [sp, #28]
 8003ec4:	9005      	str	r0, [sp, #20]
 8003ec6:	9204      	str	r2, [sp, #16]
 8003ec8:	7e0a      	ldrb	r2, [r1, #24]
 8003eca:	000c      	movs	r4, r1
 8003ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003ece:	2a78      	cmp	r2, #120	; 0x78
 8003ed0:	d807      	bhi.n	8003ee2 <_printf_i+0x2a>
 8003ed2:	2a62      	cmp	r2, #98	; 0x62
 8003ed4:	d809      	bhi.n	8003eea <_printf_i+0x32>
 8003ed6:	2a00      	cmp	r2, #0
 8003ed8:	d100      	bne.n	8003edc <_printf_i+0x24>
 8003eda:	e0c1      	b.n	8004060 <_printf_i+0x1a8>
 8003edc:	2a58      	cmp	r2, #88	; 0x58
 8003ede:	d100      	bne.n	8003ee2 <_printf_i+0x2a>
 8003ee0:	e08c      	b.n	8003ffc <_printf_i+0x144>
 8003ee2:	0026      	movs	r6, r4
 8003ee4:	3642      	adds	r6, #66	; 0x42
 8003ee6:	7032      	strb	r2, [r6, #0]
 8003ee8:	e022      	b.n	8003f30 <_printf_i+0x78>
 8003eea:	0010      	movs	r0, r2
 8003eec:	3863      	subs	r0, #99	; 0x63
 8003eee:	2815      	cmp	r0, #21
 8003ef0:	d8f7      	bhi.n	8003ee2 <_printf_i+0x2a>
 8003ef2:	f7fc f90d 	bl	8000110 <__gnu_thumb1_case_shi>
 8003ef6:	0016      	.short	0x0016
 8003ef8:	fff6001f 	.word	0xfff6001f
 8003efc:	fff6fff6 	.word	0xfff6fff6
 8003f00:	001ffff6 	.word	0x001ffff6
 8003f04:	fff6fff6 	.word	0xfff6fff6
 8003f08:	fff6fff6 	.word	0xfff6fff6
 8003f0c:	003600a8 	.word	0x003600a8
 8003f10:	fff6009a 	.word	0xfff6009a
 8003f14:	00b9fff6 	.word	0x00b9fff6
 8003f18:	0036fff6 	.word	0x0036fff6
 8003f1c:	fff6fff6 	.word	0xfff6fff6
 8003f20:	009e      	.short	0x009e
 8003f22:	0026      	movs	r6, r4
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	3642      	adds	r6, #66	; 0x42
 8003f28:	1d11      	adds	r1, r2, #4
 8003f2a:	6019      	str	r1, [r3, #0]
 8003f2c:	6813      	ldr	r3, [r2, #0]
 8003f2e:	7033      	strb	r3, [r6, #0]
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0a7      	b.n	8004084 <_printf_i+0x1cc>
 8003f34:	6808      	ldr	r0, [r1, #0]
 8003f36:	6819      	ldr	r1, [r3, #0]
 8003f38:	1d0a      	adds	r2, r1, #4
 8003f3a:	0605      	lsls	r5, r0, #24
 8003f3c:	d50b      	bpl.n	8003f56 <_printf_i+0x9e>
 8003f3e:	680d      	ldr	r5, [r1, #0]
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	2d00      	cmp	r5, #0
 8003f44:	da03      	bge.n	8003f4e <_printf_i+0x96>
 8003f46:	232d      	movs	r3, #45	; 0x2d
 8003f48:	9a04      	ldr	r2, [sp, #16]
 8003f4a:	426d      	negs	r5, r5
 8003f4c:	7013      	strb	r3, [r2, #0]
 8003f4e:	4b61      	ldr	r3, [pc, #388]	; (80040d4 <_printf_i+0x21c>)
 8003f50:	270a      	movs	r7, #10
 8003f52:	9303      	str	r3, [sp, #12]
 8003f54:	e01b      	b.n	8003f8e <_printf_i+0xd6>
 8003f56:	680d      	ldr	r5, [r1, #0]
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	0641      	lsls	r1, r0, #25
 8003f5c:	d5f1      	bpl.n	8003f42 <_printf_i+0x8a>
 8003f5e:	b22d      	sxth	r5, r5
 8003f60:	e7ef      	b.n	8003f42 <_printf_i+0x8a>
 8003f62:	680d      	ldr	r5, [r1, #0]
 8003f64:	6819      	ldr	r1, [r3, #0]
 8003f66:	1d08      	adds	r0, r1, #4
 8003f68:	6018      	str	r0, [r3, #0]
 8003f6a:	062e      	lsls	r6, r5, #24
 8003f6c:	d501      	bpl.n	8003f72 <_printf_i+0xba>
 8003f6e:	680d      	ldr	r5, [r1, #0]
 8003f70:	e003      	b.n	8003f7a <_printf_i+0xc2>
 8003f72:	066d      	lsls	r5, r5, #25
 8003f74:	d5fb      	bpl.n	8003f6e <_printf_i+0xb6>
 8003f76:	680d      	ldr	r5, [r1, #0]
 8003f78:	b2ad      	uxth	r5, r5
 8003f7a:	4b56      	ldr	r3, [pc, #344]	; (80040d4 <_printf_i+0x21c>)
 8003f7c:	2708      	movs	r7, #8
 8003f7e:	9303      	str	r3, [sp, #12]
 8003f80:	2a6f      	cmp	r2, #111	; 0x6f
 8003f82:	d000      	beq.n	8003f86 <_printf_i+0xce>
 8003f84:	3702      	adds	r7, #2
 8003f86:	0023      	movs	r3, r4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	3343      	adds	r3, #67	; 0x43
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	6863      	ldr	r3, [r4, #4]
 8003f90:	60a3      	str	r3, [r4, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	db03      	blt.n	8003f9e <_printf_i+0xe6>
 8003f96:	2204      	movs	r2, #4
 8003f98:	6821      	ldr	r1, [r4, #0]
 8003f9a:	4391      	bics	r1, r2
 8003f9c:	6021      	str	r1, [r4, #0]
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	d102      	bne.n	8003fa8 <_printf_i+0xf0>
 8003fa2:	9e04      	ldr	r6, [sp, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00c      	beq.n	8003fc2 <_printf_i+0x10a>
 8003fa8:	9e04      	ldr	r6, [sp, #16]
 8003faa:	0028      	movs	r0, r5
 8003fac:	0039      	movs	r1, r7
 8003fae:	f7fc f93f 	bl	8000230 <__aeabi_uidivmod>
 8003fb2:	9b03      	ldr	r3, [sp, #12]
 8003fb4:	3e01      	subs	r6, #1
 8003fb6:	5c5b      	ldrb	r3, [r3, r1]
 8003fb8:	7033      	strb	r3, [r6, #0]
 8003fba:	002b      	movs	r3, r5
 8003fbc:	0005      	movs	r5, r0
 8003fbe:	429f      	cmp	r7, r3
 8003fc0:	d9f3      	bls.n	8003faa <_printf_i+0xf2>
 8003fc2:	2f08      	cmp	r7, #8
 8003fc4:	d109      	bne.n	8003fda <_printf_i+0x122>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	07db      	lsls	r3, r3, #31
 8003fca:	d506      	bpl.n	8003fda <_printf_i+0x122>
 8003fcc:	6863      	ldr	r3, [r4, #4]
 8003fce:	6922      	ldr	r2, [r4, #16]
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	dc02      	bgt.n	8003fda <_printf_i+0x122>
 8003fd4:	2330      	movs	r3, #48	; 0x30
 8003fd6:	3e01      	subs	r6, #1
 8003fd8:	7033      	strb	r3, [r6, #0]
 8003fda:	9b04      	ldr	r3, [sp, #16]
 8003fdc:	1b9b      	subs	r3, r3, r6
 8003fde:	6123      	str	r3, [r4, #16]
 8003fe0:	9b07      	ldr	r3, [sp, #28]
 8003fe2:	0021      	movs	r1, r4
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	9805      	ldr	r0, [sp, #20]
 8003fe8:	9b06      	ldr	r3, [sp, #24]
 8003fea:	aa09      	add	r2, sp, #36	; 0x24
 8003fec:	f7ff fef4 	bl	8003dd8 <_printf_common>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d14c      	bne.n	800408e <_printf_i+0x1d6>
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	4240      	negs	r0, r0
 8003ff8:	b00b      	add	sp, #44	; 0x2c
 8003ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ffc:	3145      	adds	r1, #69	; 0x45
 8003ffe:	700a      	strb	r2, [r1, #0]
 8004000:	4a34      	ldr	r2, [pc, #208]	; (80040d4 <_printf_i+0x21c>)
 8004002:	9203      	str	r2, [sp, #12]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	6821      	ldr	r1, [r4, #0]
 8004008:	ca20      	ldmia	r2!, {r5}
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	0608      	lsls	r0, r1, #24
 800400e:	d516      	bpl.n	800403e <_printf_i+0x186>
 8004010:	07cb      	lsls	r3, r1, #31
 8004012:	d502      	bpl.n	800401a <_printf_i+0x162>
 8004014:	2320      	movs	r3, #32
 8004016:	4319      	orrs	r1, r3
 8004018:	6021      	str	r1, [r4, #0]
 800401a:	2710      	movs	r7, #16
 800401c:	2d00      	cmp	r5, #0
 800401e:	d1b2      	bne.n	8003f86 <_printf_i+0xce>
 8004020:	2320      	movs	r3, #32
 8004022:	6822      	ldr	r2, [r4, #0]
 8004024:	439a      	bics	r2, r3
 8004026:	6022      	str	r2, [r4, #0]
 8004028:	e7ad      	b.n	8003f86 <_printf_i+0xce>
 800402a:	2220      	movs	r2, #32
 800402c:	6809      	ldr	r1, [r1, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	6022      	str	r2, [r4, #0]
 8004032:	0022      	movs	r2, r4
 8004034:	2178      	movs	r1, #120	; 0x78
 8004036:	3245      	adds	r2, #69	; 0x45
 8004038:	7011      	strb	r1, [r2, #0]
 800403a:	4a27      	ldr	r2, [pc, #156]	; (80040d8 <_printf_i+0x220>)
 800403c:	e7e1      	b.n	8004002 <_printf_i+0x14a>
 800403e:	0648      	lsls	r0, r1, #25
 8004040:	d5e6      	bpl.n	8004010 <_printf_i+0x158>
 8004042:	b2ad      	uxth	r5, r5
 8004044:	e7e4      	b.n	8004010 <_printf_i+0x158>
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	680d      	ldr	r5, [r1, #0]
 800404a:	1d10      	adds	r0, r2, #4
 800404c:	6949      	ldr	r1, [r1, #20]
 800404e:	6018      	str	r0, [r3, #0]
 8004050:	6813      	ldr	r3, [r2, #0]
 8004052:	062e      	lsls	r6, r5, #24
 8004054:	d501      	bpl.n	800405a <_printf_i+0x1a2>
 8004056:	6019      	str	r1, [r3, #0]
 8004058:	e002      	b.n	8004060 <_printf_i+0x1a8>
 800405a:	066d      	lsls	r5, r5, #25
 800405c:	d5fb      	bpl.n	8004056 <_printf_i+0x19e>
 800405e:	8019      	strh	r1, [r3, #0]
 8004060:	2300      	movs	r3, #0
 8004062:	9e04      	ldr	r6, [sp, #16]
 8004064:	6123      	str	r3, [r4, #16]
 8004066:	e7bb      	b.n	8003fe0 <_printf_i+0x128>
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	1d11      	adds	r1, r2, #4
 800406c:	6019      	str	r1, [r3, #0]
 800406e:	6816      	ldr	r6, [r2, #0]
 8004070:	2100      	movs	r1, #0
 8004072:	0030      	movs	r0, r6
 8004074:	6862      	ldr	r2, [r4, #4]
 8004076:	f000 f831 	bl	80040dc <memchr>
 800407a:	2800      	cmp	r0, #0
 800407c:	d001      	beq.n	8004082 <_printf_i+0x1ca>
 800407e:	1b80      	subs	r0, r0, r6
 8004080:	6060      	str	r0, [r4, #4]
 8004082:	6863      	ldr	r3, [r4, #4]
 8004084:	6123      	str	r3, [r4, #16]
 8004086:	2300      	movs	r3, #0
 8004088:	9a04      	ldr	r2, [sp, #16]
 800408a:	7013      	strb	r3, [r2, #0]
 800408c:	e7a8      	b.n	8003fe0 <_printf_i+0x128>
 800408e:	6923      	ldr	r3, [r4, #16]
 8004090:	0032      	movs	r2, r6
 8004092:	9906      	ldr	r1, [sp, #24]
 8004094:	9805      	ldr	r0, [sp, #20]
 8004096:	9d07      	ldr	r5, [sp, #28]
 8004098:	47a8      	blx	r5
 800409a:	1c43      	adds	r3, r0, #1
 800409c:	d0aa      	beq.n	8003ff4 <_printf_i+0x13c>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	079b      	lsls	r3, r3, #30
 80040a2:	d415      	bmi.n	80040d0 <_printf_i+0x218>
 80040a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040a6:	68e0      	ldr	r0, [r4, #12]
 80040a8:	4298      	cmp	r0, r3
 80040aa:	daa5      	bge.n	8003ff8 <_printf_i+0x140>
 80040ac:	0018      	movs	r0, r3
 80040ae:	e7a3      	b.n	8003ff8 <_printf_i+0x140>
 80040b0:	0022      	movs	r2, r4
 80040b2:	2301      	movs	r3, #1
 80040b4:	9906      	ldr	r1, [sp, #24]
 80040b6:	9805      	ldr	r0, [sp, #20]
 80040b8:	9e07      	ldr	r6, [sp, #28]
 80040ba:	3219      	adds	r2, #25
 80040bc:	47b0      	blx	r6
 80040be:	1c43      	adds	r3, r0, #1
 80040c0:	d098      	beq.n	8003ff4 <_printf_i+0x13c>
 80040c2:	3501      	adds	r5, #1
 80040c4:	68e3      	ldr	r3, [r4, #12]
 80040c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	42ab      	cmp	r3, r5
 80040cc:	dcf0      	bgt.n	80040b0 <_printf_i+0x1f8>
 80040ce:	e7e9      	b.n	80040a4 <_printf_i+0x1ec>
 80040d0:	2500      	movs	r5, #0
 80040d2:	e7f7      	b.n	80040c4 <_printf_i+0x20c>
 80040d4:	08004461 	.word	0x08004461
 80040d8:	08004472 	.word	0x08004472

080040dc <memchr>:
 80040dc:	b2c9      	uxtb	r1, r1
 80040de:	1882      	adds	r2, r0, r2
 80040e0:	4290      	cmp	r0, r2
 80040e2:	d101      	bne.n	80040e8 <memchr+0xc>
 80040e4:	2000      	movs	r0, #0
 80040e6:	4770      	bx	lr
 80040e8:	7803      	ldrb	r3, [r0, #0]
 80040ea:	428b      	cmp	r3, r1
 80040ec:	d0fb      	beq.n	80040e6 <memchr+0xa>
 80040ee:	3001      	adds	r0, #1
 80040f0:	e7f6      	b.n	80040e0 <memchr+0x4>

080040f2 <memcpy>:
 80040f2:	2300      	movs	r3, #0
 80040f4:	b510      	push	{r4, lr}
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d100      	bne.n	80040fc <memcpy+0xa>
 80040fa:	bd10      	pop	{r4, pc}
 80040fc:	5ccc      	ldrb	r4, [r1, r3]
 80040fe:	54c4      	strb	r4, [r0, r3]
 8004100:	3301      	adds	r3, #1
 8004102:	e7f8      	b.n	80040f6 <memcpy+0x4>

08004104 <memmove>:
 8004104:	b510      	push	{r4, lr}
 8004106:	4288      	cmp	r0, r1
 8004108:	d902      	bls.n	8004110 <memmove+0xc>
 800410a:	188b      	adds	r3, r1, r2
 800410c:	4298      	cmp	r0, r3
 800410e:	d303      	bcc.n	8004118 <memmove+0x14>
 8004110:	2300      	movs	r3, #0
 8004112:	e007      	b.n	8004124 <memmove+0x20>
 8004114:	5c8b      	ldrb	r3, [r1, r2]
 8004116:	5483      	strb	r3, [r0, r2]
 8004118:	3a01      	subs	r2, #1
 800411a:	d2fb      	bcs.n	8004114 <memmove+0x10>
 800411c:	bd10      	pop	{r4, pc}
 800411e:	5ccc      	ldrb	r4, [r1, r3]
 8004120:	54c4      	strb	r4, [r0, r3]
 8004122:	3301      	adds	r3, #1
 8004124:	429a      	cmp	r2, r3
 8004126:	d1fa      	bne.n	800411e <memmove+0x1a>
 8004128:	e7f8      	b.n	800411c <memmove+0x18>
	...

0800412c <_free_r>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	0005      	movs	r5, r0
 8004130:	2900      	cmp	r1, #0
 8004132:	d010      	beq.n	8004156 <_free_r+0x2a>
 8004134:	1f0c      	subs	r4, r1, #4
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	da00      	bge.n	800413e <_free_r+0x12>
 800413c:	18e4      	adds	r4, r4, r3
 800413e:	0028      	movs	r0, r5
 8004140:	f000 f918 	bl	8004374 <__malloc_lock>
 8004144:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <_free_r+0x90>)
 8004146:	6813      	ldr	r3, [r2, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <_free_r+0x2c>
 800414c:	6063      	str	r3, [r4, #4]
 800414e:	6014      	str	r4, [r2, #0]
 8004150:	0028      	movs	r0, r5
 8004152:	f000 f917 	bl	8004384 <__malloc_unlock>
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	42a3      	cmp	r3, r4
 800415a:	d908      	bls.n	800416e <_free_r+0x42>
 800415c:	6821      	ldr	r1, [r4, #0]
 800415e:	1860      	adds	r0, r4, r1
 8004160:	4283      	cmp	r3, r0
 8004162:	d1f3      	bne.n	800414c <_free_r+0x20>
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	1841      	adds	r1, r0, r1
 800416a:	6021      	str	r1, [r4, #0]
 800416c:	e7ee      	b.n	800414c <_free_r+0x20>
 800416e:	001a      	movs	r2, r3
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <_free_r+0x4e>
 8004176:	42a3      	cmp	r3, r4
 8004178:	d9f9      	bls.n	800416e <_free_r+0x42>
 800417a:	6811      	ldr	r1, [r2, #0]
 800417c:	1850      	adds	r0, r2, r1
 800417e:	42a0      	cmp	r0, r4
 8004180:	d10b      	bne.n	800419a <_free_r+0x6e>
 8004182:	6820      	ldr	r0, [r4, #0]
 8004184:	1809      	adds	r1, r1, r0
 8004186:	1850      	adds	r0, r2, r1
 8004188:	6011      	str	r1, [r2, #0]
 800418a:	4283      	cmp	r3, r0
 800418c:	d1e0      	bne.n	8004150 <_free_r+0x24>
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	1841      	adds	r1, r0, r1
 8004194:	6011      	str	r1, [r2, #0]
 8004196:	6053      	str	r3, [r2, #4]
 8004198:	e7da      	b.n	8004150 <_free_r+0x24>
 800419a:	42a0      	cmp	r0, r4
 800419c:	d902      	bls.n	80041a4 <_free_r+0x78>
 800419e:	230c      	movs	r3, #12
 80041a0:	602b      	str	r3, [r5, #0]
 80041a2:	e7d5      	b.n	8004150 <_free_r+0x24>
 80041a4:	6821      	ldr	r1, [r4, #0]
 80041a6:	1860      	adds	r0, r4, r1
 80041a8:	4283      	cmp	r3, r0
 80041aa:	d103      	bne.n	80041b4 <_free_r+0x88>
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	1841      	adds	r1, r0, r1
 80041b2:	6021      	str	r1, [r4, #0]
 80041b4:	6063      	str	r3, [r4, #4]
 80041b6:	6054      	str	r4, [r2, #4]
 80041b8:	e7ca      	b.n	8004150 <_free_r+0x24>
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	200001d8 	.word	0x200001d8

080041c0 <sbrk_aligned>:
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	4e0f      	ldr	r6, [pc, #60]	; (8004200 <sbrk_aligned+0x40>)
 80041c4:	000d      	movs	r5, r1
 80041c6:	6831      	ldr	r1, [r6, #0]
 80041c8:	0004      	movs	r4, r0
 80041ca:	2900      	cmp	r1, #0
 80041cc:	d102      	bne.n	80041d4 <sbrk_aligned+0x14>
 80041ce:	f000 f8bf 	bl	8004350 <_sbrk_r>
 80041d2:	6030      	str	r0, [r6, #0]
 80041d4:	0029      	movs	r1, r5
 80041d6:	0020      	movs	r0, r4
 80041d8:	f000 f8ba 	bl	8004350 <_sbrk_r>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d00a      	beq.n	80041f6 <sbrk_aligned+0x36>
 80041e0:	2303      	movs	r3, #3
 80041e2:	1cc5      	adds	r5, r0, #3
 80041e4:	439d      	bics	r5, r3
 80041e6:	42a8      	cmp	r0, r5
 80041e8:	d007      	beq.n	80041fa <sbrk_aligned+0x3a>
 80041ea:	1a29      	subs	r1, r5, r0
 80041ec:	0020      	movs	r0, r4
 80041ee:	f000 f8af 	bl	8004350 <_sbrk_r>
 80041f2:	1c43      	adds	r3, r0, #1
 80041f4:	d101      	bne.n	80041fa <sbrk_aligned+0x3a>
 80041f6:	2501      	movs	r5, #1
 80041f8:	426d      	negs	r5, r5
 80041fa:	0028      	movs	r0, r5
 80041fc:	bd70      	pop	{r4, r5, r6, pc}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	200001dc 	.word	0x200001dc

08004204 <_malloc_r>:
 8004204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004206:	2203      	movs	r2, #3
 8004208:	1ccb      	adds	r3, r1, #3
 800420a:	4393      	bics	r3, r2
 800420c:	3308      	adds	r3, #8
 800420e:	0006      	movs	r6, r0
 8004210:	001f      	movs	r7, r3
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d232      	bcs.n	800427c <_malloc_r+0x78>
 8004216:	270c      	movs	r7, #12
 8004218:	42b9      	cmp	r1, r7
 800421a:	d831      	bhi.n	8004280 <_malloc_r+0x7c>
 800421c:	0030      	movs	r0, r6
 800421e:	f000 f8a9 	bl	8004374 <__malloc_lock>
 8004222:	4d32      	ldr	r5, [pc, #200]	; (80042ec <_malloc_r+0xe8>)
 8004224:	682b      	ldr	r3, [r5, #0]
 8004226:	001c      	movs	r4, r3
 8004228:	2c00      	cmp	r4, #0
 800422a:	d12e      	bne.n	800428a <_malloc_r+0x86>
 800422c:	0039      	movs	r1, r7
 800422e:	0030      	movs	r0, r6
 8004230:	f7ff ffc6 	bl	80041c0 <sbrk_aligned>
 8004234:	0004      	movs	r4, r0
 8004236:	1c43      	adds	r3, r0, #1
 8004238:	d11e      	bne.n	8004278 <_malloc_r+0x74>
 800423a:	682c      	ldr	r4, [r5, #0]
 800423c:	0025      	movs	r5, r4
 800423e:	2d00      	cmp	r5, #0
 8004240:	d14a      	bne.n	80042d8 <_malloc_r+0xd4>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	0029      	movs	r1, r5
 8004246:	18e3      	adds	r3, r4, r3
 8004248:	0030      	movs	r0, r6
 800424a:	9301      	str	r3, [sp, #4]
 800424c:	f000 f880 	bl	8004350 <_sbrk_r>
 8004250:	9b01      	ldr	r3, [sp, #4]
 8004252:	4283      	cmp	r3, r0
 8004254:	d143      	bne.n	80042de <_malloc_r+0xda>
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	3703      	adds	r7, #3
 800425a:	1aff      	subs	r7, r7, r3
 800425c:	2303      	movs	r3, #3
 800425e:	439f      	bics	r7, r3
 8004260:	3708      	adds	r7, #8
 8004262:	2f0c      	cmp	r7, #12
 8004264:	d200      	bcs.n	8004268 <_malloc_r+0x64>
 8004266:	270c      	movs	r7, #12
 8004268:	0039      	movs	r1, r7
 800426a:	0030      	movs	r0, r6
 800426c:	f7ff ffa8 	bl	80041c0 <sbrk_aligned>
 8004270:	1c43      	adds	r3, r0, #1
 8004272:	d034      	beq.n	80042de <_malloc_r+0xda>
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	19df      	adds	r7, r3, r7
 8004278:	6027      	str	r7, [r4, #0]
 800427a:	e013      	b.n	80042a4 <_malloc_r+0xa0>
 800427c:	2b00      	cmp	r3, #0
 800427e:	dacb      	bge.n	8004218 <_malloc_r+0x14>
 8004280:	230c      	movs	r3, #12
 8004282:	2500      	movs	r5, #0
 8004284:	6033      	str	r3, [r6, #0]
 8004286:	0028      	movs	r0, r5
 8004288:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800428a:	6822      	ldr	r2, [r4, #0]
 800428c:	1bd1      	subs	r1, r2, r7
 800428e:	d420      	bmi.n	80042d2 <_malloc_r+0xce>
 8004290:	290b      	cmp	r1, #11
 8004292:	d917      	bls.n	80042c4 <_malloc_r+0xc0>
 8004294:	19e2      	adds	r2, r4, r7
 8004296:	6027      	str	r7, [r4, #0]
 8004298:	42a3      	cmp	r3, r4
 800429a:	d111      	bne.n	80042c0 <_malloc_r+0xbc>
 800429c:	602a      	str	r2, [r5, #0]
 800429e:	6863      	ldr	r3, [r4, #4]
 80042a0:	6011      	str	r1, [r2, #0]
 80042a2:	6053      	str	r3, [r2, #4]
 80042a4:	0030      	movs	r0, r6
 80042a6:	0025      	movs	r5, r4
 80042a8:	f000 f86c 	bl	8004384 <__malloc_unlock>
 80042ac:	2207      	movs	r2, #7
 80042ae:	350b      	adds	r5, #11
 80042b0:	1d23      	adds	r3, r4, #4
 80042b2:	4395      	bics	r5, r2
 80042b4:	1aea      	subs	r2, r5, r3
 80042b6:	429d      	cmp	r5, r3
 80042b8:	d0e5      	beq.n	8004286 <_malloc_r+0x82>
 80042ba:	1b5b      	subs	r3, r3, r5
 80042bc:	50a3      	str	r3, [r4, r2]
 80042be:	e7e2      	b.n	8004286 <_malloc_r+0x82>
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	e7ec      	b.n	800429e <_malloc_r+0x9a>
 80042c4:	6862      	ldr	r2, [r4, #4]
 80042c6:	42a3      	cmp	r3, r4
 80042c8:	d101      	bne.n	80042ce <_malloc_r+0xca>
 80042ca:	602a      	str	r2, [r5, #0]
 80042cc:	e7ea      	b.n	80042a4 <_malloc_r+0xa0>
 80042ce:	605a      	str	r2, [r3, #4]
 80042d0:	e7e8      	b.n	80042a4 <_malloc_r+0xa0>
 80042d2:	0023      	movs	r3, r4
 80042d4:	6864      	ldr	r4, [r4, #4]
 80042d6:	e7a7      	b.n	8004228 <_malloc_r+0x24>
 80042d8:	002c      	movs	r4, r5
 80042da:	686d      	ldr	r5, [r5, #4]
 80042dc:	e7af      	b.n	800423e <_malloc_r+0x3a>
 80042de:	230c      	movs	r3, #12
 80042e0:	0030      	movs	r0, r6
 80042e2:	6033      	str	r3, [r6, #0]
 80042e4:	f000 f84e 	bl	8004384 <__malloc_unlock>
 80042e8:	e7cd      	b.n	8004286 <_malloc_r+0x82>
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	200001d8 	.word	0x200001d8

080042f0 <_realloc_r>:
 80042f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042f2:	0007      	movs	r7, r0
 80042f4:	000e      	movs	r6, r1
 80042f6:	0014      	movs	r4, r2
 80042f8:	2900      	cmp	r1, #0
 80042fa:	d105      	bne.n	8004308 <_realloc_r+0x18>
 80042fc:	0011      	movs	r1, r2
 80042fe:	f7ff ff81 	bl	8004204 <_malloc_r>
 8004302:	0005      	movs	r5, r0
 8004304:	0028      	movs	r0, r5
 8004306:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004308:	2a00      	cmp	r2, #0
 800430a:	d103      	bne.n	8004314 <_realloc_r+0x24>
 800430c:	f7ff ff0e 	bl	800412c <_free_r>
 8004310:	0025      	movs	r5, r4
 8004312:	e7f7      	b.n	8004304 <_realloc_r+0x14>
 8004314:	f000 f83e 	bl	8004394 <_malloc_usable_size_r>
 8004318:	9001      	str	r0, [sp, #4]
 800431a:	4284      	cmp	r4, r0
 800431c:	d803      	bhi.n	8004326 <_realloc_r+0x36>
 800431e:	0035      	movs	r5, r6
 8004320:	0843      	lsrs	r3, r0, #1
 8004322:	42a3      	cmp	r3, r4
 8004324:	d3ee      	bcc.n	8004304 <_realloc_r+0x14>
 8004326:	0021      	movs	r1, r4
 8004328:	0038      	movs	r0, r7
 800432a:	f7ff ff6b 	bl	8004204 <_malloc_r>
 800432e:	1e05      	subs	r5, r0, #0
 8004330:	d0e8      	beq.n	8004304 <_realloc_r+0x14>
 8004332:	9b01      	ldr	r3, [sp, #4]
 8004334:	0022      	movs	r2, r4
 8004336:	429c      	cmp	r4, r3
 8004338:	d900      	bls.n	800433c <_realloc_r+0x4c>
 800433a:	001a      	movs	r2, r3
 800433c:	0031      	movs	r1, r6
 800433e:	0028      	movs	r0, r5
 8004340:	f7ff fed7 	bl	80040f2 <memcpy>
 8004344:	0031      	movs	r1, r6
 8004346:	0038      	movs	r0, r7
 8004348:	f7ff fef0 	bl	800412c <_free_r>
 800434c:	e7da      	b.n	8004304 <_realloc_r+0x14>
	...

08004350 <_sbrk_r>:
 8004350:	2300      	movs	r3, #0
 8004352:	b570      	push	{r4, r5, r6, lr}
 8004354:	4d06      	ldr	r5, [pc, #24]	; (8004370 <_sbrk_r+0x20>)
 8004356:	0004      	movs	r4, r0
 8004358:	0008      	movs	r0, r1
 800435a:	602b      	str	r3, [r5, #0]
 800435c:	f7fc fb68 	bl	8000a30 <_sbrk>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d103      	bne.n	800436c <_sbrk_r+0x1c>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d000      	beq.n	800436c <_sbrk_r+0x1c>
 800436a:	6023      	str	r3, [r4, #0]
 800436c:	bd70      	pop	{r4, r5, r6, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	200001e0 	.word	0x200001e0

08004374 <__malloc_lock>:
 8004374:	b510      	push	{r4, lr}
 8004376:	4802      	ldr	r0, [pc, #8]	; (8004380 <__malloc_lock+0xc>)
 8004378:	f000 f814 	bl	80043a4 <__retarget_lock_acquire_recursive>
 800437c:	bd10      	pop	{r4, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	200001e4 	.word	0x200001e4

08004384 <__malloc_unlock>:
 8004384:	b510      	push	{r4, lr}
 8004386:	4802      	ldr	r0, [pc, #8]	; (8004390 <__malloc_unlock+0xc>)
 8004388:	f000 f80d 	bl	80043a6 <__retarget_lock_release_recursive>
 800438c:	bd10      	pop	{r4, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	200001e4 	.word	0x200001e4

08004394 <_malloc_usable_size_r>:
 8004394:	1f0b      	subs	r3, r1, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	1f18      	subs	r0, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	da01      	bge.n	80043a2 <_malloc_usable_size_r+0xe>
 800439e:	580b      	ldr	r3, [r1, r0]
 80043a0:	18c0      	adds	r0, r0, r3
 80043a2:	4770      	bx	lr

080043a4 <__retarget_lock_acquire_recursive>:
 80043a4:	4770      	bx	lr

080043a6 <__retarget_lock_release_recursive>:
 80043a6:	4770      	bx	lr

080043a8 <_init>:
 80043a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ae:	bc08      	pop	{r3}
 80043b0:	469e      	mov	lr, r3
 80043b2:	4770      	bx	lr

080043b4 <_fini>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr
