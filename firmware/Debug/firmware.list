
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a380  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800a438  0800a438  0001a438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9dc  0800a9dc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9dc  0800a9dc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9dc  0800a9dc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9dc  0800a9dc  0001a9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a9e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cc8  200001dc  0800abc0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ea4  0800abc0  00024ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013844  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271d  00000000  00000000  00033a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00036168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  00037228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018319  00000000  00000000  000381f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138e3  00000000  00000000  00050509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099b6f  00000000  00000000  00063dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd95b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f1c  00000000  00000000  000fd9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001dc 	.word	0x200001dc
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800a420 	.word	0x0800a420

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e0 	.word	0x200001e0
 80000fc:	0800a420 	.word	0x0800a420

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fe11 	bl	800205c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fd61 	bl	8001f0c <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fe03 	bl	800205c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fdf9 	bl	800205c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fd89 	bl	8001f90 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fd7f 	bl	8001f90 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fb55 	bl	8000b58 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fae1 	bl	8000a80 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fb47 	bl	8000b58 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb3d 	bl	8000b58 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 faed 	bl	8000acc <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fae3 	bl	8000acc <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fadd>:
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	46c6      	mov	lr, r8
 8000518:	0243      	lsls	r3, r0, #9
 800051a:	0a5b      	lsrs	r3, r3, #9
 800051c:	024e      	lsls	r6, r1, #9
 800051e:	0045      	lsls	r5, r0, #1
 8000520:	004f      	lsls	r7, r1, #1
 8000522:	00da      	lsls	r2, r3, #3
 8000524:	0fc4      	lsrs	r4, r0, #31
 8000526:	469c      	mov	ip, r3
 8000528:	0a70      	lsrs	r0, r6, #9
 800052a:	4690      	mov	r8, r2
 800052c:	b500      	push	{lr}
 800052e:	0e2d      	lsrs	r5, r5, #24
 8000530:	0e3f      	lsrs	r7, r7, #24
 8000532:	0fc9      	lsrs	r1, r1, #31
 8000534:	09b6      	lsrs	r6, r6, #6
 8000536:	428c      	cmp	r4, r1
 8000538:	d04b      	beq.n	80005d2 <__aeabi_fadd+0xbe>
 800053a:	1bea      	subs	r2, r5, r7
 800053c:	2a00      	cmp	r2, #0
 800053e:	dd36      	ble.n	80005ae <__aeabi_fadd+0x9a>
 8000540:	2f00      	cmp	r7, #0
 8000542:	d061      	beq.n	8000608 <__aeabi_fadd+0xf4>
 8000544:	2dff      	cmp	r5, #255	; 0xff
 8000546:	d100      	bne.n	800054a <__aeabi_fadd+0x36>
 8000548:	e0ad      	b.n	80006a6 <__aeabi_fadd+0x192>
 800054a:	2380      	movs	r3, #128	; 0x80
 800054c:	04db      	lsls	r3, r3, #19
 800054e:	431e      	orrs	r6, r3
 8000550:	2a1b      	cmp	r2, #27
 8000552:	dc00      	bgt.n	8000556 <__aeabi_fadd+0x42>
 8000554:	e0d3      	b.n	80006fe <__aeabi_fadd+0x1ea>
 8000556:	2001      	movs	r0, #1
 8000558:	4643      	mov	r3, r8
 800055a:	1a18      	subs	r0, r3, r0
 800055c:	0143      	lsls	r3, r0, #5
 800055e:	d400      	bmi.n	8000562 <__aeabi_fadd+0x4e>
 8000560:	e08c      	b.n	800067c <__aeabi_fadd+0x168>
 8000562:	0180      	lsls	r0, r0, #6
 8000564:	0987      	lsrs	r7, r0, #6
 8000566:	0038      	movs	r0, r7
 8000568:	f002 fd54 	bl	8003014 <__clzsi2>
 800056c:	3805      	subs	r0, #5
 800056e:	4087      	lsls	r7, r0
 8000570:	4285      	cmp	r5, r0
 8000572:	dc00      	bgt.n	8000576 <__aeabi_fadd+0x62>
 8000574:	e0b6      	b.n	80006e4 <__aeabi_fadd+0x1d0>
 8000576:	1a2d      	subs	r5, r5, r0
 8000578:	48b3      	ldr	r0, [pc, #716]	; (8000848 <__aeabi_fadd+0x334>)
 800057a:	4038      	ands	r0, r7
 800057c:	0743      	lsls	r3, r0, #29
 800057e:	d004      	beq.n	800058a <__aeabi_fadd+0x76>
 8000580:	230f      	movs	r3, #15
 8000582:	4003      	ands	r3, r0
 8000584:	2b04      	cmp	r3, #4
 8000586:	d000      	beq.n	800058a <__aeabi_fadd+0x76>
 8000588:	3004      	adds	r0, #4
 800058a:	0143      	lsls	r3, r0, #5
 800058c:	d400      	bmi.n	8000590 <__aeabi_fadd+0x7c>
 800058e:	e078      	b.n	8000682 <__aeabi_fadd+0x16e>
 8000590:	1c6a      	adds	r2, r5, #1
 8000592:	2dfe      	cmp	r5, #254	; 0xfe
 8000594:	d065      	beq.n	8000662 <__aeabi_fadd+0x14e>
 8000596:	0180      	lsls	r0, r0, #6
 8000598:	0a43      	lsrs	r3, r0, #9
 800059a:	469c      	mov	ip, r3
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	4663      	mov	r3, ip
 80005a0:	05d0      	lsls	r0, r2, #23
 80005a2:	4318      	orrs	r0, r3
 80005a4:	07e4      	lsls	r4, r4, #31
 80005a6:	4320      	orrs	r0, r4
 80005a8:	bc80      	pop	{r7}
 80005aa:	46b8      	mov	r8, r7
 80005ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d035      	beq.n	800061e <__aeabi_fadd+0x10a>
 80005b2:	1b7a      	subs	r2, r7, r5
 80005b4:	2d00      	cmp	r5, #0
 80005b6:	d000      	beq.n	80005ba <__aeabi_fadd+0xa6>
 80005b8:	e0af      	b.n	800071a <__aeabi_fadd+0x206>
 80005ba:	4643      	mov	r3, r8
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d100      	bne.n	80005c2 <__aeabi_fadd+0xae>
 80005c0:	e0a7      	b.n	8000712 <__aeabi_fadd+0x1fe>
 80005c2:	1e53      	subs	r3, r2, #1
 80005c4:	2a01      	cmp	r2, #1
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0xb6>
 80005c8:	e12f      	b.n	800082a <__aeabi_fadd+0x316>
 80005ca:	2aff      	cmp	r2, #255	; 0xff
 80005cc:	d069      	beq.n	80006a2 <__aeabi_fadd+0x18e>
 80005ce:	001a      	movs	r2, r3
 80005d0:	e0aa      	b.n	8000728 <__aeabi_fadd+0x214>
 80005d2:	1be9      	subs	r1, r5, r7
 80005d4:	2900      	cmp	r1, #0
 80005d6:	dd70      	ble.n	80006ba <__aeabi_fadd+0x1a6>
 80005d8:	2f00      	cmp	r7, #0
 80005da:	d037      	beq.n	800064c <__aeabi_fadd+0x138>
 80005dc:	2dff      	cmp	r5, #255	; 0xff
 80005de:	d062      	beq.n	80006a6 <__aeabi_fadd+0x192>
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	04db      	lsls	r3, r3, #19
 80005e4:	431e      	orrs	r6, r3
 80005e6:	291b      	cmp	r1, #27
 80005e8:	dc00      	bgt.n	80005ec <__aeabi_fadd+0xd8>
 80005ea:	e0b0      	b.n	800074e <__aeabi_fadd+0x23a>
 80005ec:	2001      	movs	r0, #1
 80005ee:	4440      	add	r0, r8
 80005f0:	0143      	lsls	r3, r0, #5
 80005f2:	d543      	bpl.n	800067c <__aeabi_fadd+0x168>
 80005f4:	3501      	adds	r5, #1
 80005f6:	2dff      	cmp	r5, #255	; 0xff
 80005f8:	d033      	beq.n	8000662 <__aeabi_fadd+0x14e>
 80005fa:	2301      	movs	r3, #1
 80005fc:	4a93      	ldr	r2, [pc, #588]	; (800084c <__aeabi_fadd+0x338>)
 80005fe:	4003      	ands	r3, r0
 8000600:	0840      	lsrs	r0, r0, #1
 8000602:	4010      	ands	r0, r2
 8000604:	4318      	orrs	r0, r3
 8000606:	e7b9      	b.n	800057c <__aeabi_fadd+0x68>
 8000608:	2e00      	cmp	r6, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0xfa>
 800060c:	e083      	b.n	8000716 <__aeabi_fadd+0x202>
 800060e:	1e51      	subs	r1, r2, #1
 8000610:	2a01      	cmp	r2, #1
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x102>
 8000614:	e0d8      	b.n	80007c8 <__aeabi_fadd+0x2b4>
 8000616:	2aff      	cmp	r2, #255	; 0xff
 8000618:	d045      	beq.n	80006a6 <__aeabi_fadd+0x192>
 800061a:	000a      	movs	r2, r1
 800061c:	e798      	b.n	8000550 <__aeabi_fadd+0x3c>
 800061e:	27fe      	movs	r7, #254	; 0xfe
 8000620:	1c6a      	adds	r2, r5, #1
 8000622:	4217      	tst	r7, r2
 8000624:	d000      	beq.n	8000628 <__aeabi_fadd+0x114>
 8000626:	e086      	b.n	8000736 <__aeabi_fadd+0x222>
 8000628:	2d00      	cmp	r5, #0
 800062a:	d000      	beq.n	800062e <__aeabi_fadd+0x11a>
 800062c:	e0b7      	b.n	800079e <__aeabi_fadd+0x28a>
 800062e:	4643      	mov	r3, r8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0x122>
 8000634:	e0f3      	b.n	800081e <__aeabi_fadd+0x30a>
 8000636:	2200      	movs	r2, #0
 8000638:	2e00      	cmp	r6, #0
 800063a:	d0b0      	beq.n	800059e <__aeabi_fadd+0x8a>
 800063c:	1b98      	subs	r0, r3, r6
 800063e:	0143      	lsls	r3, r0, #5
 8000640:	d400      	bmi.n	8000644 <__aeabi_fadd+0x130>
 8000642:	e0fa      	b.n	800083a <__aeabi_fadd+0x326>
 8000644:	4643      	mov	r3, r8
 8000646:	000c      	movs	r4, r1
 8000648:	1af0      	subs	r0, r6, r3
 800064a:	e797      	b.n	800057c <__aeabi_fadd+0x68>
 800064c:	2e00      	cmp	r6, #0
 800064e:	d100      	bne.n	8000652 <__aeabi_fadd+0x13e>
 8000650:	e0c8      	b.n	80007e4 <__aeabi_fadd+0x2d0>
 8000652:	1e4a      	subs	r2, r1, #1
 8000654:	2901      	cmp	r1, #1
 8000656:	d100      	bne.n	800065a <__aeabi_fadd+0x146>
 8000658:	e0ae      	b.n	80007b8 <__aeabi_fadd+0x2a4>
 800065a:	29ff      	cmp	r1, #255	; 0xff
 800065c:	d023      	beq.n	80006a6 <__aeabi_fadd+0x192>
 800065e:	0011      	movs	r1, r2
 8000660:	e7c1      	b.n	80005e6 <__aeabi_fadd+0xd2>
 8000662:	2300      	movs	r3, #0
 8000664:	22ff      	movs	r2, #255	; 0xff
 8000666:	469c      	mov	ip, r3
 8000668:	e799      	b.n	800059e <__aeabi_fadd+0x8a>
 800066a:	21fe      	movs	r1, #254	; 0xfe
 800066c:	1c6a      	adds	r2, r5, #1
 800066e:	4211      	tst	r1, r2
 8000670:	d077      	beq.n	8000762 <__aeabi_fadd+0x24e>
 8000672:	2aff      	cmp	r2, #255	; 0xff
 8000674:	d0f5      	beq.n	8000662 <__aeabi_fadd+0x14e>
 8000676:	0015      	movs	r5, r2
 8000678:	4446      	add	r6, r8
 800067a:	0870      	lsrs	r0, r6, #1
 800067c:	0743      	lsls	r3, r0, #29
 800067e:	d000      	beq.n	8000682 <__aeabi_fadd+0x16e>
 8000680:	e77e      	b.n	8000580 <__aeabi_fadd+0x6c>
 8000682:	08c3      	lsrs	r3, r0, #3
 8000684:	2dff      	cmp	r5, #255	; 0xff
 8000686:	d00e      	beq.n	80006a6 <__aeabi_fadd+0x192>
 8000688:	025b      	lsls	r3, r3, #9
 800068a:	0a5b      	lsrs	r3, r3, #9
 800068c:	469c      	mov	ip, r3
 800068e:	b2ea      	uxtb	r2, r5
 8000690:	e785      	b.n	800059e <__aeabi_fadd+0x8a>
 8000692:	2e00      	cmp	r6, #0
 8000694:	d007      	beq.n	80006a6 <__aeabi_fadd+0x192>
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	03d2      	lsls	r2, r2, #15
 800069a:	4213      	tst	r3, r2
 800069c:	d003      	beq.n	80006a6 <__aeabi_fadd+0x192>
 800069e:	4210      	tst	r0, r2
 80006a0:	d101      	bne.n	80006a6 <__aeabi_fadd+0x192>
 80006a2:	000c      	movs	r4, r1
 80006a4:	0003      	movs	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0db      	beq.n	8000662 <__aeabi_fadd+0x14e>
 80006aa:	2080      	movs	r0, #128	; 0x80
 80006ac:	03c0      	lsls	r0, r0, #15
 80006ae:	4318      	orrs	r0, r3
 80006b0:	0240      	lsls	r0, r0, #9
 80006b2:	0a43      	lsrs	r3, r0, #9
 80006b4:	469c      	mov	ip, r3
 80006b6:	22ff      	movs	r2, #255	; 0xff
 80006b8:	e771      	b.n	800059e <__aeabi_fadd+0x8a>
 80006ba:	2900      	cmp	r1, #0
 80006bc:	d0d5      	beq.n	800066a <__aeabi_fadd+0x156>
 80006be:	1b7a      	subs	r2, r7, r5
 80006c0:	2d00      	cmp	r5, #0
 80006c2:	d160      	bne.n	8000786 <__aeabi_fadd+0x272>
 80006c4:	4643      	mov	r3, r8
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d024      	beq.n	8000714 <__aeabi_fadd+0x200>
 80006ca:	1e53      	subs	r3, r2, #1
 80006cc:	2a01      	cmp	r2, #1
 80006ce:	d073      	beq.n	80007b8 <__aeabi_fadd+0x2a4>
 80006d0:	2aff      	cmp	r2, #255	; 0xff
 80006d2:	d0e7      	beq.n	80006a4 <__aeabi_fadd+0x190>
 80006d4:	001a      	movs	r2, r3
 80006d6:	2a1b      	cmp	r2, #27
 80006d8:	dc00      	bgt.n	80006dc <__aeabi_fadd+0x1c8>
 80006da:	e085      	b.n	80007e8 <__aeabi_fadd+0x2d4>
 80006dc:	2001      	movs	r0, #1
 80006de:	003d      	movs	r5, r7
 80006e0:	1980      	adds	r0, r0, r6
 80006e2:	e785      	b.n	80005f0 <__aeabi_fadd+0xdc>
 80006e4:	2320      	movs	r3, #32
 80006e6:	003a      	movs	r2, r7
 80006e8:	1b45      	subs	r5, r0, r5
 80006ea:	0038      	movs	r0, r7
 80006ec:	3501      	adds	r5, #1
 80006ee:	40ea      	lsrs	r2, r5
 80006f0:	1b5d      	subs	r5, r3, r5
 80006f2:	40a8      	lsls	r0, r5
 80006f4:	1e43      	subs	r3, r0, #1
 80006f6:	4198      	sbcs	r0, r3
 80006f8:	2500      	movs	r5, #0
 80006fa:	4310      	orrs	r0, r2
 80006fc:	e73e      	b.n	800057c <__aeabi_fadd+0x68>
 80006fe:	2320      	movs	r3, #32
 8000700:	0030      	movs	r0, r6
 8000702:	1a9b      	subs	r3, r3, r2
 8000704:	0031      	movs	r1, r6
 8000706:	4098      	lsls	r0, r3
 8000708:	40d1      	lsrs	r1, r2
 800070a:	1e43      	subs	r3, r0, #1
 800070c:	4198      	sbcs	r0, r3
 800070e:	4308      	orrs	r0, r1
 8000710:	e722      	b.n	8000558 <__aeabi_fadd+0x44>
 8000712:	000c      	movs	r4, r1
 8000714:	0003      	movs	r3, r0
 8000716:	0015      	movs	r5, r2
 8000718:	e7b4      	b.n	8000684 <__aeabi_fadd+0x170>
 800071a:	2fff      	cmp	r7, #255	; 0xff
 800071c:	d0c1      	beq.n	80006a2 <__aeabi_fadd+0x18e>
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	4640      	mov	r0, r8
 8000722:	04db      	lsls	r3, r3, #19
 8000724:	4318      	orrs	r0, r3
 8000726:	4680      	mov	r8, r0
 8000728:	2a1b      	cmp	r2, #27
 800072a:	dd51      	ble.n	80007d0 <__aeabi_fadd+0x2bc>
 800072c:	2001      	movs	r0, #1
 800072e:	000c      	movs	r4, r1
 8000730:	003d      	movs	r5, r7
 8000732:	1a30      	subs	r0, r6, r0
 8000734:	e712      	b.n	800055c <__aeabi_fadd+0x48>
 8000736:	4643      	mov	r3, r8
 8000738:	1b9f      	subs	r7, r3, r6
 800073a:	017b      	lsls	r3, r7, #5
 800073c:	d42b      	bmi.n	8000796 <__aeabi_fadd+0x282>
 800073e:	2f00      	cmp	r7, #0
 8000740:	d000      	beq.n	8000744 <__aeabi_fadd+0x230>
 8000742:	e710      	b.n	8000566 <__aeabi_fadd+0x52>
 8000744:	2300      	movs	r3, #0
 8000746:	2400      	movs	r4, #0
 8000748:	2200      	movs	r2, #0
 800074a:	469c      	mov	ip, r3
 800074c:	e727      	b.n	800059e <__aeabi_fadd+0x8a>
 800074e:	2320      	movs	r3, #32
 8000750:	0032      	movs	r2, r6
 8000752:	0030      	movs	r0, r6
 8000754:	40ca      	lsrs	r2, r1
 8000756:	1a59      	subs	r1, r3, r1
 8000758:	4088      	lsls	r0, r1
 800075a:	1e43      	subs	r3, r0, #1
 800075c:	4198      	sbcs	r0, r3
 800075e:	4310      	orrs	r0, r2
 8000760:	e745      	b.n	80005ee <__aeabi_fadd+0xda>
 8000762:	2d00      	cmp	r5, #0
 8000764:	d14a      	bne.n	80007fc <__aeabi_fadd+0x2e8>
 8000766:	4643      	mov	r3, r8
 8000768:	2b00      	cmp	r3, #0
 800076a:	d063      	beq.n	8000834 <__aeabi_fadd+0x320>
 800076c:	2200      	movs	r2, #0
 800076e:	2e00      	cmp	r6, #0
 8000770:	d100      	bne.n	8000774 <__aeabi_fadd+0x260>
 8000772:	e714      	b.n	800059e <__aeabi_fadd+0x8a>
 8000774:	0030      	movs	r0, r6
 8000776:	4440      	add	r0, r8
 8000778:	0143      	lsls	r3, r0, #5
 800077a:	d400      	bmi.n	800077e <__aeabi_fadd+0x26a>
 800077c:	e77e      	b.n	800067c <__aeabi_fadd+0x168>
 800077e:	4b32      	ldr	r3, [pc, #200]	; (8000848 <__aeabi_fadd+0x334>)
 8000780:	3501      	adds	r5, #1
 8000782:	4018      	ands	r0, r3
 8000784:	e77a      	b.n	800067c <__aeabi_fadd+0x168>
 8000786:	2fff      	cmp	r7, #255	; 0xff
 8000788:	d08c      	beq.n	80006a4 <__aeabi_fadd+0x190>
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	4641      	mov	r1, r8
 800078e:	04db      	lsls	r3, r3, #19
 8000790:	4319      	orrs	r1, r3
 8000792:	4688      	mov	r8, r1
 8000794:	e79f      	b.n	80006d6 <__aeabi_fadd+0x1c2>
 8000796:	4643      	mov	r3, r8
 8000798:	000c      	movs	r4, r1
 800079a:	1af7      	subs	r7, r6, r3
 800079c:	e6e3      	b.n	8000566 <__aeabi_fadd+0x52>
 800079e:	4642      	mov	r2, r8
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fadd+0x292>
 80007a4:	e775      	b.n	8000692 <__aeabi_fadd+0x17e>
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	d000      	beq.n	80007ac <__aeabi_fadd+0x298>
 80007aa:	e77a      	b.n	80006a2 <__aeabi_fadd+0x18e>
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	03db      	lsls	r3, r3, #15
 80007b0:	2400      	movs	r4, #0
 80007b2:	469c      	mov	ip, r3
 80007b4:	22ff      	movs	r2, #255	; 0xff
 80007b6:	e6f2      	b.n	800059e <__aeabi_fadd+0x8a>
 80007b8:	0030      	movs	r0, r6
 80007ba:	4440      	add	r0, r8
 80007bc:	2501      	movs	r5, #1
 80007be:	0143      	lsls	r3, r0, #5
 80007c0:	d400      	bmi.n	80007c4 <__aeabi_fadd+0x2b0>
 80007c2:	e75b      	b.n	800067c <__aeabi_fadd+0x168>
 80007c4:	2502      	movs	r5, #2
 80007c6:	e718      	b.n	80005fa <__aeabi_fadd+0xe6>
 80007c8:	4643      	mov	r3, r8
 80007ca:	2501      	movs	r5, #1
 80007cc:	1b98      	subs	r0, r3, r6
 80007ce:	e6c5      	b.n	800055c <__aeabi_fadd+0x48>
 80007d0:	2320      	movs	r3, #32
 80007d2:	4644      	mov	r4, r8
 80007d4:	4640      	mov	r0, r8
 80007d6:	40d4      	lsrs	r4, r2
 80007d8:	1a9a      	subs	r2, r3, r2
 80007da:	4090      	lsls	r0, r2
 80007dc:	1e43      	subs	r3, r0, #1
 80007de:	4198      	sbcs	r0, r3
 80007e0:	4320      	orrs	r0, r4
 80007e2:	e7a4      	b.n	800072e <__aeabi_fadd+0x21a>
 80007e4:	000d      	movs	r5, r1
 80007e6:	e74d      	b.n	8000684 <__aeabi_fadd+0x170>
 80007e8:	2320      	movs	r3, #32
 80007ea:	4641      	mov	r1, r8
 80007ec:	4640      	mov	r0, r8
 80007ee:	40d1      	lsrs	r1, r2
 80007f0:	1a9a      	subs	r2, r3, r2
 80007f2:	4090      	lsls	r0, r2
 80007f4:	1e43      	subs	r3, r0, #1
 80007f6:	4198      	sbcs	r0, r3
 80007f8:	4308      	orrs	r0, r1
 80007fa:	e770      	b.n	80006de <__aeabi_fadd+0x1ca>
 80007fc:	4642      	mov	r2, r8
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_fadd+0x2f0>
 8000802:	e74f      	b.n	80006a4 <__aeabi_fadd+0x190>
 8000804:	2e00      	cmp	r6, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fadd+0x2f6>
 8000808:	e74d      	b.n	80006a6 <__aeabi_fadd+0x192>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	03d2      	lsls	r2, r2, #15
 800080e:	4213      	tst	r3, r2
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x300>
 8000812:	e748      	b.n	80006a6 <__aeabi_fadd+0x192>
 8000814:	4210      	tst	r0, r2
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0x306>
 8000818:	e745      	b.n	80006a6 <__aeabi_fadd+0x192>
 800081a:	0003      	movs	r3, r0
 800081c:	e743      	b.n	80006a6 <__aeabi_fadd+0x192>
 800081e:	2e00      	cmp	r6, #0
 8000820:	d090      	beq.n	8000744 <__aeabi_fadd+0x230>
 8000822:	000c      	movs	r4, r1
 8000824:	4684      	mov	ip, r0
 8000826:	2200      	movs	r2, #0
 8000828:	e6b9      	b.n	800059e <__aeabi_fadd+0x8a>
 800082a:	4643      	mov	r3, r8
 800082c:	000c      	movs	r4, r1
 800082e:	1af0      	subs	r0, r6, r3
 8000830:	3501      	adds	r5, #1
 8000832:	e693      	b.n	800055c <__aeabi_fadd+0x48>
 8000834:	4684      	mov	ip, r0
 8000836:	2200      	movs	r2, #0
 8000838:	e6b1      	b.n	800059e <__aeabi_fadd+0x8a>
 800083a:	2800      	cmp	r0, #0
 800083c:	d000      	beq.n	8000840 <__aeabi_fadd+0x32c>
 800083e:	e71d      	b.n	800067c <__aeabi_fadd+0x168>
 8000840:	2300      	movs	r3, #0
 8000842:	2400      	movs	r4, #0
 8000844:	469c      	mov	ip, r3
 8000846:	e6aa      	b.n	800059e <__aeabi_fadd+0x8a>
 8000848:	fbffffff 	.word	0xfbffffff
 800084c:	7dffffff 	.word	0x7dffffff

08000850 <__aeabi_fdiv>:
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000852:	464f      	mov	r7, r9
 8000854:	4646      	mov	r6, r8
 8000856:	46d6      	mov	lr, sl
 8000858:	0245      	lsls	r5, r0, #9
 800085a:	b5c0      	push	{r6, r7, lr}
 800085c:	0047      	lsls	r7, r0, #1
 800085e:	1c0c      	adds	r4, r1, #0
 8000860:	0a6d      	lsrs	r5, r5, #9
 8000862:	0e3f      	lsrs	r7, r7, #24
 8000864:	0fc6      	lsrs	r6, r0, #31
 8000866:	2f00      	cmp	r7, #0
 8000868:	d100      	bne.n	800086c <__aeabi_fdiv+0x1c>
 800086a:	e070      	b.n	800094e <__aeabi_fdiv+0xfe>
 800086c:	2fff      	cmp	r7, #255	; 0xff
 800086e:	d100      	bne.n	8000872 <__aeabi_fdiv+0x22>
 8000870:	e075      	b.n	800095e <__aeabi_fdiv+0x10e>
 8000872:	00eb      	lsls	r3, r5, #3
 8000874:	2580      	movs	r5, #128	; 0x80
 8000876:	04ed      	lsls	r5, r5, #19
 8000878:	431d      	orrs	r5, r3
 800087a:	2300      	movs	r3, #0
 800087c:	4699      	mov	r9, r3
 800087e:	469a      	mov	sl, r3
 8000880:	3f7f      	subs	r7, #127	; 0x7f
 8000882:	0260      	lsls	r0, r4, #9
 8000884:	0a43      	lsrs	r3, r0, #9
 8000886:	4698      	mov	r8, r3
 8000888:	0063      	lsls	r3, r4, #1
 800088a:	0e1b      	lsrs	r3, r3, #24
 800088c:	0fe4      	lsrs	r4, r4, #31
 800088e:	2b00      	cmp	r3, #0
 8000890:	d04e      	beq.n	8000930 <__aeabi_fdiv+0xe0>
 8000892:	2bff      	cmp	r3, #255	; 0xff
 8000894:	d046      	beq.n	8000924 <__aeabi_fdiv+0xd4>
 8000896:	4642      	mov	r2, r8
 8000898:	00d0      	lsls	r0, r2, #3
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	04d2      	lsls	r2, r2, #19
 800089e:	4302      	orrs	r2, r0
 80008a0:	4690      	mov	r8, r2
 80008a2:	2200      	movs	r2, #0
 80008a4:	3b7f      	subs	r3, #127	; 0x7f
 80008a6:	0031      	movs	r1, r6
 80008a8:	1aff      	subs	r7, r7, r3
 80008aa:	464b      	mov	r3, r9
 80008ac:	4061      	eors	r1, r4
 80008ae:	b2c9      	uxtb	r1, r1
 80008b0:	4313      	orrs	r3, r2
 80008b2:	2b0f      	cmp	r3, #15
 80008b4:	d900      	bls.n	80008b8 <__aeabi_fdiv+0x68>
 80008b6:	e0b5      	b.n	8000a24 <__aeabi_fdiv+0x1d4>
 80008b8:	486e      	ldr	r0, [pc, #440]	; (8000a74 <__aeabi_fdiv+0x224>)
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	58c3      	ldr	r3, [r0, r3]
 80008be:	469f      	mov	pc, r3
 80008c0:	2300      	movs	r3, #0
 80008c2:	4698      	mov	r8, r3
 80008c4:	0026      	movs	r6, r4
 80008c6:	4645      	mov	r5, r8
 80008c8:	4692      	mov	sl, r2
 80008ca:	4653      	mov	r3, sl
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fdiv+0x82>
 80008d0:	e089      	b.n	80009e6 <__aeabi_fdiv+0x196>
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d100      	bne.n	80008d8 <__aeabi_fdiv+0x88>
 80008d6:	e09e      	b.n	8000a16 <__aeabi_fdiv+0x1c6>
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d018      	beq.n	800090e <__aeabi_fdiv+0xbe>
 80008dc:	003b      	movs	r3, r7
 80008de:	337f      	adds	r3, #127	; 0x7f
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	dd69      	ble.n	80009b8 <__aeabi_fdiv+0x168>
 80008e4:	076a      	lsls	r2, r5, #29
 80008e6:	d004      	beq.n	80008f2 <__aeabi_fdiv+0xa2>
 80008e8:	220f      	movs	r2, #15
 80008ea:	402a      	ands	r2, r5
 80008ec:	2a04      	cmp	r2, #4
 80008ee:	d000      	beq.n	80008f2 <__aeabi_fdiv+0xa2>
 80008f0:	3504      	adds	r5, #4
 80008f2:	012a      	lsls	r2, r5, #4
 80008f4:	d503      	bpl.n	80008fe <__aeabi_fdiv+0xae>
 80008f6:	4b60      	ldr	r3, [pc, #384]	; (8000a78 <__aeabi_fdiv+0x228>)
 80008f8:	401d      	ands	r5, r3
 80008fa:	003b      	movs	r3, r7
 80008fc:	3380      	adds	r3, #128	; 0x80
 80008fe:	2bfe      	cmp	r3, #254	; 0xfe
 8000900:	dd00      	ble.n	8000904 <__aeabi_fdiv+0xb4>
 8000902:	e070      	b.n	80009e6 <__aeabi_fdiv+0x196>
 8000904:	01ad      	lsls	r5, r5, #6
 8000906:	0a6d      	lsrs	r5, r5, #9
 8000908:	b2d8      	uxtb	r0, r3
 800090a:	e002      	b.n	8000912 <__aeabi_fdiv+0xc2>
 800090c:	000e      	movs	r6, r1
 800090e:	2000      	movs	r0, #0
 8000910:	2500      	movs	r5, #0
 8000912:	05c0      	lsls	r0, r0, #23
 8000914:	4328      	orrs	r0, r5
 8000916:	07f6      	lsls	r6, r6, #31
 8000918:	4330      	orrs	r0, r6
 800091a:	bce0      	pop	{r5, r6, r7}
 800091c:	46ba      	mov	sl, r7
 800091e:	46b1      	mov	r9, r6
 8000920:	46a8      	mov	r8, r5
 8000922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000924:	4643      	mov	r3, r8
 8000926:	2b00      	cmp	r3, #0
 8000928:	d13f      	bne.n	80009aa <__aeabi_fdiv+0x15a>
 800092a:	2202      	movs	r2, #2
 800092c:	3fff      	subs	r7, #255	; 0xff
 800092e:	e003      	b.n	8000938 <__aeabi_fdiv+0xe8>
 8000930:	4643      	mov	r3, r8
 8000932:	2b00      	cmp	r3, #0
 8000934:	d12d      	bne.n	8000992 <__aeabi_fdiv+0x142>
 8000936:	2201      	movs	r2, #1
 8000938:	0031      	movs	r1, r6
 800093a:	464b      	mov	r3, r9
 800093c:	4061      	eors	r1, r4
 800093e:	b2c9      	uxtb	r1, r1
 8000940:	4313      	orrs	r3, r2
 8000942:	2b0f      	cmp	r3, #15
 8000944:	d834      	bhi.n	80009b0 <__aeabi_fdiv+0x160>
 8000946:	484d      	ldr	r0, [pc, #308]	; (8000a7c <__aeabi_fdiv+0x22c>)
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	58c3      	ldr	r3, [r0, r3]
 800094c:	469f      	mov	pc, r3
 800094e:	2d00      	cmp	r5, #0
 8000950:	d113      	bne.n	800097a <__aeabi_fdiv+0x12a>
 8000952:	2304      	movs	r3, #4
 8000954:	4699      	mov	r9, r3
 8000956:	3b03      	subs	r3, #3
 8000958:	2700      	movs	r7, #0
 800095a:	469a      	mov	sl, r3
 800095c:	e791      	b.n	8000882 <__aeabi_fdiv+0x32>
 800095e:	2d00      	cmp	r5, #0
 8000960:	d105      	bne.n	800096e <__aeabi_fdiv+0x11e>
 8000962:	2308      	movs	r3, #8
 8000964:	4699      	mov	r9, r3
 8000966:	3b06      	subs	r3, #6
 8000968:	27ff      	movs	r7, #255	; 0xff
 800096a:	469a      	mov	sl, r3
 800096c:	e789      	b.n	8000882 <__aeabi_fdiv+0x32>
 800096e:	230c      	movs	r3, #12
 8000970:	4699      	mov	r9, r3
 8000972:	3b09      	subs	r3, #9
 8000974:	27ff      	movs	r7, #255	; 0xff
 8000976:	469a      	mov	sl, r3
 8000978:	e783      	b.n	8000882 <__aeabi_fdiv+0x32>
 800097a:	0028      	movs	r0, r5
 800097c:	f002 fb4a 	bl	8003014 <__clzsi2>
 8000980:	2776      	movs	r7, #118	; 0x76
 8000982:	1f43      	subs	r3, r0, #5
 8000984:	409d      	lsls	r5, r3
 8000986:	2300      	movs	r3, #0
 8000988:	427f      	negs	r7, r7
 800098a:	4699      	mov	r9, r3
 800098c:	469a      	mov	sl, r3
 800098e:	1a3f      	subs	r7, r7, r0
 8000990:	e777      	b.n	8000882 <__aeabi_fdiv+0x32>
 8000992:	4640      	mov	r0, r8
 8000994:	f002 fb3e 	bl	8003014 <__clzsi2>
 8000998:	4642      	mov	r2, r8
 800099a:	1f43      	subs	r3, r0, #5
 800099c:	409a      	lsls	r2, r3
 800099e:	2376      	movs	r3, #118	; 0x76
 80009a0:	425b      	negs	r3, r3
 80009a2:	4690      	mov	r8, r2
 80009a4:	1a1b      	subs	r3, r3, r0
 80009a6:	2200      	movs	r2, #0
 80009a8:	e77d      	b.n	80008a6 <__aeabi_fdiv+0x56>
 80009aa:	23ff      	movs	r3, #255	; 0xff
 80009ac:	2203      	movs	r2, #3
 80009ae:	e77a      	b.n	80008a6 <__aeabi_fdiv+0x56>
 80009b0:	000e      	movs	r6, r1
 80009b2:	20ff      	movs	r0, #255	; 0xff
 80009b4:	2500      	movs	r5, #0
 80009b6:	e7ac      	b.n	8000912 <__aeabi_fdiv+0xc2>
 80009b8:	2001      	movs	r0, #1
 80009ba:	1ac0      	subs	r0, r0, r3
 80009bc:	281b      	cmp	r0, #27
 80009be:	dca6      	bgt.n	800090e <__aeabi_fdiv+0xbe>
 80009c0:	379e      	adds	r7, #158	; 0x9e
 80009c2:	002a      	movs	r2, r5
 80009c4:	40bd      	lsls	r5, r7
 80009c6:	40c2      	lsrs	r2, r0
 80009c8:	1e6b      	subs	r3, r5, #1
 80009ca:	419d      	sbcs	r5, r3
 80009cc:	4315      	orrs	r5, r2
 80009ce:	076b      	lsls	r3, r5, #29
 80009d0:	d004      	beq.n	80009dc <__aeabi_fdiv+0x18c>
 80009d2:	230f      	movs	r3, #15
 80009d4:	402b      	ands	r3, r5
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	d000      	beq.n	80009dc <__aeabi_fdiv+0x18c>
 80009da:	3504      	adds	r5, #4
 80009dc:	016b      	lsls	r3, r5, #5
 80009de:	d544      	bpl.n	8000a6a <__aeabi_fdiv+0x21a>
 80009e0:	2001      	movs	r0, #1
 80009e2:	2500      	movs	r5, #0
 80009e4:	e795      	b.n	8000912 <__aeabi_fdiv+0xc2>
 80009e6:	20ff      	movs	r0, #255	; 0xff
 80009e8:	2500      	movs	r5, #0
 80009ea:	e792      	b.n	8000912 <__aeabi_fdiv+0xc2>
 80009ec:	2580      	movs	r5, #128	; 0x80
 80009ee:	2600      	movs	r6, #0
 80009f0:	20ff      	movs	r0, #255	; 0xff
 80009f2:	03ed      	lsls	r5, r5, #15
 80009f4:	e78d      	b.n	8000912 <__aeabi_fdiv+0xc2>
 80009f6:	2300      	movs	r3, #0
 80009f8:	4698      	mov	r8, r3
 80009fa:	2080      	movs	r0, #128	; 0x80
 80009fc:	03c0      	lsls	r0, r0, #15
 80009fe:	4205      	tst	r5, r0
 8000a00:	d009      	beq.n	8000a16 <__aeabi_fdiv+0x1c6>
 8000a02:	4643      	mov	r3, r8
 8000a04:	4203      	tst	r3, r0
 8000a06:	d106      	bne.n	8000a16 <__aeabi_fdiv+0x1c6>
 8000a08:	4645      	mov	r5, r8
 8000a0a:	4305      	orrs	r5, r0
 8000a0c:	026d      	lsls	r5, r5, #9
 8000a0e:	0026      	movs	r6, r4
 8000a10:	20ff      	movs	r0, #255	; 0xff
 8000a12:	0a6d      	lsrs	r5, r5, #9
 8000a14:	e77d      	b.n	8000912 <__aeabi_fdiv+0xc2>
 8000a16:	2080      	movs	r0, #128	; 0x80
 8000a18:	03c0      	lsls	r0, r0, #15
 8000a1a:	4305      	orrs	r5, r0
 8000a1c:	026d      	lsls	r5, r5, #9
 8000a1e:	20ff      	movs	r0, #255	; 0xff
 8000a20:	0a6d      	lsrs	r5, r5, #9
 8000a22:	e776      	b.n	8000912 <__aeabi_fdiv+0xc2>
 8000a24:	4642      	mov	r2, r8
 8000a26:	016b      	lsls	r3, r5, #5
 8000a28:	0150      	lsls	r0, r2, #5
 8000a2a:	4283      	cmp	r3, r0
 8000a2c:	d219      	bcs.n	8000a62 <__aeabi_fdiv+0x212>
 8000a2e:	221b      	movs	r2, #27
 8000a30:	2500      	movs	r5, #0
 8000a32:	3f01      	subs	r7, #1
 8000a34:	2601      	movs	r6, #1
 8000a36:	001c      	movs	r4, r3
 8000a38:	006d      	lsls	r5, r5, #1
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	2c00      	cmp	r4, #0
 8000a3e:	db01      	blt.n	8000a44 <__aeabi_fdiv+0x1f4>
 8000a40:	4298      	cmp	r0, r3
 8000a42:	d801      	bhi.n	8000a48 <__aeabi_fdiv+0x1f8>
 8000a44:	1a1b      	subs	r3, r3, r0
 8000a46:	4335      	orrs	r5, r6
 8000a48:	3a01      	subs	r2, #1
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	d1f3      	bne.n	8000a36 <__aeabi_fdiv+0x1e6>
 8000a4e:	1e5a      	subs	r2, r3, #1
 8000a50:	4193      	sbcs	r3, r2
 8000a52:	431d      	orrs	r5, r3
 8000a54:	003b      	movs	r3, r7
 8000a56:	337f      	adds	r3, #127	; 0x7f
 8000a58:	000e      	movs	r6, r1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	dd00      	ble.n	8000a60 <__aeabi_fdiv+0x210>
 8000a5e:	e741      	b.n	80008e4 <__aeabi_fdiv+0x94>
 8000a60:	e7aa      	b.n	80009b8 <__aeabi_fdiv+0x168>
 8000a62:	221a      	movs	r2, #26
 8000a64:	2501      	movs	r5, #1
 8000a66:	1a1b      	subs	r3, r3, r0
 8000a68:	e7e4      	b.n	8000a34 <__aeabi_fdiv+0x1e4>
 8000a6a:	01ad      	lsls	r5, r5, #6
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	0a6d      	lsrs	r5, r5, #9
 8000a70:	e74f      	b.n	8000912 <__aeabi_fdiv+0xc2>
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	0800a438 	.word	0x0800a438
 8000a78:	f7ffffff 	.word	0xf7ffffff
 8000a7c:	0800a478 	.word	0x0800a478

08000a80 <__eqsf2>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	0042      	lsls	r2, r0, #1
 8000a84:	0245      	lsls	r5, r0, #9
 8000a86:	024e      	lsls	r6, r1, #9
 8000a88:	004c      	lsls	r4, r1, #1
 8000a8a:	0fc3      	lsrs	r3, r0, #31
 8000a8c:	0a6d      	lsrs	r5, r5, #9
 8000a8e:	2001      	movs	r0, #1
 8000a90:	0e12      	lsrs	r2, r2, #24
 8000a92:	0a76      	lsrs	r6, r6, #9
 8000a94:	0e24      	lsrs	r4, r4, #24
 8000a96:	0fc9      	lsrs	r1, r1, #31
 8000a98:	2aff      	cmp	r2, #255	; 0xff
 8000a9a:	d006      	beq.n	8000aaa <__eqsf2+0x2a>
 8000a9c:	2cff      	cmp	r4, #255	; 0xff
 8000a9e:	d003      	beq.n	8000aa8 <__eqsf2+0x28>
 8000aa0:	42a2      	cmp	r2, r4
 8000aa2:	d101      	bne.n	8000aa8 <__eqsf2+0x28>
 8000aa4:	42b5      	cmp	r5, r6
 8000aa6:	d006      	beq.n	8000ab6 <__eqsf2+0x36>
 8000aa8:	bd70      	pop	{r4, r5, r6, pc}
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	d1fc      	bne.n	8000aa8 <__eqsf2+0x28>
 8000aae:	2cff      	cmp	r4, #255	; 0xff
 8000ab0:	d1fa      	bne.n	8000aa8 <__eqsf2+0x28>
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d1f8      	bne.n	8000aa8 <__eqsf2+0x28>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d006      	beq.n	8000ac8 <__eqsf2+0x48>
 8000aba:	2001      	movs	r0, #1
 8000abc:	2a00      	cmp	r2, #0
 8000abe:	d1f3      	bne.n	8000aa8 <__eqsf2+0x28>
 8000ac0:	0028      	movs	r0, r5
 8000ac2:	1e43      	subs	r3, r0, #1
 8000ac4:	4198      	sbcs	r0, r3
 8000ac6:	e7ef      	b.n	8000aa8 <__eqsf2+0x28>
 8000ac8:	2000      	movs	r0, #0
 8000aca:	e7ed      	b.n	8000aa8 <__eqsf2+0x28>

08000acc <__gesf2>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	0042      	lsls	r2, r0, #1
 8000ad0:	0245      	lsls	r5, r0, #9
 8000ad2:	024e      	lsls	r6, r1, #9
 8000ad4:	004c      	lsls	r4, r1, #1
 8000ad6:	0fc3      	lsrs	r3, r0, #31
 8000ad8:	0a6d      	lsrs	r5, r5, #9
 8000ada:	0e12      	lsrs	r2, r2, #24
 8000adc:	0a76      	lsrs	r6, r6, #9
 8000ade:	0e24      	lsrs	r4, r4, #24
 8000ae0:	0fc8      	lsrs	r0, r1, #31
 8000ae2:	2aff      	cmp	r2, #255	; 0xff
 8000ae4:	d01b      	beq.n	8000b1e <__gesf2+0x52>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d00e      	beq.n	8000b08 <__gesf2+0x3c>
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d11b      	bne.n	8000b26 <__gesf2+0x5a>
 8000aee:	2c00      	cmp	r4, #0
 8000af0:	d101      	bne.n	8000af6 <__gesf2+0x2a>
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d01c      	beq.n	8000b30 <__gesf2+0x64>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d00c      	beq.n	8000b14 <__gesf2+0x48>
 8000afa:	4283      	cmp	r3, r0
 8000afc:	d01c      	beq.n	8000b38 <__gesf2+0x6c>
 8000afe:	2102      	movs	r1, #2
 8000b00:	1e58      	subs	r0, r3, #1
 8000b02:	4008      	ands	r0, r1
 8000b04:	3801      	subs	r0, #1
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d122      	bne.n	8000b52 <__gesf2+0x86>
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	d1f4      	bne.n	8000afa <__gesf2+0x2e>
 8000b10:	2d00      	cmp	r5, #0
 8000b12:	d1f2      	bne.n	8000afa <__gesf2+0x2e>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d1f6      	bne.n	8000b06 <__gesf2+0x3a>
 8000b18:	2001      	movs	r0, #1
 8000b1a:	4240      	negs	r0, r0
 8000b1c:	e7f3      	b.n	8000b06 <__gesf2+0x3a>
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d117      	bne.n	8000b52 <__gesf2+0x86>
 8000b22:	2cff      	cmp	r4, #255	; 0xff
 8000b24:	d0f0      	beq.n	8000b08 <__gesf2+0x3c>
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d1e7      	bne.n	8000afa <__gesf2+0x2e>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d1e5      	bne.n	8000afa <__gesf2+0x2e>
 8000b2e:	e7e6      	b.n	8000afe <__gesf2+0x32>
 8000b30:	2000      	movs	r0, #0
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	d0e7      	beq.n	8000b06 <__gesf2+0x3a>
 8000b36:	e7e2      	b.n	8000afe <__gesf2+0x32>
 8000b38:	42a2      	cmp	r2, r4
 8000b3a:	dc05      	bgt.n	8000b48 <__gesf2+0x7c>
 8000b3c:	dbea      	blt.n	8000b14 <__gesf2+0x48>
 8000b3e:	42b5      	cmp	r5, r6
 8000b40:	d802      	bhi.n	8000b48 <__gesf2+0x7c>
 8000b42:	d3e7      	bcc.n	8000b14 <__gesf2+0x48>
 8000b44:	2000      	movs	r0, #0
 8000b46:	e7de      	b.n	8000b06 <__gesf2+0x3a>
 8000b48:	4243      	negs	r3, r0
 8000b4a:	4158      	adcs	r0, r3
 8000b4c:	0040      	lsls	r0, r0, #1
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7d9      	b.n	8000b06 <__gesf2+0x3a>
 8000b52:	2002      	movs	r0, #2
 8000b54:	4240      	negs	r0, r0
 8000b56:	e7d6      	b.n	8000b06 <__gesf2+0x3a>

08000b58 <__lesf2>:
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	0042      	lsls	r2, r0, #1
 8000b5c:	0245      	lsls	r5, r0, #9
 8000b5e:	024e      	lsls	r6, r1, #9
 8000b60:	004c      	lsls	r4, r1, #1
 8000b62:	0fc3      	lsrs	r3, r0, #31
 8000b64:	0a6d      	lsrs	r5, r5, #9
 8000b66:	0e12      	lsrs	r2, r2, #24
 8000b68:	0a76      	lsrs	r6, r6, #9
 8000b6a:	0e24      	lsrs	r4, r4, #24
 8000b6c:	0fc8      	lsrs	r0, r1, #31
 8000b6e:	2aff      	cmp	r2, #255	; 0xff
 8000b70:	d00b      	beq.n	8000b8a <__lesf2+0x32>
 8000b72:	2cff      	cmp	r4, #255	; 0xff
 8000b74:	d00d      	beq.n	8000b92 <__lesf2+0x3a>
 8000b76:	2a00      	cmp	r2, #0
 8000b78:	d11f      	bne.n	8000bba <__lesf2+0x62>
 8000b7a:	2c00      	cmp	r4, #0
 8000b7c:	d116      	bne.n	8000bac <__lesf2+0x54>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d114      	bne.n	8000bac <__lesf2+0x54>
 8000b82:	2000      	movs	r0, #0
 8000b84:	2d00      	cmp	r5, #0
 8000b86:	d010      	beq.n	8000baa <__lesf2+0x52>
 8000b88:	e009      	b.n	8000b9e <__lesf2+0x46>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d10c      	bne.n	8000ba8 <__lesf2+0x50>
 8000b8e:	2cff      	cmp	r4, #255	; 0xff
 8000b90:	d113      	bne.n	8000bba <__lesf2+0x62>
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d108      	bne.n	8000ba8 <__lesf2+0x50>
 8000b96:	2a00      	cmp	r2, #0
 8000b98:	d008      	beq.n	8000bac <__lesf2+0x54>
 8000b9a:	4283      	cmp	r3, r0
 8000b9c:	d012      	beq.n	8000bc4 <__lesf2+0x6c>
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	1e58      	subs	r0, r3, #1
 8000ba2:	4008      	ands	r0, r1
 8000ba4:	3801      	subs	r0, #1
 8000ba6:	e000      	b.n	8000baa <__lesf2+0x52>
 8000ba8:	2002      	movs	r0, #2
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
 8000bac:	2d00      	cmp	r5, #0
 8000bae:	d1f4      	bne.n	8000b9a <__lesf2+0x42>
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	d1fa      	bne.n	8000baa <__lesf2+0x52>
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	4240      	negs	r0, r0
 8000bb8:	e7f7      	b.n	8000baa <__lesf2+0x52>
 8000bba:	2c00      	cmp	r4, #0
 8000bbc:	d1ed      	bne.n	8000b9a <__lesf2+0x42>
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d1eb      	bne.n	8000b9a <__lesf2+0x42>
 8000bc2:	e7ec      	b.n	8000b9e <__lesf2+0x46>
 8000bc4:	42a2      	cmp	r2, r4
 8000bc6:	dc05      	bgt.n	8000bd4 <__lesf2+0x7c>
 8000bc8:	dbf2      	blt.n	8000bb0 <__lesf2+0x58>
 8000bca:	42b5      	cmp	r5, r6
 8000bcc:	d802      	bhi.n	8000bd4 <__lesf2+0x7c>
 8000bce:	d3ef      	bcc.n	8000bb0 <__lesf2+0x58>
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	e7ea      	b.n	8000baa <__lesf2+0x52>
 8000bd4:	4243      	negs	r3, r0
 8000bd6:	4158      	adcs	r0, r3
 8000bd8:	0040      	lsls	r0, r0, #1
 8000bda:	3801      	subs	r0, #1
 8000bdc:	e7e5      	b.n	8000baa <__lesf2+0x52>
 8000bde:	46c0      	nop			; (mov r8, r8)

08000be0 <__aeabi_fmul>:
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	464f      	mov	r7, r9
 8000be4:	4646      	mov	r6, r8
 8000be6:	46d6      	mov	lr, sl
 8000be8:	0244      	lsls	r4, r0, #9
 8000bea:	0045      	lsls	r5, r0, #1
 8000bec:	b5c0      	push	{r6, r7, lr}
 8000bee:	0a64      	lsrs	r4, r4, #9
 8000bf0:	1c0f      	adds	r7, r1, #0
 8000bf2:	0e2d      	lsrs	r5, r5, #24
 8000bf4:	0fc6      	lsrs	r6, r0, #31
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_fmul+0x1c>
 8000bfa:	e08d      	b.n	8000d18 <__aeabi_fmul+0x138>
 8000bfc:	2dff      	cmp	r5, #255	; 0xff
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_fmul+0x22>
 8000c00:	e092      	b.n	8000d28 <__aeabi_fmul+0x148>
 8000c02:	2300      	movs	r3, #0
 8000c04:	2080      	movs	r0, #128	; 0x80
 8000c06:	4699      	mov	r9, r3
 8000c08:	469a      	mov	sl, r3
 8000c0a:	00e4      	lsls	r4, r4, #3
 8000c0c:	04c0      	lsls	r0, r0, #19
 8000c0e:	4304      	orrs	r4, r0
 8000c10:	3d7f      	subs	r5, #127	; 0x7f
 8000c12:	0278      	lsls	r0, r7, #9
 8000c14:	0a43      	lsrs	r3, r0, #9
 8000c16:	4698      	mov	r8, r3
 8000c18:	007b      	lsls	r3, r7, #1
 8000c1a:	0e1b      	lsrs	r3, r3, #24
 8000c1c:	0fff      	lsrs	r7, r7, #31
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fmul+0x44>
 8000c22:	e070      	b.n	8000d06 <__aeabi_fmul+0x126>
 8000c24:	2bff      	cmp	r3, #255	; 0xff
 8000c26:	d100      	bne.n	8000c2a <__aeabi_fmul+0x4a>
 8000c28:	e086      	b.n	8000d38 <__aeabi_fmul+0x158>
 8000c2a:	4642      	mov	r2, r8
 8000c2c:	00d0      	lsls	r0, r2, #3
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	3b7f      	subs	r3, #127	; 0x7f
 8000c32:	18ed      	adds	r5, r5, r3
 8000c34:	2300      	movs	r3, #0
 8000c36:	04d2      	lsls	r2, r2, #19
 8000c38:	4302      	orrs	r2, r0
 8000c3a:	4690      	mov	r8, r2
 8000c3c:	469c      	mov	ip, r3
 8000c3e:	0031      	movs	r1, r6
 8000c40:	464b      	mov	r3, r9
 8000c42:	4079      	eors	r1, r7
 8000c44:	1c68      	adds	r0, r5, #1
 8000c46:	2b0f      	cmp	r3, #15
 8000c48:	d81c      	bhi.n	8000c84 <__aeabi_fmul+0xa4>
 8000c4a:	4a76      	ldr	r2, [pc, #472]	; (8000e24 <__aeabi_fmul+0x244>)
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	58d3      	ldr	r3, [r2, r3]
 8000c50:	469f      	mov	pc, r3
 8000c52:	0039      	movs	r1, r7
 8000c54:	4644      	mov	r4, r8
 8000c56:	46e2      	mov	sl, ip
 8000c58:	4653      	mov	r3, sl
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d00f      	beq.n	8000c7e <__aeabi_fmul+0x9e>
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d100      	bne.n	8000c64 <__aeabi_fmul+0x84>
 8000c62:	e0d7      	b.n	8000e14 <__aeabi_fmul+0x234>
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d137      	bne.n	8000cd8 <__aeabi_fmul+0xf8>
 8000c68:	2000      	movs	r0, #0
 8000c6a:	2400      	movs	r4, #0
 8000c6c:	05c0      	lsls	r0, r0, #23
 8000c6e:	4320      	orrs	r0, r4
 8000c70:	07c9      	lsls	r1, r1, #31
 8000c72:	4308      	orrs	r0, r1
 8000c74:	bce0      	pop	{r5, r6, r7}
 8000c76:	46ba      	mov	sl, r7
 8000c78:	46b1      	mov	r9, r6
 8000c7a:	46a8      	mov	r8, r5
 8000c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7e:	20ff      	movs	r0, #255	; 0xff
 8000c80:	2400      	movs	r4, #0
 8000c82:	e7f3      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000c84:	0c26      	lsrs	r6, r4, #16
 8000c86:	0424      	lsls	r4, r4, #16
 8000c88:	0c22      	lsrs	r2, r4, #16
 8000c8a:	4644      	mov	r4, r8
 8000c8c:	0424      	lsls	r4, r4, #16
 8000c8e:	0c24      	lsrs	r4, r4, #16
 8000c90:	4643      	mov	r3, r8
 8000c92:	0027      	movs	r7, r4
 8000c94:	0c1b      	lsrs	r3, r3, #16
 8000c96:	4357      	muls	r7, r2
 8000c98:	4374      	muls	r4, r6
 8000c9a:	435a      	muls	r2, r3
 8000c9c:	435e      	muls	r6, r3
 8000c9e:	1912      	adds	r2, r2, r4
 8000ca0:	0c3b      	lsrs	r3, r7, #16
 8000ca2:	189b      	adds	r3, r3, r2
 8000ca4:	429c      	cmp	r4, r3
 8000ca6:	d903      	bls.n	8000cb0 <__aeabi_fmul+0xd0>
 8000ca8:	2280      	movs	r2, #128	; 0x80
 8000caa:	0252      	lsls	r2, r2, #9
 8000cac:	4694      	mov	ip, r2
 8000cae:	4466      	add	r6, ip
 8000cb0:	043f      	lsls	r7, r7, #16
 8000cb2:	041a      	lsls	r2, r3, #16
 8000cb4:	0c3f      	lsrs	r7, r7, #16
 8000cb6:	19d2      	adds	r2, r2, r7
 8000cb8:	0194      	lsls	r4, r2, #6
 8000cba:	1e67      	subs	r7, r4, #1
 8000cbc:	41bc      	sbcs	r4, r7
 8000cbe:	0c1b      	lsrs	r3, r3, #16
 8000cc0:	0e92      	lsrs	r2, r2, #26
 8000cc2:	199b      	adds	r3, r3, r6
 8000cc4:	4314      	orrs	r4, r2
 8000cc6:	019b      	lsls	r3, r3, #6
 8000cc8:	431c      	orrs	r4, r3
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	d400      	bmi.n	8000cd0 <__aeabi_fmul+0xf0>
 8000cce:	e09b      	b.n	8000e08 <__aeabi_fmul+0x228>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	0862      	lsrs	r2, r4, #1
 8000cd4:	401c      	ands	r4, r3
 8000cd6:	4314      	orrs	r4, r2
 8000cd8:	0002      	movs	r2, r0
 8000cda:	327f      	adds	r2, #127	; 0x7f
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	dd64      	ble.n	8000daa <__aeabi_fmul+0x1ca>
 8000ce0:	0763      	lsls	r3, r4, #29
 8000ce2:	d004      	beq.n	8000cee <__aeabi_fmul+0x10e>
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	4023      	ands	r3, r4
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d000      	beq.n	8000cee <__aeabi_fmul+0x10e>
 8000cec:	3404      	adds	r4, #4
 8000cee:	0123      	lsls	r3, r4, #4
 8000cf0:	d503      	bpl.n	8000cfa <__aeabi_fmul+0x11a>
 8000cf2:	0002      	movs	r2, r0
 8000cf4:	4b4c      	ldr	r3, [pc, #304]	; (8000e28 <__aeabi_fmul+0x248>)
 8000cf6:	3280      	adds	r2, #128	; 0x80
 8000cf8:	401c      	ands	r4, r3
 8000cfa:	2afe      	cmp	r2, #254	; 0xfe
 8000cfc:	dcbf      	bgt.n	8000c7e <__aeabi_fmul+0x9e>
 8000cfe:	01a4      	lsls	r4, r4, #6
 8000d00:	0a64      	lsrs	r4, r4, #9
 8000d02:	b2d0      	uxtb	r0, r2
 8000d04:	e7b2      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000d06:	4643      	mov	r3, r8
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d13d      	bne.n	8000d88 <__aeabi_fmul+0x1a8>
 8000d0c:	464a      	mov	r2, r9
 8000d0e:	3301      	adds	r3, #1
 8000d10:	431a      	orrs	r2, r3
 8000d12:	4691      	mov	r9, r2
 8000d14:	469c      	mov	ip, r3
 8000d16:	e792      	b.n	8000c3e <__aeabi_fmul+0x5e>
 8000d18:	2c00      	cmp	r4, #0
 8000d1a:	d129      	bne.n	8000d70 <__aeabi_fmul+0x190>
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	4699      	mov	r9, r3
 8000d20:	3b03      	subs	r3, #3
 8000d22:	2500      	movs	r5, #0
 8000d24:	469a      	mov	sl, r3
 8000d26:	e774      	b.n	8000c12 <__aeabi_fmul+0x32>
 8000d28:	2c00      	cmp	r4, #0
 8000d2a:	d11b      	bne.n	8000d64 <__aeabi_fmul+0x184>
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	4699      	mov	r9, r3
 8000d30:	3b06      	subs	r3, #6
 8000d32:	25ff      	movs	r5, #255	; 0xff
 8000d34:	469a      	mov	sl, r3
 8000d36:	e76c      	b.n	8000c12 <__aeabi_fmul+0x32>
 8000d38:	4643      	mov	r3, r8
 8000d3a:	35ff      	adds	r5, #255	; 0xff
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10b      	bne.n	8000d58 <__aeabi_fmul+0x178>
 8000d40:	2302      	movs	r3, #2
 8000d42:	464a      	mov	r2, r9
 8000d44:	431a      	orrs	r2, r3
 8000d46:	4691      	mov	r9, r2
 8000d48:	469c      	mov	ip, r3
 8000d4a:	e778      	b.n	8000c3e <__aeabi_fmul+0x5e>
 8000d4c:	4653      	mov	r3, sl
 8000d4e:	0031      	movs	r1, r6
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d000      	beq.n	8000d56 <__aeabi_fmul+0x176>
 8000d54:	e783      	b.n	8000c5e <__aeabi_fmul+0x7e>
 8000d56:	e792      	b.n	8000c7e <__aeabi_fmul+0x9e>
 8000d58:	2303      	movs	r3, #3
 8000d5a:	464a      	mov	r2, r9
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4691      	mov	r9, r2
 8000d60:	469c      	mov	ip, r3
 8000d62:	e76c      	b.n	8000c3e <__aeabi_fmul+0x5e>
 8000d64:	230c      	movs	r3, #12
 8000d66:	4699      	mov	r9, r3
 8000d68:	3b09      	subs	r3, #9
 8000d6a:	25ff      	movs	r5, #255	; 0xff
 8000d6c:	469a      	mov	sl, r3
 8000d6e:	e750      	b.n	8000c12 <__aeabi_fmul+0x32>
 8000d70:	0020      	movs	r0, r4
 8000d72:	f002 f94f 	bl	8003014 <__clzsi2>
 8000d76:	2576      	movs	r5, #118	; 0x76
 8000d78:	1f43      	subs	r3, r0, #5
 8000d7a:	409c      	lsls	r4, r3
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	426d      	negs	r5, r5
 8000d80:	4699      	mov	r9, r3
 8000d82:	469a      	mov	sl, r3
 8000d84:	1a2d      	subs	r5, r5, r0
 8000d86:	e744      	b.n	8000c12 <__aeabi_fmul+0x32>
 8000d88:	4640      	mov	r0, r8
 8000d8a:	f002 f943 	bl	8003014 <__clzsi2>
 8000d8e:	4642      	mov	r2, r8
 8000d90:	1f43      	subs	r3, r0, #5
 8000d92:	409a      	lsls	r2, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	1a2d      	subs	r5, r5, r0
 8000d98:	4690      	mov	r8, r2
 8000d9a:	469c      	mov	ip, r3
 8000d9c:	3d76      	subs	r5, #118	; 0x76
 8000d9e:	e74e      	b.n	8000c3e <__aeabi_fmul+0x5e>
 8000da0:	2480      	movs	r4, #128	; 0x80
 8000da2:	2100      	movs	r1, #0
 8000da4:	20ff      	movs	r0, #255	; 0xff
 8000da6:	03e4      	lsls	r4, r4, #15
 8000da8:	e760      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000daa:	2301      	movs	r3, #1
 8000dac:	1a9b      	subs	r3, r3, r2
 8000dae:	2b1b      	cmp	r3, #27
 8000db0:	dd00      	ble.n	8000db4 <__aeabi_fmul+0x1d4>
 8000db2:	e759      	b.n	8000c68 <__aeabi_fmul+0x88>
 8000db4:	0022      	movs	r2, r4
 8000db6:	309e      	adds	r0, #158	; 0x9e
 8000db8:	40da      	lsrs	r2, r3
 8000dba:	4084      	lsls	r4, r0
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	1e62      	subs	r2, r4, #1
 8000dc0:	4194      	sbcs	r4, r2
 8000dc2:	431c      	orrs	r4, r3
 8000dc4:	0763      	lsls	r3, r4, #29
 8000dc6:	d004      	beq.n	8000dd2 <__aeabi_fmul+0x1f2>
 8000dc8:	230f      	movs	r3, #15
 8000dca:	4023      	ands	r3, r4
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d000      	beq.n	8000dd2 <__aeabi_fmul+0x1f2>
 8000dd0:	3404      	adds	r4, #4
 8000dd2:	0163      	lsls	r3, r4, #5
 8000dd4:	d51a      	bpl.n	8000e0c <__aeabi_fmul+0x22c>
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	2400      	movs	r4, #0
 8000dda:	e747      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000ddc:	2080      	movs	r0, #128	; 0x80
 8000dde:	03c0      	lsls	r0, r0, #15
 8000de0:	4204      	tst	r4, r0
 8000de2:	d009      	beq.n	8000df8 <__aeabi_fmul+0x218>
 8000de4:	4643      	mov	r3, r8
 8000de6:	4203      	tst	r3, r0
 8000de8:	d106      	bne.n	8000df8 <__aeabi_fmul+0x218>
 8000dea:	4644      	mov	r4, r8
 8000dec:	4304      	orrs	r4, r0
 8000dee:	0264      	lsls	r4, r4, #9
 8000df0:	0039      	movs	r1, r7
 8000df2:	20ff      	movs	r0, #255	; 0xff
 8000df4:	0a64      	lsrs	r4, r4, #9
 8000df6:	e739      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000df8:	2080      	movs	r0, #128	; 0x80
 8000dfa:	03c0      	lsls	r0, r0, #15
 8000dfc:	4304      	orrs	r4, r0
 8000dfe:	0264      	lsls	r4, r4, #9
 8000e00:	0031      	movs	r1, r6
 8000e02:	20ff      	movs	r0, #255	; 0xff
 8000e04:	0a64      	lsrs	r4, r4, #9
 8000e06:	e731      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000e08:	0028      	movs	r0, r5
 8000e0a:	e765      	b.n	8000cd8 <__aeabi_fmul+0xf8>
 8000e0c:	01a4      	lsls	r4, r4, #6
 8000e0e:	2000      	movs	r0, #0
 8000e10:	0a64      	lsrs	r4, r4, #9
 8000e12:	e72b      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000e14:	2080      	movs	r0, #128	; 0x80
 8000e16:	03c0      	lsls	r0, r0, #15
 8000e18:	4304      	orrs	r4, r0
 8000e1a:	0264      	lsls	r4, r4, #9
 8000e1c:	20ff      	movs	r0, #255	; 0xff
 8000e1e:	0a64      	lsrs	r4, r4, #9
 8000e20:	e724      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	0800a4b8 	.word	0x0800a4b8
 8000e28:	f7ffffff 	.word	0xf7ffffff

08000e2c <__aeabi_fsub>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	46ce      	mov	lr, r9
 8000e30:	4647      	mov	r7, r8
 8000e32:	0243      	lsls	r3, r0, #9
 8000e34:	0a5b      	lsrs	r3, r3, #9
 8000e36:	024e      	lsls	r6, r1, #9
 8000e38:	00da      	lsls	r2, r3, #3
 8000e3a:	4694      	mov	ip, r2
 8000e3c:	0a72      	lsrs	r2, r6, #9
 8000e3e:	4691      	mov	r9, r2
 8000e40:	0045      	lsls	r5, r0, #1
 8000e42:	004a      	lsls	r2, r1, #1
 8000e44:	b580      	push	{r7, lr}
 8000e46:	0e2d      	lsrs	r5, r5, #24
 8000e48:	001f      	movs	r7, r3
 8000e4a:	0fc4      	lsrs	r4, r0, #31
 8000e4c:	0e12      	lsrs	r2, r2, #24
 8000e4e:	0fc9      	lsrs	r1, r1, #31
 8000e50:	09b6      	lsrs	r6, r6, #6
 8000e52:	2aff      	cmp	r2, #255	; 0xff
 8000e54:	d05b      	beq.n	8000f0e <__aeabi_fsub+0xe2>
 8000e56:	2001      	movs	r0, #1
 8000e58:	4041      	eors	r1, r0
 8000e5a:	428c      	cmp	r4, r1
 8000e5c:	d039      	beq.n	8000ed2 <__aeabi_fsub+0xa6>
 8000e5e:	1aa8      	subs	r0, r5, r2
 8000e60:	2800      	cmp	r0, #0
 8000e62:	dd5a      	ble.n	8000f1a <__aeabi_fsub+0xee>
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	d06a      	beq.n	8000f3e <__aeabi_fsub+0x112>
 8000e68:	2dff      	cmp	r5, #255	; 0xff
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_fsub+0x42>
 8000e6c:	e0d9      	b.n	8001022 <__aeabi_fsub+0x1f6>
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	04d2      	lsls	r2, r2, #19
 8000e72:	4316      	orrs	r6, r2
 8000e74:	281b      	cmp	r0, #27
 8000e76:	dc00      	bgt.n	8000e7a <__aeabi_fsub+0x4e>
 8000e78:	e0e9      	b.n	800104e <__aeabi_fsub+0x222>
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	4663      	mov	r3, ip
 8000e7e:	1a18      	subs	r0, r3, r0
 8000e80:	0143      	lsls	r3, r0, #5
 8000e82:	d400      	bmi.n	8000e86 <__aeabi_fsub+0x5a>
 8000e84:	e0b4      	b.n	8000ff0 <__aeabi_fsub+0x1c4>
 8000e86:	0180      	lsls	r0, r0, #6
 8000e88:	0987      	lsrs	r7, r0, #6
 8000e8a:	0038      	movs	r0, r7
 8000e8c:	f002 f8c2 	bl	8003014 <__clzsi2>
 8000e90:	3805      	subs	r0, #5
 8000e92:	4087      	lsls	r7, r0
 8000e94:	4285      	cmp	r5, r0
 8000e96:	dc00      	bgt.n	8000e9a <__aeabi_fsub+0x6e>
 8000e98:	e0cc      	b.n	8001034 <__aeabi_fsub+0x208>
 8000e9a:	1a2d      	subs	r5, r5, r0
 8000e9c:	48b5      	ldr	r0, [pc, #724]	; (8001174 <__aeabi_fsub+0x348>)
 8000e9e:	4038      	ands	r0, r7
 8000ea0:	0743      	lsls	r3, r0, #29
 8000ea2:	d004      	beq.n	8000eae <__aeabi_fsub+0x82>
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	4003      	ands	r3, r0
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d000      	beq.n	8000eae <__aeabi_fsub+0x82>
 8000eac:	3004      	adds	r0, #4
 8000eae:	0143      	lsls	r3, r0, #5
 8000eb0:	d400      	bmi.n	8000eb4 <__aeabi_fsub+0x88>
 8000eb2:	e0a0      	b.n	8000ff6 <__aeabi_fsub+0x1ca>
 8000eb4:	1c6a      	adds	r2, r5, #1
 8000eb6:	2dfe      	cmp	r5, #254	; 0xfe
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_fsub+0x90>
 8000eba:	e08d      	b.n	8000fd8 <__aeabi_fsub+0x1ac>
 8000ebc:	0180      	lsls	r0, r0, #6
 8000ebe:	0a47      	lsrs	r7, r0, #9
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	05d0      	lsls	r0, r2, #23
 8000ec4:	4338      	orrs	r0, r7
 8000ec6:	07e4      	lsls	r4, r4, #31
 8000ec8:	4320      	orrs	r0, r4
 8000eca:	bcc0      	pop	{r6, r7}
 8000ecc:	46b9      	mov	r9, r7
 8000ece:	46b0      	mov	r8, r6
 8000ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed2:	1aa8      	subs	r0, r5, r2
 8000ed4:	4680      	mov	r8, r0
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	dd45      	ble.n	8000f66 <__aeabi_fsub+0x13a>
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	d070      	beq.n	8000fc0 <__aeabi_fsub+0x194>
 8000ede:	2dff      	cmp	r5, #255	; 0xff
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_fsub+0xb8>
 8000ee2:	e09e      	b.n	8001022 <__aeabi_fsub+0x1f6>
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	04db      	lsls	r3, r3, #19
 8000ee8:	431e      	orrs	r6, r3
 8000eea:	4643      	mov	r3, r8
 8000eec:	2b1b      	cmp	r3, #27
 8000eee:	dc00      	bgt.n	8000ef2 <__aeabi_fsub+0xc6>
 8000ef0:	e0d2      	b.n	8001098 <__aeabi_fsub+0x26c>
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	4460      	add	r0, ip
 8000ef6:	0143      	lsls	r3, r0, #5
 8000ef8:	d57a      	bpl.n	8000ff0 <__aeabi_fsub+0x1c4>
 8000efa:	3501      	adds	r5, #1
 8000efc:	2dff      	cmp	r5, #255	; 0xff
 8000efe:	d06b      	beq.n	8000fd8 <__aeabi_fsub+0x1ac>
 8000f00:	2301      	movs	r3, #1
 8000f02:	4a9d      	ldr	r2, [pc, #628]	; (8001178 <__aeabi_fsub+0x34c>)
 8000f04:	4003      	ands	r3, r0
 8000f06:	0840      	lsrs	r0, r0, #1
 8000f08:	4010      	ands	r0, r2
 8000f0a:	4318      	orrs	r0, r3
 8000f0c:	e7c8      	b.n	8000ea0 <__aeabi_fsub+0x74>
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d020      	beq.n	8000f54 <__aeabi_fsub+0x128>
 8000f12:	428c      	cmp	r4, r1
 8000f14:	d023      	beq.n	8000f5e <__aeabi_fsub+0x132>
 8000f16:	0028      	movs	r0, r5
 8000f18:	38ff      	subs	r0, #255	; 0xff
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	d039      	beq.n	8000f92 <__aeabi_fsub+0x166>
 8000f1e:	1b57      	subs	r7, r2, r5
 8000f20:	2d00      	cmp	r5, #0
 8000f22:	d000      	beq.n	8000f26 <__aeabi_fsub+0xfa>
 8000f24:	e09d      	b.n	8001062 <__aeabi_fsub+0x236>
 8000f26:	4663      	mov	r3, ip
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_fsub+0x102>
 8000f2c:	e0db      	b.n	80010e6 <__aeabi_fsub+0x2ba>
 8000f2e:	1e7b      	subs	r3, r7, #1
 8000f30:	2f01      	cmp	r7, #1
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x10a>
 8000f34:	e10d      	b.n	8001152 <__aeabi_fsub+0x326>
 8000f36:	2fff      	cmp	r7, #255	; 0xff
 8000f38:	d071      	beq.n	800101e <__aeabi_fsub+0x1f2>
 8000f3a:	001f      	movs	r7, r3
 8000f3c:	e098      	b.n	8001070 <__aeabi_fsub+0x244>
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	d100      	bne.n	8000f44 <__aeabi_fsub+0x118>
 8000f42:	e0a7      	b.n	8001094 <__aeabi_fsub+0x268>
 8000f44:	1e42      	subs	r2, r0, #1
 8000f46:	2801      	cmp	r0, #1
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x120>
 8000f4a:	e0e6      	b.n	800111a <__aeabi_fsub+0x2ee>
 8000f4c:	28ff      	cmp	r0, #255	; 0xff
 8000f4e:	d068      	beq.n	8001022 <__aeabi_fsub+0x1f6>
 8000f50:	0010      	movs	r0, r2
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fsub+0x48>
 8000f54:	2001      	movs	r0, #1
 8000f56:	4041      	eors	r1, r0
 8000f58:	42a1      	cmp	r1, r4
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_fsub+0x132>
 8000f5c:	e77f      	b.n	8000e5e <__aeabi_fsub+0x32>
 8000f5e:	20ff      	movs	r0, #255	; 0xff
 8000f60:	4240      	negs	r0, r0
 8000f62:	4680      	mov	r8, r0
 8000f64:	44a8      	add	r8, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d038      	beq.n	8000fde <__aeabi_fsub+0x1b2>
 8000f6c:	1b51      	subs	r1, r2, r5
 8000f6e:	2d00      	cmp	r5, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_fsub+0x148>
 8000f72:	e0ae      	b.n	80010d2 <__aeabi_fsub+0x2a6>
 8000f74:	2aff      	cmp	r2, #255	; 0xff
 8000f76:	d100      	bne.n	8000f7a <__aeabi_fsub+0x14e>
 8000f78:	e0df      	b.n	800113a <__aeabi_fsub+0x30e>
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	04db      	lsls	r3, r3, #19
 8000f80:	4318      	orrs	r0, r3
 8000f82:	4684      	mov	ip, r0
 8000f84:	291b      	cmp	r1, #27
 8000f86:	dc00      	bgt.n	8000f8a <__aeabi_fsub+0x15e>
 8000f88:	e0d9      	b.n	800113e <__aeabi_fsub+0x312>
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	0015      	movs	r5, r2
 8000f8e:	1980      	adds	r0, r0, r6
 8000f90:	e7b1      	b.n	8000ef6 <__aeabi_fsub+0xca>
 8000f92:	20fe      	movs	r0, #254	; 0xfe
 8000f94:	1c6a      	adds	r2, r5, #1
 8000f96:	4210      	tst	r0, r2
 8000f98:	d171      	bne.n	800107e <__aeabi_fsub+0x252>
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_fsub+0x174>
 8000f9e:	e0a6      	b.n	80010ee <__aeabi_fsub+0x2c2>
 8000fa0:	4663      	mov	r3, ip
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fsub+0x17c>
 8000fa6:	e0d9      	b.n	800115c <__aeabi_fsub+0x330>
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2e00      	cmp	r6, #0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_fsub+0x184>
 8000fae:	e788      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8000fb0:	1b98      	subs	r0, r3, r6
 8000fb2:	0143      	lsls	r3, r0, #5
 8000fb4:	d400      	bmi.n	8000fb8 <__aeabi_fsub+0x18c>
 8000fb6:	e0e1      	b.n	800117c <__aeabi_fsub+0x350>
 8000fb8:	4663      	mov	r3, ip
 8000fba:	000c      	movs	r4, r1
 8000fbc:	1af0      	subs	r0, r6, r3
 8000fbe:	e76f      	b.n	8000ea0 <__aeabi_fsub+0x74>
 8000fc0:	2e00      	cmp	r6, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_fsub+0x19a>
 8000fc4:	e0b7      	b.n	8001136 <__aeabi_fsub+0x30a>
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	3a01      	subs	r2, #1
 8000fca:	2801      	cmp	r0, #1
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_fsub+0x1a4>
 8000fce:	e09c      	b.n	800110a <__aeabi_fsub+0x2de>
 8000fd0:	28ff      	cmp	r0, #255	; 0xff
 8000fd2:	d026      	beq.n	8001022 <__aeabi_fsub+0x1f6>
 8000fd4:	4690      	mov	r8, r2
 8000fd6:	e788      	b.n	8000eea <__aeabi_fsub+0xbe>
 8000fd8:	22ff      	movs	r2, #255	; 0xff
 8000fda:	2700      	movs	r7, #0
 8000fdc:	e771      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8000fde:	20fe      	movs	r0, #254	; 0xfe
 8000fe0:	1c6a      	adds	r2, r5, #1
 8000fe2:	4210      	tst	r0, r2
 8000fe4:	d064      	beq.n	80010b0 <__aeabi_fsub+0x284>
 8000fe6:	2aff      	cmp	r2, #255	; 0xff
 8000fe8:	d0f6      	beq.n	8000fd8 <__aeabi_fsub+0x1ac>
 8000fea:	0015      	movs	r5, r2
 8000fec:	4466      	add	r6, ip
 8000fee:	0870      	lsrs	r0, r6, #1
 8000ff0:	0743      	lsls	r3, r0, #29
 8000ff2:	d000      	beq.n	8000ff6 <__aeabi_fsub+0x1ca>
 8000ff4:	e756      	b.n	8000ea4 <__aeabi_fsub+0x78>
 8000ff6:	08c3      	lsrs	r3, r0, #3
 8000ff8:	2dff      	cmp	r5, #255	; 0xff
 8000ffa:	d012      	beq.n	8001022 <__aeabi_fsub+0x1f6>
 8000ffc:	025b      	lsls	r3, r3, #9
 8000ffe:	0a5f      	lsrs	r7, r3, #9
 8001000:	b2ea      	uxtb	r2, r5
 8001002:	e75e      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8001004:	4662      	mov	r2, ip
 8001006:	2a00      	cmp	r2, #0
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x1e0>
 800100a:	e096      	b.n	800113a <__aeabi_fsub+0x30e>
 800100c:	2e00      	cmp	r6, #0
 800100e:	d008      	beq.n	8001022 <__aeabi_fsub+0x1f6>
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	03d2      	lsls	r2, r2, #15
 8001014:	4213      	tst	r3, r2
 8001016:	d004      	beq.n	8001022 <__aeabi_fsub+0x1f6>
 8001018:	4648      	mov	r0, r9
 800101a:	4210      	tst	r0, r2
 800101c:	d101      	bne.n	8001022 <__aeabi_fsub+0x1f6>
 800101e:	000c      	movs	r4, r1
 8001020:	464b      	mov	r3, r9
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0d8      	beq.n	8000fd8 <__aeabi_fsub+0x1ac>
 8001026:	2780      	movs	r7, #128	; 0x80
 8001028:	03ff      	lsls	r7, r7, #15
 800102a:	431f      	orrs	r7, r3
 800102c:	027f      	lsls	r7, r7, #9
 800102e:	22ff      	movs	r2, #255	; 0xff
 8001030:	0a7f      	lsrs	r7, r7, #9
 8001032:	e746      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8001034:	2320      	movs	r3, #32
 8001036:	003a      	movs	r2, r7
 8001038:	1b45      	subs	r5, r0, r5
 800103a:	0038      	movs	r0, r7
 800103c:	3501      	adds	r5, #1
 800103e:	40ea      	lsrs	r2, r5
 8001040:	1b5d      	subs	r5, r3, r5
 8001042:	40a8      	lsls	r0, r5
 8001044:	1e43      	subs	r3, r0, #1
 8001046:	4198      	sbcs	r0, r3
 8001048:	2500      	movs	r5, #0
 800104a:	4310      	orrs	r0, r2
 800104c:	e728      	b.n	8000ea0 <__aeabi_fsub+0x74>
 800104e:	2320      	movs	r3, #32
 8001050:	1a1b      	subs	r3, r3, r0
 8001052:	0032      	movs	r2, r6
 8001054:	409e      	lsls	r6, r3
 8001056:	40c2      	lsrs	r2, r0
 8001058:	0030      	movs	r0, r6
 800105a:	1e43      	subs	r3, r0, #1
 800105c:	4198      	sbcs	r0, r3
 800105e:	4310      	orrs	r0, r2
 8001060:	e70c      	b.n	8000e7c <__aeabi_fsub+0x50>
 8001062:	2aff      	cmp	r2, #255	; 0xff
 8001064:	d0db      	beq.n	800101e <__aeabi_fsub+0x1f2>
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	4660      	mov	r0, ip
 800106a:	04db      	lsls	r3, r3, #19
 800106c:	4318      	orrs	r0, r3
 800106e:	4684      	mov	ip, r0
 8001070:	2f1b      	cmp	r7, #27
 8001072:	dd56      	ble.n	8001122 <__aeabi_fsub+0x2f6>
 8001074:	2001      	movs	r0, #1
 8001076:	000c      	movs	r4, r1
 8001078:	0015      	movs	r5, r2
 800107a:	1a30      	subs	r0, r6, r0
 800107c:	e700      	b.n	8000e80 <__aeabi_fsub+0x54>
 800107e:	4663      	mov	r3, ip
 8001080:	1b9f      	subs	r7, r3, r6
 8001082:	017b      	lsls	r3, r7, #5
 8001084:	d43d      	bmi.n	8001102 <__aeabi_fsub+0x2d6>
 8001086:	2f00      	cmp	r7, #0
 8001088:	d000      	beq.n	800108c <__aeabi_fsub+0x260>
 800108a:	e6fe      	b.n	8000e8a <__aeabi_fsub+0x5e>
 800108c:	2400      	movs	r4, #0
 800108e:	2200      	movs	r2, #0
 8001090:	2700      	movs	r7, #0
 8001092:	e716      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8001094:	0005      	movs	r5, r0
 8001096:	e7af      	b.n	8000ff8 <__aeabi_fsub+0x1cc>
 8001098:	0032      	movs	r2, r6
 800109a:	4643      	mov	r3, r8
 800109c:	4641      	mov	r1, r8
 800109e:	40da      	lsrs	r2, r3
 80010a0:	2320      	movs	r3, #32
 80010a2:	1a5b      	subs	r3, r3, r1
 80010a4:	409e      	lsls	r6, r3
 80010a6:	0030      	movs	r0, r6
 80010a8:	1e43      	subs	r3, r0, #1
 80010aa:	4198      	sbcs	r0, r3
 80010ac:	4310      	orrs	r0, r2
 80010ae:	e721      	b.n	8000ef4 <__aeabi_fsub+0xc8>
 80010b0:	2d00      	cmp	r5, #0
 80010b2:	d1a7      	bne.n	8001004 <__aeabi_fsub+0x1d8>
 80010b4:	4663      	mov	r3, ip
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d059      	beq.n	800116e <__aeabi_fsub+0x342>
 80010ba:	2200      	movs	r2, #0
 80010bc:	2e00      	cmp	r6, #0
 80010be:	d100      	bne.n	80010c2 <__aeabi_fsub+0x296>
 80010c0:	e6ff      	b.n	8000ec2 <__aeabi_fsub+0x96>
 80010c2:	0030      	movs	r0, r6
 80010c4:	4460      	add	r0, ip
 80010c6:	0143      	lsls	r3, r0, #5
 80010c8:	d592      	bpl.n	8000ff0 <__aeabi_fsub+0x1c4>
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <__aeabi_fsub+0x348>)
 80010cc:	3501      	adds	r5, #1
 80010ce:	4018      	ands	r0, r3
 80010d0:	e78e      	b.n	8000ff0 <__aeabi_fsub+0x1c4>
 80010d2:	4663      	mov	r3, ip
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d047      	beq.n	8001168 <__aeabi_fsub+0x33c>
 80010d8:	1e4b      	subs	r3, r1, #1
 80010da:	2901      	cmp	r1, #1
 80010dc:	d015      	beq.n	800110a <__aeabi_fsub+0x2de>
 80010de:	29ff      	cmp	r1, #255	; 0xff
 80010e0:	d02b      	beq.n	800113a <__aeabi_fsub+0x30e>
 80010e2:	0019      	movs	r1, r3
 80010e4:	e74e      	b.n	8000f84 <__aeabi_fsub+0x158>
 80010e6:	000c      	movs	r4, r1
 80010e8:	464b      	mov	r3, r9
 80010ea:	003d      	movs	r5, r7
 80010ec:	e784      	b.n	8000ff8 <__aeabi_fsub+0x1cc>
 80010ee:	4662      	mov	r2, ip
 80010f0:	2a00      	cmp	r2, #0
 80010f2:	d18b      	bne.n	800100c <__aeabi_fsub+0x1e0>
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	d192      	bne.n	800101e <__aeabi_fsub+0x1f2>
 80010f8:	2780      	movs	r7, #128	; 0x80
 80010fa:	2400      	movs	r4, #0
 80010fc:	22ff      	movs	r2, #255	; 0xff
 80010fe:	03ff      	lsls	r7, r7, #15
 8001100:	e6df      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8001102:	4663      	mov	r3, ip
 8001104:	000c      	movs	r4, r1
 8001106:	1af7      	subs	r7, r6, r3
 8001108:	e6bf      	b.n	8000e8a <__aeabi_fsub+0x5e>
 800110a:	0030      	movs	r0, r6
 800110c:	4460      	add	r0, ip
 800110e:	2501      	movs	r5, #1
 8001110:	0143      	lsls	r3, r0, #5
 8001112:	d400      	bmi.n	8001116 <__aeabi_fsub+0x2ea>
 8001114:	e76c      	b.n	8000ff0 <__aeabi_fsub+0x1c4>
 8001116:	2502      	movs	r5, #2
 8001118:	e6f2      	b.n	8000f00 <__aeabi_fsub+0xd4>
 800111a:	4663      	mov	r3, ip
 800111c:	2501      	movs	r5, #1
 800111e:	1b98      	subs	r0, r3, r6
 8001120:	e6ae      	b.n	8000e80 <__aeabi_fsub+0x54>
 8001122:	2320      	movs	r3, #32
 8001124:	4664      	mov	r4, ip
 8001126:	4660      	mov	r0, ip
 8001128:	40fc      	lsrs	r4, r7
 800112a:	1bdf      	subs	r7, r3, r7
 800112c:	40b8      	lsls	r0, r7
 800112e:	1e43      	subs	r3, r0, #1
 8001130:	4198      	sbcs	r0, r3
 8001132:	4320      	orrs	r0, r4
 8001134:	e79f      	b.n	8001076 <__aeabi_fsub+0x24a>
 8001136:	0005      	movs	r5, r0
 8001138:	e75e      	b.n	8000ff8 <__aeabi_fsub+0x1cc>
 800113a:	464b      	mov	r3, r9
 800113c:	e771      	b.n	8001022 <__aeabi_fsub+0x1f6>
 800113e:	2320      	movs	r3, #32
 8001140:	4665      	mov	r5, ip
 8001142:	4660      	mov	r0, ip
 8001144:	40cd      	lsrs	r5, r1
 8001146:	1a59      	subs	r1, r3, r1
 8001148:	4088      	lsls	r0, r1
 800114a:	1e43      	subs	r3, r0, #1
 800114c:	4198      	sbcs	r0, r3
 800114e:	4328      	orrs	r0, r5
 8001150:	e71c      	b.n	8000f8c <__aeabi_fsub+0x160>
 8001152:	4663      	mov	r3, ip
 8001154:	000c      	movs	r4, r1
 8001156:	2501      	movs	r5, #1
 8001158:	1af0      	subs	r0, r6, r3
 800115a:	e691      	b.n	8000e80 <__aeabi_fsub+0x54>
 800115c:	2e00      	cmp	r6, #0
 800115e:	d095      	beq.n	800108c <__aeabi_fsub+0x260>
 8001160:	000c      	movs	r4, r1
 8001162:	464f      	mov	r7, r9
 8001164:	2200      	movs	r2, #0
 8001166:	e6ac      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8001168:	464b      	mov	r3, r9
 800116a:	000d      	movs	r5, r1
 800116c:	e744      	b.n	8000ff8 <__aeabi_fsub+0x1cc>
 800116e:	464f      	mov	r7, r9
 8001170:	2200      	movs	r2, #0
 8001172:	e6a6      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8001174:	fbffffff 	.word	0xfbffffff
 8001178:	7dffffff 	.word	0x7dffffff
 800117c:	2800      	cmp	r0, #0
 800117e:	d000      	beq.n	8001182 <__aeabi_fsub+0x356>
 8001180:	e736      	b.n	8000ff0 <__aeabi_fsub+0x1c4>
 8001182:	2400      	movs	r4, #0
 8001184:	2700      	movs	r7, #0
 8001186:	e69c      	b.n	8000ec2 <__aeabi_fsub+0x96>

08001188 <__aeabi_i2f>:
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	2800      	cmp	r0, #0
 800118c:	d013      	beq.n	80011b6 <__aeabi_i2f+0x2e>
 800118e:	17c3      	asrs	r3, r0, #31
 8001190:	18c6      	adds	r6, r0, r3
 8001192:	405e      	eors	r6, r3
 8001194:	0fc4      	lsrs	r4, r0, #31
 8001196:	0030      	movs	r0, r6
 8001198:	f001 ff3c 	bl	8003014 <__clzsi2>
 800119c:	239e      	movs	r3, #158	; 0x9e
 800119e:	0005      	movs	r5, r0
 80011a0:	1a1b      	subs	r3, r3, r0
 80011a2:	2b96      	cmp	r3, #150	; 0x96
 80011a4:	dc0f      	bgt.n	80011c6 <__aeabi_i2f+0x3e>
 80011a6:	2808      	cmp	r0, #8
 80011a8:	dd01      	ble.n	80011ae <__aeabi_i2f+0x26>
 80011aa:	3d08      	subs	r5, #8
 80011ac:	40ae      	lsls	r6, r5
 80011ae:	0276      	lsls	r6, r6, #9
 80011b0:	0a76      	lsrs	r6, r6, #9
 80011b2:	b2d8      	uxtb	r0, r3
 80011b4:	e002      	b.n	80011bc <__aeabi_i2f+0x34>
 80011b6:	2400      	movs	r4, #0
 80011b8:	2000      	movs	r0, #0
 80011ba:	2600      	movs	r6, #0
 80011bc:	05c0      	lsls	r0, r0, #23
 80011be:	4330      	orrs	r0, r6
 80011c0:	07e4      	lsls	r4, r4, #31
 80011c2:	4320      	orrs	r0, r4
 80011c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011c6:	2b99      	cmp	r3, #153	; 0x99
 80011c8:	dd0c      	ble.n	80011e4 <__aeabi_i2f+0x5c>
 80011ca:	2205      	movs	r2, #5
 80011cc:	0031      	movs	r1, r6
 80011ce:	1a12      	subs	r2, r2, r0
 80011d0:	40d1      	lsrs	r1, r2
 80011d2:	000a      	movs	r2, r1
 80011d4:	0001      	movs	r1, r0
 80011d6:	0030      	movs	r0, r6
 80011d8:	311b      	adds	r1, #27
 80011da:	4088      	lsls	r0, r1
 80011dc:	1e41      	subs	r1, r0, #1
 80011de:	4188      	sbcs	r0, r1
 80011e0:	4302      	orrs	r2, r0
 80011e2:	0016      	movs	r6, r2
 80011e4:	2d05      	cmp	r5, #5
 80011e6:	dc12      	bgt.n	800120e <__aeabi_i2f+0x86>
 80011e8:	0031      	movs	r1, r6
 80011ea:	4f0d      	ldr	r7, [pc, #52]	; (8001220 <__aeabi_i2f+0x98>)
 80011ec:	4039      	ands	r1, r7
 80011ee:	0772      	lsls	r2, r6, #29
 80011f0:	d009      	beq.n	8001206 <__aeabi_i2f+0x7e>
 80011f2:	200f      	movs	r0, #15
 80011f4:	4030      	ands	r0, r6
 80011f6:	2804      	cmp	r0, #4
 80011f8:	d005      	beq.n	8001206 <__aeabi_i2f+0x7e>
 80011fa:	3104      	adds	r1, #4
 80011fc:	014a      	lsls	r2, r1, #5
 80011fe:	d502      	bpl.n	8001206 <__aeabi_i2f+0x7e>
 8001200:	239f      	movs	r3, #159	; 0x9f
 8001202:	4039      	ands	r1, r7
 8001204:	1b5b      	subs	r3, r3, r5
 8001206:	0189      	lsls	r1, r1, #6
 8001208:	0a4e      	lsrs	r6, r1, #9
 800120a:	b2d8      	uxtb	r0, r3
 800120c:	e7d6      	b.n	80011bc <__aeabi_i2f+0x34>
 800120e:	1f6a      	subs	r2, r5, #5
 8001210:	4096      	lsls	r6, r2
 8001212:	0031      	movs	r1, r6
 8001214:	4f02      	ldr	r7, [pc, #8]	; (8001220 <__aeabi_i2f+0x98>)
 8001216:	4039      	ands	r1, r7
 8001218:	0772      	lsls	r2, r6, #29
 800121a:	d0f4      	beq.n	8001206 <__aeabi_i2f+0x7e>
 800121c:	e7e9      	b.n	80011f2 <__aeabi_i2f+0x6a>
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	fbffffff 	.word	0xfbffffff

08001224 <__aeabi_ui2f>:
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	1e05      	subs	r5, r0, #0
 8001228:	d00e      	beq.n	8001248 <__aeabi_ui2f+0x24>
 800122a:	f001 fef3 	bl	8003014 <__clzsi2>
 800122e:	239e      	movs	r3, #158	; 0x9e
 8001230:	0004      	movs	r4, r0
 8001232:	1a1b      	subs	r3, r3, r0
 8001234:	2b96      	cmp	r3, #150	; 0x96
 8001236:	dc0c      	bgt.n	8001252 <__aeabi_ui2f+0x2e>
 8001238:	2808      	cmp	r0, #8
 800123a:	dd01      	ble.n	8001240 <__aeabi_ui2f+0x1c>
 800123c:	3c08      	subs	r4, #8
 800123e:	40a5      	lsls	r5, r4
 8001240:	026d      	lsls	r5, r5, #9
 8001242:	0a6d      	lsrs	r5, r5, #9
 8001244:	b2d8      	uxtb	r0, r3
 8001246:	e001      	b.n	800124c <__aeabi_ui2f+0x28>
 8001248:	2000      	movs	r0, #0
 800124a:	2500      	movs	r5, #0
 800124c:	05c0      	lsls	r0, r0, #23
 800124e:	4328      	orrs	r0, r5
 8001250:	bd70      	pop	{r4, r5, r6, pc}
 8001252:	2b99      	cmp	r3, #153	; 0x99
 8001254:	dd09      	ble.n	800126a <__aeabi_ui2f+0x46>
 8001256:	0002      	movs	r2, r0
 8001258:	0029      	movs	r1, r5
 800125a:	321b      	adds	r2, #27
 800125c:	4091      	lsls	r1, r2
 800125e:	1e4a      	subs	r2, r1, #1
 8001260:	4191      	sbcs	r1, r2
 8001262:	2205      	movs	r2, #5
 8001264:	1a12      	subs	r2, r2, r0
 8001266:	40d5      	lsrs	r5, r2
 8001268:	430d      	orrs	r5, r1
 800126a:	2c05      	cmp	r4, #5
 800126c:	dc12      	bgt.n	8001294 <__aeabi_ui2f+0x70>
 800126e:	0029      	movs	r1, r5
 8001270:	4e0c      	ldr	r6, [pc, #48]	; (80012a4 <__aeabi_ui2f+0x80>)
 8001272:	4031      	ands	r1, r6
 8001274:	076a      	lsls	r2, r5, #29
 8001276:	d009      	beq.n	800128c <__aeabi_ui2f+0x68>
 8001278:	200f      	movs	r0, #15
 800127a:	4028      	ands	r0, r5
 800127c:	2804      	cmp	r0, #4
 800127e:	d005      	beq.n	800128c <__aeabi_ui2f+0x68>
 8001280:	3104      	adds	r1, #4
 8001282:	014a      	lsls	r2, r1, #5
 8001284:	d502      	bpl.n	800128c <__aeabi_ui2f+0x68>
 8001286:	239f      	movs	r3, #159	; 0x9f
 8001288:	4031      	ands	r1, r6
 800128a:	1b1b      	subs	r3, r3, r4
 800128c:	0189      	lsls	r1, r1, #6
 800128e:	0a4d      	lsrs	r5, r1, #9
 8001290:	b2d8      	uxtb	r0, r3
 8001292:	e7db      	b.n	800124c <__aeabi_ui2f+0x28>
 8001294:	1f62      	subs	r2, r4, #5
 8001296:	4095      	lsls	r5, r2
 8001298:	0029      	movs	r1, r5
 800129a:	4e02      	ldr	r6, [pc, #8]	; (80012a4 <__aeabi_ui2f+0x80>)
 800129c:	4031      	ands	r1, r6
 800129e:	076a      	lsls	r2, r5, #29
 80012a0:	d0f4      	beq.n	800128c <__aeabi_ui2f+0x68>
 80012a2:	e7e9      	b.n	8001278 <__aeabi_ui2f+0x54>
 80012a4:	fbffffff 	.word	0xfbffffff

080012a8 <__aeabi_dadd>:
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	464f      	mov	r7, r9
 80012ac:	4646      	mov	r6, r8
 80012ae:	46d6      	mov	lr, sl
 80012b0:	000d      	movs	r5, r1
 80012b2:	0004      	movs	r4, r0
 80012b4:	b5c0      	push	{r6, r7, lr}
 80012b6:	001f      	movs	r7, r3
 80012b8:	0011      	movs	r1, r2
 80012ba:	0328      	lsls	r0, r5, #12
 80012bc:	0f62      	lsrs	r2, r4, #29
 80012be:	0a40      	lsrs	r0, r0, #9
 80012c0:	4310      	orrs	r0, r2
 80012c2:	007a      	lsls	r2, r7, #1
 80012c4:	0d52      	lsrs	r2, r2, #21
 80012c6:	00e3      	lsls	r3, r4, #3
 80012c8:	033c      	lsls	r4, r7, #12
 80012ca:	4691      	mov	r9, r2
 80012cc:	0a64      	lsrs	r4, r4, #9
 80012ce:	0ffa      	lsrs	r2, r7, #31
 80012d0:	0f4f      	lsrs	r7, r1, #29
 80012d2:	006e      	lsls	r6, r5, #1
 80012d4:	4327      	orrs	r7, r4
 80012d6:	4692      	mov	sl, r2
 80012d8:	46b8      	mov	r8, r7
 80012da:	0d76      	lsrs	r6, r6, #21
 80012dc:	0fed      	lsrs	r5, r5, #31
 80012de:	00c9      	lsls	r1, r1, #3
 80012e0:	4295      	cmp	r5, r2
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dadd+0x3e>
 80012e4:	e099      	b.n	800141a <__aeabi_dadd+0x172>
 80012e6:	464c      	mov	r4, r9
 80012e8:	1b34      	subs	r4, r6, r4
 80012ea:	46a4      	mov	ip, r4
 80012ec:	2c00      	cmp	r4, #0
 80012ee:	dc00      	bgt.n	80012f2 <__aeabi_dadd+0x4a>
 80012f0:	e07c      	b.n	80013ec <__aeabi_dadd+0x144>
 80012f2:	464a      	mov	r2, r9
 80012f4:	2a00      	cmp	r2, #0
 80012f6:	d100      	bne.n	80012fa <__aeabi_dadd+0x52>
 80012f8:	e0b8      	b.n	800146c <__aeabi_dadd+0x1c4>
 80012fa:	4ac5      	ldr	r2, [pc, #788]	; (8001610 <__aeabi_dadd+0x368>)
 80012fc:	4296      	cmp	r6, r2
 80012fe:	d100      	bne.n	8001302 <__aeabi_dadd+0x5a>
 8001300:	e11c      	b.n	800153c <__aeabi_dadd+0x294>
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	003c      	movs	r4, r7
 8001306:	0412      	lsls	r2, r2, #16
 8001308:	4314      	orrs	r4, r2
 800130a:	46a0      	mov	r8, r4
 800130c:	4662      	mov	r2, ip
 800130e:	2a38      	cmp	r2, #56	; 0x38
 8001310:	dd00      	ble.n	8001314 <__aeabi_dadd+0x6c>
 8001312:	e161      	b.n	80015d8 <__aeabi_dadd+0x330>
 8001314:	2a1f      	cmp	r2, #31
 8001316:	dd00      	ble.n	800131a <__aeabi_dadd+0x72>
 8001318:	e1cc      	b.n	80016b4 <__aeabi_dadd+0x40c>
 800131a:	4664      	mov	r4, ip
 800131c:	2220      	movs	r2, #32
 800131e:	1b12      	subs	r2, r2, r4
 8001320:	4644      	mov	r4, r8
 8001322:	4094      	lsls	r4, r2
 8001324:	000f      	movs	r7, r1
 8001326:	46a1      	mov	r9, r4
 8001328:	4664      	mov	r4, ip
 800132a:	4091      	lsls	r1, r2
 800132c:	40e7      	lsrs	r7, r4
 800132e:	464c      	mov	r4, r9
 8001330:	1e4a      	subs	r2, r1, #1
 8001332:	4191      	sbcs	r1, r2
 8001334:	433c      	orrs	r4, r7
 8001336:	4642      	mov	r2, r8
 8001338:	4321      	orrs	r1, r4
 800133a:	4664      	mov	r4, ip
 800133c:	40e2      	lsrs	r2, r4
 800133e:	1a80      	subs	r0, r0, r2
 8001340:	1a5c      	subs	r4, r3, r1
 8001342:	42a3      	cmp	r3, r4
 8001344:	419b      	sbcs	r3, r3
 8001346:	425f      	negs	r7, r3
 8001348:	1bc7      	subs	r7, r0, r7
 800134a:	023b      	lsls	r3, r7, #8
 800134c:	d400      	bmi.n	8001350 <__aeabi_dadd+0xa8>
 800134e:	e0d0      	b.n	80014f2 <__aeabi_dadd+0x24a>
 8001350:	027f      	lsls	r7, r7, #9
 8001352:	0a7f      	lsrs	r7, r7, #9
 8001354:	2f00      	cmp	r7, #0
 8001356:	d100      	bne.n	800135a <__aeabi_dadd+0xb2>
 8001358:	e0ff      	b.n	800155a <__aeabi_dadd+0x2b2>
 800135a:	0038      	movs	r0, r7
 800135c:	f001 fe5a 	bl	8003014 <__clzsi2>
 8001360:	0001      	movs	r1, r0
 8001362:	3908      	subs	r1, #8
 8001364:	2320      	movs	r3, #32
 8001366:	0022      	movs	r2, r4
 8001368:	1a5b      	subs	r3, r3, r1
 800136a:	408f      	lsls	r7, r1
 800136c:	40da      	lsrs	r2, r3
 800136e:	408c      	lsls	r4, r1
 8001370:	4317      	orrs	r7, r2
 8001372:	42b1      	cmp	r1, r6
 8001374:	da00      	bge.n	8001378 <__aeabi_dadd+0xd0>
 8001376:	e0ff      	b.n	8001578 <__aeabi_dadd+0x2d0>
 8001378:	1b89      	subs	r1, r1, r6
 800137a:	1c4b      	adds	r3, r1, #1
 800137c:	2b1f      	cmp	r3, #31
 800137e:	dd00      	ble.n	8001382 <__aeabi_dadd+0xda>
 8001380:	e0a8      	b.n	80014d4 <__aeabi_dadd+0x22c>
 8001382:	2220      	movs	r2, #32
 8001384:	0039      	movs	r1, r7
 8001386:	1ad2      	subs	r2, r2, r3
 8001388:	0020      	movs	r0, r4
 800138a:	4094      	lsls	r4, r2
 800138c:	4091      	lsls	r1, r2
 800138e:	40d8      	lsrs	r0, r3
 8001390:	1e62      	subs	r2, r4, #1
 8001392:	4194      	sbcs	r4, r2
 8001394:	40df      	lsrs	r7, r3
 8001396:	2600      	movs	r6, #0
 8001398:	4301      	orrs	r1, r0
 800139a:	430c      	orrs	r4, r1
 800139c:	0763      	lsls	r3, r4, #29
 800139e:	d009      	beq.n	80013b4 <__aeabi_dadd+0x10c>
 80013a0:	230f      	movs	r3, #15
 80013a2:	4023      	ands	r3, r4
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d005      	beq.n	80013b4 <__aeabi_dadd+0x10c>
 80013a8:	1d23      	adds	r3, r4, #4
 80013aa:	42a3      	cmp	r3, r4
 80013ac:	41a4      	sbcs	r4, r4
 80013ae:	4264      	negs	r4, r4
 80013b0:	193f      	adds	r7, r7, r4
 80013b2:	001c      	movs	r4, r3
 80013b4:	023b      	lsls	r3, r7, #8
 80013b6:	d400      	bmi.n	80013ba <__aeabi_dadd+0x112>
 80013b8:	e09e      	b.n	80014f8 <__aeabi_dadd+0x250>
 80013ba:	4b95      	ldr	r3, [pc, #596]	; (8001610 <__aeabi_dadd+0x368>)
 80013bc:	3601      	adds	r6, #1
 80013be:	429e      	cmp	r6, r3
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dadd+0x11c>
 80013c2:	e0b7      	b.n	8001534 <__aeabi_dadd+0x28c>
 80013c4:	4a93      	ldr	r2, [pc, #588]	; (8001614 <__aeabi_dadd+0x36c>)
 80013c6:	08e4      	lsrs	r4, r4, #3
 80013c8:	4017      	ands	r7, r2
 80013ca:	077b      	lsls	r3, r7, #29
 80013cc:	0571      	lsls	r1, r6, #21
 80013ce:	027f      	lsls	r7, r7, #9
 80013d0:	4323      	orrs	r3, r4
 80013d2:	0b3f      	lsrs	r7, r7, #12
 80013d4:	0d4a      	lsrs	r2, r1, #21
 80013d6:	0512      	lsls	r2, r2, #20
 80013d8:	433a      	orrs	r2, r7
 80013da:	07ed      	lsls	r5, r5, #31
 80013dc:	432a      	orrs	r2, r5
 80013de:	0018      	movs	r0, r3
 80013e0:	0011      	movs	r1, r2
 80013e2:	bce0      	pop	{r5, r6, r7}
 80013e4:	46ba      	mov	sl, r7
 80013e6:	46b1      	mov	r9, r6
 80013e8:	46a8      	mov	r8, r5
 80013ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ec:	2c00      	cmp	r4, #0
 80013ee:	d04b      	beq.n	8001488 <__aeabi_dadd+0x1e0>
 80013f0:	464c      	mov	r4, r9
 80013f2:	1ba4      	subs	r4, r4, r6
 80013f4:	46a4      	mov	ip, r4
 80013f6:	2e00      	cmp	r6, #0
 80013f8:	d000      	beq.n	80013fc <__aeabi_dadd+0x154>
 80013fa:	e123      	b.n	8001644 <__aeabi_dadd+0x39c>
 80013fc:	0004      	movs	r4, r0
 80013fe:	431c      	orrs	r4, r3
 8001400:	d100      	bne.n	8001404 <__aeabi_dadd+0x15c>
 8001402:	e1af      	b.n	8001764 <__aeabi_dadd+0x4bc>
 8001404:	4662      	mov	r2, ip
 8001406:	1e54      	subs	r4, r2, #1
 8001408:	2a01      	cmp	r2, #1
 800140a:	d100      	bne.n	800140e <__aeabi_dadd+0x166>
 800140c:	e215      	b.n	800183a <__aeabi_dadd+0x592>
 800140e:	4d80      	ldr	r5, [pc, #512]	; (8001610 <__aeabi_dadd+0x368>)
 8001410:	45ac      	cmp	ip, r5
 8001412:	d100      	bne.n	8001416 <__aeabi_dadd+0x16e>
 8001414:	e1c8      	b.n	80017a8 <__aeabi_dadd+0x500>
 8001416:	46a4      	mov	ip, r4
 8001418:	e11b      	b.n	8001652 <__aeabi_dadd+0x3aa>
 800141a:	464a      	mov	r2, r9
 800141c:	1ab2      	subs	r2, r6, r2
 800141e:	4694      	mov	ip, r2
 8001420:	2a00      	cmp	r2, #0
 8001422:	dc00      	bgt.n	8001426 <__aeabi_dadd+0x17e>
 8001424:	e0ac      	b.n	8001580 <__aeabi_dadd+0x2d8>
 8001426:	464a      	mov	r2, r9
 8001428:	2a00      	cmp	r2, #0
 800142a:	d043      	beq.n	80014b4 <__aeabi_dadd+0x20c>
 800142c:	4a78      	ldr	r2, [pc, #480]	; (8001610 <__aeabi_dadd+0x368>)
 800142e:	4296      	cmp	r6, r2
 8001430:	d100      	bne.n	8001434 <__aeabi_dadd+0x18c>
 8001432:	e1af      	b.n	8001794 <__aeabi_dadd+0x4ec>
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	003c      	movs	r4, r7
 8001438:	0412      	lsls	r2, r2, #16
 800143a:	4314      	orrs	r4, r2
 800143c:	46a0      	mov	r8, r4
 800143e:	4662      	mov	r2, ip
 8001440:	2a38      	cmp	r2, #56	; 0x38
 8001442:	dc67      	bgt.n	8001514 <__aeabi_dadd+0x26c>
 8001444:	2a1f      	cmp	r2, #31
 8001446:	dc00      	bgt.n	800144a <__aeabi_dadd+0x1a2>
 8001448:	e15f      	b.n	800170a <__aeabi_dadd+0x462>
 800144a:	4647      	mov	r7, r8
 800144c:	3a20      	subs	r2, #32
 800144e:	40d7      	lsrs	r7, r2
 8001450:	4662      	mov	r2, ip
 8001452:	2a20      	cmp	r2, #32
 8001454:	d005      	beq.n	8001462 <__aeabi_dadd+0x1ba>
 8001456:	4664      	mov	r4, ip
 8001458:	2240      	movs	r2, #64	; 0x40
 800145a:	1b12      	subs	r2, r2, r4
 800145c:	4644      	mov	r4, r8
 800145e:	4094      	lsls	r4, r2
 8001460:	4321      	orrs	r1, r4
 8001462:	1e4a      	subs	r2, r1, #1
 8001464:	4191      	sbcs	r1, r2
 8001466:	000c      	movs	r4, r1
 8001468:	433c      	orrs	r4, r7
 800146a:	e057      	b.n	800151c <__aeabi_dadd+0x274>
 800146c:	003a      	movs	r2, r7
 800146e:	430a      	orrs	r2, r1
 8001470:	d100      	bne.n	8001474 <__aeabi_dadd+0x1cc>
 8001472:	e105      	b.n	8001680 <__aeabi_dadd+0x3d8>
 8001474:	0022      	movs	r2, r4
 8001476:	3a01      	subs	r2, #1
 8001478:	2c01      	cmp	r4, #1
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x1d6>
 800147c:	e182      	b.n	8001784 <__aeabi_dadd+0x4dc>
 800147e:	4c64      	ldr	r4, [pc, #400]	; (8001610 <__aeabi_dadd+0x368>)
 8001480:	45a4      	cmp	ip, r4
 8001482:	d05b      	beq.n	800153c <__aeabi_dadd+0x294>
 8001484:	4694      	mov	ip, r2
 8001486:	e741      	b.n	800130c <__aeabi_dadd+0x64>
 8001488:	4c63      	ldr	r4, [pc, #396]	; (8001618 <__aeabi_dadd+0x370>)
 800148a:	1c77      	adds	r7, r6, #1
 800148c:	4227      	tst	r7, r4
 800148e:	d000      	beq.n	8001492 <__aeabi_dadd+0x1ea>
 8001490:	e0c4      	b.n	800161c <__aeabi_dadd+0x374>
 8001492:	0004      	movs	r4, r0
 8001494:	431c      	orrs	r4, r3
 8001496:	2e00      	cmp	r6, #0
 8001498:	d000      	beq.n	800149c <__aeabi_dadd+0x1f4>
 800149a:	e169      	b.n	8001770 <__aeabi_dadd+0x4c8>
 800149c:	2c00      	cmp	r4, #0
 800149e:	d100      	bne.n	80014a2 <__aeabi_dadd+0x1fa>
 80014a0:	e1bf      	b.n	8001822 <__aeabi_dadd+0x57a>
 80014a2:	4644      	mov	r4, r8
 80014a4:	430c      	orrs	r4, r1
 80014a6:	d000      	beq.n	80014aa <__aeabi_dadd+0x202>
 80014a8:	e1d0      	b.n	800184c <__aeabi_dadd+0x5a4>
 80014aa:	0742      	lsls	r2, r0, #29
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	08c0      	lsrs	r0, r0, #3
 80014b2:	e029      	b.n	8001508 <__aeabi_dadd+0x260>
 80014b4:	003a      	movs	r2, r7
 80014b6:	430a      	orrs	r2, r1
 80014b8:	d100      	bne.n	80014bc <__aeabi_dadd+0x214>
 80014ba:	e170      	b.n	800179e <__aeabi_dadd+0x4f6>
 80014bc:	4662      	mov	r2, ip
 80014be:	4664      	mov	r4, ip
 80014c0:	3a01      	subs	r2, #1
 80014c2:	2c01      	cmp	r4, #1
 80014c4:	d100      	bne.n	80014c8 <__aeabi_dadd+0x220>
 80014c6:	e0e0      	b.n	800168a <__aeabi_dadd+0x3e2>
 80014c8:	4c51      	ldr	r4, [pc, #324]	; (8001610 <__aeabi_dadd+0x368>)
 80014ca:	45a4      	cmp	ip, r4
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0x228>
 80014ce:	e161      	b.n	8001794 <__aeabi_dadd+0x4ec>
 80014d0:	4694      	mov	ip, r2
 80014d2:	e7b4      	b.n	800143e <__aeabi_dadd+0x196>
 80014d4:	003a      	movs	r2, r7
 80014d6:	391f      	subs	r1, #31
 80014d8:	40ca      	lsrs	r2, r1
 80014da:	0011      	movs	r1, r2
 80014dc:	2b20      	cmp	r3, #32
 80014de:	d003      	beq.n	80014e8 <__aeabi_dadd+0x240>
 80014e0:	2240      	movs	r2, #64	; 0x40
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	409f      	lsls	r7, r3
 80014e6:	433c      	orrs	r4, r7
 80014e8:	1e63      	subs	r3, r4, #1
 80014ea:	419c      	sbcs	r4, r3
 80014ec:	2700      	movs	r7, #0
 80014ee:	2600      	movs	r6, #0
 80014f0:	430c      	orrs	r4, r1
 80014f2:	0763      	lsls	r3, r4, #29
 80014f4:	d000      	beq.n	80014f8 <__aeabi_dadd+0x250>
 80014f6:	e753      	b.n	80013a0 <__aeabi_dadd+0xf8>
 80014f8:	46b4      	mov	ip, r6
 80014fa:	08e4      	lsrs	r4, r4, #3
 80014fc:	077b      	lsls	r3, r7, #29
 80014fe:	4323      	orrs	r3, r4
 8001500:	08f8      	lsrs	r0, r7, #3
 8001502:	4a43      	ldr	r2, [pc, #268]	; (8001610 <__aeabi_dadd+0x368>)
 8001504:	4594      	cmp	ip, r2
 8001506:	d01d      	beq.n	8001544 <__aeabi_dadd+0x29c>
 8001508:	4662      	mov	r2, ip
 800150a:	0307      	lsls	r7, r0, #12
 800150c:	0552      	lsls	r2, r2, #21
 800150e:	0b3f      	lsrs	r7, r7, #12
 8001510:	0d52      	lsrs	r2, r2, #21
 8001512:	e760      	b.n	80013d6 <__aeabi_dadd+0x12e>
 8001514:	4644      	mov	r4, r8
 8001516:	430c      	orrs	r4, r1
 8001518:	1e62      	subs	r2, r4, #1
 800151a:	4194      	sbcs	r4, r2
 800151c:	18e4      	adds	r4, r4, r3
 800151e:	429c      	cmp	r4, r3
 8001520:	419b      	sbcs	r3, r3
 8001522:	425f      	negs	r7, r3
 8001524:	183f      	adds	r7, r7, r0
 8001526:	023b      	lsls	r3, r7, #8
 8001528:	d5e3      	bpl.n	80014f2 <__aeabi_dadd+0x24a>
 800152a:	4b39      	ldr	r3, [pc, #228]	; (8001610 <__aeabi_dadd+0x368>)
 800152c:	3601      	adds	r6, #1
 800152e:	429e      	cmp	r6, r3
 8001530:	d000      	beq.n	8001534 <__aeabi_dadd+0x28c>
 8001532:	e0b5      	b.n	80016a0 <__aeabi_dadd+0x3f8>
 8001534:	0032      	movs	r2, r6
 8001536:	2700      	movs	r7, #0
 8001538:	2300      	movs	r3, #0
 800153a:	e74c      	b.n	80013d6 <__aeabi_dadd+0x12e>
 800153c:	0742      	lsls	r2, r0, #29
 800153e:	08db      	lsrs	r3, r3, #3
 8001540:	4313      	orrs	r3, r2
 8001542:	08c0      	lsrs	r0, r0, #3
 8001544:	001a      	movs	r2, r3
 8001546:	4302      	orrs	r2, r0
 8001548:	d100      	bne.n	800154c <__aeabi_dadd+0x2a4>
 800154a:	e1e1      	b.n	8001910 <__aeabi_dadd+0x668>
 800154c:	2780      	movs	r7, #128	; 0x80
 800154e:	033f      	lsls	r7, r7, #12
 8001550:	4307      	orrs	r7, r0
 8001552:	033f      	lsls	r7, r7, #12
 8001554:	4a2e      	ldr	r2, [pc, #184]	; (8001610 <__aeabi_dadd+0x368>)
 8001556:	0b3f      	lsrs	r7, r7, #12
 8001558:	e73d      	b.n	80013d6 <__aeabi_dadd+0x12e>
 800155a:	0020      	movs	r0, r4
 800155c:	f001 fd5a 	bl	8003014 <__clzsi2>
 8001560:	0001      	movs	r1, r0
 8001562:	3118      	adds	r1, #24
 8001564:	291f      	cmp	r1, #31
 8001566:	dc00      	bgt.n	800156a <__aeabi_dadd+0x2c2>
 8001568:	e6fc      	b.n	8001364 <__aeabi_dadd+0xbc>
 800156a:	3808      	subs	r0, #8
 800156c:	4084      	lsls	r4, r0
 800156e:	0027      	movs	r7, r4
 8001570:	2400      	movs	r4, #0
 8001572:	42b1      	cmp	r1, r6
 8001574:	db00      	blt.n	8001578 <__aeabi_dadd+0x2d0>
 8001576:	e6ff      	b.n	8001378 <__aeabi_dadd+0xd0>
 8001578:	4a26      	ldr	r2, [pc, #152]	; (8001614 <__aeabi_dadd+0x36c>)
 800157a:	1a76      	subs	r6, r6, r1
 800157c:	4017      	ands	r7, r2
 800157e:	e70d      	b.n	800139c <__aeabi_dadd+0xf4>
 8001580:	2a00      	cmp	r2, #0
 8001582:	d02f      	beq.n	80015e4 <__aeabi_dadd+0x33c>
 8001584:	464a      	mov	r2, r9
 8001586:	1b92      	subs	r2, r2, r6
 8001588:	4694      	mov	ip, r2
 800158a:	2e00      	cmp	r6, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_dadd+0x2e8>
 800158e:	e0ad      	b.n	80016ec <__aeabi_dadd+0x444>
 8001590:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <__aeabi_dadd+0x368>)
 8001592:	4591      	cmp	r9, r2
 8001594:	d100      	bne.n	8001598 <__aeabi_dadd+0x2f0>
 8001596:	e10f      	b.n	80017b8 <__aeabi_dadd+0x510>
 8001598:	2280      	movs	r2, #128	; 0x80
 800159a:	0412      	lsls	r2, r2, #16
 800159c:	4310      	orrs	r0, r2
 800159e:	4662      	mov	r2, ip
 80015a0:	2a38      	cmp	r2, #56	; 0x38
 80015a2:	dd00      	ble.n	80015a6 <__aeabi_dadd+0x2fe>
 80015a4:	e10f      	b.n	80017c6 <__aeabi_dadd+0x51e>
 80015a6:	2a1f      	cmp	r2, #31
 80015a8:	dd00      	ble.n	80015ac <__aeabi_dadd+0x304>
 80015aa:	e180      	b.n	80018ae <__aeabi_dadd+0x606>
 80015ac:	4664      	mov	r4, ip
 80015ae:	2220      	movs	r2, #32
 80015b0:	001e      	movs	r6, r3
 80015b2:	1b12      	subs	r2, r2, r4
 80015b4:	4667      	mov	r7, ip
 80015b6:	0004      	movs	r4, r0
 80015b8:	4093      	lsls	r3, r2
 80015ba:	4094      	lsls	r4, r2
 80015bc:	40fe      	lsrs	r6, r7
 80015be:	1e5a      	subs	r2, r3, #1
 80015c0:	4193      	sbcs	r3, r2
 80015c2:	40f8      	lsrs	r0, r7
 80015c4:	4334      	orrs	r4, r6
 80015c6:	431c      	orrs	r4, r3
 80015c8:	4480      	add	r8, r0
 80015ca:	1864      	adds	r4, r4, r1
 80015cc:	428c      	cmp	r4, r1
 80015ce:	41bf      	sbcs	r7, r7
 80015d0:	427f      	negs	r7, r7
 80015d2:	464e      	mov	r6, r9
 80015d4:	4447      	add	r7, r8
 80015d6:	e7a6      	b.n	8001526 <__aeabi_dadd+0x27e>
 80015d8:	4642      	mov	r2, r8
 80015da:	430a      	orrs	r2, r1
 80015dc:	0011      	movs	r1, r2
 80015de:	1e4a      	subs	r2, r1, #1
 80015e0:	4191      	sbcs	r1, r2
 80015e2:	e6ad      	b.n	8001340 <__aeabi_dadd+0x98>
 80015e4:	4c0c      	ldr	r4, [pc, #48]	; (8001618 <__aeabi_dadd+0x370>)
 80015e6:	1c72      	adds	r2, r6, #1
 80015e8:	4222      	tst	r2, r4
 80015ea:	d000      	beq.n	80015ee <__aeabi_dadd+0x346>
 80015ec:	e0a1      	b.n	8001732 <__aeabi_dadd+0x48a>
 80015ee:	0002      	movs	r2, r0
 80015f0:	431a      	orrs	r2, r3
 80015f2:	2e00      	cmp	r6, #0
 80015f4:	d000      	beq.n	80015f8 <__aeabi_dadd+0x350>
 80015f6:	e0fa      	b.n	80017ee <__aeabi_dadd+0x546>
 80015f8:	2a00      	cmp	r2, #0
 80015fa:	d100      	bne.n	80015fe <__aeabi_dadd+0x356>
 80015fc:	e145      	b.n	800188a <__aeabi_dadd+0x5e2>
 80015fe:	003a      	movs	r2, r7
 8001600:	430a      	orrs	r2, r1
 8001602:	d000      	beq.n	8001606 <__aeabi_dadd+0x35e>
 8001604:	e146      	b.n	8001894 <__aeabi_dadd+0x5ec>
 8001606:	0742      	lsls	r2, r0, #29
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	4313      	orrs	r3, r2
 800160c:	08c0      	lsrs	r0, r0, #3
 800160e:	e77b      	b.n	8001508 <__aeabi_dadd+0x260>
 8001610:	000007ff 	.word	0x000007ff
 8001614:	ff7fffff 	.word	0xff7fffff
 8001618:	000007fe 	.word	0x000007fe
 800161c:	4647      	mov	r7, r8
 800161e:	1a5c      	subs	r4, r3, r1
 8001620:	1bc2      	subs	r2, r0, r7
 8001622:	42a3      	cmp	r3, r4
 8001624:	41bf      	sbcs	r7, r7
 8001626:	427f      	negs	r7, r7
 8001628:	46b9      	mov	r9, r7
 800162a:	0017      	movs	r7, r2
 800162c:	464a      	mov	r2, r9
 800162e:	1abf      	subs	r7, r7, r2
 8001630:	023a      	lsls	r2, r7, #8
 8001632:	d500      	bpl.n	8001636 <__aeabi_dadd+0x38e>
 8001634:	e08d      	b.n	8001752 <__aeabi_dadd+0x4aa>
 8001636:	0023      	movs	r3, r4
 8001638:	433b      	orrs	r3, r7
 800163a:	d000      	beq.n	800163e <__aeabi_dadd+0x396>
 800163c:	e68a      	b.n	8001354 <__aeabi_dadd+0xac>
 800163e:	2000      	movs	r0, #0
 8001640:	2500      	movs	r5, #0
 8001642:	e761      	b.n	8001508 <__aeabi_dadd+0x260>
 8001644:	4cb4      	ldr	r4, [pc, #720]	; (8001918 <__aeabi_dadd+0x670>)
 8001646:	45a1      	cmp	r9, r4
 8001648:	d100      	bne.n	800164c <__aeabi_dadd+0x3a4>
 800164a:	e0ad      	b.n	80017a8 <__aeabi_dadd+0x500>
 800164c:	2480      	movs	r4, #128	; 0x80
 800164e:	0424      	lsls	r4, r4, #16
 8001650:	4320      	orrs	r0, r4
 8001652:	4664      	mov	r4, ip
 8001654:	2c38      	cmp	r4, #56	; 0x38
 8001656:	dc3d      	bgt.n	80016d4 <__aeabi_dadd+0x42c>
 8001658:	4662      	mov	r2, ip
 800165a:	2c1f      	cmp	r4, #31
 800165c:	dd00      	ble.n	8001660 <__aeabi_dadd+0x3b8>
 800165e:	e0b7      	b.n	80017d0 <__aeabi_dadd+0x528>
 8001660:	2520      	movs	r5, #32
 8001662:	001e      	movs	r6, r3
 8001664:	1b2d      	subs	r5, r5, r4
 8001666:	0004      	movs	r4, r0
 8001668:	40ab      	lsls	r3, r5
 800166a:	40ac      	lsls	r4, r5
 800166c:	40d6      	lsrs	r6, r2
 800166e:	40d0      	lsrs	r0, r2
 8001670:	4642      	mov	r2, r8
 8001672:	1e5d      	subs	r5, r3, #1
 8001674:	41ab      	sbcs	r3, r5
 8001676:	4334      	orrs	r4, r6
 8001678:	1a12      	subs	r2, r2, r0
 800167a:	4690      	mov	r8, r2
 800167c:	4323      	orrs	r3, r4
 800167e:	e02c      	b.n	80016da <__aeabi_dadd+0x432>
 8001680:	0742      	lsls	r2, r0, #29
 8001682:	08db      	lsrs	r3, r3, #3
 8001684:	4313      	orrs	r3, r2
 8001686:	08c0      	lsrs	r0, r0, #3
 8001688:	e73b      	b.n	8001502 <__aeabi_dadd+0x25a>
 800168a:	185c      	adds	r4, r3, r1
 800168c:	429c      	cmp	r4, r3
 800168e:	419b      	sbcs	r3, r3
 8001690:	4440      	add	r0, r8
 8001692:	425b      	negs	r3, r3
 8001694:	18c7      	adds	r7, r0, r3
 8001696:	2601      	movs	r6, #1
 8001698:	023b      	lsls	r3, r7, #8
 800169a:	d400      	bmi.n	800169e <__aeabi_dadd+0x3f6>
 800169c:	e729      	b.n	80014f2 <__aeabi_dadd+0x24a>
 800169e:	2602      	movs	r6, #2
 80016a0:	4a9e      	ldr	r2, [pc, #632]	; (800191c <__aeabi_dadd+0x674>)
 80016a2:	0863      	lsrs	r3, r4, #1
 80016a4:	4017      	ands	r7, r2
 80016a6:	2201      	movs	r2, #1
 80016a8:	4014      	ands	r4, r2
 80016aa:	431c      	orrs	r4, r3
 80016ac:	07fb      	lsls	r3, r7, #31
 80016ae:	431c      	orrs	r4, r3
 80016b0:	087f      	lsrs	r7, r7, #1
 80016b2:	e673      	b.n	800139c <__aeabi_dadd+0xf4>
 80016b4:	4644      	mov	r4, r8
 80016b6:	3a20      	subs	r2, #32
 80016b8:	40d4      	lsrs	r4, r2
 80016ba:	4662      	mov	r2, ip
 80016bc:	2a20      	cmp	r2, #32
 80016be:	d005      	beq.n	80016cc <__aeabi_dadd+0x424>
 80016c0:	4667      	mov	r7, ip
 80016c2:	2240      	movs	r2, #64	; 0x40
 80016c4:	1bd2      	subs	r2, r2, r7
 80016c6:	4647      	mov	r7, r8
 80016c8:	4097      	lsls	r7, r2
 80016ca:	4339      	orrs	r1, r7
 80016cc:	1e4a      	subs	r2, r1, #1
 80016ce:	4191      	sbcs	r1, r2
 80016d0:	4321      	orrs	r1, r4
 80016d2:	e635      	b.n	8001340 <__aeabi_dadd+0x98>
 80016d4:	4303      	orrs	r3, r0
 80016d6:	1e58      	subs	r0, r3, #1
 80016d8:	4183      	sbcs	r3, r0
 80016da:	1acc      	subs	r4, r1, r3
 80016dc:	42a1      	cmp	r1, r4
 80016de:	41bf      	sbcs	r7, r7
 80016e0:	4643      	mov	r3, r8
 80016e2:	427f      	negs	r7, r7
 80016e4:	4655      	mov	r5, sl
 80016e6:	464e      	mov	r6, r9
 80016e8:	1bdf      	subs	r7, r3, r7
 80016ea:	e62e      	b.n	800134a <__aeabi_dadd+0xa2>
 80016ec:	0002      	movs	r2, r0
 80016ee:	431a      	orrs	r2, r3
 80016f0:	d100      	bne.n	80016f4 <__aeabi_dadd+0x44c>
 80016f2:	e0bd      	b.n	8001870 <__aeabi_dadd+0x5c8>
 80016f4:	4662      	mov	r2, ip
 80016f6:	4664      	mov	r4, ip
 80016f8:	3a01      	subs	r2, #1
 80016fa:	2c01      	cmp	r4, #1
 80016fc:	d100      	bne.n	8001700 <__aeabi_dadd+0x458>
 80016fe:	e0e5      	b.n	80018cc <__aeabi_dadd+0x624>
 8001700:	4c85      	ldr	r4, [pc, #532]	; (8001918 <__aeabi_dadd+0x670>)
 8001702:	45a4      	cmp	ip, r4
 8001704:	d058      	beq.n	80017b8 <__aeabi_dadd+0x510>
 8001706:	4694      	mov	ip, r2
 8001708:	e749      	b.n	800159e <__aeabi_dadd+0x2f6>
 800170a:	4664      	mov	r4, ip
 800170c:	2220      	movs	r2, #32
 800170e:	1b12      	subs	r2, r2, r4
 8001710:	4644      	mov	r4, r8
 8001712:	4094      	lsls	r4, r2
 8001714:	000f      	movs	r7, r1
 8001716:	46a1      	mov	r9, r4
 8001718:	4664      	mov	r4, ip
 800171a:	4091      	lsls	r1, r2
 800171c:	40e7      	lsrs	r7, r4
 800171e:	464c      	mov	r4, r9
 8001720:	1e4a      	subs	r2, r1, #1
 8001722:	4191      	sbcs	r1, r2
 8001724:	433c      	orrs	r4, r7
 8001726:	4642      	mov	r2, r8
 8001728:	430c      	orrs	r4, r1
 800172a:	4661      	mov	r1, ip
 800172c:	40ca      	lsrs	r2, r1
 800172e:	1880      	adds	r0, r0, r2
 8001730:	e6f4      	b.n	800151c <__aeabi_dadd+0x274>
 8001732:	4c79      	ldr	r4, [pc, #484]	; (8001918 <__aeabi_dadd+0x670>)
 8001734:	42a2      	cmp	r2, r4
 8001736:	d100      	bne.n	800173a <__aeabi_dadd+0x492>
 8001738:	e6fd      	b.n	8001536 <__aeabi_dadd+0x28e>
 800173a:	1859      	adds	r1, r3, r1
 800173c:	4299      	cmp	r1, r3
 800173e:	419b      	sbcs	r3, r3
 8001740:	4440      	add	r0, r8
 8001742:	425f      	negs	r7, r3
 8001744:	19c7      	adds	r7, r0, r7
 8001746:	07fc      	lsls	r4, r7, #31
 8001748:	0849      	lsrs	r1, r1, #1
 800174a:	0016      	movs	r6, r2
 800174c:	430c      	orrs	r4, r1
 800174e:	087f      	lsrs	r7, r7, #1
 8001750:	e6cf      	b.n	80014f2 <__aeabi_dadd+0x24a>
 8001752:	1acc      	subs	r4, r1, r3
 8001754:	42a1      	cmp	r1, r4
 8001756:	41bf      	sbcs	r7, r7
 8001758:	4643      	mov	r3, r8
 800175a:	427f      	negs	r7, r7
 800175c:	1a18      	subs	r0, r3, r0
 800175e:	4655      	mov	r5, sl
 8001760:	1bc7      	subs	r7, r0, r7
 8001762:	e5f7      	b.n	8001354 <__aeabi_dadd+0xac>
 8001764:	08c9      	lsrs	r1, r1, #3
 8001766:	077b      	lsls	r3, r7, #29
 8001768:	4655      	mov	r5, sl
 800176a:	430b      	orrs	r3, r1
 800176c:	08f8      	lsrs	r0, r7, #3
 800176e:	e6c8      	b.n	8001502 <__aeabi_dadd+0x25a>
 8001770:	2c00      	cmp	r4, #0
 8001772:	d000      	beq.n	8001776 <__aeabi_dadd+0x4ce>
 8001774:	e081      	b.n	800187a <__aeabi_dadd+0x5d2>
 8001776:	4643      	mov	r3, r8
 8001778:	430b      	orrs	r3, r1
 800177a:	d115      	bne.n	80017a8 <__aeabi_dadd+0x500>
 800177c:	2080      	movs	r0, #128	; 0x80
 800177e:	2500      	movs	r5, #0
 8001780:	0300      	lsls	r0, r0, #12
 8001782:	e6e3      	b.n	800154c <__aeabi_dadd+0x2a4>
 8001784:	1a5c      	subs	r4, r3, r1
 8001786:	42a3      	cmp	r3, r4
 8001788:	419b      	sbcs	r3, r3
 800178a:	1bc7      	subs	r7, r0, r7
 800178c:	425b      	negs	r3, r3
 800178e:	2601      	movs	r6, #1
 8001790:	1aff      	subs	r7, r7, r3
 8001792:	e5da      	b.n	800134a <__aeabi_dadd+0xa2>
 8001794:	0742      	lsls	r2, r0, #29
 8001796:	08db      	lsrs	r3, r3, #3
 8001798:	4313      	orrs	r3, r2
 800179a:	08c0      	lsrs	r0, r0, #3
 800179c:	e6d2      	b.n	8001544 <__aeabi_dadd+0x29c>
 800179e:	0742      	lsls	r2, r0, #29
 80017a0:	08db      	lsrs	r3, r3, #3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	08c0      	lsrs	r0, r0, #3
 80017a6:	e6ac      	b.n	8001502 <__aeabi_dadd+0x25a>
 80017a8:	4643      	mov	r3, r8
 80017aa:	4642      	mov	r2, r8
 80017ac:	08c9      	lsrs	r1, r1, #3
 80017ae:	075b      	lsls	r3, r3, #29
 80017b0:	4655      	mov	r5, sl
 80017b2:	430b      	orrs	r3, r1
 80017b4:	08d0      	lsrs	r0, r2, #3
 80017b6:	e6c5      	b.n	8001544 <__aeabi_dadd+0x29c>
 80017b8:	4643      	mov	r3, r8
 80017ba:	4642      	mov	r2, r8
 80017bc:	075b      	lsls	r3, r3, #29
 80017be:	08c9      	lsrs	r1, r1, #3
 80017c0:	430b      	orrs	r3, r1
 80017c2:	08d0      	lsrs	r0, r2, #3
 80017c4:	e6be      	b.n	8001544 <__aeabi_dadd+0x29c>
 80017c6:	4303      	orrs	r3, r0
 80017c8:	001c      	movs	r4, r3
 80017ca:	1e63      	subs	r3, r4, #1
 80017cc:	419c      	sbcs	r4, r3
 80017ce:	e6fc      	b.n	80015ca <__aeabi_dadd+0x322>
 80017d0:	0002      	movs	r2, r0
 80017d2:	3c20      	subs	r4, #32
 80017d4:	40e2      	lsrs	r2, r4
 80017d6:	0014      	movs	r4, r2
 80017d8:	4662      	mov	r2, ip
 80017da:	2a20      	cmp	r2, #32
 80017dc:	d003      	beq.n	80017e6 <__aeabi_dadd+0x53e>
 80017de:	2540      	movs	r5, #64	; 0x40
 80017e0:	1aad      	subs	r5, r5, r2
 80017e2:	40a8      	lsls	r0, r5
 80017e4:	4303      	orrs	r3, r0
 80017e6:	1e58      	subs	r0, r3, #1
 80017e8:	4183      	sbcs	r3, r0
 80017ea:	4323      	orrs	r3, r4
 80017ec:	e775      	b.n	80016da <__aeabi_dadd+0x432>
 80017ee:	2a00      	cmp	r2, #0
 80017f0:	d0e2      	beq.n	80017b8 <__aeabi_dadd+0x510>
 80017f2:	003a      	movs	r2, r7
 80017f4:	430a      	orrs	r2, r1
 80017f6:	d0cd      	beq.n	8001794 <__aeabi_dadd+0x4ec>
 80017f8:	0742      	lsls	r2, r0, #29
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	08c0      	lsrs	r0, r0, #3
 8001802:	0312      	lsls	r2, r2, #12
 8001804:	4210      	tst	r0, r2
 8001806:	d006      	beq.n	8001816 <__aeabi_dadd+0x56e>
 8001808:	08fc      	lsrs	r4, r7, #3
 800180a:	4214      	tst	r4, r2
 800180c:	d103      	bne.n	8001816 <__aeabi_dadd+0x56e>
 800180e:	0020      	movs	r0, r4
 8001810:	08cb      	lsrs	r3, r1, #3
 8001812:	077a      	lsls	r2, r7, #29
 8001814:	4313      	orrs	r3, r2
 8001816:	0f5a      	lsrs	r2, r3, #29
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	0752      	lsls	r2, r2, #29
 800181c:	08db      	lsrs	r3, r3, #3
 800181e:	4313      	orrs	r3, r2
 8001820:	e690      	b.n	8001544 <__aeabi_dadd+0x29c>
 8001822:	4643      	mov	r3, r8
 8001824:	430b      	orrs	r3, r1
 8001826:	d100      	bne.n	800182a <__aeabi_dadd+0x582>
 8001828:	e709      	b.n	800163e <__aeabi_dadd+0x396>
 800182a:	4643      	mov	r3, r8
 800182c:	4642      	mov	r2, r8
 800182e:	08c9      	lsrs	r1, r1, #3
 8001830:	075b      	lsls	r3, r3, #29
 8001832:	4655      	mov	r5, sl
 8001834:	430b      	orrs	r3, r1
 8001836:	08d0      	lsrs	r0, r2, #3
 8001838:	e666      	b.n	8001508 <__aeabi_dadd+0x260>
 800183a:	1acc      	subs	r4, r1, r3
 800183c:	42a1      	cmp	r1, r4
 800183e:	4189      	sbcs	r1, r1
 8001840:	1a3f      	subs	r7, r7, r0
 8001842:	4249      	negs	r1, r1
 8001844:	4655      	mov	r5, sl
 8001846:	2601      	movs	r6, #1
 8001848:	1a7f      	subs	r7, r7, r1
 800184a:	e57e      	b.n	800134a <__aeabi_dadd+0xa2>
 800184c:	4642      	mov	r2, r8
 800184e:	1a5c      	subs	r4, r3, r1
 8001850:	1a87      	subs	r7, r0, r2
 8001852:	42a3      	cmp	r3, r4
 8001854:	4192      	sbcs	r2, r2
 8001856:	4252      	negs	r2, r2
 8001858:	1abf      	subs	r7, r7, r2
 800185a:	023a      	lsls	r2, r7, #8
 800185c:	d53d      	bpl.n	80018da <__aeabi_dadd+0x632>
 800185e:	1acc      	subs	r4, r1, r3
 8001860:	42a1      	cmp	r1, r4
 8001862:	4189      	sbcs	r1, r1
 8001864:	4643      	mov	r3, r8
 8001866:	4249      	negs	r1, r1
 8001868:	1a1f      	subs	r7, r3, r0
 800186a:	4655      	mov	r5, sl
 800186c:	1a7f      	subs	r7, r7, r1
 800186e:	e595      	b.n	800139c <__aeabi_dadd+0xf4>
 8001870:	077b      	lsls	r3, r7, #29
 8001872:	08c9      	lsrs	r1, r1, #3
 8001874:	430b      	orrs	r3, r1
 8001876:	08f8      	lsrs	r0, r7, #3
 8001878:	e643      	b.n	8001502 <__aeabi_dadd+0x25a>
 800187a:	4644      	mov	r4, r8
 800187c:	08db      	lsrs	r3, r3, #3
 800187e:	430c      	orrs	r4, r1
 8001880:	d130      	bne.n	80018e4 <__aeabi_dadd+0x63c>
 8001882:	0742      	lsls	r2, r0, #29
 8001884:	4313      	orrs	r3, r2
 8001886:	08c0      	lsrs	r0, r0, #3
 8001888:	e65c      	b.n	8001544 <__aeabi_dadd+0x29c>
 800188a:	077b      	lsls	r3, r7, #29
 800188c:	08c9      	lsrs	r1, r1, #3
 800188e:	430b      	orrs	r3, r1
 8001890:	08f8      	lsrs	r0, r7, #3
 8001892:	e639      	b.n	8001508 <__aeabi_dadd+0x260>
 8001894:	185c      	adds	r4, r3, r1
 8001896:	429c      	cmp	r4, r3
 8001898:	419b      	sbcs	r3, r3
 800189a:	4440      	add	r0, r8
 800189c:	425b      	negs	r3, r3
 800189e:	18c7      	adds	r7, r0, r3
 80018a0:	023b      	lsls	r3, r7, #8
 80018a2:	d400      	bmi.n	80018a6 <__aeabi_dadd+0x5fe>
 80018a4:	e625      	b.n	80014f2 <__aeabi_dadd+0x24a>
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <__aeabi_dadd+0x674>)
 80018a8:	2601      	movs	r6, #1
 80018aa:	401f      	ands	r7, r3
 80018ac:	e621      	b.n	80014f2 <__aeabi_dadd+0x24a>
 80018ae:	0004      	movs	r4, r0
 80018b0:	3a20      	subs	r2, #32
 80018b2:	40d4      	lsrs	r4, r2
 80018b4:	4662      	mov	r2, ip
 80018b6:	2a20      	cmp	r2, #32
 80018b8:	d004      	beq.n	80018c4 <__aeabi_dadd+0x61c>
 80018ba:	2240      	movs	r2, #64	; 0x40
 80018bc:	4666      	mov	r6, ip
 80018be:	1b92      	subs	r2, r2, r6
 80018c0:	4090      	lsls	r0, r2
 80018c2:	4303      	orrs	r3, r0
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	4193      	sbcs	r3, r2
 80018c8:	431c      	orrs	r4, r3
 80018ca:	e67e      	b.n	80015ca <__aeabi_dadd+0x322>
 80018cc:	185c      	adds	r4, r3, r1
 80018ce:	428c      	cmp	r4, r1
 80018d0:	4189      	sbcs	r1, r1
 80018d2:	4440      	add	r0, r8
 80018d4:	4249      	negs	r1, r1
 80018d6:	1847      	adds	r7, r0, r1
 80018d8:	e6dd      	b.n	8001696 <__aeabi_dadd+0x3ee>
 80018da:	0023      	movs	r3, r4
 80018dc:	433b      	orrs	r3, r7
 80018de:	d100      	bne.n	80018e2 <__aeabi_dadd+0x63a>
 80018e0:	e6ad      	b.n	800163e <__aeabi_dadd+0x396>
 80018e2:	e606      	b.n	80014f2 <__aeabi_dadd+0x24a>
 80018e4:	0744      	lsls	r4, r0, #29
 80018e6:	4323      	orrs	r3, r4
 80018e8:	2480      	movs	r4, #128	; 0x80
 80018ea:	08c0      	lsrs	r0, r0, #3
 80018ec:	0324      	lsls	r4, r4, #12
 80018ee:	4220      	tst	r0, r4
 80018f0:	d008      	beq.n	8001904 <__aeabi_dadd+0x65c>
 80018f2:	4642      	mov	r2, r8
 80018f4:	08d6      	lsrs	r6, r2, #3
 80018f6:	4226      	tst	r6, r4
 80018f8:	d104      	bne.n	8001904 <__aeabi_dadd+0x65c>
 80018fa:	4655      	mov	r5, sl
 80018fc:	0030      	movs	r0, r6
 80018fe:	08cb      	lsrs	r3, r1, #3
 8001900:	0751      	lsls	r1, r2, #29
 8001902:	430b      	orrs	r3, r1
 8001904:	0f5a      	lsrs	r2, r3, #29
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	0752      	lsls	r2, r2, #29
 800190c:	4313      	orrs	r3, r2
 800190e:	e619      	b.n	8001544 <__aeabi_dadd+0x29c>
 8001910:	2300      	movs	r3, #0
 8001912:	4a01      	ldr	r2, [pc, #4]	; (8001918 <__aeabi_dadd+0x670>)
 8001914:	001f      	movs	r7, r3
 8001916:	e55e      	b.n	80013d6 <__aeabi_dadd+0x12e>
 8001918:	000007ff 	.word	0x000007ff
 800191c:	ff7fffff 	.word	0xff7fffff

08001920 <__aeabi_ddiv>:
 8001920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001922:	4657      	mov	r7, sl
 8001924:	464e      	mov	r6, r9
 8001926:	4645      	mov	r5, r8
 8001928:	46de      	mov	lr, fp
 800192a:	b5e0      	push	{r5, r6, r7, lr}
 800192c:	4681      	mov	r9, r0
 800192e:	0005      	movs	r5, r0
 8001930:	030c      	lsls	r4, r1, #12
 8001932:	0048      	lsls	r0, r1, #1
 8001934:	4692      	mov	sl, r2
 8001936:	001f      	movs	r7, r3
 8001938:	b085      	sub	sp, #20
 800193a:	0b24      	lsrs	r4, r4, #12
 800193c:	0d40      	lsrs	r0, r0, #21
 800193e:	0fce      	lsrs	r6, r1, #31
 8001940:	2800      	cmp	r0, #0
 8001942:	d100      	bne.n	8001946 <__aeabi_ddiv+0x26>
 8001944:	e156      	b.n	8001bf4 <__aeabi_ddiv+0x2d4>
 8001946:	4bd4      	ldr	r3, [pc, #848]	; (8001c98 <__aeabi_ddiv+0x378>)
 8001948:	4298      	cmp	r0, r3
 800194a:	d100      	bne.n	800194e <__aeabi_ddiv+0x2e>
 800194c:	e172      	b.n	8001c34 <__aeabi_ddiv+0x314>
 800194e:	0f6b      	lsrs	r3, r5, #29
 8001950:	00e4      	lsls	r4, r4, #3
 8001952:	431c      	orrs	r4, r3
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	041b      	lsls	r3, r3, #16
 8001958:	4323      	orrs	r3, r4
 800195a:	4698      	mov	r8, r3
 800195c:	4bcf      	ldr	r3, [pc, #828]	; (8001c9c <__aeabi_ddiv+0x37c>)
 800195e:	00ed      	lsls	r5, r5, #3
 8001960:	469b      	mov	fp, r3
 8001962:	2300      	movs	r3, #0
 8001964:	4699      	mov	r9, r3
 8001966:	4483      	add	fp, r0
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	033c      	lsls	r4, r7, #12
 800196c:	007b      	lsls	r3, r7, #1
 800196e:	4650      	mov	r0, sl
 8001970:	0b24      	lsrs	r4, r4, #12
 8001972:	0d5b      	lsrs	r3, r3, #21
 8001974:	0fff      	lsrs	r7, r7, #31
 8001976:	2b00      	cmp	r3, #0
 8001978:	d100      	bne.n	800197c <__aeabi_ddiv+0x5c>
 800197a:	e11f      	b.n	8001bbc <__aeabi_ddiv+0x29c>
 800197c:	4ac6      	ldr	r2, [pc, #792]	; (8001c98 <__aeabi_ddiv+0x378>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d100      	bne.n	8001984 <__aeabi_ddiv+0x64>
 8001982:	e162      	b.n	8001c4a <__aeabi_ddiv+0x32a>
 8001984:	49c5      	ldr	r1, [pc, #788]	; (8001c9c <__aeabi_ddiv+0x37c>)
 8001986:	0f42      	lsrs	r2, r0, #29
 8001988:	468c      	mov	ip, r1
 800198a:	00e4      	lsls	r4, r4, #3
 800198c:	4659      	mov	r1, fp
 800198e:	4314      	orrs	r4, r2
 8001990:	2280      	movs	r2, #128	; 0x80
 8001992:	4463      	add	r3, ip
 8001994:	0412      	lsls	r2, r2, #16
 8001996:	1acb      	subs	r3, r1, r3
 8001998:	4314      	orrs	r4, r2
 800199a:	469b      	mov	fp, r3
 800199c:	00c2      	lsls	r2, r0, #3
 800199e:	2000      	movs	r0, #0
 80019a0:	0033      	movs	r3, r6
 80019a2:	407b      	eors	r3, r7
 80019a4:	469a      	mov	sl, r3
 80019a6:	464b      	mov	r3, r9
 80019a8:	2b0f      	cmp	r3, #15
 80019aa:	d827      	bhi.n	80019fc <__aeabi_ddiv+0xdc>
 80019ac:	49bc      	ldr	r1, [pc, #752]	; (8001ca0 <__aeabi_ddiv+0x380>)
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	58cb      	ldr	r3, [r1, r3]
 80019b2:	469f      	mov	pc, r3
 80019b4:	46b2      	mov	sl, r6
 80019b6:	9b00      	ldr	r3, [sp, #0]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d016      	beq.n	80019ea <__aeabi_ddiv+0xca>
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d100      	bne.n	80019c2 <__aeabi_ddiv+0xa2>
 80019c0:	e28e      	b.n	8001ee0 <__aeabi_ddiv+0x5c0>
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d000      	beq.n	80019c8 <__aeabi_ddiv+0xa8>
 80019c6:	e0d9      	b.n	8001b7c <__aeabi_ddiv+0x25c>
 80019c8:	2300      	movs	r3, #0
 80019ca:	2400      	movs	r4, #0
 80019cc:	2500      	movs	r5, #0
 80019ce:	4652      	mov	r2, sl
 80019d0:	051b      	lsls	r3, r3, #20
 80019d2:	4323      	orrs	r3, r4
 80019d4:	07d2      	lsls	r2, r2, #31
 80019d6:	4313      	orrs	r3, r2
 80019d8:	0028      	movs	r0, r5
 80019da:	0019      	movs	r1, r3
 80019dc:	b005      	add	sp, #20
 80019de:	bcf0      	pop	{r4, r5, r6, r7}
 80019e0:	46bb      	mov	fp, r7
 80019e2:	46b2      	mov	sl, r6
 80019e4:	46a9      	mov	r9, r5
 80019e6:	46a0      	mov	r8, r4
 80019e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ea:	2400      	movs	r4, #0
 80019ec:	2500      	movs	r5, #0
 80019ee:	4baa      	ldr	r3, [pc, #680]	; (8001c98 <__aeabi_ddiv+0x378>)
 80019f0:	e7ed      	b.n	80019ce <__aeabi_ddiv+0xae>
 80019f2:	46ba      	mov	sl, r7
 80019f4:	46a0      	mov	r8, r4
 80019f6:	0015      	movs	r5, r2
 80019f8:	9000      	str	r0, [sp, #0]
 80019fa:	e7dc      	b.n	80019b6 <__aeabi_ddiv+0x96>
 80019fc:	4544      	cmp	r4, r8
 80019fe:	d200      	bcs.n	8001a02 <__aeabi_ddiv+0xe2>
 8001a00:	e1c7      	b.n	8001d92 <__aeabi_ddiv+0x472>
 8001a02:	d100      	bne.n	8001a06 <__aeabi_ddiv+0xe6>
 8001a04:	e1c2      	b.n	8001d8c <__aeabi_ddiv+0x46c>
 8001a06:	2301      	movs	r3, #1
 8001a08:	425b      	negs	r3, r3
 8001a0a:	469c      	mov	ip, r3
 8001a0c:	002e      	movs	r6, r5
 8001a0e:	4640      	mov	r0, r8
 8001a10:	2500      	movs	r5, #0
 8001a12:	44e3      	add	fp, ip
 8001a14:	0223      	lsls	r3, r4, #8
 8001a16:	0e14      	lsrs	r4, r2, #24
 8001a18:	431c      	orrs	r4, r3
 8001a1a:	0c1b      	lsrs	r3, r3, #16
 8001a1c:	4699      	mov	r9, r3
 8001a1e:	0423      	lsls	r3, r4, #16
 8001a20:	0c1f      	lsrs	r7, r3, #16
 8001a22:	0212      	lsls	r2, r2, #8
 8001a24:	4649      	mov	r1, r9
 8001a26:	9200      	str	r2, [sp, #0]
 8001a28:	9701      	str	r7, [sp, #4]
 8001a2a:	f7fe fc0b 	bl	8000244 <__aeabi_uidivmod>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	437a      	muls	r2, r7
 8001a32:	040b      	lsls	r3, r1, #16
 8001a34:	0c31      	lsrs	r1, r6, #16
 8001a36:	4680      	mov	r8, r0
 8001a38:	4319      	orrs	r1, r3
 8001a3a:	428a      	cmp	r2, r1
 8001a3c:	d907      	bls.n	8001a4e <__aeabi_ddiv+0x12e>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	425b      	negs	r3, r3
 8001a42:	469c      	mov	ip, r3
 8001a44:	1909      	adds	r1, r1, r4
 8001a46:	44e0      	add	r8, ip
 8001a48:	428c      	cmp	r4, r1
 8001a4a:	d800      	bhi.n	8001a4e <__aeabi_ddiv+0x12e>
 8001a4c:	e207      	b.n	8001e5e <__aeabi_ddiv+0x53e>
 8001a4e:	1a88      	subs	r0, r1, r2
 8001a50:	4649      	mov	r1, r9
 8001a52:	f7fe fbf7 	bl	8000244 <__aeabi_uidivmod>
 8001a56:	0409      	lsls	r1, r1, #16
 8001a58:	468c      	mov	ip, r1
 8001a5a:	0431      	lsls	r1, r6, #16
 8001a5c:	4666      	mov	r6, ip
 8001a5e:	9a01      	ldr	r2, [sp, #4]
 8001a60:	0c09      	lsrs	r1, r1, #16
 8001a62:	4342      	muls	r2, r0
 8001a64:	0003      	movs	r3, r0
 8001a66:	4331      	orrs	r1, r6
 8001a68:	428a      	cmp	r2, r1
 8001a6a:	d904      	bls.n	8001a76 <__aeabi_ddiv+0x156>
 8001a6c:	1909      	adds	r1, r1, r4
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	428c      	cmp	r4, r1
 8001a72:	d800      	bhi.n	8001a76 <__aeabi_ddiv+0x156>
 8001a74:	e1ed      	b.n	8001e52 <__aeabi_ddiv+0x532>
 8001a76:	1a88      	subs	r0, r1, r2
 8001a78:	4642      	mov	r2, r8
 8001a7a:	0412      	lsls	r2, r2, #16
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	4690      	mov	r8, r2
 8001a80:	4641      	mov	r1, r8
 8001a82:	9b00      	ldr	r3, [sp, #0]
 8001a84:	040e      	lsls	r6, r1, #16
 8001a86:	0c1b      	lsrs	r3, r3, #16
 8001a88:	001f      	movs	r7, r3
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	9b00      	ldr	r3, [sp, #0]
 8001a8e:	0c36      	lsrs	r6, r6, #16
 8001a90:	041b      	lsls	r3, r3, #16
 8001a92:	0c19      	lsrs	r1, r3, #16
 8001a94:	000b      	movs	r3, r1
 8001a96:	4373      	muls	r3, r6
 8001a98:	0c12      	lsrs	r2, r2, #16
 8001a9a:	437e      	muls	r6, r7
 8001a9c:	9103      	str	r1, [sp, #12]
 8001a9e:	4351      	muls	r1, r2
 8001aa0:	437a      	muls	r2, r7
 8001aa2:	0c1f      	lsrs	r7, r3, #16
 8001aa4:	46bc      	mov	ip, r7
 8001aa6:	1876      	adds	r6, r6, r1
 8001aa8:	4466      	add	r6, ip
 8001aaa:	42b1      	cmp	r1, r6
 8001aac:	d903      	bls.n	8001ab6 <__aeabi_ddiv+0x196>
 8001aae:	2180      	movs	r1, #128	; 0x80
 8001ab0:	0249      	lsls	r1, r1, #9
 8001ab2:	468c      	mov	ip, r1
 8001ab4:	4462      	add	r2, ip
 8001ab6:	0c31      	lsrs	r1, r6, #16
 8001ab8:	188a      	adds	r2, r1, r2
 8001aba:	0431      	lsls	r1, r6, #16
 8001abc:	041e      	lsls	r6, r3, #16
 8001abe:	0c36      	lsrs	r6, r6, #16
 8001ac0:	198e      	adds	r6, r1, r6
 8001ac2:	4290      	cmp	r0, r2
 8001ac4:	d302      	bcc.n	8001acc <__aeabi_ddiv+0x1ac>
 8001ac6:	d112      	bne.n	8001aee <__aeabi_ddiv+0x1ce>
 8001ac8:	42b5      	cmp	r5, r6
 8001aca:	d210      	bcs.n	8001aee <__aeabi_ddiv+0x1ce>
 8001acc:	4643      	mov	r3, r8
 8001ace:	1e59      	subs	r1, r3, #1
 8001ad0:	9b00      	ldr	r3, [sp, #0]
 8001ad2:	469c      	mov	ip, r3
 8001ad4:	4465      	add	r5, ip
 8001ad6:	001f      	movs	r7, r3
 8001ad8:	429d      	cmp	r5, r3
 8001ada:	419b      	sbcs	r3, r3
 8001adc:	425b      	negs	r3, r3
 8001ade:	191b      	adds	r3, r3, r4
 8001ae0:	18c0      	adds	r0, r0, r3
 8001ae2:	4284      	cmp	r4, r0
 8001ae4:	d200      	bcs.n	8001ae8 <__aeabi_ddiv+0x1c8>
 8001ae6:	e1a0      	b.n	8001e2a <__aeabi_ddiv+0x50a>
 8001ae8:	d100      	bne.n	8001aec <__aeabi_ddiv+0x1cc>
 8001aea:	e19b      	b.n	8001e24 <__aeabi_ddiv+0x504>
 8001aec:	4688      	mov	r8, r1
 8001aee:	1bae      	subs	r6, r5, r6
 8001af0:	42b5      	cmp	r5, r6
 8001af2:	41ad      	sbcs	r5, r5
 8001af4:	1a80      	subs	r0, r0, r2
 8001af6:	426d      	negs	r5, r5
 8001af8:	1b40      	subs	r0, r0, r5
 8001afa:	4284      	cmp	r4, r0
 8001afc:	d100      	bne.n	8001b00 <__aeabi_ddiv+0x1e0>
 8001afe:	e1d5      	b.n	8001eac <__aeabi_ddiv+0x58c>
 8001b00:	4649      	mov	r1, r9
 8001b02:	f7fe fb9f 	bl	8000244 <__aeabi_uidivmod>
 8001b06:	9a01      	ldr	r2, [sp, #4]
 8001b08:	040b      	lsls	r3, r1, #16
 8001b0a:	4342      	muls	r2, r0
 8001b0c:	0c31      	lsrs	r1, r6, #16
 8001b0e:	0005      	movs	r5, r0
 8001b10:	4319      	orrs	r1, r3
 8001b12:	428a      	cmp	r2, r1
 8001b14:	d900      	bls.n	8001b18 <__aeabi_ddiv+0x1f8>
 8001b16:	e16c      	b.n	8001df2 <__aeabi_ddiv+0x4d2>
 8001b18:	1a88      	subs	r0, r1, r2
 8001b1a:	4649      	mov	r1, r9
 8001b1c:	f7fe fb92 	bl	8000244 <__aeabi_uidivmod>
 8001b20:	9a01      	ldr	r2, [sp, #4]
 8001b22:	0436      	lsls	r6, r6, #16
 8001b24:	4342      	muls	r2, r0
 8001b26:	0409      	lsls	r1, r1, #16
 8001b28:	0c36      	lsrs	r6, r6, #16
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	430e      	orrs	r6, r1
 8001b2e:	42b2      	cmp	r2, r6
 8001b30:	d900      	bls.n	8001b34 <__aeabi_ddiv+0x214>
 8001b32:	e153      	b.n	8001ddc <__aeabi_ddiv+0x4bc>
 8001b34:	9803      	ldr	r0, [sp, #12]
 8001b36:	1ab6      	subs	r6, r6, r2
 8001b38:	0002      	movs	r2, r0
 8001b3a:	042d      	lsls	r5, r5, #16
 8001b3c:	431d      	orrs	r5, r3
 8001b3e:	9f02      	ldr	r7, [sp, #8]
 8001b40:	042b      	lsls	r3, r5, #16
 8001b42:	0c1b      	lsrs	r3, r3, #16
 8001b44:	435a      	muls	r2, r3
 8001b46:	437b      	muls	r3, r7
 8001b48:	469c      	mov	ip, r3
 8001b4a:	0c29      	lsrs	r1, r5, #16
 8001b4c:	4348      	muls	r0, r1
 8001b4e:	0c13      	lsrs	r3, r2, #16
 8001b50:	4484      	add	ip, r0
 8001b52:	4463      	add	r3, ip
 8001b54:	4379      	muls	r1, r7
 8001b56:	4298      	cmp	r0, r3
 8001b58:	d903      	bls.n	8001b62 <__aeabi_ddiv+0x242>
 8001b5a:	2080      	movs	r0, #128	; 0x80
 8001b5c:	0240      	lsls	r0, r0, #9
 8001b5e:	4684      	mov	ip, r0
 8001b60:	4461      	add	r1, ip
 8001b62:	0c18      	lsrs	r0, r3, #16
 8001b64:	0412      	lsls	r2, r2, #16
 8001b66:	041b      	lsls	r3, r3, #16
 8001b68:	0c12      	lsrs	r2, r2, #16
 8001b6a:	1841      	adds	r1, r0, r1
 8001b6c:	189b      	adds	r3, r3, r2
 8001b6e:	428e      	cmp	r6, r1
 8001b70:	d200      	bcs.n	8001b74 <__aeabi_ddiv+0x254>
 8001b72:	e0ff      	b.n	8001d74 <__aeabi_ddiv+0x454>
 8001b74:	d100      	bne.n	8001b78 <__aeabi_ddiv+0x258>
 8001b76:	e0fa      	b.n	8001d6e <__aeabi_ddiv+0x44e>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	431d      	orrs	r5, r3
 8001b7c:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <__aeabi_ddiv+0x384>)
 8001b7e:	445a      	add	r2, fp
 8001b80:	2a00      	cmp	r2, #0
 8001b82:	dc00      	bgt.n	8001b86 <__aeabi_ddiv+0x266>
 8001b84:	e0aa      	b.n	8001cdc <__aeabi_ddiv+0x3bc>
 8001b86:	076b      	lsls	r3, r5, #29
 8001b88:	d000      	beq.n	8001b8c <__aeabi_ddiv+0x26c>
 8001b8a:	e13d      	b.n	8001e08 <__aeabi_ddiv+0x4e8>
 8001b8c:	08ed      	lsrs	r5, r5, #3
 8001b8e:	4643      	mov	r3, r8
 8001b90:	01db      	lsls	r3, r3, #7
 8001b92:	d506      	bpl.n	8001ba2 <__aeabi_ddiv+0x282>
 8001b94:	4642      	mov	r2, r8
 8001b96:	4b44      	ldr	r3, [pc, #272]	; (8001ca8 <__aeabi_ddiv+0x388>)
 8001b98:	401a      	ands	r2, r3
 8001b9a:	4690      	mov	r8, r2
 8001b9c:	2280      	movs	r2, #128	; 0x80
 8001b9e:	00d2      	lsls	r2, r2, #3
 8001ba0:	445a      	add	r2, fp
 8001ba2:	4b42      	ldr	r3, [pc, #264]	; (8001cac <__aeabi_ddiv+0x38c>)
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	dd00      	ble.n	8001baa <__aeabi_ddiv+0x28a>
 8001ba8:	e71f      	b.n	80019ea <__aeabi_ddiv+0xca>
 8001baa:	4643      	mov	r3, r8
 8001bac:	075b      	lsls	r3, r3, #29
 8001bae:	431d      	orrs	r5, r3
 8001bb0:	4643      	mov	r3, r8
 8001bb2:	0552      	lsls	r2, r2, #21
 8001bb4:	025c      	lsls	r4, r3, #9
 8001bb6:	0b24      	lsrs	r4, r4, #12
 8001bb8:	0d53      	lsrs	r3, r2, #21
 8001bba:	e708      	b.n	80019ce <__aeabi_ddiv+0xae>
 8001bbc:	4652      	mov	r2, sl
 8001bbe:	4322      	orrs	r2, r4
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_ddiv+0x2a4>
 8001bc2:	e07b      	b.n	8001cbc <__aeabi_ddiv+0x39c>
 8001bc4:	2c00      	cmp	r4, #0
 8001bc6:	d100      	bne.n	8001bca <__aeabi_ddiv+0x2aa>
 8001bc8:	e0fa      	b.n	8001dc0 <__aeabi_ddiv+0x4a0>
 8001bca:	0020      	movs	r0, r4
 8001bcc:	f001 fa22 	bl	8003014 <__clzsi2>
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	3a0b      	subs	r2, #11
 8001bd4:	231d      	movs	r3, #29
 8001bd6:	0001      	movs	r1, r0
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	4652      	mov	r2, sl
 8001bdc:	3908      	subs	r1, #8
 8001bde:	40da      	lsrs	r2, r3
 8001be0:	408c      	lsls	r4, r1
 8001be2:	4314      	orrs	r4, r2
 8001be4:	4652      	mov	r2, sl
 8001be6:	408a      	lsls	r2, r1
 8001be8:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <__aeabi_ddiv+0x390>)
 8001bea:	4458      	add	r0, fp
 8001bec:	469b      	mov	fp, r3
 8001bee:	4483      	add	fp, r0
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	e6d5      	b.n	80019a0 <__aeabi_ddiv+0x80>
 8001bf4:	464b      	mov	r3, r9
 8001bf6:	4323      	orrs	r3, r4
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	d044      	beq.n	8001c86 <__aeabi_ddiv+0x366>
 8001bfc:	2c00      	cmp	r4, #0
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_ddiv+0x2e2>
 8001c00:	e0ce      	b.n	8001da0 <__aeabi_ddiv+0x480>
 8001c02:	0020      	movs	r0, r4
 8001c04:	f001 fa06 	bl	8003014 <__clzsi2>
 8001c08:	0001      	movs	r1, r0
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	390b      	subs	r1, #11
 8001c0e:	231d      	movs	r3, #29
 8001c10:	1a5b      	subs	r3, r3, r1
 8001c12:	4649      	mov	r1, r9
 8001c14:	0010      	movs	r0, r2
 8001c16:	40d9      	lsrs	r1, r3
 8001c18:	3808      	subs	r0, #8
 8001c1a:	4084      	lsls	r4, r0
 8001c1c:	000b      	movs	r3, r1
 8001c1e:	464d      	mov	r5, r9
 8001c20:	4323      	orrs	r3, r4
 8001c22:	4698      	mov	r8, r3
 8001c24:	4085      	lsls	r5, r0
 8001c26:	4823      	ldr	r0, [pc, #140]	; (8001cb4 <__aeabi_ddiv+0x394>)
 8001c28:	1a83      	subs	r3, r0, r2
 8001c2a:	469b      	mov	fp, r3
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	4699      	mov	r9, r3
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	e69a      	b.n	800196a <__aeabi_ddiv+0x4a>
 8001c34:	464b      	mov	r3, r9
 8001c36:	4323      	orrs	r3, r4
 8001c38:	4698      	mov	r8, r3
 8001c3a:	d11d      	bne.n	8001c78 <__aeabi_ddiv+0x358>
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	4699      	mov	r9, r3
 8001c40:	3b06      	subs	r3, #6
 8001c42:	2500      	movs	r5, #0
 8001c44:	4683      	mov	fp, r0
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	e68f      	b.n	800196a <__aeabi_ddiv+0x4a>
 8001c4a:	4652      	mov	r2, sl
 8001c4c:	4322      	orrs	r2, r4
 8001c4e:	d109      	bne.n	8001c64 <__aeabi_ddiv+0x344>
 8001c50:	2302      	movs	r3, #2
 8001c52:	4649      	mov	r1, r9
 8001c54:	4319      	orrs	r1, r3
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <__aeabi_ddiv+0x398>)
 8001c58:	4689      	mov	r9, r1
 8001c5a:	469c      	mov	ip, r3
 8001c5c:	2400      	movs	r4, #0
 8001c5e:	2002      	movs	r0, #2
 8001c60:	44e3      	add	fp, ip
 8001c62:	e69d      	b.n	80019a0 <__aeabi_ddiv+0x80>
 8001c64:	2303      	movs	r3, #3
 8001c66:	464a      	mov	r2, r9
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <__aeabi_ddiv+0x398>)
 8001c6c:	4691      	mov	r9, r2
 8001c6e:	469c      	mov	ip, r3
 8001c70:	4652      	mov	r2, sl
 8001c72:	2003      	movs	r0, #3
 8001c74:	44e3      	add	fp, ip
 8001c76:	e693      	b.n	80019a0 <__aeabi_ddiv+0x80>
 8001c78:	230c      	movs	r3, #12
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	3b09      	subs	r3, #9
 8001c7e:	46a0      	mov	r8, r4
 8001c80:	4683      	mov	fp, r0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	e671      	b.n	800196a <__aeabi_ddiv+0x4a>
 8001c86:	2304      	movs	r3, #4
 8001c88:	4699      	mov	r9, r3
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	469b      	mov	fp, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	2500      	movs	r5, #0
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	e669      	b.n	800196a <__aeabi_ddiv+0x4a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff
 8001c9c:	fffffc01 	.word	0xfffffc01
 8001ca0:	0800a4f8 	.word	0x0800a4f8
 8001ca4:	000003ff 	.word	0x000003ff
 8001ca8:	feffffff 	.word	0xfeffffff
 8001cac:	000007fe 	.word	0x000007fe
 8001cb0:	000003f3 	.word	0x000003f3
 8001cb4:	fffffc0d 	.word	0xfffffc0d
 8001cb8:	fffff801 	.word	0xfffff801
 8001cbc:	4649      	mov	r1, r9
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	4319      	orrs	r1, r3
 8001cc2:	4689      	mov	r9, r1
 8001cc4:	2400      	movs	r4, #0
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	e66a      	b.n	80019a0 <__aeabi_ddiv+0x80>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2480      	movs	r4, #128	; 0x80
 8001cce:	469a      	mov	sl, r3
 8001cd0:	2500      	movs	r5, #0
 8001cd2:	4b8a      	ldr	r3, [pc, #552]	; (8001efc <__aeabi_ddiv+0x5dc>)
 8001cd4:	0324      	lsls	r4, r4, #12
 8001cd6:	e67a      	b.n	80019ce <__aeabi_ddiv+0xae>
 8001cd8:	2501      	movs	r5, #1
 8001cda:	426d      	negs	r5, r5
 8001cdc:	2301      	movs	r3, #1
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	2b38      	cmp	r3, #56	; 0x38
 8001ce2:	dd00      	ble.n	8001ce6 <__aeabi_ddiv+0x3c6>
 8001ce4:	e670      	b.n	80019c8 <__aeabi_ddiv+0xa8>
 8001ce6:	2b1f      	cmp	r3, #31
 8001ce8:	dc00      	bgt.n	8001cec <__aeabi_ddiv+0x3cc>
 8001cea:	e0bf      	b.n	8001e6c <__aeabi_ddiv+0x54c>
 8001cec:	211f      	movs	r1, #31
 8001cee:	4249      	negs	r1, r1
 8001cf0:	1a8a      	subs	r2, r1, r2
 8001cf2:	4641      	mov	r1, r8
 8001cf4:	40d1      	lsrs	r1, r2
 8001cf6:	000a      	movs	r2, r1
 8001cf8:	2b20      	cmp	r3, #32
 8001cfa:	d004      	beq.n	8001d06 <__aeabi_ddiv+0x3e6>
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	4b80      	ldr	r3, [pc, #512]	; (8001f00 <__aeabi_ddiv+0x5e0>)
 8001d00:	445b      	add	r3, fp
 8001d02:	4099      	lsls	r1, r3
 8001d04:	430d      	orrs	r5, r1
 8001d06:	1e6b      	subs	r3, r5, #1
 8001d08:	419d      	sbcs	r5, r3
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	432a      	orrs	r2, r5
 8001d0e:	001d      	movs	r5, r3
 8001d10:	2400      	movs	r4, #0
 8001d12:	4015      	ands	r5, r2
 8001d14:	4213      	tst	r3, r2
 8001d16:	d100      	bne.n	8001d1a <__aeabi_ddiv+0x3fa>
 8001d18:	e0d4      	b.n	8001ec4 <__aeabi_ddiv+0x5a4>
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	4011      	ands	r1, r2
 8001d20:	2904      	cmp	r1, #4
 8001d22:	d100      	bne.n	8001d26 <__aeabi_ddiv+0x406>
 8001d24:	e0cb      	b.n	8001ebe <__aeabi_ddiv+0x59e>
 8001d26:	1d11      	adds	r1, r2, #4
 8001d28:	4291      	cmp	r1, r2
 8001d2a:	4192      	sbcs	r2, r2
 8001d2c:	4252      	negs	r2, r2
 8001d2e:	189b      	adds	r3, r3, r2
 8001d30:	000a      	movs	r2, r1
 8001d32:	0219      	lsls	r1, r3, #8
 8001d34:	d400      	bmi.n	8001d38 <__aeabi_ddiv+0x418>
 8001d36:	e0c2      	b.n	8001ebe <__aeabi_ddiv+0x59e>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	2400      	movs	r4, #0
 8001d3c:	2500      	movs	r5, #0
 8001d3e:	e646      	b.n	80019ce <__aeabi_ddiv+0xae>
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	4641      	mov	r1, r8
 8001d44:	031b      	lsls	r3, r3, #12
 8001d46:	4219      	tst	r1, r3
 8001d48:	d008      	beq.n	8001d5c <__aeabi_ddiv+0x43c>
 8001d4a:	421c      	tst	r4, r3
 8001d4c:	d106      	bne.n	8001d5c <__aeabi_ddiv+0x43c>
 8001d4e:	431c      	orrs	r4, r3
 8001d50:	0324      	lsls	r4, r4, #12
 8001d52:	46ba      	mov	sl, r7
 8001d54:	0015      	movs	r5, r2
 8001d56:	4b69      	ldr	r3, [pc, #420]	; (8001efc <__aeabi_ddiv+0x5dc>)
 8001d58:	0b24      	lsrs	r4, r4, #12
 8001d5a:	e638      	b.n	80019ce <__aeabi_ddiv+0xae>
 8001d5c:	2480      	movs	r4, #128	; 0x80
 8001d5e:	4643      	mov	r3, r8
 8001d60:	0324      	lsls	r4, r4, #12
 8001d62:	431c      	orrs	r4, r3
 8001d64:	0324      	lsls	r4, r4, #12
 8001d66:	46b2      	mov	sl, r6
 8001d68:	4b64      	ldr	r3, [pc, #400]	; (8001efc <__aeabi_ddiv+0x5dc>)
 8001d6a:	0b24      	lsrs	r4, r4, #12
 8001d6c:	e62f      	b.n	80019ce <__aeabi_ddiv+0xae>
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d100      	bne.n	8001d74 <__aeabi_ddiv+0x454>
 8001d72:	e703      	b.n	8001b7c <__aeabi_ddiv+0x25c>
 8001d74:	19a6      	adds	r6, r4, r6
 8001d76:	1e68      	subs	r0, r5, #1
 8001d78:	42a6      	cmp	r6, r4
 8001d7a:	d200      	bcs.n	8001d7e <__aeabi_ddiv+0x45e>
 8001d7c:	e08d      	b.n	8001e9a <__aeabi_ddiv+0x57a>
 8001d7e:	428e      	cmp	r6, r1
 8001d80:	d200      	bcs.n	8001d84 <__aeabi_ddiv+0x464>
 8001d82:	e0a3      	b.n	8001ecc <__aeabi_ddiv+0x5ac>
 8001d84:	d100      	bne.n	8001d88 <__aeabi_ddiv+0x468>
 8001d86:	e0b3      	b.n	8001ef0 <__aeabi_ddiv+0x5d0>
 8001d88:	0005      	movs	r5, r0
 8001d8a:	e6f5      	b.n	8001b78 <__aeabi_ddiv+0x258>
 8001d8c:	42aa      	cmp	r2, r5
 8001d8e:	d900      	bls.n	8001d92 <__aeabi_ddiv+0x472>
 8001d90:	e639      	b.n	8001a06 <__aeabi_ddiv+0xe6>
 8001d92:	4643      	mov	r3, r8
 8001d94:	07de      	lsls	r6, r3, #31
 8001d96:	0858      	lsrs	r0, r3, #1
 8001d98:	086b      	lsrs	r3, r5, #1
 8001d9a:	431e      	orrs	r6, r3
 8001d9c:	07ed      	lsls	r5, r5, #31
 8001d9e:	e639      	b.n	8001a14 <__aeabi_ddiv+0xf4>
 8001da0:	4648      	mov	r0, r9
 8001da2:	f001 f937 	bl	8003014 <__clzsi2>
 8001da6:	0001      	movs	r1, r0
 8001da8:	0002      	movs	r2, r0
 8001daa:	3115      	adds	r1, #21
 8001dac:	3220      	adds	r2, #32
 8001dae:	291c      	cmp	r1, #28
 8001db0:	dc00      	bgt.n	8001db4 <__aeabi_ddiv+0x494>
 8001db2:	e72c      	b.n	8001c0e <__aeabi_ddiv+0x2ee>
 8001db4:	464b      	mov	r3, r9
 8001db6:	3808      	subs	r0, #8
 8001db8:	4083      	lsls	r3, r0
 8001dba:	2500      	movs	r5, #0
 8001dbc:	4698      	mov	r8, r3
 8001dbe:	e732      	b.n	8001c26 <__aeabi_ddiv+0x306>
 8001dc0:	f001 f928 	bl	8003014 <__clzsi2>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	001a      	movs	r2, r3
 8001dc8:	3215      	adds	r2, #21
 8001dca:	3020      	adds	r0, #32
 8001dcc:	2a1c      	cmp	r2, #28
 8001dce:	dc00      	bgt.n	8001dd2 <__aeabi_ddiv+0x4b2>
 8001dd0:	e700      	b.n	8001bd4 <__aeabi_ddiv+0x2b4>
 8001dd2:	4654      	mov	r4, sl
 8001dd4:	3b08      	subs	r3, #8
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	409c      	lsls	r4, r3
 8001dda:	e705      	b.n	8001be8 <__aeabi_ddiv+0x2c8>
 8001ddc:	1936      	adds	r6, r6, r4
 8001dde:	3b01      	subs	r3, #1
 8001de0:	42b4      	cmp	r4, r6
 8001de2:	d900      	bls.n	8001de6 <__aeabi_ddiv+0x4c6>
 8001de4:	e6a6      	b.n	8001b34 <__aeabi_ddiv+0x214>
 8001de6:	42b2      	cmp	r2, r6
 8001de8:	d800      	bhi.n	8001dec <__aeabi_ddiv+0x4cc>
 8001dea:	e6a3      	b.n	8001b34 <__aeabi_ddiv+0x214>
 8001dec:	1e83      	subs	r3, r0, #2
 8001dee:	1936      	adds	r6, r6, r4
 8001df0:	e6a0      	b.n	8001b34 <__aeabi_ddiv+0x214>
 8001df2:	1909      	adds	r1, r1, r4
 8001df4:	3d01      	subs	r5, #1
 8001df6:	428c      	cmp	r4, r1
 8001df8:	d900      	bls.n	8001dfc <__aeabi_ddiv+0x4dc>
 8001dfa:	e68d      	b.n	8001b18 <__aeabi_ddiv+0x1f8>
 8001dfc:	428a      	cmp	r2, r1
 8001dfe:	d800      	bhi.n	8001e02 <__aeabi_ddiv+0x4e2>
 8001e00:	e68a      	b.n	8001b18 <__aeabi_ddiv+0x1f8>
 8001e02:	1e85      	subs	r5, r0, #2
 8001e04:	1909      	adds	r1, r1, r4
 8001e06:	e687      	b.n	8001b18 <__aeabi_ddiv+0x1f8>
 8001e08:	230f      	movs	r3, #15
 8001e0a:	402b      	ands	r3, r5
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_ddiv+0x4f2>
 8001e10:	e6bc      	b.n	8001b8c <__aeabi_ddiv+0x26c>
 8001e12:	2305      	movs	r3, #5
 8001e14:	425b      	negs	r3, r3
 8001e16:	42ab      	cmp	r3, r5
 8001e18:	419b      	sbcs	r3, r3
 8001e1a:	3504      	adds	r5, #4
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	08ed      	lsrs	r5, r5, #3
 8001e20:	4498      	add	r8, r3
 8001e22:	e6b4      	b.n	8001b8e <__aeabi_ddiv+0x26e>
 8001e24:	42af      	cmp	r7, r5
 8001e26:	d900      	bls.n	8001e2a <__aeabi_ddiv+0x50a>
 8001e28:	e660      	b.n	8001aec <__aeabi_ddiv+0x1cc>
 8001e2a:	4282      	cmp	r2, r0
 8001e2c:	d804      	bhi.n	8001e38 <__aeabi_ddiv+0x518>
 8001e2e:	d000      	beq.n	8001e32 <__aeabi_ddiv+0x512>
 8001e30:	e65c      	b.n	8001aec <__aeabi_ddiv+0x1cc>
 8001e32:	42ae      	cmp	r6, r5
 8001e34:	d800      	bhi.n	8001e38 <__aeabi_ddiv+0x518>
 8001e36:	e659      	b.n	8001aec <__aeabi_ddiv+0x1cc>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	425b      	negs	r3, r3
 8001e3c:	469c      	mov	ip, r3
 8001e3e:	9b00      	ldr	r3, [sp, #0]
 8001e40:	44e0      	add	r8, ip
 8001e42:	469c      	mov	ip, r3
 8001e44:	4465      	add	r5, ip
 8001e46:	429d      	cmp	r5, r3
 8001e48:	419b      	sbcs	r3, r3
 8001e4a:	425b      	negs	r3, r3
 8001e4c:	191b      	adds	r3, r3, r4
 8001e4e:	18c0      	adds	r0, r0, r3
 8001e50:	e64d      	b.n	8001aee <__aeabi_ddiv+0x1ce>
 8001e52:	428a      	cmp	r2, r1
 8001e54:	d800      	bhi.n	8001e58 <__aeabi_ddiv+0x538>
 8001e56:	e60e      	b.n	8001a76 <__aeabi_ddiv+0x156>
 8001e58:	1e83      	subs	r3, r0, #2
 8001e5a:	1909      	adds	r1, r1, r4
 8001e5c:	e60b      	b.n	8001a76 <__aeabi_ddiv+0x156>
 8001e5e:	428a      	cmp	r2, r1
 8001e60:	d800      	bhi.n	8001e64 <__aeabi_ddiv+0x544>
 8001e62:	e5f4      	b.n	8001a4e <__aeabi_ddiv+0x12e>
 8001e64:	1e83      	subs	r3, r0, #2
 8001e66:	4698      	mov	r8, r3
 8001e68:	1909      	adds	r1, r1, r4
 8001e6a:	e5f0      	b.n	8001a4e <__aeabi_ddiv+0x12e>
 8001e6c:	4925      	ldr	r1, [pc, #148]	; (8001f04 <__aeabi_ddiv+0x5e4>)
 8001e6e:	0028      	movs	r0, r5
 8001e70:	4459      	add	r1, fp
 8001e72:	408d      	lsls	r5, r1
 8001e74:	4642      	mov	r2, r8
 8001e76:	408a      	lsls	r2, r1
 8001e78:	1e69      	subs	r1, r5, #1
 8001e7a:	418d      	sbcs	r5, r1
 8001e7c:	4641      	mov	r1, r8
 8001e7e:	40d8      	lsrs	r0, r3
 8001e80:	40d9      	lsrs	r1, r3
 8001e82:	4302      	orrs	r2, r0
 8001e84:	432a      	orrs	r2, r5
 8001e86:	000b      	movs	r3, r1
 8001e88:	0751      	lsls	r1, r2, #29
 8001e8a:	d100      	bne.n	8001e8e <__aeabi_ddiv+0x56e>
 8001e8c:	e751      	b.n	8001d32 <__aeabi_ddiv+0x412>
 8001e8e:	210f      	movs	r1, #15
 8001e90:	4011      	ands	r1, r2
 8001e92:	2904      	cmp	r1, #4
 8001e94:	d000      	beq.n	8001e98 <__aeabi_ddiv+0x578>
 8001e96:	e746      	b.n	8001d26 <__aeabi_ddiv+0x406>
 8001e98:	e74b      	b.n	8001d32 <__aeabi_ddiv+0x412>
 8001e9a:	0005      	movs	r5, r0
 8001e9c:	428e      	cmp	r6, r1
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_ddiv+0x582>
 8001ea0:	e66a      	b.n	8001b78 <__aeabi_ddiv+0x258>
 8001ea2:	9a00      	ldr	r2, [sp, #0]
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d000      	beq.n	8001eaa <__aeabi_ddiv+0x58a>
 8001ea8:	e666      	b.n	8001b78 <__aeabi_ddiv+0x258>
 8001eaa:	e667      	b.n	8001b7c <__aeabi_ddiv+0x25c>
 8001eac:	4a16      	ldr	r2, [pc, #88]	; (8001f08 <__aeabi_ddiv+0x5e8>)
 8001eae:	445a      	add	r2, fp
 8001eb0:	2a00      	cmp	r2, #0
 8001eb2:	dc00      	bgt.n	8001eb6 <__aeabi_ddiv+0x596>
 8001eb4:	e710      	b.n	8001cd8 <__aeabi_ddiv+0x3b8>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	2500      	movs	r5, #0
 8001eba:	4498      	add	r8, r3
 8001ebc:	e667      	b.n	8001b8e <__aeabi_ddiv+0x26e>
 8001ebe:	075d      	lsls	r5, r3, #29
 8001ec0:	025b      	lsls	r3, r3, #9
 8001ec2:	0b1c      	lsrs	r4, r3, #12
 8001ec4:	08d2      	lsrs	r2, r2, #3
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	4315      	orrs	r5, r2
 8001eca:	e580      	b.n	80019ce <__aeabi_ddiv+0xae>
 8001ecc:	9800      	ldr	r0, [sp, #0]
 8001ece:	3d02      	subs	r5, #2
 8001ed0:	0042      	lsls	r2, r0, #1
 8001ed2:	4282      	cmp	r2, r0
 8001ed4:	41bf      	sbcs	r7, r7
 8001ed6:	427f      	negs	r7, r7
 8001ed8:	193c      	adds	r4, r7, r4
 8001eda:	1936      	adds	r6, r6, r4
 8001edc:	9200      	str	r2, [sp, #0]
 8001ede:	e7dd      	b.n	8001e9c <__aeabi_ddiv+0x57c>
 8001ee0:	2480      	movs	r4, #128	; 0x80
 8001ee2:	4643      	mov	r3, r8
 8001ee4:	0324      	lsls	r4, r4, #12
 8001ee6:	431c      	orrs	r4, r3
 8001ee8:	0324      	lsls	r4, r4, #12
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__aeabi_ddiv+0x5dc>)
 8001eec:	0b24      	lsrs	r4, r4, #12
 8001eee:	e56e      	b.n	80019ce <__aeabi_ddiv+0xae>
 8001ef0:	9a00      	ldr	r2, [sp, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d3ea      	bcc.n	8001ecc <__aeabi_ddiv+0x5ac>
 8001ef6:	0005      	movs	r5, r0
 8001ef8:	e7d3      	b.n	8001ea2 <__aeabi_ddiv+0x582>
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	000007ff 	.word	0x000007ff
 8001f00:	0000043e 	.word	0x0000043e
 8001f04:	0000041e 	.word	0x0000041e
 8001f08:	000003ff 	.word	0x000003ff

08001f0c <__eqdf2>:
 8001f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0e:	464e      	mov	r6, r9
 8001f10:	4645      	mov	r5, r8
 8001f12:	46de      	mov	lr, fp
 8001f14:	4657      	mov	r7, sl
 8001f16:	4690      	mov	r8, r2
 8001f18:	b5e0      	push	{r5, r6, r7, lr}
 8001f1a:	0017      	movs	r7, r2
 8001f1c:	031a      	lsls	r2, r3, #12
 8001f1e:	0b12      	lsrs	r2, r2, #12
 8001f20:	0005      	movs	r5, r0
 8001f22:	4684      	mov	ip, r0
 8001f24:	4819      	ldr	r0, [pc, #100]	; (8001f8c <__eqdf2+0x80>)
 8001f26:	030e      	lsls	r6, r1, #12
 8001f28:	004c      	lsls	r4, r1, #1
 8001f2a:	4691      	mov	r9, r2
 8001f2c:	005a      	lsls	r2, r3, #1
 8001f2e:	0fdb      	lsrs	r3, r3, #31
 8001f30:	469b      	mov	fp, r3
 8001f32:	0b36      	lsrs	r6, r6, #12
 8001f34:	0d64      	lsrs	r4, r4, #21
 8001f36:	0fc9      	lsrs	r1, r1, #31
 8001f38:	0d52      	lsrs	r2, r2, #21
 8001f3a:	4284      	cmp	r4, r0
 8001f3c:	d019      	beq.n	8001f72 <__eqdf2+0x66>
 8001f3e:	4282      	cmp	r2, r0
 8001f40:	d010      	beq.n	8001f64 <__eqdf2+0x58>
 8001f42:	2001      	movs	r0, #1
 8001f44:	4294      	cmp	r4, r2
 8001f46:	d10e      	bne.n	8001f66 <__eqdf2+0x5a>
 8001f48:	454e      	cmp	r6, r9
 8001f4a:	d10c      	bne.n	8001f66 <__eqdf2+0x5a>
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	45c4      	cmp	ip, r8
 8001f50:	d109      	bne.n	8001f66 <__eqdf2+0x5a>
 8001f52:	4559      	cmp	r1, fp
 8001f54:	d017      	beq.n	8001f86 <__eqdf2+0x7a>
 8001f56:	2c00      	cmp	r4, #0
 8001f58:	d105      	bne.n	8001f66 <__eqdf2+0x5a>
 8001f5a:	0030      	movs	r0, r6
 8001f5c:	4328      	orrs	r0, r5
 8001f5e:	1e43      	subs	r3, r0, #1
 8001f60:	4198      	sbcs	r0, r3
 8001f62:	e000      	b.n	8001f66 <__eqdf2+0x5a>
 8001f64:	2001      	movs	r0, #1
 8001f66:	bcf0      	pop	{r4, r5, r6, r7}
 8001f68:	46bb      	mov	fp, r7
 8001f6a:	46b2      	mov	sl, r6
 8001f6c:	46a9      	mov	r9, r5
 8001f6e:	46a0      	mov	r8, r4
 8001f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f72:	0033      	movs	r3, r6
 8001f74:	2001      	movs	r0, #1
 8001f76:	432b      	orrs	r3, r5
 8001f78:	d1f5      	bne.n	8001f66 <__eqdf2+0x5a>
 8001f7a:	42a2      	cmp	r2, r4
 8001f7c:	d1f3      	bne.n	8001f66 <__eqdf2+0x5a>
 8001f7e:	464b      	mov	r3, r9
 8001f80:	433b      	orrs	r3, r7
 8001f82:	d1f0      	bne.n	8001f66 <__eqdf2+0x5a>
 8001f84:	e7e2      	b.n	8001f4c <__eqdf2+0x40>
 8001f86:	2000      	movs	r0, #0
 8001f88:	e7ed      	b.n	8001f66 <__eqdf2+0x5a>
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	000007ff 	.word	0x000007ff

08001f90 <__gedf2>:
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f92:	4647      	mov	r7, r8
 8001f94:	46ce      	mov	lr, r9
 8001f96:	0004      	movs	r4, r0
 8001f98:	0018      	movs	r0, r3
 8001f9a:	0016      	movs	r6, r2
 8001f9c:	031b      	lsls	r3, r3, #12
 8001f9e:	0b1b      	lsrs	r3, r3, #12
 8001fa0:	4d2d      	ldr	r5, [pc, #180]	; (8002058 <__gedf2+0xc8>)
 8001fa2:	004a      	lsls	r2, r1, #1
 8001fa4:	4699      	mov	r9, r3
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	0043      	lsls	r3, r0, #1
 8001faa:	030f      	lsls	r7, r1, #12
 8001fac:	46a4      	mov	ip, r4
 8001fae:	46b0      	mov	r8, r6
 8001fb0:	0b3f      	lsrs	r7, r7, #12
 8001fb2:	0d52      	lsrs	r2, r2, #21
 8001fb4:	0fc9      	lsrs	r1, r1, #31
 8001fb6:	0d5b      	lsrs	r3, r3, #21
 8001fb8:	0fc0      	lsrs	r0, r0, #31
 8001fba:	42aa      	cmp	r2, r5
 8001fbc:	d021      	beq.n	8002002 <__gedf2+0x72>
 8001fbe:	42ab      	cmp	r3, r5
 8001fc0:	d013      	beq.n	8001fea <__gedf2+0x5a>
 8001fc2:	2a00      	cmp	r2, #0
 8001fc4:	d122      	bne.n	800200c <__gedf2+0x7c>
 8001fc6:	433c      	orrs	r4, r7
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <__gedf2+0x42>
 8001fcc:	464d      	mov	r5, r9
 8001fce:	432e      	orrs	r6, r5
 8001fd0:	d022      	beq.n	8002018 <__gedf2+0x88>
 8001fd2:	2c00      	cmp	r4, #0
 8001fd4:	d010      	beq.n	8001ff8 <__gedf2+0x68>
 8001fd6:	4281      	cmp	r1, r0
 8001fd8:	d022      	beq.n	8002020 <__gedf2+0x90>
 8001fda:	2002      	movs	r0, #2
 8001fdc:	3901      	subs	r1, #1
 8001fde:	4008      	ands	r0, r1
 8001fe0:	3801      	subs	r0, #1
 8001fe2:	bcc0      	pop	{r6, r7}
 8001fe4:	46b9      	mov	r9, r7
 8001fe6:	46b0      	mov	r8, r6
 8001fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fea:	464d      	mov	r5, r9
 8001fec:	432e      	orrs	r6, r5
 8001fee:	d129      	bne.n	8002044 <__gedf2+0xb4>
 8001ff0:	2a00      	cmp	r2, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <__gedf2+0x46>
 8001ff4:	433c      	orrs	r4, r7
 8001ff6:	d1ee      	bne.n	8001fd6 <__gedf2+0x46>
 8001ff8:	2800      	cmp	r0, #0
 8001ffa:	d1f2      	bne.n	8001fe2 <__gedf2+0x52>
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	4240      	negs	r0, r0
 8002000:	e7ef      	b.n	8001fe2 <__gedf2+0x52>
 8002002:	003d      	movs	r5, r7
 8002004:	4325      	orrs	r5, r4
 8002006:	d11d      	bne.n	8002044 <__gedf2+0xb4>
 8002008:	4293      	cmp	r3, r2
 800200a:	d0ee      	beq.n	8001fea <__gedf2+0x5a>
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1e2      	bne.n	8001fd6 <__gedf2+0x46>
 8002010:	464c      	mov	r4, r9
 8002012:	4326      	orrs	r6, r4
 8002014:	d1df      	bne.n	8001fd6 <__gedf2+0x46>
 8002016:	e7e0      	b.n	8001fda <__gedf2+0x4a>
 8002018:	2000      	movs	r0, #0
 800201a:	2c00      	cmp	r4, #0
 800201c:	d0e1      	beq.n	8001fe2 <__gedf2+0x52>
 800201e:	e7dc      	b.n	8001fda <__gedf2+0x4a>
 8002020:	429a      	cmp	r2, r3
 8002022:	dc0a      	bgt.n	800203a <__gedf2+0xaa>
 8002024:	dbe8      	blt.n	8001ff8 <__gedf2+0x68>
 8002026:	454f      	cmp	r7, r9
 8002028:	d8d7      	bhi.n	8001fda <__gedf2+0x4a>
 800202a:	d00e      	beq.n	800204a <__gedf2+0xba>
 800202c:	2000      	movs	r0, #0
 800202e:	454f      	cmp	r7, r9
 8002030:	d2d7      	bcs.n	8001fe2 <__gedf2+0x52>
 8002032:	2900      	cmp	r1, #0
 8002034:	d0e2      	beq.n	8001ffc <__gedf2+0x6c>
 8002036:	0008      	movs	r0, r1
 8002038:	e7d3      	b.n	8001fe2 <__gedf2+0x52>
 800203a:	4243      	negs	r3, r0
 800203c:	4158      	adcs	r0, r3
 800203e:	0040      	lsls	r0, r0, #1
 8002040:	3801      	subs	r0, #1
 8002042:	e7ce      	b.n	8001fe2 <__gedf2+0x52>
 8002044:	2002      	movs	r0, #2
 8002046:	4240      	negs	r0, r0
 8002048:	e7cb      	b.n	8001fe2 <__gedf2+0x52>
 800204a:	45c4      	cmp	ip, r8
 800204c:	d8c5      	bhi.n	8001fda <__gedf2+0x4a>
 800204e:	2000      	movs	r0, #0
 8002050:	45c4      	cmp	ip, r8
 8002052:	d2c6      	bcs.n	8001fe2 <__gedf2+0x52>
 8002054:	e7ed      	b.n	8002032 <__gedf2+0xa2>
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	000007ff 	.word	0x000007ff

0800205c <__ledf2>:
 800205c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205e:	4647      	mov	r7, r8
 8002060:	46ce      	mov	lr, r9
 8002062:	0004      	movs	r4, r0
 8002064:	0018      	movs	r0, r3
 8002066:	0016      	movs	r6, r2
 8002068:	031b      	lsls	r3, r3, #12
 800206a:	0b1b      	lsrs	r3, r3, #12
 800206c:	4d2c      	ldr	r5, [pc, #176]	; (8002120 <__ledf2+0xc4>)
 800206e:	004a      	lsls	r2, r1, #1
 8002070:	4699      	mov	r9, r3
 8002072:	b580      	push	{r7, lr}
 8002074:	0043      	lsls	r3, r0, #1
 8002076:	030f      	lsls	r7, r1, #12
 8002078:	46a4      	mov	ip, r4
 800207a:	46b0      	mov	r8, r6
 800207c:	0b3f      	lsrs	r7, r7, #12
 800207e:	0d52      	lsrs	r2, r2, #21
 8002080:	0fc9      	lsrs	r1, r1, #31
 8002082:	0d5b      	lsrs	r3, r3, #21
 8002084:	0fc0      	lsrs	r0, r0, #31
 8002086:	42aa      	cmp	r2, r5
 8002088:	d00d      	beq.n	80020a6 <__ledf2+0x4a>
 800208a:	42ab      	cmp	r3, r5
 800208c:	d010      	beq.n	80020b0 <__ledf2+0x54>
 800208e:	2a00      	cmp	r2, #0
 8002090:	d127      	bne.n	80020e2 <__ledf2+0x86>
 8002092:	433c      	orrs	r4, r7
 8002094:	2b00      	cmp	r3, #0
 8002096:	d111      	bne.n	80020bc <__ledf2+0x60>
 8002098:	464d      	mov	r5, r9
 800209a:	432e      	orrs	r6, r5
 800209c:	d10e      	bne.n	80020bc <__ledf2+0x60>
 800209e:	2000      	movs	r0, #0
 80020a0:	2c00      	cmp	r4, #0
 80020a2:	d015      	beq.n	80020d0 <__ledf2+0x74>
 80020a4:	e00e      	b.n	80020c4 <__ledf2+0x68>
 80020a6:	003d      	movs	r5, r7
 80020a8:	4325      	orrs	r5, r4
 80020aa:	d110      	bne.n	80020ce <__ledf2+0x72>
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d118      	bne.n	80020e2 <__ledf2+0x86>
 80020b0:	464d      	mov	r5, r9
 80020b2:	432e      	orrs	r6, r5
 80020b4:	d10b      	bne.n	80020ce <__ledf2+0x72>
 80020b6:	2a00      	cmp	r2, #0
 80020b8:	d102      	bne.n	80020c0 <__ledf2+0x64>
 80020ba:	433c      	orrs	r4, r7
 80020bc:	2c00      	cmp	r4, #0
 80020be:	d00b      	beq.n	80020d8 <__ledf2+0x7c>
 80020c0:	4281      	cmp	r1, r0
 80020c2:	d014      	beq.n	80020ee <__ledf2+0x92>
 80020c4:	2002      	movs	r0, #2
 80020c6:	3901      	subs	r1, #1
 80020c8:	4008      	ands	r0, r1
 80020ca:	3801      	subs	r0, #1
 80020cc:	e000      	b.n	80020d0 <__ledf2+0x74>
 80020ce:	2002      	movs	r0, #2
 80020d0:	bcc0      	pop	{r6, r7}
 80020d2:	46b9      	mov	r9, r7
 80020d4:	46b0      	mov	r8, r6
 80020d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d8:	2800      	cmp	r0, #0
 80020da:	d1f9      	bne.n	80020d0 <__ledf2+0x74>
 80020dc:	2001      	movs	r0, #1
 80020de:	4240      	negs	r0, r0
 80020e0:	e7f6      	b.n	80020d0 <__ledf2+0x74>
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1ec      	bne.n	80020c0 <__ledf2+0x64>
 80020e6:	464c      	mov	r4, r9
 80020e8:	4326      	orrs	r6, r4
 80020ea:	d1e9      	bne.n	80020c0 <__ledf2+0x64>
 80020ec:	e7ea      	b.n	80020c4 <__ledf2+0x68>
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dd04      	ble.n	80020fc <__ledf2+0xa0>
 80020f2:	4243      	negs	r3, r0
 80020f4:	4158      	adcs	r0, r3
 80020f6:	0040      	lsls	r0, r0, #1
 80020f8:	3801      	subs	r0, #1
 80020fa:	e7e9      	b.n	80020d0 <__ledf2+0x74>
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbeb      	blt.n	80020d8 <__ledf2+0x7c>
 8002100:	454f      	cmp	r7, r9
 8002102:	d8df      	bhi.n	80020c4 <__ledf2+0x68>
 8002104:	d006      	beq.n	8002114 <__ledf2+0xb8>
 8002106:	2000      	movs	r0, #0
 8002108:	454f      	cmp	r7, r9
 800210a:	d2e1      	bcs.n	80020d0 <__ledf2+0x74>
 800210c:	2900      	cmp	r1, #0
 800210e:	d0e5      	beq.n	80020dc <__ledf2+0x80>
 8002110:	0008      	movs	r0, r1
 8002112:	e7dd      	b.n	80020d0 <__ledf2+0x74>
 8002114:	45c4      	cmp	ip, r8
 8002116:	d8d5      	bhi.n	80020c4 <__ledf2+0x68>
 8002118:	2000      	movs	r0, #0
 800211a:	45c4      	cmp	ip, r8
 800211c:	d2d8      	bcs.n	80020d0 <__ledf2+0x74>
 800211e:	e7f5      	b.n	800210c <__ledf2+0xb0>
 8002120:	000007ff 	.word	0x000007ff

08002124 <__aeabi_dmul>:
 8002124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002126:	4657      	mov	r7, sl
 8002128:	464e      	mov	r6, r9
 800212a:	4645      	mov	r5, r8
 800212c:	46de      	mov	lr, fp
 800212e:	b5e0      	push	{r5, r6, r7, lr}
 8002130:	4698      	mov	r8, r3
 8002132:	030c      	lsls	r4, r1, #12
 8002134:	004b      	lsls	r3, r1, #1
 8002136:	0006      	movs	r6, r0
 8002138:	4692      	mov	sl, r2
 800213a:	b087      	sub	sp, #28
 800213c:	0b24      	lsrs	r4, r4, #12
 800213e:	0d5b      	lsrs	r3, r3, #21
 8002140:	0fcf      	lsrs	r7, r1, #31
 8002142:	2b00      	cmp	r3, #0
 8002144:	d100      	bne.n	8002148 <__aeabi_dmul+0x24>
 8002146:	e15c      	b.n	8002402 <__aeabi_dmul+0x2de>
 8002148:	4ad9      	ldr	r2, [pc, #868]	; (80024b0 <__aeabi_dmul+0x38c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d100      	bne.n	8002150 <__aeabi_dmul+0x2c>
 800214e:	e175      	b.n	800243c <__aeabi_dmul+0x318>
 8002150:	0f42      	lsrs	r2, r0, #29
 8002152:	00e4      	lsls	r4, r4, #3
 8002154:	4314      	orrs	r4, r2
 8002156:	2280      	movs	r2, #128	; 0x80
 8002158:	0412      	lsls	r2, r2, #16
 800215a:	4314      	orrs	r4, r2
 800215c:	4ad5      	ldr	r2, [pc, #852]	; (80024b4 <__aeabi_dmul+0x390>)
 800215e:	00c5      	lsls	r5, r0, #3
 8002160:	4694      	mov	ip, r2
 8002162:	4463      	add	r3, ip
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2300      	movs	r3, #0
 8002168:	4699      	mov	r9, r3
 800216a:	469b      	mov	fp, r3
 800216c:	4643      	mov	r3, r8
 800216e:	4642      	mov	r2, r8
 8002170:	031e      	lsls	r6, r3, #12
 8002172:	0fd2      	lsrs	r2, r2, #31
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4650      	mov	r0, sl
 8002178:	4690      	mov	r8, r2
 800217a:	0b36      	lsrs	r6, r6, #12
 800217c:	0d5b      	lsrs	r3, r3, #21
 800217e:	d100      	bne.n	8002182 <__aeabi_dmul+0x5e>
 8002180:	e120      	b.n	80023c4 <__aeabi_dmul+0x2a0>
 8002182:	4acb      	ldr	r2, [pc, #812]	; (80024b0 <__aeabi_dmul+0x38c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d100      	bne.n	800218a <__aeabi_dmul+0x66>
 8002188:	e162      	b.n	8002450 <__aeabi_dmul+0x32c>
 800218a:	49ca      	ldr	r1, [pc, #808]	; (80024b4 <__aeabi_dmul+0x390>)
 800218c:	0f42      	lsrs	r2, r0, #29
 800218e:	468c      	mov	ip, r1
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	4463      	add	r3, ip
 8002194:	00f6      	lsls	r6, r6, #3
 8002196:	468c      	mov	ip, r1
 8002198:	4316      	orrs	r6, r2
 800219a:	2280      	movs	r2, #128	; 0x80
 800219c:	449c      	add	ip, r3
 800219e:	0412      	lsls	r2, r2, #16
 80021a0:	4663      	mov	r3, ip
 80021a2:	4316      	orrs	r6, r2
 80021a4:	00c2      	lsls	r2, r0, #3
 80021a6:	2000      	movs	r0, #0
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	9900      	ldr	r1, [sp, #0]
 80021ac:	4643      	mov	r3, r8
 80021ae:	3101      	adds	r1, #1
 80021b0:	468c      	mov	ip, r1
 80021b2:	4649      	mov	r1, r9
 80021b4:	407b      	eors	r3, r7
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	290f      	cmp	r1, #15
 80021ba:	d826      	bhi.n	800220a <__aeabi_dmul+0xe6>
 80021bc:	4bbe      	ldr	r3, [pc, #760]	; (80024b8 <__aeabi_dmul+0x394>)
 80021be:	0089      	lsls	r1, r1, #2
 80021c0:	5859      	ldr	r1, [r3, r1]
 80021c2:	468f      	mov	pc, r1
 80021c4:	4643      	mov	r3, r8
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	0034      	movs	r4, r6
 80021ca:	0015      	movs	r5, r2
 80021cc:	4683      	mov	fp, r0
 80021ce:	465b      	mov	r3, fp
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d016      	beq.n	8002202 <__aeabi_dmul+0xde>
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d100      	bne.n	80021da <__aeabi_dmul+0xb6>
 80021d8:	e203      	b.n	80025e2 <__aeabi_dmul+0x4be>
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d000      	beq.n	80021e0 <__aeabi_dmul+0xbc>
 80021de:	e0cd      	b.n	800237c <__aeabi_dmul+0x258>
 80021e0:	2200      	movs	r2, #0
 80021e2:	2400      	movs	r4, #0
 80021e4:	2500      	movs	r5, #0
 80021e6:	9b01      	ldr	r3, [sp, #4]
 80021e8:	0512      	lsls	r2, r2, #20
 80021ea:	4322      	orrs	r2, r4
 80021ec:	07db      	lsls	r3, r3, #31
 80021ee:	431a      	orrs	r2, r3
 80021f0:	0028      	movs	r0, r5
 80021f2:	0011      	movs	r1, r2
 80021f4:	b007      	add	sp, #28
 80021f6:	bcf0      	pop	{r4, r5, r6, r7}
 80021f8:	46bb      	mov	fp, r7
 80021fa:	46b2      	mov	sl, r6
 80021fc:	46a9      	mov	r9, r5
 80021fe:	46a0      	mov	r8, r4
 8002200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002202:	2400      	movs	r4, #0
 8002204:	2500      	movs	r5, #0
 8002206:	4aaa      	ldr	r2, [pc, #680]	; (80024b0 <__aeabi_dmul+0x38c>)
 8002208:	e7ed      	b.n	80021e6 <__aeabi_dmul+0xc2>
 800220a:	0c28      	lsrs	r0, r5, #16
 800220c:	042d      	lsls	r5, r5, #16
 800220e:	0c2d      	lsrs	r5, r5, #16
 8002210:	002b      	movs	r3, r5
 8002212:	0c11      	lsrs	r1, r2, #16
 8002214:	0412      	lsls	r2, r2, #16
 8002216:	0c12      	lsrs	r2, r2, #16
 8002218:	4353      	muls	r3, r2
 800221a:	4698      	mov	r8, r3
 800221c:	0013      	movs	r3, r2
 800221e:	002f      	movs	r7, r5
 8002220:	4343      	muls	r3, r0
 8002222:	4699      	mov	r9, r3
 8002224:	434f      	muls	r7, r1
 8002226:	444f      	add	r7, r9
 8002228:	46bb      	mov	fp, r7
 800222a:	4647      	mov	r7, r8
 800222c:	000b      	movs	r3, r1
 800222e:	0c3f      	lsrs	r7, r7, #16
 8002230:	46ba      	mov	sl, r7
 8002232:	4343      	muls	r3, r0
 8002234:	44da      	add	sl, fp
 8002236:	9302      	str	r3, [sp, #8]
 8002238:	45d1      	cmp	r9, sl
 800223a:	d904      	bls.n	8002246 <__aeabi_dmul+0x122>
 800223c:	2780      	movs	r7, #128	; 0x80
 800223e:	027f      	lsls	r7, r7, #9
 8002240:	46b9      	mov	r9, r7
 8002242:	444b      	add	r3, r9
 8002244:	9302      	str	r3, [sp, #8]
 8002246:	4653      	mov	r3, sl
 8002248:	0c1b      	lsrs	r3, r3, #16
 800224a:	469b      	mov	fp, r3
 800224c:	4653      	mov	r3, sl
 800224e:	041f      	lsls	r7, r3, #16
 8002250:	4643      	mov	r3, r8
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	0c1b      	lsrs	r3, r3, #16
 8002256:	4698      	mov	r8, r3
 8002258:	003b      	movs	r3, r7
 800225a:	4443      	add	r3, r8
 800225c:	9304      	str	r3, [sp, #16]
 800225e:	0c33      	lsrs	r3, r6, #16
 8002260:	0436      	lsls	r6, r6, #16
 8002262:	0c36      	lsrs	r6, r6, #16
 8002264:	4698      	mov	r8, r3
 8002266:	0033      	movs	r3, r6
 8002268:	4343      	muls	r3, r0
 800226a:	4699      	mov	r9, r3
 800226c:	4643      	mov	r3, r8
 800226e:	4343      	muls	r3, r0
 8002270:	002f      	movs	r7, r5
 8002272:	469a      	mov	sl, r3
 8002274:	4643      	mov	r3, r8
 8002276:	4377      	muls	r7, r6
 8002278:	435d      	muls	r5, r3
 800227a:	0c38      	lsrs	r0, r7, #16
 800227c:	444d      	add	r5, r9
 800227e:	1945      	adds	r5, r0, r5
 8002280:	45a9      	cmp	r9, r5
 8002282:	d903      	bls.n	800228c <__aeabi_dmul+0x168>
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	025b      	lsls	r3, r3, #9
 8002288:	4699      	mov	r9, r3
 800228a:	44ca      	add	sl, r9
 800228c:	043f      	lsls	r7, r7, #16
 800228e:	0c28      	lsrs	r0, r5, #16
 8002290:	0c3f      	lsrs	r7, r7, #16
 8002292:	042d      	lsls	r5, r5, #16
 8002294:	19ed      	adds	r5, r5, r7
 8002296:	0c27      	lsrs	r7, r4, #16
 8002298:	0424      	lsls	r4, r4, #16
 800229a:	0c24      	lsrs	r4, r4, #16
 800229c:	0003      	movs	r3, r0
 800229e:	0020      	movs	r0, r4
 80022a0:	4350      	muls	r0, r2
 80022a2:	437a      	muls	r2, r7
 80022a4:	4691      	mov	r9, r2
 80022a6:	003a      	movs	r2, r7
 80022a8:	4453      	add	r3, sl
 80022aa:	9305      	str	r3, [sp, #20]
 80022ac:	0c03      	lsrs	r3, r0, #16
 80022ae:	469a      	mov	sl, r3
 80022b0:	434a      	muls	r2, r1
 80022b2:	4361      	muls	r1, r4
 80022b4:	4449      	add	r1, r9
 80022b6:	4451      	add	r1, sl
 80022b8:	44ab      	add	fp, r5
 80022ba:	4589      	cmp	r9, r1
 80022bc:	d903      	bls.n	80022c6 <__aeabi_dmul+0x1a2>
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	025b      	lsls	r3, r3, #9
 80022c2:	4699      	mov	r9, r3
 80022c4:	444a      	add	r2, r9
 80022c6:	0400      	lsls	r0, r0, #16
 80022c8:	0c0b      	lsrs	r3, r1, #16
 80022ca:	0c00      	lsrs	r0, r0, #16
 80022cc:	0409      	lsls	r1, r1, #16
 80022ce:	1809      	adds	r1, r1, r0
 80022d0:	0020      	movs	r0, r4
 80022d2:	4699      	mov	r9, r3
 80022d4:	4643      	mov	r3, r8
 80022d6:	4370      	muls	r0, r6
 80022d8:	435c      	muls	r4, r3
 80022da:	437e      	muls	r6, r7
 80022dc:	435f      	muls	r7, r3
 80022de:	0c03      	lsrs	r3, r0, #16
 80022e0:	4698      	mov	r8, r3
 80022e2:	19a4      	adds	r4, r4, r6
 80022e4:	4444      	add	r4, r8
 80022e6:	444a      	add	r2, r9
 80022e8:	9703      	str	r7, [sp, #12]
 80022ea:	42a6      	cmp	r6, r4
 80022ec:	d904      	bls.n	80022f8 <__aeabi_dmul+0x1d4>
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	4698      	mov	r8, r3
 80022f4:	4447      	add	r7, r8
 80022f6:	9703      	str	r7, [sp, #12]
 80022f8:	0423      	lsls	r3, r4, #16
 80022fa:	9e02      	ldr	r6, [sp, #8]
 80022fc:	469a      	mov	sl, r3
 80022fe:	9b05      	ldr	r3, [sp, #20]
 8002300:	445e      	add	r6, fp
 8002302:	4698      	mov	r8, r3
 8002304:	42ae      	cmp	r6, r5
 8002306:	41ad      	sbcs	r5, r5
 8002308:	1876      	adds	r6, r6, r1
 800230a:	428e      	cmp	r6, r1
 800230c:	4189      	sbcs	r1, r1
 800230e:	0400      	lsls	r0, r0, #16
 8002310:	0c00      	lsrs	r0, r0, #16
 8002312:	4450      	add	r0, sl
 8002314:	4440      	add	r0, r8
 8002316:	426d      	negs	r5, r5
 8002318:	1947      	adds	r7, r0, r5
 800231a:	46b8      	mov	r8, r7
 800231c:	4693      	mov	fp, r2
 800231e:	4249      	negs	r1, r1
 8002320:	4689      	mov	r9, r1
 8002322:	44c3      	add	fp, r8
 8002324:	44d9      	add	r9, fp
 8002326:	4298      	cmp	r0, r3
 8002328:	4180      	sbcs	r0, r0
 800232a:	45a8      	cmp	r8, r5
 800232c:	41ad      	sbcs	r5, r5
 800232e:	4593      	cmp	fp, r2
 8002330:	4192      	sbcs	r2, r2
 8002332:	4589      	cmp	r9, r1
 8002334:	4189      	sbcs	r1, r1
 8002336:	426d      	negs	r5, r5
 8002338:	4240      	negs	r0, r0
 800233a:	4328      	orrs	r0, r5
 800233c:	0c24      	lsrs	r4, r4, #16
 800233e:	4252      	negs	r2, r2
 8002340:	4249      	negs	r1, r1
 8002342:	430a      	orrs	r2, r1
 8002344:	9b03      	ldr	r3, [sp, #12]
 8002346:	1900      	adds	r0, r0, r4
 8002348:	1880      	adds	r0, r0, r2
 800234a:	18c7      	adds	r7, r0, r3
 800234c:	464b      	mov	r3, r9
 800234e:	0ddc      	lsrs	r4, r3, #23
 8002350:	9b04      	ldr	r3, [sp, #16]
 8002352:	0275      	lsls	r5, r6, #9
 8002354:	431d      	orrs	r5, r3
 8002356:	1e6a      	subs	r2, r5, #1
 8002358:	4195      	sbcs	r5, r2
 800235a:	464b      	mov	r3, r9
 800235c:	0df6      	lsrs	r6, r6, #23
 800235e:	027f      	lsls	r7, r7, #9
 8002360:	4335      	orrs	r5, r6
 8002362:	025a      	lsls	r2, r3, #9
 8002364:	433c      	orrs	r4, r7
 8002366:	4315      	orrs	r5, r2
 8002368:	01fb      	lsls	r3, r7, #7
 800236a:	d400      	bmi.n	800236e <__aeabi_dmul+0x24a>
 800236c:	e11c      	b.n	80025a8 <__aeabi_dmul+0x484>
 800236e:	2101      	movs	r1, #1
 8002370:	086a      	lsrs	r2, r5, #1
 8002372:	400d      	ands	r5, r1
 8002374:	4315      	orrs	r5, r2
 8002376:	07e2      	lsls	r2, r4, #31
 8002378:	4315      	orrs	r5, r2
 800237a:	0864      	lsrs	r4, r4, #1
 800237c:	494f      	ldr	r1, [pc, #316]	; (80024bc <__aeabi_dmul+0x398>)
 800237e:	4461      	add	r1, ip
 8002380:	2900      	cmp	r1, #0
 8002382:	dc00      	bgt.n	8002386 <__aeabi_dmul+0x262>
 8002384:	e0b0      	b.n	80024e8 <__aeabi_dmul+0x3c4>
 8002386:	076b      	lsls	r3, r5, #29
 8002388:	d009      	beq.n	800239e <__aeabi_dmul+0x27a>
 800238a:	220f      	movs	r2, #15
 800238c:	402a      	ands	r2, r5
 800238e:	2a04      	cmp	r2, #4
 8002390:	d005      	beq.n	800239e <__aeabi_dmul+0x27a>
 8002392:	1d2a      	adds	r2, r5, #4
 8002394:	42aa      	cmp	r2, r5
 8002396:	41ad      	sbcs	r5, r5
 8002398:	426d      	negs	r5, r5
 800239a:	1964      	adds	r4, r4, r5
 800239c:	0015      	movs	r5, r2
 800239e:	01e3      	lsls	r3, r4, #7
 80023a0:	d504      	bpl.n	80023ac <__aeabi_dmul+0x288>
 80023a2:	2180      	movs	r1, #128	; 0x80
 80023a4:	4a46      	ldr	r2, [pc, #280]	; (80024c0 <__aeabi_dmul+0x39c>)
 80023a6:	00c9      	lsls	r1, r1, #3
 80023a8:	4014      	ands	r4, r2
 80023aa:	4461      	add	r1, ip
 80023ac:	4a45      	ldr	r2, [pc, #276]	; (80024c4 <__aeabi_dmul+0x3a0>)
 80023ae:	4291      	cmp	r1, r2
 80023b0:	dd00      	ble.n	80023b4 <__aeabi_dmul+0x290>
 80023b2:	e726      	b.n	8002202 <__aeabi_dmul+0xde>
 80023b4:	0762      	lsls	r2, r4, #29
 80023b6:	08ed      	lsrs	r5, r5, #3
 80023b8:	0264      	lsls	r4, r4, #9
 80023ba:	0549      	lsls	r1, r1, #21
 80023bc:	4315      	orrs	r5, r2
 80023be:	0b24      	lsrs	r4, r4, #12
 80023c0:	0d4a      	lsrs	r2, r1, #21
 80023c2:	e710      	b.n	80021e6 <__aeabi_dmul+0xc2>
 80023c4:	4652      	mov	r2, sl
 80023c6:	4332      	orrs	r2, r6
 80023c8:	d100      	bne.n	80023cc <__aeabi_dmul+0x2a8>
 80023ca:	e07f      	b.n	80024cc <__aeabi_dmul+0x3a8>
 80023cc:	2e00      	cmp	r6, #0
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dmul+0x2ae>
 80023d0:	e0dc      	b.n	800258c <__aeabi_dmul+0x468>
 80023d2:	0030      	movs	r0, r6
 80023d4:	f000 fe1e 	bl	8003014 <__clzsi2>
 80023d8:	0002      	movs	r2, r0
 80023da:	3a0b      	subs	r2, #11
 80023dc:	231d      	movs	r3, #29
 80023de:	0001      	movs	r1, r0
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	4652      	mov	r2, sl
 80023e4:	3908      	subs	r1, #8
 80023e6:	40da      	lsrs	r2, r3
 80023e8:	408e      	lsls	r6, r1
 80023ea:	4316      	orrs	r6, r2
 80023ec:	4652      	mov	r2, sl
 80023ee:	408a      	lsls	r2, r1
 80023f0:	9b00      	ldr	r3, [sp, #0]
 80023f2:	4935      	ldr	r1, [pc, #212]	; (80024c8 <__aeabi_dmul+0x3a4>)
 80023f4:	1a18      	subs	r0, r3, r0
 80023f6:	0003      	movs	r3, r0
 80023f8:	468c      	mov	ip, r1
 80023fa:	4463      	add	r3, ip
 80023fc:	2000      	movs	r0, #0
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	e6d3      	b.n	80021aa <__aeabi_dmul+0x86>
 8002402:	0025      	movs	r5, r4
 8002404:	4305      	orrs	r5, r0
 8002406:	d04a      	beq.n	800249e <__aeabi_dmul+0x37a>
 8002408:	2c00      	cmp	r4, #0
 800240a:	d100      	bne.n	800240e <__aeabi_dmul+0x2ea>
 800240c:	e0b0      	b.n	8002570 <__aeabi_dmul+0x44c>
 800240e:	0020      	movs	r0, r4
 8002410:	f000 fe00 	bl	8003014 <__clzsi2>
 8002414:	0001      	movs	r1, r0
 8002416:	0002      	movs	r2, r0
 8002418:	390b      	subs	r1, #11
 800241a:	231d      	movs	r3, #29
 800241c:	0010      	movs	r0, r2
 800241e:	1a5b      	subs	r3, r3, r1
 8002420:	0031      	movs	r1, r6
 8002422:	0035      	movs	r5, r6
 8002424:	3808      	subs	r0, #8
 8002426:	4084      	lsls	r4, r0
 8002428:	40d9      	lsrs	r1, r3
 800242a:	4085      	lsls	r5, r0
 800242c:	430c      	orrs	r4, r1
 800242e:	4826      	ldr	r0, [pc, #152]	; (80024c8 <__aeabi_dmul+0x3a4>)
 8002430:	1a83      	subs	r3, r0, r2
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2300      	movs	r3, #0
 8002436:	4699      	mov	r9, r3
 8002438:	469b      	mov	fp, r3
 800243a:	e697      	b.n	800216c <__aeabi_dmul+0x48>
 800243c:	0005      	movs	r5, r0
 800243e:	4325      	orrs	r5, r4
 8002440:	d126      	bne.n	8002490 <__aeabi_dmul+0x36c>
 8002442:	2208      	movs	r2, #8
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2302      	movs	r3, #2
 8002448:	2400      	movs	r4, #0
 800244a:	4691      	mov	r9, r2
 800244c:	469b      	mov	fp, r3
 800244e:	e68d      	b.n	800216c <__aeabi_dmul+0x48>
 8002450:	4652      	mov	r2, sl
 8002452:	9b00      	ldr	r3, [sp, #0]
 8002454:	4332      	orrs	r2, r6
 8002456:	d110      	bne.n	800247a <__aeabi_dmul+0x356>
 8002458:	4915      	ldr	r1, [pc, #84]	; (80024b0 <__aeabi_dmul+0x38c>)
 800245a:	2600      	movs	r6, #0
 800245c:	468c      	mov	ip, r1
 800245e:	4463      	add	r3, ip
 8002460:	4649      	mov	r1, r9
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2302      	movs	r3, #2
 8002466:	4319      	orrs	r1, r3
 8002468:	4689      	mov	r9, r1
 800246a:	2002      	movs	r0, #2
 800246c:	e69d      	b.n	80021aa <__aeabi_dmul+0x86>
 800246e:	465b      	mov	r3, fp
 8002470:	9701      	str	r7, [sp, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d000      	beq.n	8002478 <__aeabi_dmul+0x354>
 8002476:	e6ad      	b.n	80021d4 <__aeabi_dmul+0xb0>
 8002478:	e6c3      	b.n	8002202 <__aeabi_dmul+0xde>
 800247a:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <__aeabi_dmul+0x38c>)
 800247c:	2003      	movs	r0, #3
 800247e:	4694      	mov	ip, r2
 8002480:	4463      	add	r3, ip
 8002482:	464a      	mov	r2, r9
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2303      	movs	r3, #3
 8002488:	431a      	orrs	r2, r3
 800248a:	4691      	mov	r9, r2
 800248c:	4652      	mov	r2, sl
 800248e:	e68c      	b.n	80021aa <__aeabi_dmul+0x86>
 8002490:	220c      	movs	r2, #12
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2303      	movs	r3, #3
 8002496:	0005      	movs	r5, r0
 8002498:	4691      	mov	r9, r2
 800249a:	469b      	mov	fp, r3
 800249c:	e666      	b.n	800216c <__aeabi_dmul+0x48>
 800249e:	2304      	movs	r3, #4
 80024a0:	4699      	mov	r9, r3
 80024a2:	2300      	movs	r3, #0
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	2400      	movs	r4, #0
 80024aa:	469b      	mov	fp, r3
 80024ac:	e65e      	b.n	800216c <__aeabi_dmul+0x48>
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	000007ff 	.word	0x000007ff
 80024b4:	fffffc01 	.word	0xfffffc01
 80024b8:	0800a538 	.word	0x0800a538
 80024bc:	000003ff 	.word	0x000003ff
 80024c0:	feffffff 	.word	0xfeffffff
 80024c4:	000007fe 	.word	0x000007fe
 80024c8:	fffffc0d 	.word	0xfffffc0d
 80024cc:	4649      	mov	r1, r9
 80024ce:	2301      	movs	r3, #1
 80024d0:	4319      	orrs	r1, r3
 80024d2:	4689      	mov	r9, r1
 80024d4:	2600      	movs	r6, #0
 80024d6:	2001      	movs	r0, #1
 80024d8:	e667      	b.n	80021aa <__aeabi_dmul+0x86>
 80024da:	2300      	movs	r3, #0
 80024dc:	2480      	movs	r4, #128	; 0x80
 80024de:	2500      	movs	r5, #0
 80024e0:	4a43      	ldr	r2, [pc, #268]	; (80025f0 <__aeabi_dmul+0x4cc>)
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	0324      	lsls	r4, r4, #12
 80024e6:	e67e      	b.n	80021e6 <__aeabi_dmul+0xc2>
 80024e8:	2001      	movs	r0, #1
 80024ea:	1a40      	subs	r0, r0, r1
 80024ec:	2838      	cmp	r0, #56	; 0x38
 80024ee:	dd00      	ble.n	80024f2 <__aeabi_dmul+0x3ce>
 80024f0:	e676      	b.n	80021e0 <__aeabi_dmul+0xbc>
 80024f2:	281f      	cmp	r0, #31
 80024f4:	dd5b      	ble.n	80025ae <__aeabi_dmul+0x48a>
 80024f6:	221f      	movs	r2, #31
 80024f8:	0023      	movs	r3, r4
 80024fa:	4252      	negs	r2, r2
 80024fc:	1a51      	subs	r1, r2, r1
 80024fe:	40cb      	lsrs	r3, r1
 8002500:	0019      	movs	r1, r3
 8002502:	2820      	cmp	r0, #32
 8002504:	d003      	beq.n	800250e <__aeabi_dmul+0x3ea>
 8002506:	4a3b      	ldr	r2, [pc, #236]	; (80025f4 <__aeabi_dmul+0x4d0>)
 8002508:	4462      	add	r2, ip
 800250a:	4094      	lsls	r4, r2
 800250c:	4325      	orrs	r5, r4
 800250e:	1e6a      	subs	r2, r5, #1
 8002510:	4195      	sbcs	r5, r2
 8002512:	002a      	movs	r2, r5
 8002514:	430a      	orrs	r2, r1
 8002516:	2107      	movs	r1, #7
 8002518:	000d      	movs	r5, r1
 800251a:	2400      	movs	r4, #0
 800251c:	4015      	ands	r5, r2
 800251e:	4211      	tst	r1, r2
 8002520:	d05b      	beq.n	80025da <__aeabi_dmul+0x4b6>
 8002522:	210f      	movs	r1, #15
 8002524:	2400      	movs	r4, #0
 8002526:	4011      	ands	r1, r2
 8002528:	2904      	cmp	r1, #4
 800252a:	d053      	beq.n	80025d4 <__aeabi_dmul+0x4b0>
 800252c:	1d11      	adds	r1, r2, #4
 800252e:	4291      	cmp	r1, r2
 8002530:	4192      	sbcs	r2, r2
 8002532:	4252      	negs	r2, r2
 8002534:	18a4      	adds	r4, r4, r2
 8002536:	000a      	movs	r2, r1
 8002538:	0223      	lsls	r3, r4, #8
 800253a:	d54b      	bpl.n	80025d4 <__aeabi_dmul+0x4b0>
 800253c:	2201      	movs	r2, #1
 800253e:	2400      	movs	r4, #0
 8002540:	2500      	movs	r5, #0
 8002542:	e650      	b.n	80021e6 <__aeabi_dmul+0xc2>
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	031b      	lsls	r3, r3, #12
 8002548:	421c      	tst	r4, r3
 800254a:	d009      	beq.n	8002560 <__aeabi_dmul+0x43c>
 800254c:	421e      	tst	r6, r3
 800254e:	d107      	bne.n	8002560 <__aeabi_dmul+0x43c>
 8002550:	4333      	orrs	r3, r6
 8002552:	031c      	lsls	r4, r3, #12
 8002554:	4643      	mov	r3, r8
 8002556:	0015      	movs	r5, r2
 8002558:	0b24      	lsrs	r4, r4, #12
 800255a:	4a25      	ldr	r2, [pc, #148]	; (80025f0 <__aeabi_dmul+0x4cc>)
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	e642      	b.n	80021e6 <__aeabi_dmul+0xc2>
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	0312      	lsls	r2, r2, #12
 8002564:	4314      	orrs	r4, r2
 8002566:	0324      	lsls	r4, r4, #12
 8002568:	4a21      	ldr	r2, [pc, #132]	; (80025f0 <__aeabi_dmul+0x4cc>)
 800256a:	0b24      	lsrs	r4, r4, #12
 800256c:	9701      	str	r7, [sp, #4]
 800256e:	e63a      	b.n	80021e6 <__aeabi_dmul+0xc2>
 8002570:	f000 fd50 	bl	8003014 <__clzsi2>
 8002574:	0001      	movs	r1, r0
 8002576:	0002      	movs	r2, r0
 8002578:	3115      	adds	r1, #21
 800257a:	3220      	adds	r2, #32
 800257c:	291c      	cmp	r1, #28
 800257e:	dc00      	bgt.n	8002582 <__aeabi_dmul+0x45e>
 8002580:	e74b      	b.n	800241a <__aeabi_dmul+0x2f6>
 8002582:	0034      	movs	r4, r6
 8002584:	3808      	subs	r0, #8
 8002586:	2500      	movs	r5, #0
 8002588:	4084      	lsls	r4, r0
 800258a:	e750      	b.n	800242e <__aeabi_dmul+0x30a>
 800258c:	f000 fd42 	bl	8003014 <__clzsi2>
 8002590:	0003      	movs	r3, r0
 8002592:	001a      	movs	r2, r3
 8002594:	3215      	adds	r2, #21
 8002596:	3020      	adds	r0, #32
 8002598:	2a1c      	cmp	r2, #28
 800259a:	dc00      	bgt.n	800259e <__aeabi_dmul+0x47a>
 800259c:	e71e      	b.n	80023dc <__aeabi_dmul+0x2b8>
 800259e:	4656      	mov	r6, sl
 80025a0:	3b08      	subs	r3, #8
 80025a2:	2200      	movs	r2, #0
 80025a4:	409e      	lsls	r6, r3
 80025a6:	e723      	b.n	80023f0 <__aeabi_dmul+0x2cc>
 80025a8:	9b00      	ldr	r3, [sp, #0]
 80025aa:	469c      	mov	ip, r3
 80025ac:	e6e6      	b.n	800237c <__aeabi_dmul+0x258>
 80025ae:	4912      	ldr	r1, [pc, #72]	; (80025f8 <__aeabi_dmul+0x4d4>)
 80025b0:	0022      	movs	r2, r4
 80025b2:	4461      	add	r1, ip
 80025b4:	002e      	movs	r6, r5
 80025b6:	408d      	lsls	r5, r1
 80025b8:	408a      	lsls	r2, r1
 80025ba:	40c6      	lsrs	r6, r0
 80025bc:	1e69      	subs	r1, r5, #1
 80025be:	418d      	sbcs	r5, r1
 80025c0:	4332      	orrs	r2, r6
 80025c2:	432a      	orrs	r2, r5
 80025c4:	40c4      	lsrs	r4, r0
 80025c6:	0753      	lsls	r3, r2, #29
 80025c8:	d0b6      	beq.n	8002538 <__aeabi_dmul+0x414>
 80025ca:	210f      	movs	r1, #15
 80025cc:	4011      	ands	r1, r2
 80025ce:	2904      	cmp	r1, #4
 80025d0:	d1ac      	bne.n	800252c <__aeabi_dmul+0x408>
 80025d2:	e7b1      	b.n	8002538 <__aeabi_dmul+0x414>
 80025d4:	0765      	lsls	r5, r4, #29
 80025d6:	0264      	lsls	r4, r4, #9
 80025d8:	0b24      	lsrs	r4, r4, #12
 80025da:	08d2      	lsrs	r2, r2, #3
 80025dc:	4315      	orrs	r5, r2
 80025de:	2200      	movs	r2, #0
 80025e0:	e601      	b.n	80021e6 <__aeabi_dmul+0xc2>
 80025e2:	2280      	movs	r2, #128	; 0x80
 80025e4:	0312      	lsls	r2, r2, #12
 80025e6:	4314      	orrs	r4, r2
 80025e8:	0324      	lsls	r4, r4, #12
 80025ea:	4a01      	ldr	r2, [pc, #4]	; (80025f0 <__aeabi_dmul+0x4cc>)
 80025ec:	0b24      	lsrs	r4, r4, #12
 80025ee:	e5fa      	b.n	80021e6 <__aeabi_dmul+0xc2>
 80025f0:	000007ff 	.word	0x000007ff
 80025f4:	0000043e 	.word	0x0000043e
 80025f8:	0000041e 	.word	0x0000041e

080025fc <__aeabi_dsub>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	4657      	mov	r7, sl
 8002600:	464e      	mov	r6, r9
 8002602:	4645      	mov	r5, r8
 8002604:	46de      	mov	lr, fp
 8002606:	b5e0      	push	{r5, r6, r7, lr}
 8002608:	001e      	movs	r6, r3
 800260a:	0017      	movs	r7, r2
 800260c:	004a      	lsls	r2, r1, #1
 800260e:	030b      	lsls	r3, r1, #12
 8002610:	0d52      	lsrs	r2, r2, #21
 8002612:	0a5b      	lsrs	r3, r3, #9
 8002614:	4690      	mov	r8, r2
 8002616:	0f42      	lsrs	r2, r0, #29
 8002618:	431a      	orrs	r2, r3
 800261a:	0fcd      	lsrs	r5, r1, #31
 800261c:	4ccd      	ldr	r4, [pc, #820]	; (8002954 <__aeabi_dsub+0x358>)
 800261e:	0331      	lsls	r1, r6, #12
 8002620:	00c3      	lsls	r3, r0, #3
 8002622:	4694      	mov	ip, r2
 8002624:	0070      	lsls	r0, r6, #1
 8002626:	0f7a      	lsrs	r2, r7, #29
 8002628:	0a49      	lsrs	r1, r1, #9
 800262a:	00ff      	lsls	r7, r7, #3
 800262c:	469a      	mov	sl, r3
 800262e:	46b9      	mov	r9, r7
 8002630:	0d40      	lsrs	r0, r0, #21
 8002632:	0ff6      	lsrs	r6, r6, #31
 8002634:	4311      	orrs	r1, r2
 8002636:	42a0      	cmp	r0, r4
 8002638:	d100      	bne.n	800263c <__aeabi_dsub+0x40>
 800263a:	e0b1      	b.n	80027a0 <__aeabi_dsub+0x1a4>
 800263c:	2201      	movs	r2, #1
 800263e:	4056      	eors	r6, r2
 8002640:	46b3      	mov	fp, r6
 8002642:	42b5      	cmp	r5, r6
 8002644:	d100      	bne.n	8002648 <__aeabi_dsub+0x4c>
 8002646:	e088      	b.n	800275a <__aeabi_dsub+0x15e>
 8002648:	4642      	mov	r2, r8
 800264a:	1a12      	subs	r2, r2, r0
 800264c:	2a00      	cmp	r2, #0
 800264e:	dc00      	bgt.n	8002652 <__aeabi_dsub+0x56>
 8002650:	e0ae      	b.n	80027b0 <__aeabi_dsub+0x1b4>
 8002652:	2800      	cmp	r0, #0
 8002654:	d100      	bne.n	8002658 <__aeabi_dsub+0x5c>
 8002656:	e0c1      	b.n	80027dc <__aeabi_dsub+0x1e0>
 8002658:	48be      	ldr	r0, [pc, #760]	; (8002954 <__aeabi_dsub+0x358>)
 800265a:	4580      	cmp	r8, r0
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x64>
 800265e:	e151      	b.n	8002904 <__aeabi_dsub+0x308>
 8002660:	2080      	movs	r0, #128	; 0x80
 8002662:	0400      	lsls	r0, r0, #16
 8002664:	4301      	orrs	r1, r0
 8002666:	2a38      	cmp	r2, #56	; 0x38
 8002668:	dd00      	ble.n	800266c <__aeabi_dsub+0x70>
 800266a:	e17b      	b.n	8002964 <__aeabi_dsub+0x368>
 800266c:	2a1f      	cmp	r2, #31
 800266e:	dd00      	ble.n	8002672 <__aeabi_dsub+0x76>
 8002670:	e1ee      	b.n	8002a50 <__aeabi_dsub+0x454>
 8002672:	2020      	movs	r0, #32
 8002674:	003e      	movs	r6, r7
 8002676:	1a80      	subs	r0, r0, r2
 8002678:	000c      	movs	r4, r1
 800267a:	40d6      	lsrs	r6, r2
 800267c:	40d1      	lsrs	r1, r2
 800267e:	4087      	lsls	r7, r0
 8002680:	4662      	mov	r2, ip
 8002682:	4084      	lsls	r4, r0
 8002684:	1a52      	subs	r2, r2, r1
 8002686:	1e78      	subs	r0, r7, #1
 8002688:	4187      	sbcs	r7, r0
 800268a:	4694      	mov	ip, r2
 800268c:	4334      	orrs	r4, r6
 800268e:	4327      	orrs	r7, r4
 8002690:	1bdc      	subs	r4, r3, r7
 8002692:	42a3      	cmp	r3, r4
 8002694:	419b      	sbcs	r3, r3
 8002696:	4662      	mov	r2, ip
 8002698:	425b      	negs	r3, r3
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	4699      	mov	r9, r3
 800269e:	464b      	mov	r3, r9
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	d400      	bmi.n	80026a6 <__aeabi_dsub+0xaa>
 80026a4:	e118      	b.n	80028d8 <__aeabi_dsub+0x2dc>
 80026a6:	464b      	mov	r3, r9
 80026a8:	0258      	lsls	r0, r3, #9
 80026aa:	0a43      	lsrs	r3, r0, #9
 80026ac:	4699      	mov	r9, r3
 80026ae:	464b      	mov	r3, r9
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d100      	bne.n	80026b6 <__aeabi_dsub+0xba>
 80026b4:	e137      	b.n	8002926 <__aeabi_dsub+0x32a>
 80026b6:	4648      	mov	r0, r9
 80026b8:	f000 fcac 	bl	8003014 <__clzsi2>
 80026bc:	0001      	movs	r1, r0
 80026be:	3908      	subs	r1, #8
 80026c0:	2320      	movs	r3, #32
 80026c2:	0022      	movs	r2, r4
 80026c4:	4648      	mov	r0, r9
 80026c6:	1a5b      	subs	r3, r3, r1
 80026c8:	40da      	lsrs	r2, r3
 80026ca:	4088      	lsls	r0, r1
 80026cc:	408c      	lsls	r4, r1
 80026ce:	4643      	mov	r3, r8
 80026d0:	4310      	orrs	r0, r2
 80026d2:	4588      	cmp	r8, r1
 80026d4:	dd00      	ble.n	80026d8 <__aeabi_dsub+0xdc>
 80026d6:	e136      	b.n	8002946 <__aeabi_dsub+0x34a>
 80026d8:	1ac9      	subs	r1, r1, r3
 80026da:	1c4b      	adds	r3, r1, #1
 80026dc:	2b1f      	cmp	r3, #31
 80026de:	dd00      	ble.n	80026e2 <__aeabi_dsub+0xe6>
 80026e0:	e0ea      	b.n	80028b8 <__aeabi_dsub+0x2bc>
 80026e2:	2220      	movs	r2, #32
 80026e4:	0026      	movs	r6, r4
 80026e6:	1ad2      	subs	r2, r2, r3
 80026e8:	0001      	movs	r1, r0
 80026ea:	4094      	lsls	r4, r2
 80026ec:	40de      	lsrs	r6, r3
 80026ee:	40d8      	lsrs	r0, r3
 80026f0:	2300      	movs	r3, #0
 80026f2:	4091      	lsls	r1, r2
 80026f4:	1e62      	subs	r2, r4, #1
 80026f6:	4194      	sbcs	r4, r2
 80026f8:	4681      	mov	r9, r0
 80026fa:	4698      	mov	r8, r3
 80026fc:	4331      	orrs	r1, r6
 80026fe:	430c      	orrs	r4, r1
 8002700:	0763      	lsls	r3, r4, #29
 8002702:	d009      	beq.n	8002718 <__aeabi_dsub+0x11c>
 8002704:	230f      	movs	r3, #15
 8002706:	4023      	ands	r3, r4
 8002708:	2b04      	cmp	r3, #4
 800270a:	d005      	beq.n	8002718 <__aeabi_dsub+0x11c>
 800270c:	1d23      	adds	r3, r4, #4
 800270e:	42a3      	cmp	r3, r4
 8002710:	41a4      	sbcs	r4, r4
 8002712:	4264      	negs	r4, r4
 8002714:	44a1      	add	r9, r4
 8002716:	001c      	movs	r4, r3
 8002718:	464b      	mov	r3, r9
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	d400      	bmi.n	8002720 <__aeabi_dsub+0x124>
 800271e:	e0de      	b.n	80028de <__aeabi_dsub+0x2e2>
 8002720:	4641      	mov	r1, r8
 8002722:	4b8c      	ldr	r3, [pc, #560]	; (8002954 <__aeabi_dsub+0x358>)
 8002724:	3101      	adds	r1, #1
 8002726:	4299      	cmp	r1, r3
 8002728:	d100      	bne.n	800272c <__aeabi_dsub+0x130>
 800272a:	e0e7      	b.n	80028fc <__aeabi_dsub+0x300>
 800272c:	464b      	mov	r3, r9
 800272e:	488a      	ldr	r0, [pc, #552]	; (8002958 <__aeabi_dsub+0x35c>)
 8002730:	08e4      	lsrs	r4, r4, #3
 8002732:	4003      	ands	r3, r0
 8002734:	0018      	movs	r0, r3
 8002736:	0549      	lsls	r1, r1, #21
 8002738:	075b      	lsls	r3, r3, #29
 800273a:	0240      	lsls	r0, r0, #9
 800273c:	4323      	orrs	r3, r4
 800273e:	0d4a      	lsrs	r2, r1, #21
 8002740:	0b04      	lsrs	r4, r0, #12
 8002742:	0512      	lsls	r2, r2, #20
 8002744:	07ed      	lsls	r5, r5, #31
 8002746:	4322      	orrs	r2, r4
 8002748:	432a      	orrs	r2, r5
 800274a:	0018      	movs	r0, r3
 800274c:	0011      	movs	r1, r2
 800274e:	bcf0      	pop	{r4, r5, r6, r7}
 8002750:	46bb      	mov	fp, r7
 8002752:	46b2      	mov	sl, r6
 8002754:	46a9      	mov	r9, r5
 8002756:	46a0      	mov	r8, r4
 8002758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800275a:	4642      	mov	r2, r8
 800275c:	1a12      	subs	r2, r2, r0
 800275e:	2a00      	cmp	r2, #0
 8002760:	dd52      	ble.n	8002808 <__aeabi_dsub+0x20c>
 8002762:	2800      	cmp	r0, #0
 8002764:	d100      	bne.n	8002768 <__aeabi_dsub+0x16c>
 8002766:	e09c      	b.n	80028a2 <__aeabi_dsub+0x2a6>
 8002768:	45a0      	cmp	r8, r4
 800276a:	d100      	bne.n	800276e <__aeabi_dsub+0x172>
 800276c:	e0ca      	b.n	8002904 <__aeabi_dsub+0x308>
 800276e:	2080      	movs	r0, #128	; 0x80
 8002770:	0400      	lsls	r0, r0, #16
 8002772:	4301      	orrs	r1, r0
 8002774:	2a38      	cmp	r2, #56	; 0x38
 8002776:	dd00      	ble.n	800277a <__aeabi_dsub+0x17e>
 8002778:	e149      	b.n	8002a0e <__aeabi_dsub+0x412>
 800277a:	2a1f      	cmp	r2, #31
 800277c:	dc00      	bgt.n	8002780 <__aeabi_dsub+0x184>
 800277e:	e197      	b.n	8002ab0 <__aeabi_dsub+0x4b4>
 8002780:	0010      	movs	r0, r2
 8002782:	000e      	movs	r6, r1
 8002784:	3820      	subs	r0, #32
 8002786:	40c6      	lsrs	r6, r0
 8002788:	2a20      	cmp	r2, #32
 800278a:	d004      	beq.n	8002796 <__aeabi_dsub+0x19a>
 800278c:	2040      	movs	r0, #64	; 0x40
 800278e:	1a82      	subs	r2, r0, r2
 8002790:	4091      	lsls	r1, r2
 8002792:	430f      	orrs	r7, r1
 8002794:	46b9      	mov	r9, r7
 8002796:	464c      	mov	r4, r9
 8002798:	1e62      	subs	r2, r4, #1
 800279a:	4194      	sbcs	r4, r2
 800279c:	4334      	orrs	r4, r6
 800279e:	e13a      	b.n	8002a16 <__aeabi_dsub+0x41a>
 80027a0:	000a      	movs	r2, r1
 80027a2:	433a      	orrs	r2, r7
 80027a4:	d028      	beq.n	80027f8 <__aeabi_dsub+0x1fc>
 80027a6:	46b3      	mov	fp, r6
 80027a8:	42b5      	cmp	r5, r6
 80027aa:	d02b      	beq.n	8002804 <__aeabi_dsub+0x208>
 80027ac:	4a6b      	ldr	r2, [pc, #428]	; (800295c <__aeabi_dsub+0x360>)
 80027ae:	4442      	add	r2, r8
 80027b0:	2a00      	cmp	r2, #0
 80027b2:	d05d      	beq.n	8002870 <__aeabi_dsub+0x274>
 80027b4:	4642      	mov	r2, r8
 80027b6:	4644      	mov	r4, r8
 80027b8:	1a82      	subs	r2, r0, r2
 80027ba:	2c00      	cmp	r4, #0
 80027bc:	d000      	beq.n	80027c0 <__aeabi_dsub+0x1c4>
 80027be:	e0f5      	b.n	80029ac <__aeabi_dsub+0x3b0>
 80027c0:	4665      	mov	r5, ip
 80027c2:	431d      	orrs	r5, r3
 80027c4:	d100      	bne.n	80027c8 <__aeabi_dsub+0x1cc>
 80027c6:	e19c      	b.n	8002b02 <__aeabi_dsub+0x506>
 80027c8:	1e55      	subs	r5, r2, #1
 80027ca:	2a01      	cmp	r2, #1
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x1d4>
 80027ce:	e1fb      	b.n	8002bc8 <__aeabi_dsub+0x5cc>
 80027d0:	4c60      	ldr	r4, [pc, #384]	; (8002954 <__aeabi_dsub+0x358>)
 80027d2:	42a2      	cmp	r2, r4
 80027d4:	d100      	bne.n	80027d8 <__aeabi_dsub+0x1dc>
 80027d6:	e1bd      	b.n	8002b54 <__aeabi_dsub+0x558>
 80027d8:	002a      	movs	r2, r5
 80027da:	e0f0      	b.n	80029be <__aeabi_dsub+0x3c2>
 80027dc:	0008      	movs	r0, r1
 80027de:	4338      	orrs	r0, r7
 80027e0:	d100      	bne.n	80027e4 <__aeabi_dsub+0x1e8>
 80027e2:	e0c3      	b.n	800296c <__aeabi_dsub+0x370>
 80027e4:	1e50      	subs	r0, r2, #1
 80027e6:	2a01      	cmp	r2, #1
 80027e8:	d100      	bne.n	80027ec <__aeabi_dsub+0x1f0>
 80027ea:	e1a8      	b.n	8002b3e <__aeabi_dsub+0x542>
 80027ec:	4c59      	ldr	r4, [pc, #356]	; (8002954 <__aeabi_dsub+0x358>)
 80027ee:	42a2      	cmp	r2, r4
 80027f0:	d100      	bne.n	80027f4 <__aeabi_dsub+0x1f8>
 80027f2:	e087      	b.n	8002904 <__aeabi_dsub+0x308>
 80027f4:	0002      	movs	r2, r0
 80027f6:	e736      	b.n	8002666 <__aeabi_dsub+0x6a>
 80027f8:	2201      	movs	r2, #1
 80027fa:	4056      	eors	r6, r2
 80027fc:	46b3      	mov	fp, r6
 80027fe:	42b5      	cmp	r5, r6
 8002800:	d000      	beq.n	8002804 <__aeabi_dsub+0x208>
 8002802:	e721      	b.n	8002648 <__aeabi_dsub+0x4c>
 8002804:	4a55      	ldr	r2, [pc, #340]	; (800295c <__aeabi_dsub+0x360>)
 8002806:	4442      	add	r2, r8
 8002808:	2a00      	cmp	r2, #0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x212>
 800280c:	e0b5      	b.n	800297a <__aeabi_dsub+0x37e>
 800280e:	4642      	mov	r2, r8
 8002810:	4644      	mov	r4, r8
 8002812:	1a82      	subs	r2, r0, r2
 8002814:	2c00      	cmp	r4, #0
 8002816:	d100      	bne.n	800281a <__aeabi_dsub+0x21e>
 8002818:	e138      	b.n	8002a8c <__aeabi_dsub+0x490>
 800281a:	4e4e      	ldr	r6, [pc, #312]	; (8002954 <__aeabi_dsub+0x358>)
 800281c:	42b0      	cmp	r0, r6
 800281e:	d100      	bne.n	8002822 <__aeabi_dsub+0x226>
 8002820:	e1de      	b.n	8002be0 <__aeabi_dsub+0x5e4>
 8002822:	2680      	movs	r6, #128	; 0x80
 8002824:	4664      	mov	r4, ip
 8002826:	0436      	lsls	r6, r6, #16
 8002828:	4334      	orrs	r4, r6
 800282a:	46a4      	mov	ip, r4
 800282c:	2a38      	cmp	r2, #56	; 0x38
 800282e:	dd00      	ble.n	8002832 <__aeabi_dsub+0x236>
 8002830:	e196      	b.n	8002b60 <__aeabi_dsub+0x564>
 8002832:	2a1f      	cmp	r2, #31
 8002834:	dd00      	ble.n	8002838 <__aeabi_dsub+0x23c>
 8002836:	e224      	b.n	8002c82 <__aeabi_dsub+0x686>
 8002838:	2620      	movs	r6, #32
 800283a:	1ab4      	subs	r4, r6, r2
 800283c:	46a2      	mov	sl, r4
 800283e:	4664      	mov	r4, ip
 8002840:	4656      	mov	r6, sl
 8002842:	40b4      	lsls	r4, r6
 8002844:	46a1      	mov	r9, r4
 8002846:	001c      	movs	r4, r3
 8002848:	464e      	mov	r6, r9
 800284a:	40d4      	lsrs	r4, r2
 800284c:	4326      	orrs	r6, r4
 800284e:	0034      	movs	r4, r6
 8002850:	4656      	mov	r6, sl
 8002852:	40b3      	lsls	r3, r6
 8002854:	1e5e      	subs	r6, r3, #1
 8002856:	41b3      	sbcs	r3, r6
 8002858:	431c      	orrs	r4, r3
 800285a:	4663      	mov	r3, ip
 800285c:	40d3      	lsrs	r3, r2
 800285e:	18c9      	adds	r1, r1, r3
 8002860:	19e4      	adds	r4, r4, r7
 8002862:	42bc      	cmp	r4, r7
 8002864:	41bf      	sbcs	r7, r7
 8002866:	427f      	negs	r7, r7
 8002868:	46b9      	mov	r9, r7
 800286a:	4680      	mov	r8, r0
 800286c:	4489      	add	r9, r1
 800286e:	e0d8      	b.n	8002a22 <__aeabi_dsub+0x426>
 8002870:	4640      	mov	r0, r8
 8002872:	4c3b      	ldr	r4, [pc, #236]	; (8002960 <__aeabi_dsub+0x364>)
 8002874:	3001      	adds	r0, #1
 8002876:	4220      	tst	r0, r4
 8002878:	d000      	beq.n	800287c <__aeabi_dsub+0x280>
 800287a:	e0b4      	b.n	80029e6 <__aeabi_dsub+0x3ea>
 800287c:	4640      	mov	r0, r8
 800287e:	2800      	cmp	r0, #0
 8002880:	d000      	beq.n	8002884 <__aeabi_dsub+0x288>
 8002882:	e144      	b.n	8002b0e <__aeabi_dsub+0x512>
 8002884:	4660      	mov	r0, ip
 8002886:	4318      	orrs	r0, r3
 8002888:	d100      	bne.n	800288c <__aeabi_dsub+0x290>
 800288a:	e190      	b.n	8002bae <__aeabi_dsub+0x5b2>
 800288c:	0008      	movs	r0, r1
 800288e:	4338      	orrs	r0, r7
 8002890:	d000      	beq.n	8002894 <__aeabi_dsub+0x298>
 8002892:	e1aa      	b.n	8002bea <__aeabi_dsub+0x5ee>
 8002894:	4661      	mov	r1, ip
 8002896:	08db      	lsrs	r3, r3, #3
 8002898:	0749      	lsls	r1, r1, #29
 800289a:	430b      	orrs	r3, r1
 800289c:	4661      	mov	r1, ip
 800289e:	08cc      	lsrs	r4, r1, #3
 80028a0:	e027      	b.n	80028f2 <__aeabi_dsub+0x2f6>
 80028a2:	0008      	movs	r0, r1
 80028a4:	4338      	orrs	r0, r7
 80028a6:	d061      	beq.n	800296c <__aeabi_dsub+0x370>
 80028a8:	1e50      	subs	r0, r2, #1
 80028aa:	2a01      	cmp	r2, #1
 80028ac:	d100      	bne.n	80028b0 <__aeabi_dsub+0x2b4>
 80028ae:	e139      	b.n	8002b24 <__aeabi_dsub+0x528>
 80028b0:	42a2      	cmp	r2, r4
 80028b2:	d027      	beq.n	8002904 <__aeabi_dsub+0x308>
 80028b4:	0002      	movs	r2, r0
 80028b6:	e75d      	b.n	8002774 <__aeabi_dsub+0x178>
 80028b8:	0002      	movs	r2, r0
 80028ba:	391f      	subs	r1, #31
 80028bc:	40ca      	lsrs	r2, r1
 80028be:	0011      	movs	r1, r2
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d003      	beq.n	80028cc <__aeabi_dsub+0x2d0>
 80028c4:	2240      	movs	r2, #64	; 0x40
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	4098      	lsls	r0, r3
 80028ca:	4304      	orrs	r4, r0
 80028cc:	1e63      	subs	r3, r4, #1
 80028ce:	419c      	sbcs	r4, r3
 80028d0:	2300      	movs	r3, #0
 80028d2:	4699      	mov	r9, r3
 80028d4:	4698      	mov	r8, r3
 80028d6:	430c      	orrs	r4, r1
 80028d8:	0763      	lsls	r3, r4, #29
 80028da:	d000      	beq.n	80028de <__aeabi_dsub+0x2e2>
 80028dc:	e712      	b.n	8002704 <__aeabi_dsub+0x108>
 80028de:	464b      	mov	r3, r9
 80028e0:	464a      	mov	r2, r9
 80028e2:	08e4      	lsrs	r4, r4, #3
 80028e4:	075b      	lsls	r3, r3, #29
 80028e6:	4323      	orrs	r3, r4
 80028e8:	08d4      	lsrs	r4, r2, #3
 80028ea:	4642      	mov	r2, r8
 80028ec:	4919      	ldr	r1, [pc, #100]	; (8002954 <__aeabi_dsub+0x358>)
 80028ee:	428a      	cmp	r2, r1
 80028f0:	d00e      	beq.n	8002910 <__aeabi_dsub+0x314>
 80028f2:	0324      	lsls	r4, r4, #12
 80028f4:	0552      	lsls	r2, r2, #21
 80028f6:	0b24      	lsrs	r4, r4, #12
 80028f8:	0d52      	lsrs	r2, r2, #21
 80028fa:	e722      	b.n	8002742 <__aeabi_dsub+0x146>
 80028fc:	000a      	movs	r2, r1
 80028fe:	2400      	movs	r4, #0
 8002900:	2300      	movs	r3, #0
 8002902:	e71e      	b.n	8002742 <__aeabi_dsub+0x146>
 8002904:	08db      	lsrs	r3, r3, #3
 8002906:	4662      	mov	r2, ip
 8002908:	0752      	lsls	r2, r2, #29
 800290a:	4313      	orrs	r3, r2
 800290c:	4662      	mov	r2, ip
 800290e:	08d4      	lsrs	r4, r2, #3
 8002910:	001a      	movs	r2, r3
 8002912:	4322      	orrs	r2, r4
 8002914:	d100      	bne.n	8002918 <__aeabi_dsub+0x31c>
 8002916:	e1fc      	b.n	8002d12 <__aeabi_dsub+0x716>
 8002918:	2280      	movs	r2, #128	; 0x80
 800291a:	0312      	lsls	r2, r2, #12
 800291c:	4314      	orrs	r4, r2
 800291e:	0324      	lsls	r4, r4, #12
 8002920:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <__aeabi_dsub+0x358>)
 8002922:	0b24      	lsrs	r4, r4, #12
 8002924:	e70d      	b.n	8002742 <__aeabi_dsub+0x146>
 8002926:	0020      	movs	r0, r4
 8002928:	f000 fb74 	bl	8003014 <__clzsi2>
 800292c:	0001      	movs	r1, r0
 800292e:	3118      	adds	r1, #24
 8002930:	291f      	cmp	r1, #31
 8002932:	dc00      	bgt.n	8002936 <__aeabi_dsub+0x33a>
 8002934:	e6c4      	b.n	80026c0 <__aeabi_dsub+0xc4>
 8002936:	3808      	subs	r0, #8
 8002938:	4084      	lsls	r4, r0
 800293a:	4643      	mov	r3, r8
 800293c:	0020      	movs	r0, r4
 800293e:	2400      	movs	r4, #0
 8002940:	4588      	cmp	r8, r1
 8002942:	dc00      	bgt.n	8002946 <__aeabi_dsub+0x34a>
 8002944:	e6c8      	b.n	80026d8 <__aeabi_dsub+0xdc>
 8002946:	4a04      	ldr	r2, [pc, #16]	; (8002958 <__aeabi_dsub+0x35c>)
 8002948:	1a5b      	subs	r3, r3, r1
 800294a:	4010      	ands	r0, r2
 800294c:	4698      	mov	r8, r3
 800294e:	4681      	mov	r9, r0
 8002950:	e6d6      	b.n	8002700 <__aeabi_dsub+0x104>
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	000007ff 	.word	0x000007ff
 8002958:	ff7fffff 	.word	0xff7fffff
 800295c:	fffff801 	.word	0xfffff801
 8002960:	000007fe 	.word	0x000007fe
 8002964:	430f      	orrs	r7, r1
 8002966:	1e7a      	subs	r2, r7, #1
 8002968:	4197      	sbcs	r7, r2
 800296a:	e691      	b.n	8002690 <__aeabi_dsub+0x94>
 800296c:	4661      	mov	r1, ip
 800296e:	08db      	lsrs	r3, r3, #3
 8002970:	0749      	lsls	r1, r1, #29
 8002972:	430b      	orrs	r3, r1
 8002974:	4661      	mov	r1, ip
 8002976:	08cc      	lsrs	r4, r1, #3
 8002978:	e7b8      	b.n	80028ec <__aeabi_dsub+0x2f0>
 800297a:	4640      	mov	r0, r8
 800297c:	4cd3      	ldr	r4, [pc, #844]	; (8002ccc <__aeabi_dsub+0x6d0>)
 800297e:	3001      	adds	r0, #1
 8002980:	4220      	tst	r0, r4
 8002982:	d000      	beq.n	8002986 <__aeabi_dsub+0x38a>
 8002984:	e0a2      	b.n	8002acc <__aeabi_dsub+0x4d0>
 8002986:	4640      	mov	r0, r8
 8002988:	2800      	cmp	r0, #0
 800298a:	d000      	beq.n	800298e <__aeabi_dsub+0x392>
 800298c:	e101      	b.n	8002b92 <__aeabi_dsub+0x596>
 800298e:	4660      	mov	r0, ip
 8002990:	4318      	orrs	r0, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x39a>
 8002994:	e15e      	b.n	8002c54 <__aeabi_dsub+0x658>
 8002996:	0008      	movs	r0, r1
 8002998:	4338      	orrs	r0, r7
 800299a:	d000      	beq.n	800299e <__aeabi_dsub+0x3a2>
 800299c:	e15f      	b.n	8002c5e <__aeabi_dsub+0x662>
 800299e:	4661      	mov	r1, ip
 80029a0:	08db      	lsrs	r3, r3, #3
 80029a2:	0749      	lsls	r1, r1, #29
 80029a4:	430b      	orrs	r3, r1
 80029a6:	4661      	mov	r1, ip
 80029a8:	08cc      	lsrs	r4, r1, #3
 80029aa:	e7a2      	b.n	80028f2 <__aeabi_dsub+0x2f6>
 80029ac:	4dc8      	ldr	r5, [pc, #800]	; (8002cd0 <__aeabi_dsub+0x6d4>)
 80029ae:	42a8      	cmp	r0, r5
 80029b0:	d100      	bne.n	80029b4 <__aeabi_dsub+0x3b8>
 80029b2:	e0cf      	b.n	8002b54 <__aeabi_dsub+0x558>
 80029b4:	2580      	movs	r5, #128	; 0x80
 80029b6:	4664      	mov	r4, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	432c      	orrs	r4, r5
 80029bc:	46a4      	mov	ip, r4
 80029be:	2a38      	cmp	r2, #56	; 0x38
 80029c0:	dc56      	bgt.n	8002a70 <__aeabi_dsub+0x474>
 80029c2:	2a1f      	cmp	r2, #31
 80029c4:	dd00      	ble.n	80029c8 <__aeabi_dsub+0x3cc>
 80029c6:	e0d1      	b.n	8002b6c <__aeabi_dsub+0x570>
 80029c8:	2520      	movs	r5, #32
 80029ca:	001e      	movs	r6, r3
 80029cc:	1aad      	subs	r5, r5, r2
 80029ce:	4664      	mov	r4, ip
 80029d0:	40ab      	lsls	r3, r5
 80029d2:	40ac      	lsls	r4, r5
 80029d4:	40d6      	lsrs	r6, r2
 80029d6:	1e5d      	subs	r5, r3, #1
 80029d8:	41ab      	sbcs	r3, r5
 80029da:	4334      	orrs	r4, r6
 80029dc:	4323      	orrs	r3, r4
 80029de:	4664      	mov	r4, ip
 80029e0:	40d4      	lsrs	r4, r2
 80029e2:	1b09      	subs	r1, r1, r4
 80029e4:	e049      	b.n	8002a7a <__aeabi_dsub+0x47e>
 80029e6:	4660      	mov	r0, ip
 80029e8:	1bdc      	subs	r4, r3, r7
 80029ea:	1a46      	subs	r6, r0, r1
 80029ec:	42a3      	cmp	r3, r4
 80029ee:	4180      	sbcs	r0, r0
 80029f0:	4240      	negs	r0, r0
 80029f2:	4681      	mov	r9, r0
 80029f4:	0030      	movs	r0, r6
 80029f6:	464e      	mov	r6, r9
 80029f8:	1b80      	subs	r0, r0, r6
 80029fa:	4681      	mov	r9, r0
 80029fc:	0200      	lsls	r0, r0, #8
 80029fe:	d476      	bmi.n	8002aee <__aeabi_dsub+0x4f2>
 8002a00:	464b      	mov	r3, r9
 8002a02:	4323      	orrs	r3, r4
 8002a04:	d000      	beq.n	8002a08 <__aeabi_dsub+0x40c>
 8002a06:	e652      	b.n	80026ae <__aeabi_dsub+0xb2>
 8002a08:	2400      	movs	r4, #0
 8002a0a:	2500      	movs	r5, #0
 8002a0c:	e771      	b.n	80028f2 <__aeabi_dsub+0x2f6>
 8002a0e:	4339      	orrs	r1, r7
 8002a10:	000c      	movs	r4, r1
 8002a12:	1e62      	subs	r2, r4, #1
 8002a14:	4194      	sbcs	r4, r2
 8002a16:	18e4      	adds	r4, r4, r3
 8002a18:	429c      	cmp	r4, r3
 8002a1a:	419b      	sbcs	r3, r3
 8002a1c:	425b      	negs	r3, r3
 8002a1e:	4463      	add	r3, ip
 8002a20:	4699      	mov	r9, r3
 8002a22:	464b      	mov	r3, r9
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	d400      	bmi.n	8002a2a <__aeabi_dsub+0x42e>
 8002a28:	e756      	b.n	80028d8 <__aeabi_dsub+0x2dc>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	469c      	mov	ip, r3
 8002a2e:	4ba8      	ldr	r3, [pc, #672]	; (8002cd0 <__aeabi_dsub+0x6d4>)
 8002a30:	44e0      	add	r8, ip
 8002a32:	4598      	cmp	r8, r3
 8002a34:	d038      	beq.n	8002aa8 <__aeabi_dsub+0x4ac>
 8002a36:	464b      	mov	r3, r9
 8002a38:	48a6      	ldr	r0, [pc, #664]	; (8002cd4 <__aeabi_dsub+0x6d8>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4003      	ands	r3, r0
 8002a3e:	0018      	movs	r0, r3
 8002a40:	0863      	lsrs	r3, r4, #1
 8002a42:	4014      	ands	r4, r2
 8002a44:	431c      	orrs	r4, r3
 8002a46:	07c3      	lsls	r3, r0, #31
 8002a48:	431c      	orrs	r4, r3
 8002a4a:	0843      	lsrs	r3, r0, #1
 8002a4c:	4699      	mov	r9, r3
 8002a4e:	e657      	b.n	8002700 <__aeabi_dsub+0x104>
 8002a50:	0010      	movs	r0, r2
 8002a52:	000e      	movs	r6, r1
 8002a54:	3820      	subs	r0, #32
 8002a56:	40c6      	lsrs	r6, r0
 8002a58:	2a20      	cmp	r2, #32
 8002a5a:	d004      	beq.n	8002a66 <__aeabi_dsub+0x46a>
 8002a5c:	2040      	movs	r0, #64	; 0x40
 8002a5e:	1a82      	subs	r2, r0, r2
 8002a60:	4091      	lsls	r1, r2
 8002a62:	430f      	orrs	r7, r1
 8002a64:	46b9      	mov	r9, r7
 8002a66:	464f      	mov	r7, r9
 8002a68:	1e7a      	subs	r2, r7, #1
 8002a6a:	4197      	sbcs	r7, r2
 8002a6c:	4337      	orrs	r7, r6
 8002a6e:	e60f      	b.n	8002690 <__aeabi_dsub+0x94>
 8002a70:	4662      	mov	r2, ip
 8002a72:	431a      	orrs	r2, r3
 8002a74:	0013      	movs	r3, r2
 8002a76:	1e5a      	subs	r2, r3, #1
 8002a78:	4193      	sbcs	r3, r2
 8002a7a:	1afc      	subs	r4, r7, r3
 8002a7c:	42a7      	cmp	r7, r4
 8002a7e:	41bf      	sbcs	r7, r7
 8002a80:	427f      	negs	r7, r7
 8002a82:	1bcb      	subs	r3, r1, r7
 8002a84:	4699      	mov	r9, r3
 8002a86:	465d      	mov	r5, fp
 8002a88:	4680      	mov	r8, r0
 8002a8a:	e608      	b.n	800269e <__aeabi_dsub+0xa2>
 8002a8c:	4666      	mov	r6, ip
 8002a8e:	431e      	orrs	r6, r3
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x498>
 8002a92:	e0be      	b.n	8002c12 <__aeabi_dsub+0x616>
 8002a94:	1e56      	subs	r6, r2, #1
 8002a96:	2a01      	cmp	r2, #1
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x4a0>
 8002a9a:	e109      	b.n	8002cb0 <__aeabi_dsub+0x6b4>
 8002a9c:	4c8c      	ldr	r4, [pc, #560]	; (8002cd0 <__aeabi_dsub+0x6d4>)
 8002a9e:	42a2      	cmp	r2, r4
 8002aa0:	d100      	bne.n	8002aa4 <__aeabi_dsub+0x4a8>
 8002aa2:	e119      	b.n	8002cd8 <__aeabi_dsub+0x6dc>
 8002aa4:	0032      	movs	r2, r6
 8002aa6:	e6c1      	b.n	800282c <__aeabi_dsub+0x230>
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	2400      	movs	r4, #0
 8002aac:	2300      	movs	r3, #0
 8002aae:	e648      	b.n	8002742 <__aeabi_dsub+0x146>
 8002ab0:	2020      	movs	r0, #32
 8002ab2:	000c      	movs	r4, r1
 8002ab4:	1a80      	subs	r0, r0, r2
 8002ab6:	003e      	movs	r6, r7
 8002ab8:	4087      	lsls	r7, r0
 8002aba:	4084      	lsls	r4, r0
 8002abc:	40d6      	lsrs	r6, r2
 8002abe:	1e78      	subs	r0, r7, #1
 8002ac0:	4187      	sbcs	r7, r0
 8002ac2:	40d1      	lsrs	r1, r2
 8002ac4:	4334      	orrs	r4, r6
 8002ac6:	433c      	orrs	r4, r7
 8002ac8:	448c      	add	ip, r1
 8002aca:	e7a4      	b.n	8002a16 <__aeabi_dsub+0x41a>
 8002acc:	4a80      	ldr	r2, [pc, #512]	; (8002cd0 <__aeabi_dsub+0x6d4>)
 8002ace:	4290      	cmp	r0, r2
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dsub+0x4d8>
 8002ad2:	e0e9      	b.n	8002ca8 <__aeabi_dsub+0x6ac>
 8002ad4:	19df      	adds	r7, r3, r7
 8002ad6:	429f      	cmp	r7, r3
 8002ad8:	419b      	sbcs	r3, r3
 8002ada:	4461      	add	r1, ip
 8002adc:	425b      	negs	r3, r3
 8002ade:	18c9      	adds	r1, r1, r3
 8002ae0:	07cc      	lsls	r4, r1, #31
 8002ae2:	087f      	lsrs	r7, r7, #1
 8002ae4:	084b      	lsrs	r3, r1, #1
 8002ae6:	4699      	mov	r9, r3
 8002ae8:	4680      	mov	r8, r0
 8002aea:	433c      	orrs	r4, r7
 8002aec:	e6f4      	b.n	80028d8 <__aeabi_dsub+0x2dc>
 8002aee:	1afc      	subs	r4, r7, r3
 8002af0:	42a7      	cmp	r7, r4
 8002af2:	41bf      	sbcs	r7, r7
 8002af4:	4663      	mov	r3, ip
 8002af6:	427f      	negs	r7, r7
 8002af8:	1ac9      	subs	r1, r1, r3
 8002afa:	1bcb      	subs	r3, r1, r7
 8002afc:	4699      	mov	r9, r3
 8002afe:	465d      	mov	r5, fp
 8002b00:	e5d5      	b.n	80026ae <__aeabi_dsub+0xb2>
 8002b02:	08ff      	lsrs	r7, r7, #3
 8002b04:	074b      	lsls	r3, r1, #29
 8002b06:	465d      	mov	r5, fp
 8002b08:	433b      	orrs	r3, r7
 8002b0a:	08cc      	lsrs	r4, r1, #3
 8002b0c:	e6ee      	b.n	80028ec <__aeabi_dsub+0x2f0>
 8002b0e:	4662      	mov	r2, ip
 8002b10:	431a      	orrs	r2, r3
 8002b12:	d000      	beq.n	8002b16 <__aeabi_dsub+0x51a>
 8002b14:	e082      	b.n	8002c1c <__aeabi_dsub+0x620>
 8002b16:	000b      	movs	r3, r1
 8002b18:	433b      	orrs	r3, r7
 8002b1a:	d11b      	bne.n	8002b54 <__aeabi_dsub+0x558>
 8002b1c:	2480      	movs	r4, #128	; 0x80
 8002b1e:	2500      	movs	r5, #0
 8002b20:	0324      	lsls	r4, r4, #12
 8002b22:	e6f9      	b.n	8002918 <__aeabi_dsub+0x31c>
 8002b24:	19dc      	adds	r4, r3, r7
 8002b26:	429c      	cmp	r4, r3
 8002b28:	419b      	sbcs	r3, r3
 8002b2a:	4461      	add	r1, ip
 8002b2c:	4689      	mov	r9, r1
 8002b2e:	425b      	negs	r3, r3
 8002b30:	4499      	add	r9, r3
 8002b32:	464b      	mov	r3, r9
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	d444      	bmi.n	8002bc2 <__aeabi_dsub+0x5c6>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	4698      	mov	r8, r3
 8002b3c:	e6cc      	b.n	80028d8 <__aeabi_dsub+0x2dc>
 8002b3e:	1bdc      	subs	r4, r3, r7
 8002b40:	4662      	mov	r2, ip
 8002b42:	42a3      	cmp	r3, r4
 8002b44:	419b      	sbcs	r3, r3
 8002b46:	1a51      	subs	r1, r2, r1
 8002b48:	425b      	negs	r3, r3
 8002b4a:	1acb      	subs	r3, r1, r3
 8002b4c:	4699      	mov	r9, r3
 8002b4e:	2301      	movs	r3, #1
 8002b50:	4698      	mov	r8, r3
 8002b52:	e5a4      	b.n	800269e <__aeabi_dsub+0xa2>
 8002b54:	08ff      	lsrs	r7, r7, #3
 8002b56:	074b      	lsls	r3, r1, #29
 8002b58:	465d      	mov	r5, fp
 8002b5a:	433b      	orrs	r3, r7
 8002b5c:	08cc      	lsrs	r4, r1, #3
 8002b5e:	e6d7      	b.n	8002910 <__aeabi_dsub+0x314>
 8002b60:	4662      	mov	r2, ip
 8002b62:	431a      	orrs	r2, r3
 8002b64:	0014      	movs	r4, r2
 8002b66:	1e63      	subs	r3, r4, #1
 8002b68:	419c      	sbcs	r4, r3
 8002b6a:	e679      	b.n	8002860 <__aeabi_dsub+0x264>
 8002b6c:	0015      	movs	r5, r2
 8002b6e:	4664      	mov	r4, ip
 8002b70:	3d20      	subs	r5, #32
 8002b72:	40ec      	lsrs	r4, r5
 8002b74:	46a0      	mov	r8, r4
 8002b76:	2a20      	cmp	r2, #32
 8002b78:	d005      	beq.n	8002b86 <__aeabi_dsub+0x58a>
 8002b7a:	2540      	movs	r5, #64	; 0x40
 8002b7c:	4664      	mov	r4, ip
 8002b7e:	1aaa      	subs	r2, r5, r2
 8002b80:	4094      	lsls	r4, r2
 8002b82:	4323      	orrs	r3, r4
 8002b84:	469a      	mov	sl, r3
 8002b86:	4654      	mov	r4, sl
 8002b88:	1e63      	subs	r3, r4, #1
 8002b8a:	419c      	sbcs	r4, r3
 8002b8c:	4643      	mov	r3, r8
 8002b8e:	4323      	orrs	r3, r4
 8002b90:	e773      	b.n	8002a7a <__aeabi_dsub+0x47e>
 8002b92:	4662      	mov	r2, ip
 8002b94:	431a      	orrs	r2, r3
 8002b96:	d023      	beq.n	8002be0 <__aeabi_dsub+0x5e4>
 8002b98:	000a      	movs	r2, r1
 8002b9a:	433a      	orrs	r2, r7
 8002b9c:	d000      	beq.n	8002ba0 <__aeabi_dsub+0x5a4>
 8002b9e:	e0a0      	b.n	8002ce2 <__aeabi_dsub+0x6e6>
 8002ba0:	4662      	mov	r2, ip
 8002ba2:	08db      	lsrs	r3, r3, #3
 8002ba4:	0752      	lsls	r2, r2, #29
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	4662      	mov	r2, ip
 8002baa:	08d4      	lsrs	r4, r2, #3
 8002bac:	e6b0      	b.n	8002910 <__aeabi_dsub+0x314>
 8002bae:	000b      	movs	r3, r1
 8002bb0:	433b      	orrs	r3, r7
 8002bb2:	d100      	bne.n	8002bb6 <__aeabi_dsub+0x5ba>
 8002bb4:	e728      	b.n	8002a08 <__aeabi_dsub+0x40c>
 8002bb6:	08ff      	lsrs	r7, r7, #3
 8002bb8:	074b      	lsls	r3, r1, #29
 8002bba:	465d      	mov	r5, fp
 8002bbc:	433b      	orrs	r3, r7
 8002bbe:	08cc      	lsrs	r4, r1, #3
 8002bc0:	e697      	b.n	80028f2 <__aeabi_dsub+0x2f6>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	4698      	mov	r8, r3
 8002bc6:	e736      	b.n	8002a36 <__aeabi_dsub+0x43a>
 8002bc8:	1afc      	subs	r4, r7, r3
 8002bca:	42a7      	cmp	r7, r4
 8002bcc:	41bf      	sbcs	r7, r7
 8002bce:	4663      	mov	r3, ip
 8002bd0:	427f      	negs	r7, r7
 8002bd2:	1ac9      	subs	r1, r1, r3
 8002bd4:	1bcb      	subs	r3, r1, r7
 8002bd6:	4699      	mov	r9, r3
 8002bd8:	2301      	movs	r3, #1
 8002bda:	465d      	mov	r5, fp
 8002bdc:	4698      	mov	r8, r3
 8002bde:	e55e      	b.n	800269e <__aeabi_dsub+0xa2>
 8002be0:	074b      	lsls	r3, r1, #29
 8002be2:	08ff      	lsrs	r7, r7, #3
 8002be4:	433b      	orrs	r3, r7
 8002be6:	08cc      	lsrs	r4, r1, #3
 8002be8:	e692      	b.n	8002910 <__aeabi_dsub+0x314>
 8002bea:	1bdc      	subs	r4, r3, r7
 8002bec:	4660      	mov	r0, ip
 8002bee:	42a3      	cmp	r3, r4
 8002bf0:	41b6      	sbcs	r6, r6
 8002bf2:	1a40      	subs	r0, r0, r1
 8002bf4:	4276      	negs	r6, r6
 8002bf6:	1b80      	subs	r0, r0, r6
 8002bf8:	4681      	mov	r9, r0
 8002bfa:	0200      	lsls	r0, r0, #8
 8002bfc:	d560      	bpl.n	8002cc0 <__aeabi_dsub+0x6c4>
 8002bfe:	1afc      	subs	r4, r7, r3
 8002c00:	42a7      	cmp	r7, r4
 8002c02:	41bf      	sbcs	r7, r7
 8002c04:	4663      	mov	r3, ip
 8002c06:	427f      	negs	r7, r7
 8002c08:	1ac9      	subs	r1, r1, r3
 8002c0a:	1bcb      	subs	r3, r1, r7
 8002c0c:	4699      	mov	r9, r3
 8002c0e:	465d      	mov	r5, fp
 8002c10:	e576      	b.n	8002700 <__aeabi_dsub+0x104>
 8002c12:	08ff      	lsrs	r7, r7, #3
 8002c14:	074b      	lsls	r3, r1, #29
 8002c16:	433b      	orrs	r3, r7
 8002c18:	08cc      	lsrs	r4, r1, #3
 8002c1a:	e667      	b.n	80028ec <__aeabi_dsub+0x2f0>
 8002c1c:	000a      	movs	r2, r1
 8002c1e:	08db      	lsrs	r3, r3, #3
 8002c20:	433a      	orrs	r2, r7
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x62a>
 8002c24:	e66f      	b.n	8002906 <__aeabi_dsub+0x30a>
 8002c26:	4662      	mov	r2, ip
 8002c28:	0752      	lsls	r2, r2, #29
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	4662      	mov	r2, ip
 8002c2e:	08d4      	lsrs	r4, r2, #3
 8002c30:	2280      	movs	r2, #128	; 0x80
 8002c32:	0312      	lsls	r2, r2, #12
 8002c34:	4214      	tst	r4, r2
 8002c36:	d007      	beq.n	8002c48 <__aeabi_dsub+0x64c>
 8002c38:	08c8      	lsrs	r0, r1, #3
 8002c3a:	4210      	tst	r0, r2
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_dsub+0x64c>
 8002c3e:	465d      	mov	r5, fp
 8002c40:	0004      	movs	r4, r0
 8002c42:	08fb      	lsrs	r3, r7, #3
 8002c44:	0749      	lsls	r1, r1, #29
 8002c46:	430b      	orrs	r3, r1
 8002c48:	0f5a      	lsrs	r2, r3, #29
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	08db      	lsrs	r3, r3, #3
 8002c4e:	0752      	lsls	r2, r2, #29
 8002c50:	4313      	orrs	r3, r2
 8002c52:	e65d      	b.n	8002910 <__aeabi_dsub+0x314>
 8002c54:	074b      	lsls	r3, r1, #29
 8002c56:	08ff      	lsrs	r7, r7, #3
 8002c58:	433b      	orrs	r3, r7
 8002c5a:	08cc      	lsrs	r4, r1, #3
 8002c5c:	e649      	b.n	80028f2 <__aeabi_dsub+0x2f6>
 8002c5e:	19dc      	adds	r4, r3, r7
 8002c60:	429c      	cmp	r4, r3
 8002c62:	419b      	sbcs	r3, r3
 8002c64:	4461      	add	r1, ip
 8002c66:	4689      	mov	r9, r1
 8002c68:	425b      	negs	r3, r3
 8002c6a:	4499      	add	r9, r3
 8002c6c:	464b      	mov	r3, r9
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	d400      	bmi.n	8002c74 <__aeabi_dsub+0x678>
 8002c72:	e631      	b.n	80028d8 <__aeabi_dsub+0x2dc>
 8002c74:	464a      	mov	r2, r9
 8002c76:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <__aeabi_dsub+0x6d8>)
 8002c78:	401a      	ands	r2, r3
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	4691      	mov	r9, r2
 8002c7e:	4698      	mov	r8, r3
 8002c80:	e62a      	b.n	80028d8 <__aeabi_dsub+0x2dc>
 8002c82:	0016      	movs	r6, r2
 8002c84:	4664      	mov	r4, ip
 8002c86:	3e20      	subs	r6, #32
 8002c88:	40f4      	lsrs	r4, r6
 8002c8a:	46a0      	mov	r8, r4
 8002c8c:	2a20      	cmp	r2, #32
 8002c8e:	d005      	beq.n	8002c9c <__aeabi_dsub+0x6a0>
 8002c90:	2640      	movs	r6, #64	; 0x40
 8002c92:	4664      	mov	r4, ip
 8002c94:	1ab2      	subs	r2, r6, r2
 8002c96:	4094      	lsls	r4, r2
 8002c98:	4323      	orrs	r3, r4
 8002c9a:	469a      	mov	sl, r3
 8002c9c:	4654      	mov	r4, sl
 8002c9e:	1e63      	subs	r3, r4, #1
 8002ca0:	419c      	sbcs	r4, r3
 8002ca2:	4643      	mov	r3, r8
 8002ca4:	431c      	orrs	r4, r3
 8002ca6:	e5db      	b.n	8002860 <__aeabi_dsub+0x264>
 8002ca8:	0002      	movs	r2, r0
 8002caa:	2400      	movs	r4, #0
 8002cac:	2300      	movs	r3, #0
 8002cae:	e548      	b.n	8002742 <__aeabi_dsub+0x146>
 8002cb0:	19dc      	adds	r4, r3, r7
 8002cb2:	42bc      	cmp	r4, r7
 8002cb4:	41bf      	sbcs	r7, r7
 8002cb6:	4461      	add	r1, ip
 8002cb8:	4689      	mov	r9, r1
 8002cba:	427f      	negs	r7, r7
 8002cbc:	44b9      	add	r9, r7
 8002cbe:	e738      	b.n	8002b32 <__aeabi_dsub+0x536>
 8002cc0:	464b      	mov	r3, r9
 8002cc2:	4323      	orrs	r3, r4
 8002cc4:	d100      	bne.n	8002cc8 <__aeabi_dsub+0x6cc>
 8002cc6:	e69f      	b.n	8002a08 <__aeabi_dsub+0x40c>
 8002cc8:	e606      	b.n	80028d8 <__aeabi_dsub+0x2dc>
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	000007fe 	.word	0x000007fe
 8002cd0:	000007ff 	.word	0x000007ff
 8002cd4:	ff7fffff 	.word	0xff7fffff
 8002cd8:	08ff      	lsrs	r7, r7, #3
 8002cda:	074b      	lsls	r3, r1, #29
 8002cdc:	433b      	orrs	r3, r7
 8002cde:	08cc      	lsrs	r4, r1, #3
 8002ce0:	e616      	b.n	8002910 <__aeabi_dsub+0x314>
 8002ce2:	4662      	mov	r2, ip
 8002ce4:	08db      	lsrs	r3, r3, #3
 8002ce6:	0752      	lsls	r2, r2, #29
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	4662      	mov	r2, ip
 8002cec:	08d4      	lsrs	r4, r2, #3
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	0312      	lsls	r2, r2, #12
 8002cf2:	4214      	tst	r4, r2
 8002cf4:	d007      	beq.n	8002d06 <__aeabi_dsub+0x70a>
 8002cf6:	08c8      	lsrs	r0, r1, #3
 8002cf8:	4210      	tst	r0, r2
 8002cfa:	d104      	bne.n	8002d06 <__aeabi_dsub+0x70a>
 8002cfc:	465d      	mov	r5, fp
 8002cfe:	0004      	movs	r4, r0
 8002d00:	08fb      	lsrs	r3, r7, #3
 8002d02:	0749      	lsls	r1, r1, #29
 8002d04:	430b      	orrs	r3, r1
 8002d06:	0f5a      	lsrs	r2, r3, #29
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	0752      	lsls	r2, r2, #29
 8002d0c:	08db      	lsrs	r3, r3, #3
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	e5fe      	b.n	8002910 <__aeabi_dsub+0x314>
 8002d12:	2300      	movs	r3, #0
 8002d14:	4a01      	ldr	r2, [pc, #4]	; (8002d1c <__aeabi_dsub+0x720>)
 8002d16:	001c      	movs	r4, r3
 8002d18:	e513      	b.n	8002742 <__aeabi_dsub+0x146>
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	000007ff 	.word	0x000007ff

08002d20 <__aeabi_dcmpun>:
 8002d20:	b570      	push	{r4, r5, r6, lr}
 8002d22:	0005      	movs	r5, r0
 8002d24:	480c      	ldr	r0, [pc, #48]	; (8002d58 <__aeabi_dcmpun+0x38>)
 8002d26:	031c      	lsls	r4, r3, #12
 8002d28:	0016      	movs	r6, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	030a      	lsls	r2, r1, #12
 8002d2e:	0049      	lsls	r1, r1, #1
 8002d30:	0b12      	lsrs	r2, r2, #12
 8002d32:	0d49      	lsrs	r1, r1, #21
 8002d34:	0b24      	lsrs	r4, r4, #12
 8002d36:	0d5b      	lsrs	r3, r3, #21
 8002d38:	4281      	cmp	r1, r0
 8002d3a:	d008      	beq.n	8002d4e <__aeabi_dcmpun+0x2e>
 8002d3c:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <__aeabi_dcmpun+0x38>)
 8002d3e:	2000      	movs	r0, #0
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d103      	bne.n	8002d4c <__aeabi_dcmpun+0x2c>
 8002d44:	0020      	movs	r0, r4
 8002d46:	4330      	orrs	r0, r6
 8002d48:	1e43      	subs	r3, r0, #1
 8002d4a:	4198      	sbcs	r0, r3
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
 8002d4e:	2001      	movs	r0, #1
 8002d50:	432a      	orrs	r2, r5
 8002d52:	d1fb      	bne.n	8002d4c <__aeabi_dcmpun+0x2c>
 8002d54:	e7f2      	b.n	8002d3c <__aeabi_dcmpun+0x1c>
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	000007ff 	.word	0x000007ff

08002d5c <__aeabi_d2iz>:
 8002d5c:	000a      	movs	r2, r1
 8002d5e:	b530      	push	{r4, r5, lr}
 8002d60:	4c13      	ldr	r4, [pc, #76]	; (8002db0 <__aeabi_d2iz+0x54>)
 8002d62:	0053      	lsls	r3, r2, #1
 8002d64:	0309      	lsls	r1, r1, #12
 8002d66:	0005      	movs	r5, r0
 8002d68:	0b09      	lsrs	r1, r1, #12
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	0d5b      	lsrs	r3, r3, #21
 8002d6e:	0fd2      	lsrs	r2, r2, #31
 8002d70:	42a3      	cmp	r3, r4
 8002d72:	dd04      	ble.n	8002d7e <__aeabi_d2iz+0x22>
 8002d74:	480f      	ldr	r0, [pc, #60]	; (8002db4 <__aeabi_d2iz+0x58>)
 8002d76:	4283      	cmp	r3, r0
 8002d78:	dd02      	ble.n	8002d80 <__aeabi_d2iz+0x24>
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <__aeabi_d2iz+0x5c>)
 8002d7c:	18d0      	adds	r0, r2, r3
 8002d7e:	bd30      	pop	{r4, r5, pc}
 8002d80:	2080      	movs	r0, #128	; 0x80
 8002d82:	0340      	lsls	r0, r0, #13
 8002d84:	4301      	orrs	r1, r0
 8002d86:	480d      	ldr	r0, [pc, #52]	; (8002dbc <__aeabi_d2iz+0x60>)
 8002d88:	1ac0      	subs	r0, r0, r3
 8002d8a:	281f      	cmp	r0, #31
 8002d8c:	dd08      	ble.n	8002da0 <__aeabi_d2iz+0x44>
 8002d8e:	480c      	ldr	r0, [pc, #48]	; (8002dc0 <__aeabi_d2iz+0x64>)
 8002d90:	1ac3      	subs	r3, r0, r3
 8002d92:	40d9      	lsrs	r1, r3
 8002d94:	000b      	movs	r3, r1
 8002d96:	4258      	negs	r0, r3
 8002d98:	2a00      	cmp	r2, #0
 8002d9a:	d1f0      	bne.n	8002d7e <__aeabi_d2iz+0x22>
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	e7ee      	b.n	8002d7e <__aeabi_d2iz+0x22>
 8002da0:	4c08      	ldr	r4, [pc, #32]	; (8002dc4 <__aeabi_d2iz+0x68>)
 8002da2:	40c5      	lsrs	r5, r0
 8002da4:	46a4      	mov	ip, r4
 8002da6:	4463      	add	r3, ip
 8002da8:	4099      	lsls	r1, r3
 8002daa:	000b      	movs	r3, r1
 8002dac:	432b      	orrs	r3, r5
 8002dae:	e7f2      	b.n	8002d96 <__aeabi_d2iz+0x3a>
 8002db0:	000003fe 	.word	0x000003fe
 8002db4:	0000041d 	.word	0x0000041d
 8002db8:	7fffffff 	.word	0x7fffffff
 8002dbc:	00000433 	.word	0x00000433
 8002dc0:	00000413 	.word	0x00000413
 8002dc4:	fffffbed 	.word	0xfffffbed

08002dc8 <__aeabi_i2d>:
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d016      	beq.n	8002dfc <__aeabi_i2d+0x34>
 8002dce:	17c3      	asrs	r3, r0, #31
 8002dd0:	18c5      	adds	r5, r0, r3
 8002dd2:	405d      	eors	r5, r3
 8002dd4:	0fc4      	lsrs	r4, r0, #31
 8002dd6:	0028      	movs	r0, r5
 8002dd8:	f000 f91c 	bl	8003014 <__clzsi2>
 8002ddc:	4a11      	ldr	r2, [pc, #68]	; (8002e24 <__aeabi_i2d+0x5c>)
 8002dde:	1a12      	subs	r2, r2, r0
 8002de0:	280a      	cmp	r0, #10
 8002de2:	dc16      	bgt.n	8002e12 <__aeabi_i2d+0x4a>
 8002de4:	0003      	movs	r3, r0
 8002de6:	002e      	movs	r6, r5
 8002de8:	3315      	adds	r3, #21
 8002dea:	409e      	lsls	r6, r3
 8002dec:	230b      	movs	r3, #11
 8002dee:	1a18      	subs	r0, r3, r0
 8002df0:	40c5      	lsrs	r5, r0
 8002df2:	0552      	lsls	r2, r2, #21
 8002df4:	032d      	lsls	r5, r5, #12
 8002df6:	0b2d      	lsrs	r5, r5, #12
 8002df8:	0d53      	lsrs	r3, r2, #21
 8002dfa:	e003      	b.n	8002e04 <__aeabi_i2d+0x3c>
 8002dfc:	2400      	movs	r4, #0
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2500      	movs	r5, #0
 8002e02:	2600      	movs	r6, #0
 8002e04:	051b      	lsls	r3, r3, #20
 8002e06:	432b      	orrs	r3, r5
 8002e08:	07e4      	lsls	r4, r4, #31
 8002e0a:	4323      	orrs	r3, r4
 8002e0c:	0030      	movs	r0, r6
 8002e0e:	0019      	movs	r1, r3
 8002e10:	bd70      	pop	{r4, r5, r6, pc}
 8002e12:	380b      	subs	r0, #11
 8002e14:	4085      	lsls	r5, r0
 8002e16:	0552      	lsls	r2, r2, #21
 8002e18:	032d      	lsls	r5, r5, #12
 8002e1a:	2600      	movs	r6, #0
 8002e1c:	0b2d      	lsrs	r5, r5, #12
 8002e1e:	0d53      	lsrs	r3, r2, #21
 8002e20:	e7f0      	b.n	8002e04 <__aeabi_i2d+0x3c>
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	0000041e 	.word	0x0000041e

08002e28 <__aeabi_ui2d>:
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	1e04      	subs	r4, r0, #0
 8002e2c:	d010      	beq.n	8002e50 <__aeabi_ui2d+0x28>
 8002e2e:	f000 f8f1 	bl	8003014 <__clzsi2>
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <__aeabi_ui2d+0x48>)
 8002e34:	1a1b      	subs	r3, r3, r0
 8002e36:	280a      	cmp	r0, #10
 8002e38:	dc11      	bgt.n	8002e5e <__aeabi_ui2d+0x36>
 8002e3a:	220b      	movs	r2, #11
 8002e3c:	0021      	movs	r1, r4
 8002e3e:	1a12      	subs	r2, r2, r0
 8002e40:	40d1      	lsrs	r1, r2
 8002e42:	3015      	adds	r0, #21
 8002e44:	030a      	lsls	r2, r1, #12
 8002e46:	055b      	lsls	r3, r3, #21
 8002e48:	4084      	lsls	r4, r0
 8002e4a:	0b12      	lsrs	r2, r2, #12
 8002e4c:	0d5b      	lsrs	r3, r3, #21
 8002e4e:	e001      	b.n	8002e54 <__aeabi_ui2d+0x2c>
 8002e50:	2300      	movs	r3, #0
 8002e52:	2200      	movs	r2, #0
 8002e54:	051b      	lsls	r3, r3, #20
 8002e56:	4313      	orrs	r3, r2
 8002e58:	0020      	movs	r0, r4
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	bd10      	pop	{r4, pc}
 8002e5e:	0022      	movs	r2, r4
 8002e60:	380b      	subs	r0, #11
 8002e62:	4082      	lsls	r2, r0
 8002e64:	055b      	lsls	r3, r3, #21
 8002e66:	0312      	lsls	r2, r2, #12
 8002e68:	2400      	movs	r4, #0
 8002e6a:	0b12      	lsrs	r2, r2, #12
 8002e6c:	0d5b      	lsrs	r3, r3, #21
 8002e6e:	e7f1      	b.n	8002e54 <__aeabi_ui2d+0x2c>
 8002e70:	0000041e 	.word	0x0000041e

08002e74 <__aeabi_f2d>:
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	0043      	lsls	r3, r0, #1
 8002e78:	0246      	lsls	r6, r0, #9
 8002e7a:	0fc4      	lsrs	r4, r0, #31
 8002e7c:	20fe      	movs	r0, #254	; 0xfe
 8002e7e:	0e1b      	lsrs	r3, r3, #24
 8002e80:	1c59      	adds	r1, r3, #1
 8002e82:	0a75      	lsrs	r5, r6, #9
 8002e84:	4208      	tst	r0, r1
 8002e86:	d00c      	beq.n	8002ea2 <__aeabi_f2d+0x2e>
 8002e88:	22e0      	movs	r2, #224	; 0xe0
 8002e8a:	0092      	lsls	r2, r2, #2
 8002e8c:	4694      	mov	ip, r2
 8002e8e:	076d      	lsls	r5, r5, #29
 8002e90:	0b36      	lsrs	r6, r6, #12
 8002e92:	4463      	add	r3, ip
 8002e94:	051b      	lsls	r3, r3, #20
 8002e96:	4333      	orrs	r3, r6
 8002e98:	07e4      	lsls	r4, r4, #31
 8002e9a:	4323      	orrs	r3, r4
 8002e9c:	0028      	movs	r0, r5
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	bd70      	pop	{r4, r5, r6, pc}
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d114      	bne.n	8002ed0 <__aeabi_f2d+0x5c>
 8002ea6:	2d00      	cmp	r5, #0
 8002ea8:	d01b      	beq.n	8002ee2 <__aeabi_f2d+0x6e>
 8002eaa:	0028      	movs	r0, r5
 8002eac:	f000 f8b2 	bl	8003014 <__clzsi2>
 8002eb0:	280a      	cmp	r0, #10
 8002eb2:	dc1c      	bgt.n	8002eee <__aeabi_f2d+0x7a>
 8002eb4:	230b      	movs	r3, #11
 8002eb6:	002e      	movs	r6, r5
 8002eb8:	1a1b      	subs	r3, r3, r0
 8002eba:	40de      	lsrs	r6, r3
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	3315      	adds	r3, #21
 8002ec0:	409d      	lsls	r5, r3
 8002ec2:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <__aeabi_f2d+0x88>)
 8002ec4:	0336      	lsls	r6, r6, #12
 8002ec6:	1a12      	subs	r2, r2, r0
 8002ec8:	0552      	lsls	r2, r2, #21
 8002eca:	0b36      	lsrs	r6, r6, #12
 8002ecc:	0d53      	lsrs	r3, r2, #21
 8002ece:	e7e1      	b.n	8002e94 <__aeabi_f2d+0x20>
 8002ed0:	2d00      	cmp	r5, #0
 8002ed2:	d009      	beq.n	8002ee8 <__aeabi_f2d+0x74>
 8002ed4:	2280      	movs	r2, #128	; 0x80
 8002ed6:	0b36      	lsrs	r6, r6, #12
 8002ed8:	0312      	lsls	r2, r2, #12
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <__aeabi_f2d+0x8c>)
 8002edc:	076d      	lsls	r5, r5, #29
 8002ede:	4316      	orrs	r6, r2
 8002ee0:	e7d8      	b.n	8002e94 <__aeabi_f2d+0x20>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2600      	movs	r6, #0
 8002ee6:	e7d5      	b.n	8002e94 <__aeabi_f2d+0x20>
 8002ee8:	2600      	movs	r6, #0
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <__aeabi_f2d+0x8c>)
 8002eec:	e7d2      	b.n	8002e94 <__aeabi_f2d+0x20>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	3b0b      	subs	r3, #11
 8002ef2:	409d      	lsls	r5, r3
 8002ef4:	002e      	movs	r6, r5
 8002ef6:	2500      	movs	r5, #0
 8002ef8:	e7e3      	b.n	8002ec2 <__aeabi_f2d+0x4e>
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	00000389 	.word	0x00000389
 8002f00:	000007ff 	.word	0x000007ff

08002f04 <__aeabi_d2f>:
 8002f04:	0002      	movs	r2, r0
 8002f06:	004b      	lsls	r3, r1, #1
 8002f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f0a:	0d5b      	lsrs	r3, r3, #21
 8002f0c:	030c      	lsls	r4, r1, #12
 8002f0e:	4e3d      	ldr	r6, [pc, #244]	; (8003004 <__aeabi_d2f+0x100>)
 8002f10:	0a64      	lsrs	r4, r4, #9
 8002f12:	0f40      	lsrs	r0, r0, #29
 8002f14:	1c5f      	adds	r7, r3, #1
 8002f16:	0fc9      	lsrs	r1, r1, #31
 8002f18:	4304      	orrs	r4, r0
 8002f1a:	00d5      	lsls	r5, r2, #3
 8002f1c:	4237      	tst	r7, r6
 8002f1e:	d00a      	beq.n	8002f36 <__aeabi_d2f+0x32>
 8002f20:	4839      	ldr	r0, [pc, #228]	; (8003008 <__aeabi_d2f+0x104>)
 8002f22:	181e      	adds	r6, r3, r0
 8002f24:	2efe      	cmp	r6, #254	; 0xfe
 8002f26:	dd16      	ble.n	8002f56 <__aeabi_d2f+0x52>
 8002f28:	20ff      	movs	r0, #255	; 0xff
 8002f2a:	2400      	movs	r4, #0
 8002f2c:	05c0      	lsls	r0, r0, #23
 8002f2e:	4320      	orrs	r0, r4
 8002f30:	07c9      	lsls	r1, r1, #31
 8002f32:	4308      	orrs	r0, r1
 8002f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <__aeabi_d2f+0x44>
 8002f3a:	432c      	orrs	r4, r5
 8002f3c:	d026      	beq.n	8002f8c <__aeabi_d2f+0x88>
 8002f3e:	2205      	movs	r2, #5
 8002f40:	0192      	lsls	r2, r2, #6
 8002f42:	0a54      	lsrs	r4, r2, #9
 8002f44:	b2d8      	uxtb	r0, r3
 8002f46:	e7f1      	b.n	8002f2c <__aeabi_d2f+0x28>
 8002f48:	4325      	orrs	r5, r4
 8002f4a:	d0ed      	beq.n	8002f28 <__aeabi_d2f+0x24>
 8002f4c:	2080      	movs	r0, #128	; 0x80
 8002f4e:	03c0      	lsls	r0, r0, #15
 8002f50:	4304      	orrs	r4, r0
 8002f52:	20ff      	movs	r0, #255	; 0xff
 8002f54:	e7ea      	b.n	8002f2c <__aeabi_d2f+0x28>
 8002f56:	2e00      	cmp	r6, #0
 8002f58:	dd1b      	ble.n	8002f92 <__aeabi_d2f+0x8e>
 8002f5a:	0192      	lsls	r2, r2, #6
 8002f5c:	1e53      	subs	r3, r2, #1
 8002f5e:	419a      	sbcs	r2, r3
 8002f60:	00e4      	lsls	r4, r4, #3
 8002f62:	0f6d      	lsrs	r5, r5, #29
 8002f64:	4322      	orrs	r2, r4
 8002f66:	432a      	orrs	r2, r5
 8002f68:	0753      	lsls	r3, r2, #29
 8002f6a:	d048      	beq.n	8002ffe <__aeabi_d2f+0xfa>
 8002f6c:	230f      	movs	r3, #15
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d000      	beq.n	8002f76 <__aeabi_d2f+0x72>
 8002f74:	3204      	adds	r2, #4
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	04db      	lsls	r3, r3, #19
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d03f      	beq.n	8002ffe <__aeabi_d2f+0xfa>
 8002f7e:	1c70      	adds	r0, r6, #1
 8002f80:	2efe      	cmp	r6, #254	; 0xfe
 8002f82:	d0d1      	beq.n	8002f28 <__aeabi_d2f+0x24>
 8002f84:	0192      	lsls	r2, r2, #6
 8002f86:	0a54      	lsrs	r4, r2, #9
 8002f88:	b2c0      	uxtb	r0, r0
 8002f8a:	e7cf      	b.n	8002f2c <__aeabi_d2f+0x28>
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	2400      	movs	r4, #0
 8002f90:	e7cc      	b.n	8002f2c <__aeabi_d2f+0x28>
 8002f92:	0032      	movs	r2, r6
 8002f94:	3217      	adds	r2, #23
 8002f96:	db22      	blt.n	8002fde <__aeabi_d2f+0xda>
 8002f98:	2080      	movs	r0, #128	; 0x80
 8002f9a:	0400      	lsls	r0, r0, #16
 8002f9c:	4320      	orrs	r0, r4
 8002f9e:	241e      	movs	r4, #30
 8002fa0:	1ba4      	subs	r4, r4, r6
 8002fa2:	2c1f      	cmp	r4, #31
 8002fa4:	dd1d      	ble.n	8002fe2 <__aeabi_d2f+0xde>
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	4252      	negs	r2, r2
 8002faa:	1b96      	subs	r6, r2, r6
 8002fac:	0002      	movs	r2, r0
 8002fae:	40f2      	lsrs	r2, r6
 8002fb0:	0016      	movs	r6, r2
 8002fb2:	2c20      	cmp	r4, #32
 8002fb4:	d004      	beq.n	8002fc0 <__aeabi_d2f+0xbc>
 8002fb6:	4a15      	ldr	r2, [pc, #84]	; (800300c <__aeabi_d2f+0x108>)
 8002fb8:	4694      	mov	ip, r2
 8002fba:	4463      	add	r3, ip
 8002fbc:	4098      	lsls	r0, r3
 8002fbe:	4305      	orrs	r5, r0
 8002fc0:	002a      	movs	r2, r5
 8002fc2:	1e53      	subs	r3, r2, #1
 8002fc4:	419a      	sbcs	r2, r3
 8002fc6:	4332      	orrs	r2, r6
 8002fc8:	2600      	movs	r6, #0
 8002fca:	0753      	lsls	r3, r2, #29
 8002fcc:	d1ce      	bne.n	8002f6c <__aeabi_d2f+0x68>
 8002fce:	2480      	movs	r4, #128	; 0x80
 8002fd0:	0013      	movs	r3, r2
 8002fd2:	04e4      	lsls	r4, r4, #19
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	4023      	ands	r3, r4
 8002fd8:	4222      	tst	r2, r4
 8002fda:	d1d3      	bne.n	8002f84 <__aeabi_d2f+0x80>
 8002fdc:	e7b0      	b.n	8002f40 <__aeabi_d2f+0x3c>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e7ad      	b.n	8002f3e <__aeabi_d2f+0x3a>
 8002fe2:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <__aeabi_d2f+0x10c>)
 8002fe4:	4694      	mov	ip, r2
 8002fe6:	002a      	movs	r2, r5
 8002fe8:	40e2      	lsrs	r2, r4
 8002fea:	0014      	movs	r4, r2
 8002fec:	002a      	movs	r2, r5
 8002fee:	4463      	add	r3, ip
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	4098      	lsls	r0, r3
 8002ff4:	1e55      	subs	r5, r2, #1
 8002ff6:	41aa      	sbcs	r2, r5
 8002ff8:	4302      	orrs	r2, r0
 8002ffa:	4322      	orrs	r2, r4
 8002ffc:	e7e4      	b.n	8002fc8 <__aeabi_d2f+0xc4>
 8002ffe:	0033      	movs	r3, r6
 8003000:	e79e      	b.n	8002f40 <__aeabi_d2f+0x3c>
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	000007fe 	.word	0x000007fe
 8003008:	fffffc80 	.word	0xfffffc80
 800300c:	fffffca2 	.word	0xfffffca2
 8003010:	fffffc82 	.word	0xfffffc82

08003014 <__clzsi2>:
 8003014:	211c      	movs	r1, #28
 8003016:	2301      	movs	r3, #1
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	4298      	cmp	r0, r3
 800301c:	d301      	bcc.n	8003022 <__clzsi2+0xe>
 800301e:	0c00      	lsrs	r0, r0, #16
 8003020:	3910      	subs	r1, #16
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	4298      	cmp	r0, r3
 8003026:	d301      	bcc.n	800302c <__clzsi2+0x18>
 8003028:	0a00      	lsrs	r0, r0, #8
 800302a:	3908      	subs	r1, #8
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	4298      	cmp	r0, r3
 8003030:	d301      	bcc.n	8003036 <__clzsi2+0x22>
 8003032:	0900      	lsrs	r0, r0, #4
 8003034:	3904      	subs	r1, #4
 8003036:	a202      	add	r2, pc, #8	; (adr r2, 8003040 <__clzsi2+0x2c>)
 8003038:	5c10      	ldrb	r0, [r2, r0]
 800303a:	1840      	adds	r0, r0, r1
 800303c:	4770      	bx	lr
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	02020304 	.word	0x02020304
 8003044:	01010101 	.word	0x01010101
	...

08003050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// Initializing the RR averages
	for (i = 0; i < 8; i++)
 8003054:	4b85      	ldr	r3, [pc, #532]	; (800326c <main+0x21c>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e010      	b.n	800307e <main+0x2e>
	{
		rr1[i] = 0;
 800305c:	4b83      	ldr	r3, [pc, #524]	; (800326c <main+0x21c>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4b83      	ldr	r3, [pc, #524]	; (8003270 <main+0x220>)
 8003062:	0092      	lsls	r2, r2, #2
 8003064:	2100      	movs	r1, #0
 8003066:	50d1      	str	r1, [r2, r3]
		rr2[i] = 0;
 8003068:	4b80      	ldr	r3, [pc, #512]	; (800326c <main+0x21c>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b81      	ldr	r3, [pc, #516]	; (8003274 <main+0x224>)
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	2100      	movs	r1, #0
 8003072:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 8; i++)
 8003074:	4b7d      	ldr	r3, [pc, #500]	; (800326c <main+0x21c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	4b7c      	ldr	r3, [pc, #496]	; (800326c <main+0x21c>)
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	4b7b      	ldr	r3, [pc, #492]	; (800326c <main+0x21c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b07      	cmp	r3, #7
 8003084:	d9ea      	bls.n	800305c <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003086:	f000 feb3 	bl	8003df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800308a:	f000 fa99 	bl	80035c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800308e:	f000 fbd3 	bl	8003838 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003092:	f000 fadd 	bl	8003650 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8003096:	f000 fb81 	bl	800379c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800309a:	f000 fb43 	bl	8003724 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  init_loop_counter();
 800309e:	f000 fc2f 	bl	8003900 <init_loop_counter>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (loop_triggered()) {
 80030a2:	f000 fc41 	bl	8003928 <loop_triggered>
 80030a6:	1e03      	subs	r3, r0, #0
 80030a8:	d0fb      	beq.n	80030a2 <main+0x52>
		  reset_loop_counter();
 80030aa:	f000 fc53 	bl	8003954 <reset_loop_counter>

		  HAL_GPIO_TogglePin(DEBUG_GPIO_Port, DEBUG_Pin);
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	00da      	lsls	r2, r3, #3
 80030b2:	23a0      	movs	r3, #160	; 0xa0
 80030b4:	05db      	lsls	r3, r3, #23
 80030b6:	0011      	movs	r1, r2
 80030b8:	0018      	movs	r0, r3
 80030ba:	f002 f984 	bl	80053c6 <HAL_GPIO_TogglePin>

		  // Test if the buffers are full.
		  // If they are, shift them, discarding the oldest sample and adding the new one at the end.
		  // Else, just put the newest sample in the next free position.
		  // Update 'current' so that the program knows where's the newest sample.
		  if (sample >= BUFFSIZE)
 80030be:	4b6e      	ldr	r3, [pc, #440]	; (8003278 <main+0x228>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	2396      	movs	r3, #150	; 0x96
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d369      	bcc.n	800319e <main+0x14e>
		  {
		  	for (i = 0; i < BUFFSIZE - 1; i++)
 80030ca:	4b68      	ldr	r3, [pc, #416]	; (800326c <main+0x21c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e05c      	b.n	800318c <main+0x13c>
		  	{
		  		rawsignal[i] = rawsignal[i+1];
 80030d2:	4b66      	ldr	r3, [pc, #408]	; (800326c <main+0x21c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1c59      	adds	r1, r3, #1
 80030d8:	4b64      	ldr	r3, [pc, #400]	; (800326c <main+0x21c>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b67      	ldr	r3, [pc, #412]	; (800327c <main+0x22c>)
 80030de:	0089      	lsls	r1, r1, #2
 80030e0:	58c9      	ldr	r1, [r1, r3]
 80030e2:	4b66      	ldr	r3, [pc, #408]	; (800327c <main+0x22c>)
 80030e4:	0092      	lsls	r2, r2, #2
 80030e6:	50d1      	str	r1, [r2, r3]
		  		dcblock[i] = dcblock[i+1];
 80030e8:	4b60      	ldr	r3, [pc, #384]	; (800326c <main+0x21c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	1c59      	adds	r1, r3, #1
 80030ee:	4b5f      	ldr	r3, [pc, #380]	; (800326c <main+0x21c>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4b63      	ldr	r3, [pc, #396]	; (8003280 <main+0x230>)
 80030f4:	0089      	lsls	r1, r1, #2
 80030f6:	58c9      	ldr	r1, [r1, r3]
 80030f8:	4b61      	ldr	r3, [pc, #388]	; (8003280 <main+0x230>)
 80030fa:	0092      	lsls	r2, r2, #2
 80030fc:	50d1      	str	r1, [r2, r3]
		  		lowpass[i] = lowpass[i+1];
 80030fe:	4b5b      	ldr	r3, [pc, #364]	; (800326c <main+0x21c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	1c59      	adds	r1, r3, #1
 8003104:	4b59      	ldr	r3, [pc, #356]	; (800326c <main+0x21c>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b5e      	ldr	r3, [pc, #376]	; (8003284 <main+0x234>)
 800310a:	0089      	lsls	r1, r1, #2
 800310c:	58c9      	ldr	r1, [r1, r3]
 800310e:	4b5d      	ldr	r3, [pc, #372]	; (8003284 <main+0x234>)
 8003110:	0092      	lsls	r2, r2, #2
 8003112:	50d1      	str	r1, [r2, r3]
		  		highpass[i] = highpass[i+1];
 8003114:	4b55      	ldr	r3, [pc, #340]	; (800326c <main+0x21c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	1c59      	adds	r1, r3, #1
 800311a:	4b54      	ldr	r3, [pc, #336]	; (800326c <main+0x21c>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b5a      	ldr	r3, [pc, #360]	; (8003288 <main+0x238>)
 8003120:	0089      	lsls	r1, r1, #2
 8003122:	58c9      	ldr	r1, [r1, r3]
 8003124:	4b58      	ldr	r3, [pc, #352]	; (8003288 <main+0x238>)
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	50d1      	str	r1, [r2, r3]
		  		derivative[i] = derivative[i+1];
 800312a:	4b50      	ldr	r3, [pc, #320]	; (800326c <main+0x21c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	1c59      	adds	r1, r3, #1
 8003130:	4b4e      	ldr	r3, [pc, #312]	; (800326c <main+0x21c>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b55      	ldr	r3, [pc, #340]	; (800328c <main+0x23c>)
 8003136:	0089      	lsls	r1, r1, #2
 8003138:	58c9      	ldr	r1, [r1, r3]
 800313a:	4b54      	ldr	r3, [pc, #336]	; (800328c <main+0x23c>)
 800313c:	0092      	lsls	r2, r2, #2
 800313e:	50d1      	str	r1, [r2, r3]
		  		squared[i] = squared[i+1];
 8003140:	4b4a      	ldr	r3, [pc, #296]	; (800326c <main+0x21c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	1c59      	adds	r1, r3, #1
 8003146:	4b49      	ldr	r3, [pc, #292]	; (800326c <main+0x21c>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4b51      	ldr	r3, [pc, #324]	; (8003290 <main+0x240>)
 800314c:	0089      	lsls	r1, r1, #2
 800314e:	58c9      	ldr	r1, [r1, r3]
 8003150:	4b4f      	ldr	r3, [pc, #316]	; (8003290 <main+0x240>)
 8003152:	0092      	lsls	r2, r2, #2
 8003154:	50d1      	str	r1, [r2, r3]
		  		integral[i] = integral[i+1];
 8003156:	4b45      	ldr	r3, [pc, #276]	; (800326c <main+0x21c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	1c59      	adds	r1, r3, #1
 800315c:	4b43      	ldr	r3, [pc, #268]	; (800326c <main+0x21c>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b4c      	ldr	r3, [pc, #304]	; (8003294 <main+0x244>)
 8003162:	0089      	lsls	r1, r1, #2
 8003164:	58c9      	ldr	r1, [r1, r3]
 8003166:	4b4b      	ldr	r3, [pc, #300]	; (8003294 <main+0x244>)
 8003168:	0092      	lsls	r2, r2, #2
 800316a:	50d1      	str	r1, [r2, r3]
		  		outputSignal[i] = outputSignal[i+1];
 800316c:	4b3f      	ldr	r3, [pc, #252]	; (800326c <main+0x21c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	1c59      	adds	r1, r3, #1
 8003172:	4b3e      	ldr	r3, [pc, #248]	; (800326c <main+0x21c>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b48      	ldr	r3, [pc, #288]	; (8003298 <main+0x248>)
 8003178:	0089      	lsls	r1, r1, #2
 800317a:	58c9      	ldr	r1, [r1, r3]
 800317c:	4b46      	ldr	r3, [pc, #280]	; (8003298 <main+0x248>)
 800317e:	0092      	lsls	r2, r2, #2
 8003180:	50d1      	str	r1, [r2, r3]
		  	for (i = 0; i < BUFFSIZE - 1; i++)
 8003182:	4b3a      	ldr	r3, [pc, #232]	; (800326c <main+0x21c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	4b38      	ldr	r3, [pc, #224]	; (800326c <main+0x21c>)
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	4b37      	ldr	r3, [pc, #220]	; (800326c <main+0x21c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a42      	ldr	r2, [pc, #264]	; (800329c <main+0x24c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d99d      	bls.n	80030d2 <main+0x82>
		  	}
		  	current = BUFFSIZE - 1;
 8003196:	4b42      	ldr	r3, [pc, #264]	; (80032a0 <main+0x250>)
 8003198:	4a42      	ldr	r2, [pc, #264]	; (80032a4 <main+0x254>)
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e004      	b.n	80031a8 <main+0x158>
		  }
		  else
		  {
		  	current = sample;
 800319e:	4b36      	ldr	r3, [pc, #216]	; (8003278 <main+0x228>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	001a      	movs	r2, r3
 80031a4:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <main+0x250>)
 80031a6:	601a      	str	r2, [r3, #0]
		  }

		  HAL_GPIO_TogglePin(DEBUG_GPIO_Port, DEBUG_Pin);
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	00da      	lsls	r2, r3, #3
 80031ac:	23a0      	movs	r3, #160	; 0xa0
 80031ae:	05db      	lsls	r3, r3, #23
 80031b0:	0011      	movs	r1, r2
 80031b2:	0018      	movs	r0, r3
 80031b4:	f002 f907 	bl	80053c6 <HAL_GPIO_TogglePin>
		  rawsignal[current] = input();
 80031b8:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <main+0x250>)
 80031ba:	681c      	ldr	r4, [r3, #0]
 80031bc:	f000 fbda 	bl	8003974 <input>
 80031c0:	1c01      	adds	r1, r0, #0
 80031c2:	4b2e      	ldr	r3, [pc, #184]	; (800327c <main+0x22c>)
 80031c4:	00a2      	lsls	r2, r4, #2
 80031c6:	50d1      	str	r1, [r2, r3]
		  HAL_GPIO_TogglePin(DEBUG_GPIO_Port, DEBUG_Pin);
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	00da      	lsls	r2, r3, #3
 80031cc:	23a0      	movs	r3, #160	; 0xa0
 80031ce:	05db      	lsls	r3, r3, #23
 80031d0:	0011      	movs	r1, r2
 80031d2:	0018      	movs	r0, r3
 80031d4:	f002 f8f7 	bl	80053c6 <HAL_GPIO_TogglePin>

		  // If no sample was read, stop processing!
		  if (rawsignal[current] == NOSAMPLE)
 80031d8:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <main+0x250>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b27      	ldr	r3, [pc, #156]	; (800327c <main+0x22c>)
 80031de:	0092      	lsls	r2, r2, #2
 80031e0:	58d3      	ldr	r3, [r2, r3]
 80031e2:	4931      	ldr	r1, [pc, #196]	; (80032a8 <main+0x258>)
 80031e4:	1c18      	adds	r0, r3, #0
 80031e6:	f7fd f967 	bl	80004b8 <__aeabi_fcmpeq>
 80031ea:	1e03      	subs	r3, r0, #0
 80031ec:	d000      	beq.n	80031f0 <main+0x1a0>
 80031ee:	e1d2      	b.n	8003596 <main+0x546>
			  break;
		  sample++; // Update sample counter
 80031f0:	4b21      	ldr	r3, [pc, #132]	; (8003278 <main+0x228>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <main+0x228>)
 80031f8:	601a      	str	r2, [r3, #0]

		  // DC Block filter
		  // This was not proposed on the original paper.
		  // It is not necessary and can be removed if your sensor or database has no DC noise.
		  if (current >= 1)
 80031fa:	4b29      	ldr	r3, [pc, #164]	; (80032a0 <main+0x250>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	dd58      	ble.n	80032b4 <main+0x264>
			  dcblock[current] = rawsignal[current] - rawsignal[current-1] + 0.995*dcblock[current-1];
 8003202:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <main+0x250>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b1d      	ldr	r3, [pc, #116]	; (800327c <main+0x22c>)
 8003208:	0092      	lsls	r2, r2, #2
 800320a:	58d0      	ldr	r0, [r2, r3]
 800320c:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <main+0x250>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	1e5a      	subs	r2, r3, #1
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <main+0x22c>)
 8003214:	0092      	lsls	r2, r2, #2
 8003216:	58d3      	ldr	r3, [r2, r3]
 8003218:	1c19      	adds	r1, r3, #0
 800321a:	f7fd fe07 	bl	8000e2c <__aeabi_fsub>
 800321e:	1c03      	adds	r3, r0, #0
 8003220:	1c18      	adds	r0, r3, #0
 8003222:	f7ff fe27 	bl	8002e74 <__aeabi_f2d>
 8003226:	0004      	movs	r4, r0
 8003228:	000d      	movs	r5, r1
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <main+0x250>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	1e5a      	subs	r2, r3, #1
 8003230:	4b13      	ldr	r3, [pc, #76]	; (8003280 <main+0x230>)
 8003232:	0092      	lsls	r2, r2, #2
 8003234:	58d3      	ldr	r3, [r2, r3]
 8003236:	1c18      	adds	r0, r3, #0
 8003238:	f7ff fe1c 	bl	8002e74 <__aeabi_f2d>
 800323c:	4a1b      	ldr	r2, [pc, #108]	; (80032ac <main+0x25c>)
 800323e:	4b1c      	ldr	r3, [pc, #112]	; (80032b0 <main+0x260>)
 8003240:	f7fe ff70 	bl	8002124 <__aeabi_dmul>
 8003244:	0002      	movs	r2, r0
 8003246:	000b      	movs	r3, r1
 8003248:	0020      	movs	r0, r4
 800324a:	0029      	movs	r1, r5
 800324c:	f7fe f82c 	bl	80012a8 <__aeabi_dadd>
 8003250:	0002      	movs	r2, r0
 8003252:	000b      	movs	r3, r1
 8003254:	4912      	ldr	r1, [pc, #72]	; (80032a0 <main+0x250>)
 8003256:	680c      	ldr	r4, [r1, #0]
 8003258:	0010      	movs	r0, r2
 800325a:	0019      	movs	r1, r3
 800325c:	f7ff fe52 	bl	8002f04 <__aeabi_d2f>
 8003260:	1c01      	adds	r1, r0, #0
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <main+0x230>)
 8003264:	00a2      	lsls	r2, r4, #2
 8003266:	50d1      	str	r1, [r2, r3]
 8003268:	e02a      	b.n	80032c0 <main+0x270>
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	20004e80 	.word	0x20004e80
 8003270:	20004e40 	.word	0x20004e40
 8003274:	20004e60 	.word	0x20004e60
 8003278:	20004e84 	.word	0x20004e84
 800327c:	20000340 	.word	0x20000340
 8003280:	20000ca0 	.word	0x20000ca0
 8003284:	20001600 	.word	0x20001600
 8003288:	20001f60 	.word	0x20001f60
 800328c:	200028c0 	.word	0x200028c0
 8003290:	20003220 	.word	0x20003220
 8003294:	20003b80 	.word	0x20003b80
 8003298:	200044e0 	.word	0x200044e0
 800329c:	00000256 	.word	0x00000256
 80032a0:	20004e88 	.word	0x20004e88
 80032a4:	00000257 	.word	0x00000257
 80032a8:	c6fa0000 	.word	0xc6fa0000
 80032ac:	3d70a3d7 	.word	0x3d70a3d7
 80032b0:	3fefd70a 	.word	0x3fefd70a
		  else
			  dcblock[current] = 0;
 80032b4:	4bba      	ldr	r3, [pc, #744]	; (80035a0 <main+0x550>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4bba      	ldr	r3, [pc, #744]	; (80035a4 <main+0x554>)
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	2100      	movs	r1, #0
 80032be:	50d1      	str	r1, [r2, r3]

		  // Low Pass filter
		  // Implemented as proposed by the original paper.
		  // y(nT) = 2y(nT - T) - y(nT - 2T) + x(nT) - 2x(nT - 6T) + x(nT - 12T)
		  // Can be removed if your signal was previously filtered, or replaced by a different filter.
		  lowpass[current] = dcblock[current];
 80032c0:	4bb7      	ldr	r3, [pc, #732]	; (80035a0 <main+0x550>)
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	4bb6      	ldr	r3, [pc, #728]	; (80035a0 <main+0x550>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4bb6      	ldr	r3, [pc, #728]	; (80035a4 <main+0x554>)
 80032ca:	0089      	lsls	r1, r1, #2
 80032cc:	58c9      	ldr	r1, [r1, r3]
 80032ce:	4bb6      	ldr	r3, [pc, #728]	; (80035a8 <main+0x558>)
 80032d0:	0092      	lsls	r2, r2, #2
 80032d2:	50d1      	str	r1, [r2, r3]
		  if (current >= 1)
 80032d4:	4bb2      	ldr	r3, [pc, #712]	; (80035a0 <main+0x550>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	dd1b      	ble.n	8003314 <main+0x2c4>
		  	lowpass[current] += 2*lowpass[current-1];
 80032dc:	4bb0      	ldr	r3, [pc, #704]	; (80035a0 <main+0x550>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4bb1      	ldr	r3, [pc, #708]	; (80035a8 <main+0x558>)
 80032e2:	0092      	lsls	r2, r2, #2
 80032e4:	58d5      	ldr	r5, [r2, r3]
 80032e6:	4bae      	ldr	r3, [pc, #696]	; (80035a0 <main+0x550>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	1e5a      	subs	r2, r3, #1
 80032ec:	4bae      	ldr	r3, [pc, #696]	; (80035a8 <main+0x558>)
 80032ee:	0092      	lsls	r2, r2, #2
 80032f0:	58d3      	ldr	r3, [r2, r3]
 80032f2:	1c19      	adds	r1, r3, #0
 80032f4:	1c18      	adds	r0, r3, #0
 80032f6:	f7fd f90d 	bl	8000514 <__aeabi_fadd>
 80032fa:	1c03      	adds	r3, r0, #0
 80032fc:	1c1a      	adds	r2, r3, #0
 80032fe:	4ba8      	ldr	r3, [pc, #672]	; (80035a0 <main+0x550>)
 8003300:	681c      	ldr	r4, [r3, #0]
 8003302:	1c11      	adds	r1, r2, #0
 8003304:	1c28      	adds	r0, r5, #0
 8003306:	f7fd f905 	bl	8000514 <__aeabi_fadd>
 800330a:	1c03      	adds	r3, r0, #0
 800330c:	1c19      	adds	r1, r3, #0
 800330e:	4ba6      	ldr	r3, [pc, #664]	; (80035a8 <main+0x558>)
 8003310:	00a2      	lsls	r2, r4, #2
 8003312:	50d1      	str	r1, [r2, r3]
		  if (current >= 2)
 8003314:	4ba2      	ldr	r3, [pc, #648]	; (80035a0 <main+0x550>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b01      	cmp	r3, #1
 800331a:	dd14      	ble.n	8003346 <main+0x2f6>
		  	lowpass[current] -= lowpass[current-2];
 800331c:	4ba0      	ldr	r3, [pc, #640]	; (80035a0 <main+0x550>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4ba1      	ldr	r3, [pc, #644]	; (80035a8 <main+0x558>)
 8003322:	0092      	lsls	r2, r2, #2
 8003324:	58d0      	ldr	r0, [r2, r3]
 8003326:	4b9e      	ldr	r3, [pc, #632]	; (80035a0 <main+0x550>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	1e9a      	subs	r2, r3, #2
 800332c:	4b9e      	ldr	r3, [pc, #632]	; (80035a8 <main+0x558>)
 800332e:	0092      	lsls	r2, r2, #2
 8003330:	58d2      	ldr	r2, [r2, r3]
 8003332:	4b9b      	ldr	r3, [pc, #620]	; (80035a0 <main+0x550>)
 8003334:	681c      	ldr	r4, [r3, #0]
 8003336:	1c11      	adds	r1, r2, #0
 8003338:	f7fd fd78 	bl	8000e2c <__aeabi_fsub>
 800333c:	1c03      	adds	r3, r0, #0
 800333e:	1c19      	adds	r1, r3, #0
 8003340:	4b99      	ldr	r3, [pc, #612]	; (80035a8 <main+0x558>)
 8003342:	00a2      	lsls	r2, r4, #2
 8003344:	50d1      	str	r1, [r2, r3]
		  if (current >= 6)
 8003346:	4b96      	ldr	r3, [pc, #600]	; (80035a0 <main+0x550>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b05      	cmp	r3, #5
 800334c:	dd1b      	ble.n	8003386 <main+0x336>
		  	lowpass[current] -= 2*dcblock[current-6];
 800334e:	4b94      	ldr	r3, [pc, #592]	; (80035a0 <main+0x550>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b95      	ldr	r3, [pc, #596]	; (80035a8 <main+0x558>)
 8003354:	0092      	lsls	r2, r2, #2
 8003356:	58d5      	ldr	r5, [r2, r3]
 8003358:	4b91      	ldr	r3, [pc, #580]	; (80035a0 <main+0x550>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	1f9a      	subs	r2, r3, #6
 800335e:	4b91      	ldr	r3, [pc, #580]	; (80035a4 <main+0x554>)
 8003360:	0092      	lsls	r2, r2, #2
 8003362:	58d3      	ldr	r3, [r2, r3]
 8003364:	1c19      	adds	r1, r3, #0
 8003366:	1c18      	adds	r0, r3, #0
 8003368:	f7fd f8d4 	bl	8000514 <__aeabi_fadd>
 800336c:	1c03      	adds	r3, r0, #0
 800336e:	1c1a      	adds	r2, r3, #0
 8003370:	4b8b      	ldr	r3, [pc, #556]	; (80035a0 <main+0x550>)
 8003372:	681c      	ldr	r4, [r3, #0]
 8003374:	1c11      	adds	r1, r2, #0
 8003376:	1c28      	adds	r0, r5, #0
 8003378:	f7fd fd58 	bl	8000e2c <__aeabi_fsub>
 800337c:	1c03      	adds	r3, r0, #0
 800337e:	1c19      	adds	r1, r3, #0
 8003380:	4b89      	ldr	r3, [pc, #548]	; (80035a8 <main+0x558>)
 8003382:	00a2      	lsls	r2, r4, #2
 8003384:	50d1      	str	r1, [r2, r3]
		  if (current >= 12)
 8003386:	4b86      	ldr	r3, [pc, #536]	; (80035a0 <main+0x550>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b0b      	cmp	r3, #11
 800338c:	dd15      	ble.n	80033ba <main+0x36a>
		  	lowpass[current] += dcblock[current-12];
 800338e:	4b84      	ldr	r3, [pc, #528]	; (80035a0 <main+0x550>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b85      	ldr	r3, [pc, #532]	; (80035a8 <main+0x558>)
 8003394:	0092      	lsls	r2, r2, #2
 8003396:	58d0      	ldr	r0, [r2, r3]
 8003398:	4b81      	ldr	r3, [pc, #516]	; (80035a0 <main+0x550>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3b0c      	subs	r3, #12
 800339e:	001a      	movs	r2, r3
 80033a0:	4b80      	ldr	r3, [pc, #512]	; (80035a4 <main+0x554>)
 80033a2:	0092      	lsls	r2, r2, #2
 80033a4:	58d2      	ldr	r2, [r2, r3]
 80033a6:	4b7e      	ldr	r3, [pc, #504]	; (80035a0 <main+0x550>)
 80033a8:	681c      	ldr	r4, [r3, #0]
 80033aa:	1c11      	adds	r1, r2, #0
 80033ac:	f7fd f8b2 	bl	8000514 <__aeabi_fadd>
 80033b0:	1c03      	adds	r3, r0, #0
 80033b2:	1c19      	adds	r1, r3, #0
 80033b4:	4b7c      	ldr	r3, [pc, #496]	; (80035a8 <main+0x558>)
 80033b6:	00a2      	lsls	r2, r4, #2
 80033b8:	50d1      	str	r1, [r2, r3]

		  // High Pass filter
		  // Implemented as proposed by the original paper.
		  // y(nT) = 32x(nT - 16T) - [y(nT - T) + x(nT) - x(nT - 32T)]
		  // Can be removed if your signal was previously filtered, or replaced by a different filter.
		  highpass[current] = -lowpass[current];
 80033ba:	4b79      	ldr	r3, [pc, #484]	; (80035a0 <main+0x550>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b7a      	ldr	r3, [pc, #488]	; (80035a8 <main+0x558>)
 80033c0:	0092      	lsls	r2, r2, #2
 80033c2:	58d1      	ldr	r1, [r2, r3]
 80033c4:	4b76      	ldr	r3, [pc, #472]	; (80035a0 <main+0x550>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	2380      	movs	r3, #128	; 0x80
 80033ca:	061b      	lsls	r3, r3, #24
 80033cc:	4059      	eors	r1, r3
 80033ce:	4b77      	ldr	r3, [pc, #476]	; (80035ac <main+0x55c>)
 80033d0:	0092      	lsls	r2, r2, #2
 80033d2:	50d1      	str	r1, [r2, r3]
		  if (current >= 1)
 80033d4:	4b72      	ldr	r3, [pc, #456]	; (80035a0 <main+0x550>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	dd14      	ble.n	8003406 <main+0x3b6>
		  	highpass[current] -= highpass[current-1];
 80033dc:	4b70      	ldr	r3, [pc, #448]	; (80035a0 <main+0x550>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b72      	ldr	r3, [pc, #456]	; (80035ac <main+0x55c>)
 80033e2:	0092      	lsls	r2, r2, #2
 80033e4:	58d0      	ldr	r0, [r2, r3]
 80033e6:	4b6e      	ldr	r3, [pc, #440]	; (80035a0 <main+0x550>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	1e5a      	subs	r2, r3, #1
 80033ec:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <main+0x55c>)
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	58d2      	ldr	r2, [r2, r3]
 80033f2:	4b6b      	ldr	r3, [pc, #428]	; (80035a0 <main+0x550>)
 80033f4:	681c      	ldr	r4, [r3, #0]
 80033f6:	1c11      	adds	r1, r2, #0
 80033f8:	f7fd fd18 	bl	8000e2c <__aeabi_fsub>
 80033fc:	1c03      	adds	r3, r0, #0
 80033fe:	1c19      	adds	r1, r3, #0
 8003400:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <main+0x55c>)
 8003402:	00a2      	lsls	r2, r4, #2
 8003404:	50d1      	str	r1, [r2, r3]
		  if (current >= 16)
 8003406:	4b66      	ldr	r3, [pc, #408]	; (80035a0 <main+0x550>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b0f      	cmp	r3, #15
 800340c:	dd1d      	ble.n	800344a <main+0x3fa>
		  	highpass[current] += 32*lowpass[current-16];
 800340e:	4b64      	ldr	r3, [pc, #400]	; (80035a0 <main+0x550>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4b66      	ldr	r3, [pc, #408]	; (80035ac <main+0x55c>)
 8003414:	0092      	lsls	r2, r2, #2
 8003416:	58d5      	ldr	r5, [r2, r3]
 8003418:	4b61      	ldr	r3, [pc, #388]	; (80035a0 <main+0x550>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3b10      	subs	r3, #16
 800341e:	001a      	movs	r2, r3
 8003420:	4b61      	ldr	r3, [pc, #388]	; (80035a8 <main+0x558>)
 8003422:	0092      	lsls	r2, r2, #2
 8003424:	58d3      	ldr	r3, [r2, r3]
 8003426:	2184      	movs	r1, #132	; 0x84
 8003428:	05c9      	lsls	r1, r1, #23
 800342a:	1c18      	adds	r0, r3, #0
 800342c:	f7fd fbd8 	bl	8000be0 <__aeabi_fmul>
 8003430:	1c03      	adds	r3, r0, #0
 8003432:	1c1a      	adds	r2, r3, #0
 8003434:	4b5a      	ldr	r3, [pc, #360]	; (80035a0 <main+0x550>)
 8003436:	681c      	ldr	r4, [r3, #0]
 8003438:	1c11      	adds	r1, r2, #0
 800343a:	1c28      	adds	r0, r5, #0
 800343c:	f7fd f86a 	bl	8000514 <__aeabi_fadd>
 8003440:	1c03      	adds	r3, r0, #0
 8003442:	1c19      	adds	r1, r3, #0
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <main+0x55c>)
 8003446:	00a2      	lsls	r2, r4, #2
 8003448:	50d1      	str	r1, [r2, r3]
		  if (current >= 32)
 800344a:	4b55      	ldr	r3, [pc, #340]	; (80035a0 <main+0x550>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b1f      	cmp	r3, #31
 8003450:	dd15      	ble.n	800347e <main+0x42e>
		  	highpass[current] += lowpass[current-32];
 8003452:	4b53      	ldr	r3, [pc, #332]	; (80035a0 <main+0x550>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b55      	ldr	r3, [pc, #340]	; (80035ac <main+0x55c>)
 8003458:	0092      	lsls	r2, r2, #2
 800345a:	58d0      	ldr	r0, [r2, r3]
 800345c:	4b50      	ldr	r3, [pc, #320]	; (80035a0 <main+0x550>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3b20      	subs	r3, #32
 8003462:	001a      	movs	r2, r3
 8003464:	4b50      	ldr	r3, [pc, #320]	; (80035a8 <main+0x558>)
 8003466:	0092      	lsls	r2, r2, #2
 8003468:	58d2      	ldr	r2, [r2, r3]
 800346a:	4b4d      	ldr	r3, [pc, #308]	; (80035a0 <main+0x550>)
 800346c:	681c      	ldr	r4, [r3, #0]
 800346e:	1c11      	adds	r1, r2, #0
 8003470:	f7fd f850 	bl	8000514 <__aeabi_fadd>
 8003474:	1c03      	adds	r3, r0, #0
 8003476:	1c19      	adds	r1, r3, #0
 8003478:	4b4c      	ldr	r3, [pc, #304]	; (80035ac <main+0x55c>)
 800347a:	00a2      	lsls	r2, r4, #2
 800347c:	50d1      	str	r1, [r2, r3]
		  // Derivative filter
		  // This is an alternative implementation, the central difference method.
		  // f'(a) = [f(a+h) - f(a-h)]/2h
		  // The original formula used by Pan-Tompkins was:
		  // y(nT) = (1/8T)[-x(nT - 2T) - 2x(nT - T) + 2x(nT + T) + x(nT + 2T)]
		  derivative[current] = highpass[current];
 800347e:	4b48      	ldr	r3, [pc, #288]	; (80035a0 <main+0x550>)
 8003480:	6819      	ldr	r1, [r3, #0]
 8003482:	4b47      	ldr	r3, [pc, #284]	; (80035a0 <main+0x550>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4b49      	ldr	r3, [pc, #292]	; (80035ac <main+0x55c>)
 8003488:	0089      	lsls	r1, r1, #2
 800348a:	58c9      	ldr	r1, [r1, r3]
 800348c:	4b48      	ldr	r3, [pc, #288]	; (80035b0 <main+0x560>)
 800348e:	0092      	lsls	r2, r2, #2
 8003490:	50d1      	str	r1, [r2, r3]
		  if (current > 0)
 8003492:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <main+0x550>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	dd14      	ble.n	80034c4 <main+0x474>
		  	derivative[current] -= highpass[current-1];
 800349a:	4b41      	ldr	r3, [pc, #260]	; (80035a0 <main+0x550>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b44      	ldr	r3, [pc, #272]	; (80035b0 <main+0x560>)
 80034a0:	0092      	lsls	r2, r2, #2
 80034a2:	58d0      	ldr	r0, [r2, r3]
 80034a4:	4b3e      	ldr	r3, [pc, #248]	; (80035a0 <main+0x550>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	1e5a      	subs	r2, r3, #1
 80034aa:	4b40      	ldr	r3, [pc, #256]	; (80035ac <main+0x55c>)
 80034ac:	0092      	lsls	r2, r2, #2
 80034ae:	58d2      	ldr	r2, [r2, r3]
 80034b0:	4b3b      	ldr	r3, [pc, #236]	; (80035a0 <main+0x550>)
 80034b2:	681c      	ldr	r4, [r3, #0]
 80034b4:	1c11      	adds	r1, r2, #0
 80034b6:	f7fd fcb9 	bl	8000e2c <__aeabi_fsub>
 80034ba:	1c03      	adds	r3, r0, #0
 80034bc:	1c19      	adds	r1, r3, #0
 80034be:	4b3c      	ldr	r3, [pc, #240]	; (80035b0 <main+0x560>)
 80034c0:	00a2      	lsls	r2, r4, #2
 80034c2:	50d1      	str	r1, [r2, r3]

		  // This just squares the derivative, to get rid of negative values and emphasize high frequencies.
		  // y(nT) = [x(nT)]^2.
		  squared[current] = derivative[current]*derivative[current];
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <main+0x550>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b39      	ldr	r3, [pc, #228]	; (80035b0 <main+0x560>)
 80034ca:	0092      	lsls	r2, r2, #2
 80034cc:	58d0      	ldr	r0, [r2, r3]
 80034ce:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <main+0x550>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <main+0x560>)
 80034d4:	0092      	lsls	r2, r2, #2
 80034d6:	58d2      	ldr	r2, [r2, r3]
 80034d8:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <main+0x550>)
 80034da:	681c      	ldr	r4, [r3, #0]
 80034dc:	1c11      	adds	r1, r2, #0
 80034de:	f7fd fb7f 	bl	8000be0 <__aeabi_fmul>
 80034e2:	1c03      	adds	r3, r0, #0
 80034e4:	1c19      	adds	r1, r3, #0
 80034e6:	4b33      	ldr	r3, [pc, #204]	; (80035b4 <main+0x564>)
 80034e8:	00a2      	lsls	r2, r4, #2
 80034ea:	50d1      	str	r1, [r2, r3]
		  // Moving-Window Integration
		  // Implemented as proposed by the original paper.
		  // y(nT) = (1/N)[x(nT - (N - 1)T) + x(nT - (N - 2)T) + ... x(nT)]
		  // WINDOWSIZE, in samples, must be defined so that the window is ~150ms.

		  integral[current] = 0;
 80034ec:	4b2c      	ldr	r3, [pc, #176]	; (80035a0 <main+0x550>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <main+0x568>)
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	2100      	movs	r1, #0
 80034f6:	50d1      	str	r1, [r2, r3]
		  for (i = 0; i < WINDOWSIZE; i++)
 80034f8:	4b30      	ldr	r3, [pc, #192]	; (80035bc <main+0x56c>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e02f      	b.n	8003560 <main+0x510>
		  {
		  	if (current >= (dataType)i)
 8003500:	4b27      	ldr	r3, [pc, #156]	; (80035a0 <main+0x550>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	0018      	movs	r0, r3
 8003506:	f7fd fe3f 	bl	8001188 <__aeabi_i2f>
 800350a:	1c04      	adds	r4, r0, #0
 800350c:	4b2b      	ldr	r3, [pc, #172]	; (80035bc <main+0x56c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	0018      	movs	r0, r3
 8003512:	f7fd fe87 	bl	8001224 <__aeabi_ui2f>
 8003516:	1c03      	adds	r3, r0, #0
 8003518:	1c19      	adds	r1, r3, #0
 800351a:	1c20      	adds	r0, r4, #0
 800351c:	f7fc fff0 	bl	8000500 <__aeabi_fcmpge>
 8003520:	1e03      	subs	r3, r0, #0
 8003522:	d100      	bne.n	8003526 <main+0x4d6>
		  		integral[current] += squared[current - i];
		  	else
		  		break;
 8003524:	e020      	b.n	8003568 <main+0x518>
		  		integral[current] += squared[current - i];
 8003526:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <main+0x550>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <main+0x568>)
 800352c:	0092      	lsls	r2, r2, #2
 800352e:	58d0      	ldr	r0, [r2, r3]
 8003530:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <main+0x550>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	001a      	movs	r2, r3
 8003536:	4b21      	ldr	r3, [pc, #132]	; (80035bc <main+0x56c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	1ad2      	subs	r2, r2, r3
 800353c:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <main+0x564>)
 800353e:	0092      	lsls	r2, r2, #2
 8003540:	58d2      	ldr	r2, [r2, r3]
 8003542:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <main+0x550>)
 8003544:	681c      	ldr	r4, [r3, #0]
 8003546:	1c11      	adds	r1, r2, #0
 8003548:	f7fc ffe4 	bl	8000514 <__aeabi_fadd>
 800354c:	1c03      	adds	r3, r0, #0
 800354e:	1c19      	adds	r1, r3, #0
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <main+0x568>)
 8003552:	00a2      	lsls	r2, r4, #2
 8003554:	50d1      	str	r1, [r2, r3]
		  for (i = 0; i < WINDOWSIZE; i++)
 8003556:	4b19      	ldr	r3, [pc, #100]	; (80035bc <main+0x56c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	4b17      	ldr	r3, [pc, #92]	; (80035bc <main+0x56c>)
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	4b16      	ldr	r3, [pc, #88]	; (80035bc <main+0x56c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b35      	cmp	r3, #53	; 0x35
 8003566:	d9cb      	bls.n	8003500 <main+0x4b0>
		  }
		  integral[current] /= (dataType)i;
 8003568:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <main+0x550>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <main+0x568>)
 800356e:	0092      	lsls	r2, r2, #2
 8003570:	58d5      	ldr	r5, [r2, r3]
 8003572:	4b12      	ldr	r3, [pc, #72]	; (80035bc <main+0x56c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	0018      	movs	r0, r3
 8003578:	f7fd fe54 	bl	8001224 <__aeabi_ui2f>
 800357c:	1c02      	adds	r2, r0, #0
 800357e:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <main+0x550>)
 8003580:	681c      	ldr	r4, [r3, #0]
 8003582:	1c11      	adds	r1, r2, #0
 8003584:	1c28      	adds	r0, r5, #0
 8003586:	f7fd f963 	bl	8000850 <__aeabi_fdiv>
 800358a:	1c03      	adds	r3, r0, #0
 800358c:	1c19      	adds	r1, r3, #0
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <main+0x568>)
 8003590:	00a2      	lsls	r2, r4, #2
 8003592:	50d1      	str	r1, [r2, r3]
	  if (loop_triggered()) {
 8003594:	e585      	b.n	80030a2 <main+0x52>
			  break;
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800359a:	0018      	movs	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	bdb0      	pop	{r4, r5, r7, pc}
 80035a0:	20004e88 	.word	0x20004e88
 80035a4:	20000ca0 	.word	0x20000ca0
 80035a8:	20001600 	.word	0x20001600
 80035ac:	20001f60 	.word	0x20001f60
 80035b0:	200028c0 	.word	0x200028c0
 80035b4:	20003220 	.word	0x20003220
 80035b8:	20003b80 	.word	0x20003b80
 80035bc:	20004e80 	.word	0x20004e80

080035c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b093      	sub	sp, #76	; 0x4c
 80035c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035c6:	2414      	movs	r4, #20
 80035c8:	193b      	adds	r3, r7, r4
 80035ca:	0018      	movs	r0, r3
 80035cc:	2334      	movs	r3, #52	; 0x34
 80035ce:	001a      	movs	r2, r3
 80035d0:	2100      	movs	r1, #0
 80035d2:	f004 f94f 	bl	8007874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	0018      	movs	r0, r3
 80035da:	2310      	movs	r3, #16
 80035dc:	001a      	movs	r2, r3
 80035de:	2100      	movs	r1, #0
 80035e0:	f004 f948 	bl	8007874 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	0018      	movs	r0, r3
 80035ea:	f001 ff07 	bl	80053fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80035ee:	193b      	adds	r3, r7, r4
 80035f0:	2202      	movs	r2, #2
 80035f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035f4:	193b      	adds	r3, r7, r4
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	0052      	lsls	r2, r2, #1
 80035fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80035fc:	193b      	adds	r3, r7, r4
 80035fe:	2200      	movs	r2, #0
 8003600:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003602:	193b      	adds	r3, r7, r4
 8003604:	2240      	movs	r2, #64	; 0x40
 8003606:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003608:	193b      	adds	r3, r7, r4
 800360a:	2200      	movs	r2, #0
 800360c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800360e:	193b      	adds	r3, r7, r4
 8003610:	0018      	movs	r0, r3
 8003612:	f001 ff3f 	bl	8005494 <HAL_RCC_OscConfig>
 8003616:	1e03      	subs	r3, r0, #0
 8003618:	d001      	beq.n	800361e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800361a:	f000 f9cf 	bl	80039bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	2207      	movs	r2, #7
 8003622:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003624:	1d3b      	adds	r3, r7, #4
 8003626:	2200      	movs	r2, #0
 8003628:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800362a:	1d3b      	adds	r3, r7, #4
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003630:	1d3b      	adds	r3, r7, #4
 8003632:	2200      	movs	r2, #0
 8003634:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	2100      	movs	r1, #0
 800363a:	0018      	movs	r0, r3
 800363c:	f002 fa3a 	bl	8005ab4 <HAL_RCC_ClockConfig>
 8003640:	1e03      	subs	r3, r0, #0
 8003642:	d001      	beq.n	8003648 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003644:	f000 f9ba 	bl	80039bc <Error_Handler>
  }
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b013      	add	sp, #76	; 0x4c
 800364e:	bd90      	pop	{r4, r7, pc}

08003650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	0018      	movs	r0, r3
 800365a:	230c      	movs	r3, #12
 800365c:	001a      	movs	r2, r3
 800365e:	2100      	movs	r1, #0
 8003660:	f004 f908 	bl	8007874 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003664:	4b2d      	ldr	r3, [pc, #180]	; (800371c <MX_ADC1_Init+0xcc>)
 8003666:	4a2e      	ldr	r2, [pc, #184]	; (8003720 <MX_ADC1_Init+0xd0>)
 8003668:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800366a:	4b2c      	ldr	r3, [pc, #176]	; (800371c <MX_ADC1_Init+0xcc>)
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	05d2      	lsls	r2, r2, #23
 8003670:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003672:	4b2a      	ldr	r3, [pc, #168]	; (800371c <MX_ADC1_Init+0xcc>)
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003678:	4b28      	ldr	r3, [pc, #160]	; (800371c <MX_ADC1_Init+0xcc>)
 800367a:	2200      	movs	r2, #0
 800367c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800367e:	4b27      	ldr	r3, [pc, #156]	; (800371c <MX_ADC1_Init+0xcc>)
 8003680:	2200      	movs	r2, #0
 8003682:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003684:	4b25      	ldr	r3, [pc, #148]	; (800371c <MX_ADC1_Init+0xcc>)
 8003686:	2204      	movs	r2, #4
 8003688:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <MX_ADC1_Init+0xcc>)
 800368c:	2200      	movs	r2, #0
 800368e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003690:	4b22      	ldr	r3, [pc, #136]	; (800371c <MX_ADC1_Init+0xcc>)
 8003692:	2200      	movs	r2, #0
 8003694:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003696:	4b21      	ldr	r3, [pc, #132]	; (800371c <MX_ADC1_Init+0xcc>)
 8003698:	2200      	movs	r2, #0
 800369a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800369c:	4b1f      	ldr	r3, [pc, #124]	; (800371c <MX_ADC1_Init+0xcc>)
 800369e:	2201      	movs	r2, #1
 80036a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036a2:	4b1e      	ldr	r3, [pc, #120]	; (800371c <MX_ADC1_Init+0xcc>)
 80036a4:	2220      	movs	r2, #32
 80036a6:	2100      	movs	r1, #0
 80036a8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036aa:	4b1c      	ldr	r3, [pc, #112]	; (800371c <MX_ADC1_Init+0xcc>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036b0:	4b1a      	ldr	r3, [pc, #104]	; (800371c <MX_ADC1_Init+0xcc>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80036b6:	4b19      	ldr	r3, [pc, #100]	; (800371c <MX_ADC1_Init+0xcc>)
 80036b8:	222c      	movs	r2, #44	; 0x2c
 80036ba:	2100      	movs	r1, #0
 80036bc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80036be:	4b17      	ldr	r3, [pc, #92]	; (800371c <MX_ADC1_Init+0xcc>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80036c4:	4b15      	ldr	r3, [pc, #84]	; (800371c <MX_ADC1_Init+0xcc>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <MX_ADC1_Init+0xcc>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <MX_ADC1_Init+0xcc>)
 80036d2:	223c      	movs	r2, #60	; 0x3c
 80036d4:	2100      	movs	r1, #0
 80036d6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80036d8:	4b10      	ldr	r3, [pc, #64]	; (800371c <MX_ADC1_Init+0xcc>)
 80036da:	2200      	movs	r2, #0
 80036dc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80036de:	4b0f      	ldr	r3, [pc, #60]	; (800371c <MX_ADC1_Init+0xcc>)
 80036e0:	0018      	movs	r0, r3
 80036e2:	f000 fd75 	bl	80041d0 <HAL_ADC_Init>
 80036e6:	1e03      	subs	r3, r0, #0
 80036e8:	d001      	beq.n	80036ee <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80036ea:	f000 f967 	bl	80039bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80036ee:	1d3b      	adds	r3, r7, #4
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80036f4:	1d3b      	adds	r3, r7, #4
 80036f6:	2200      	movs	r2, #0
 80036f8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80036fa:	1d3b      	adds	r3, r7, #4
 80036fc:	2200      	movs	r2, #0
 80036fe:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003700:	1d3a      	adds	r2, r7, #4
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <MX_ADC1_Init+0xcc>)
 8003704:	0011      	movs	r1, r2
 8003706:	0018      	movs	r0, r3
 8003708:	f001 f834 	bl	8004774 <HAL_ADC_ConfigChannel>
 800370c:	1e03      	subs	r3, r0, #0
 800370e:	d001      	beq.n	8003714 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8003710:	f000 f954 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003714:	46c0      	nop			; (mov r8, r8)
 8003716:	46bd      	mov	sp, r7
 8003718:	b004      	add	sp, #16
 800371a:	bd80      	pop	{r7, pc}
 800371c:	200001f8 	.word	0x200001f8
 8003720:	40012400 	.word	0x40012400

08003724 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800372a:	1d3b      	adds	r3, r7, #4
 800372c:	0018      	movs	r0, r3
 800372e:	230c      	movs	r3, #12
 8003730:	001a      	movs	r2, r3
 8003732:	2100      	movs	r1, #0
 8003734:	f004 f89e 	bl	8007874 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003738:	4b15      	ldr	r3, [pc, #84]	; (8003790 <MX_TIM6_Init+0x6c>)
 800373a:	4a16      	ldr	r2, [pc, #88]	; (8003794 <MX_TIM6_Init+0x70>)
 800373c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 800373e:	4b14      	ldr	r3, [pc, #80]	; (8003790 <MX_TIM6_Init+0x6c>)
 8003740:	220f      	movs	r2, #15
 8003742:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <MX_TIM6_Init+0x6c>)
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <MX_TIM6_Init+0x6c>)
 800374c:	4a12      	ldr	r2, [pc, #72]	; (8003798 <MX_TIM6_Init+0x74>)
 800374e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <MX_TIM6_Init+0x6c>)
 8003752:	2200      	movs	r2, #0
 8003754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003756:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <MX_TIM6_Init+0x6c>)
 8003758:	0018      	movs	r0, r3
 800375a:	f002 fc89 	bl	8006070 <HAL_TIM_Base_Init>
 800375e:	1e03      	subs	r3, r0, #0
 8003760:	d001      	beq.n	8003766 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003762:	f000 f92b 	bl	80039bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800376c:	1d3b      	adds	r3, r7, #4
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003772:	1d3a      	adds	r2, r7, #4
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <MX_TIM6_Init+0x6c>)
 8003776:	0011      	movs	r1, r2
 8003778:	0018      	movs	r0, r3
 800377a:	f002 feef 	bl	800655c <HAL_TIMEx_MasterConfigSynchronization>
 800377e:	1e03      	subs	r3, r0, #0
 8003780:	d001      	beq.n	8003786 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003782:	f000 f91b 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	b004      	add	sp, #16
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	2000025c 	.word	0x2000025c
 8003794:	40001000 	.word	0x40001000
 8003798:	0000ffff 	.word	0x0000ffff

0800379c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037a0:	4b23      	ldr	r3, [pc, #140]	; (8003830 <MX_USART2_UART_Init+0x94>)
 80037a2:	4a24      	ldr	r2, [pc, #144]	; (8003834 <MX_USART2_UART_Init+0x98>)
 80037a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200*2;
 80037a6:	4b22      	ldr	r3, [pc, #136]	; (8003830 <MX_USART2_UART_Init+0x94>)
 80037a8:	22e1      	movs	r2, #225	; 0xe1
 80037aa:	0292      	lsls	r2, r2, #10
 80037ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <MX_USART2_UART_Init+0x94>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037b4:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <MX_USART2_UART_Init+0x94>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <MX_USART2_UART_Init+0x94>)
 80037bc:	2200      	movs	r2, #0
 80037be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <MX_USART2_UART_Init+0x94>)
 80037c2:	220c      	movs	r2, #12
 80037c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037c6:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <MX_USART2_UART_Init+0x94>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <MX_USART2_UART_Init+0x94>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037d2:	4b17      	ldr	r3, [pc, #92]	; (8003830 <MX_USART2_UART_Init+0x94>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80037d8:	4b15      	ldr	r3, [pc, #84]	; (8003830 <MX_USART2_UART_Init+0x94>)
 80037da:	2200      	movs	r2, #0
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037de:	4b14      	ldr	r3, [pc, #80]	; (8003830 <MX_USART2_UART_Init+0x94>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037e4:	4b12      	ldr	r3, [pc, #72]	; (8003830 <MX_USART2_UART_Init+0x94>)
 80037e6:	0018      	movs	r0, r3
 80037e8:	f002 ff38 	bl	800665c <HAL_UART_Init>
 80037ec:	1e03      	subs	r3, r0, #0
 80037ee:	d001      	beq.n	80037f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80037f0:	f000 f8e4 	bl	80039bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <MX_USART2_UART_Init+0x94>)
 80037f6:	2100      	movs	r1, #0
 80037f8:	0018      	movs	r0, r3
 80037fa:	f003 ff31 	bl	8007660 <HAL_UARTEx_SetTxFifoThreshold>
 80037fe:	1e03      	subs	r3, r0, #0
 8003800:	d001      	beq.n	8003806 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003802:	f000 f8db 	bl	80039bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <MX_USART2_UART_Init+0x94>)
 8003808:	2100      	movs	r1, #0
 800380a:	0018      	movs	r0, r3
 800380c:	f003 ff68 	bl	80076e0 <HAL_UARTEx_SetRxFifoThreshold>
 8003810:	1e03      	subs	r3, r0, #0
 8003812:	d001      	beq.n	8003818 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003814:	f000 f8d2 	bl	80039bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <MX_USART2_UART_Init+0x94>)
 800381a:	0018      	movs	r0, r3
 800381c:	f003 fee6 	bl	80075ec <HAL_UARTEx_DisableFifoMode>
 8003820:	1e03      	subs	r3, r0, #0
 8003822:	d001      	beq.n	8003828 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003824:	f000 f8ca 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	200002a8 	.word	0x200002a8
 8003834:	40004400 	.word	0x40004400

08003838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003838:	b590      	push	{r4, r7, lr}
 800383a:	b089      	sub	sp, #36	; 0x24
 800383c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383e:	240c      	movs	r4, #12
 8003840:	193b      	adds	r3, r7, r4
 8003842:	0018      	movs	r0, r3
 8003844:	2314      	movs	r3, #20
 8003846:	001a      	movs	r2, r3
 8003848:	2100      	movs	r1, #0
 800384a:	f004 f813 	bl	8007874 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800384e:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <MX_GPIO_Init+0xc0>)
 8003850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003852:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <MX_GPIO_Init+0xc0>)
 8003854:	2104      	movs	r1, #4
 8003856:	430a      	orrs	r2, r1
 8003858:	635a      	str	r2, [r3, #52]	; 0x34
 800385a:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <MX_GPIO_Init+0xc0>)
 800385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385e:	2204      	movs	r2, #4
 8003860:	4013      	ands	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <MX_GPIO_Init+0xc0>)
 8003868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800386a:	4b23      	ldr	r3, [pc, #140]	; (80038f8 <MX_GPIO_Init+0xc0>)
 800386c:	2120      	movs	r1, #32
 800386e:	430a      	orrs	r2, r1
 8003870:	635a      	str	r2, [r3, #52]	; 0x34
 8003872:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <MX_GPIO_Init+0xc0>)
 8003874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003876:	2220      	movs	r2, #32
 8003878:	4013      	ands	r3, r2
 800387a:	607b      	str	r3, [r7, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800387e:	4b1e      	ldr	r3, [pc, #120]	; (80038f8 <MX_GPIO_Init+0xc0>)
 8003880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <MX_GPIO_Init+0xc0>)
 8003884:	2101      	movs	r1, #1
 8003886:	430a      	orrs	r2, r1
 8003888:	635a      	str	r2, [r3, #52]	; 0x34
 800388a:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <MX_GPIO_Init+0xc0>)
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	2201      	movs	r2, #1
 8003890:	4013      	ands	r3, r2
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|DEBUG_Pin, GPIO_PIN_SET);
 8003896:	2384      	movs	r3, #132	; 0x84
 8003898:	00d9      	lsls	r1, r3, #3
 800389a:	23a0      	movs	r3, #160	; 0xa0
 800389c:	05db      	lsls	r3, r3, #23
 800389e:	2201      	movs	r2, #1
 80038a0:	0018      	movs	r0, r3
 80038a2:	f001 fd73 	bl	800538c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PUSHBUTTON_Pin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 80038a6:	193b      	adds	r3, r7, r4
 80038a8:	2280      	movs	r2, #128	; 0x80
 80038aa:	0192      	lsls	r2, r2, #6
 80038ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038ae:	193b      	adds	r3, r7, r4
 80038b0:	2200      	movs	r2, #0
 80038b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b4:	193b      	adds	r3, r7, r4
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 80038ba:	193b      	adds	r3, r7, r4
 80038bc:	4a0f      	ldr	r2, [pc, #60]	; (80038fc <MX_GPIO_Init+0xc4>)
 80038be:	0019      	movs	r1, r3
 80038c0:	0010      	movs	r0, r2
 80038c2:	f001 fbff 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DEBUG_Pin;
 80038c6:	0021      	movs	r1, r4
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	2284      	movs	r2, #132	; 0x84
 80038cc:	00d2      	lsls	r2, r2, #3
 80038ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038d0:	187b      	adds	r3, r7, r1
 80038d2:	2201      	movs	r2, #1
 80038d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	187b      	adds	r3, r7, r1
 80038d8:	2200      	movs	r2, #0
 80038da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	2200      	movs	r2, #0
 80038e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e2:	187a      	adds	r2, r7, r1
 80038e4:	23a0      	movs	r3, #160	; 0xa0
 80038e6:	05db      	lsls	r3, r3, #23
 80038e8:	0011      	movs	r1, r2
 80038ea:	0018      	movs	r0, r3
 80038ec:	f001 fbea 	bl	80050c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b009      	add	sp, #36	; 0x24
 80038f6:	bd90      	pop	{r4, r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	50000800 	.word	0x50000800

08003900 <init_loop_counter>:

/* USER CODE BEGIN 4 */

void init_loop_counter(void) {
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0

	// Start the timer being used for the 1 ms counter
	HAL_TIM_Base_Start(MHZ_TIMER);
 8003904:	4b06      	ldr	r3, [pc, #24]	; (8003920 <init_loop_counter+0x20>)
 8003906:	0018      	movs	r0, r3
 8003908:	f002 fc0a 	bl	8006120 <HAL_TIM_Base_Start>

	// Set the counter
	loop_counter = __HAL_TIM_GET_COUNTER(MHZ_TIMER);
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <init_loop_counter+0x20>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	b29a      	uxth	r2, r3
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <init_loop_counter+0x24>)
 8003916:	801a      	strh	r2, [r3, #0]
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	2000025c 	.word	0x2000025c
 8003924:	2000033c 	.word	0x2000033c

08003928 <loop_triggered>:

bool loop_triggered(void) {
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(MHZ_TIMER) - loop_counter >= (1E6/FS) ? true : false;
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <loop_triggered+0x20>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	4a06      	ldr	r2, [pc, #24]	; (800394c <loop_triggered+0x24>)
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	4a05      	ldr	r2, [pc, #20]	; (8003950 <loop_triggered+0x28>)
 800393a:	429a      	cmp	r2, r3
 800393c:	419b      	sbcs	r3, r3
 800393e:	425b      	negs	r3, r3
 8003940:	b2db      	uxtb	r3, r3
}
 8003942:	0018      	movs	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	2000025c 	.word	0x2000025c
 800394c:	2000033c 	.word	0x2000033c
 8003950:	00000ad9 	.word	0x00000ad9

08003954 <reset_loop_counter>:

void reset_loop_counter(void) {
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
	loop_counter = __HAL_TIM_GET_COUNTER(MHZ_TIMER);
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <reset_loop_counter+0x18>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	b29a      	uxth	r2, r3
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <reset_loop_counter+0x1c>)
 8003962:	801a      	strh	r2, [r3, #0]
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	2000025c 	.word	0x2000025c
 8003970:	2000033c 	.word	0x2000033c

08003974 <input>:

dataType input(void) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
	dataType data;

	HAL_ADC_Start(ECG_ADC);
 800397a:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <input+0x44>)
 800397c:	0018      	movs	r0, r3
 800397e:	f000 fdcf 	bl	8004520 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ECG_ADC, HAL_MAX_DELAY);
 8003982:	2301      	movs	r3, #1
 8003984:	425a      	negs	r2, r3
 8003986:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <input+0x44>)
 8003988:	0011      	movs	r1, r2
 800398a:	0018      	movs	r0, r3
 800398c:	f000 fe52 	bl	8004634 <HAL_ADC_PollForConversion>
	data = (dataType) HAL_ADC_GetValue(ECG_ADC);
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <input+0x44>)
 8003992:	0018      	movs	r0, r3
 8003994:	f000 fee2 	bl	800475c <HAL_ADC_GetValue>
 8003998:	0003      	movs	r3, r0
 800399a:	0018      	movs	r0, r3
 800399c:	f7fd fc42 	bl	8001224 <__aeabi_ui2f>
 80039a0:	1c03      	adds	r3, r0, #0
 80039a2:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(ECG_ADC);
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <input+0x44>)
 80039a6:	0018      	movs	r0, r3
 80039a8:	f000 fe08 	bl	80045bc <HAL_ADC_Stop>

	return data;
 80039ac:	687b      	ldr	r3, [r7, #4]
}
 80039ae:	1c18      	adds	r0, r3, #0
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b002      	add	sp, #8
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	200001f8 	.word	0x200001f8

080039bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039c0:	b672      	cpsid	i
}
 80039c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039c4:	e7fe      	b.n	80039c4 <Error_Handler+0x8>
	...

080039c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ce:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <HAL_MspInit+0x44>)
 80039d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d2:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <HAL_MspInit+0x44>)
 80039d4:	2101      	movs	r1, #1
 80039d6:	430a      	orrs	r2, r1
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40
 80039da:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <HAL_MspInit+0x44>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	2201      	movs	r2, #1
 80039e0:	4013      	ands	r3, r2
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <HAL_MspInit+0x44>)
 80039e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <HAL_MspInit+0x44>)
 80039ec:	2180      	movs	r1, #128	; 0x80
 80039ee:	0549      	lsls	r1, r1, #21
 80039f0:	430a      	orrs	r2, r1
 80039f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <HAL_MspInit+0x44>)
 80039f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	055b      	lsls	r3, r3, #21
 80039fc:	4013      	ands	r3, r2
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b002      	add	sp, #8
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	40021000 	.word	0x40021000

08003a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a10:	b590      	push	{r4, r7, lr}
 8003a12:	b08b      	sub	sp, #44	; 0x2c
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a18:	2414      	movs	r4, #20
 8003a1a:	193b      	adds	r3, r7, r4
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	2314      	movs	r3, #20
 8003a20:	001a      	movs	r2, r3
 8003a22:	2100      	movs	r1, #0
 8003a24:	f003 ff26 	bl	8007874 <memset>
  if(hadc->Instance==ADC1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_ADC_MspInit+0x80>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d129      	bne.n	8003a86 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003a32:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <HAL_ADC_MspInit+0x84>)
 8003a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a36:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <HAL_ADC_MspInit+0x84>)
 8003a38:	2180      	movs	r1, #128	; 0x80
 8003a3a:	0349      	lsls	r1, r1, #13
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a40:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <HAL_ADC_MspInit+0x84>)
 8003a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	035b      	lsls	r3, r3, #13
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <HAL_ADC_MspInit+0x84>)
 8003a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <HAL_ADC_MspInit+0x84>)
 8003a54:	2101      	movs	r1, #1
 8003a56:	430a      	orrs	r2, r1
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <HAL_ADC_MspInit+0x84>)
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5e:	2201      	movs	r2, #1
 8003a60:	4013      	ands	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a66:	193b      	adds	r3, r7, r4
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a6c:	193b      	adds	r3, r7, r4
 8003a6e:	2203      	movs	r2, #3
 8003a70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	193b      	adds	r3, r7, r4
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a78:	193a      	adds	r2, r7, r4
 8003a7a:	23a0      	movs	r3, #160	; 0xa0
 8003a7c:	05db      	lsls	r3, r3, #23
 8003a7e:	0011      	movs	r1, r2
 8003a80:	0018      	movs	r0, r3
 8003a82:	f001 fb1f 	bl	80050c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b00b      	add	sp, #44	; 0x2c
 8003a8c:	bd90      	pop	{r4, r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	40012400 	.word	0x40012400
 8003a94:	40021000 	.word	0x40021000

08003a98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <HAL_TIM_Base_MspInit+0x44>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d113      	bne.n	8003ad2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <HAL_TIM_Base_MspInit+0x48>)
 8003aac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aae:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <HAL_TIM_Base_MspInit+0x48>)
 8003ab0:	2110      	movs	r1, #16
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <HAL_TIM_Base_MspInit+0x48>)
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aba:	2210      	movs	r2, #16
 8003abc:	4013      	ands	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	2011      	movs	r0, #17
 8003ac8:	f001 f9fe 	bl	8004ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003acc:	2011      	movs	r0, #17
 8003ace:	f001 fa10 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b004      	add	sp, #16
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	40001000 	.word	0x40001000
 8003ae0:	40021000 	.word	0x40021000

08003ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ae4:	b590      	push	{r4, r7, lr}
 8003ae6:	b091      	sub	sp, #68	; 0x44
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aec:	232c      	movs	r3, #44	; 0x2c
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	0018      	movs	r0, r3
 8003af2:	2314      	movs	r3, #20
 8003af4:	001a      	movs	r2, r3
 8003af6:	2100      	movs	r1, #0
 8003af8:	f003 febc 	bl	8007874 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003afc:	2410      	movs	r4, #16
 8003afe:	193b      	adds	r3, r7, r4
 8003b00:	0018      	movs	r0, r3
 8003b02:	231c      	movs	r3, #28
 8003b04:	001a      	movs	r2, r3
 8003b06:	2100      	movs	r1, #0
 8003b08:	f003 feb4 	bl	8007874 <memset>
  if(huart->Instance==USART2)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a26      	ldr	r2, [pc, #152]	; (8003bac <HAL_UART_MspInit+0xc8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d146      	bne.n	8003ba4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	2202      	movs	r2, #2
 8003b1a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b1c:	193b      	adds	r3, r7, r4
 8003b1e:	2200      	movs	r2, #0
 8003b20:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b22:	193b      	adds	r3, r7, r4
 8003b24:	0018      	movs	r0, r3
 8003b26:	f002 f96f 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 8003b2a:	1e03      	subs	r3, r0, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003b2e:	f7ff ff45 	bl	80039bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b32:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <HAL_UART_MspInit+0xcc>)
 8003b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b36:	4b1e      	ldr	r3, [pc, #120]	; (8003bb0 <HAL_UART_MspInit+0xcc>)
 8003b38:	2180      	movs	r1, #128	; 0x80
 8003b3a:	0289      	lsls	r1, r1, #10
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b40:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_UART_MspInit+0xcc>)
 8003b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	029b      	lsls	r3, r3, #10
 8003b48:	4013      	ands	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4e:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <HAL_UART_MspInit+0xcc>)
 8003b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b52:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <HAL_UART_MspInit+0xcc>)
 8003b54:	2101      	movs	r1, #1
 8003b56:	430a      	orrs	r2, r1
 8003b58:	635a      	str	r2, [r3, #52]	; 0x34
 8003b5a:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <HAL_UART_MspInit+0xcc>)
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	2201      	movs	r2, #1
 8003b60:	4013      	ands	r3, r2
 8003b62:	60bb      	str	r3, [r7, #8]
 8003b64:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b66:	212c      	movs	r1, #44	; 0x2c
 8003b68:	187b      	adds	r3, r7, r1
 8003b6a:	220c      	movs	r2, #12
 8003b6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6e:	187b      	adds	r3, r7, r1
 8003b70:	2202      	movs	r2, #2
 8003b72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b74:	187b      	adds	r3, r7, r1
 8003b76:	2200      	movs	r2, #0
 8003b78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7a:	187b      	adds	r3, r7, r1
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003b80:	187b      	adds	r3, r7, r1
 8003b82:	2201      	movs	r2, #1
 8003b84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b86:	187a      	adds	r2, r7, r1
 8003b88:	23a0      	movs	r3, #160	; 0xa0
 8003b8a:	05db      	lsls	r3, r3, #23
 8003b8c:	0011      	movs	r1, r2
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f001 fa98 	bl	80050c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b94:	2200      	movs	r2, #0
 8003b96:	2100      	movs	r1, #0
 8003b98:	201c      	movs	r0, #28
 8003b9a:	f001 f995 	bl	8004ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b9e:	201c      	movs	r0, #28
 8003ba0:	f001 f9a7 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b011      	add	sp, #68	; 0x44
 8003baa:	bd90      	pop	{r4, r7, pc}
 8003bac:	40004400 	.word	0x40004400
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bb8:	e7fe      	b.n	8003bb8 <NMI_Handler+0x4>

08003bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bbe:	e7fe      	b.n	8003bbe <HardFault_Handler+0x4>

08003bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bd8:	f000 f974 	bl	8003ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <TIM6_IRQHandler+0x14>)
 8003bea:	0018      	movs	r0, r3
 8003bec:	f002 fae6 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	2000025c 	.word	0x2000025c

08003bfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <USART2_IRQHandler+0x14>)
 8003c02:	0018      	movs	r0, r3
 8003c04:	f002 fd80 	bl	8006708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	200002a8 	.word	0x200002a8

08003c14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  return 1;
 8003c18:	2301      	movs	r3, #1
}
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <_kill>:

int _kill(int pid, int sig)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c2a:	f003 fdf9 	bl	8007820 <__errno>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	2216      	movs	r2, #22
 8003c32:	601a      	str	r2, [r3, #0]
  return -1;
 8003c34:	2301      	movs	r3, #1
 8003c36:	425b      	negs	r3, r3
}
 8003c38:	0018      	movs	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b002      	add	sp, #8
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <_exit>:

void _exit (int status)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c48:	2301      	movs	r3, #1
 8003c4a:	425a      	negs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	0011      	movs	r1, r2
 8003c50:	0018      	movs	r0, r3
 8003c52:	f7ff ffe5 	bl	8003c20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c56:	e7fe      	b.n	8003c56 <_exit+0x16>

08003c58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	e00a      	b.n	8003c80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c6a:	e000      	b.n	8003c6e <_read+0x16>
 8003c6c:	bf00      	nop
 8003c6e:	0001      	movs	r1, r0
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	60ba      	str	r2, [r7, #8]
 8003c76:	b2ca      	uxtb	r2, r1
 8003c78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	dbf0      	blt.n	8003c6a <_read+0x12>
  }

  return len;
 8003c88:	687b      	ldr	r3, [r7, #4]
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b006      	add	sp, #24
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e009      	b.n	8003cb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	60ba      	str	r2, [r7, #8]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	0018      	movs	r0, r3
 8003cae:	e000      	b.n	8003cb2 <_write+0x20>
 8003cb0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	dbf1      	blt.n	8003ca4 <_write+0x12>
  }
  return len;
 8003cc0:	687b      	ldr	r3, [r7, #4]
}
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b006      	add	sp, #24
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <_close>:

int _close(int file)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	425b      	negs	r3, r3
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b002      	add	sp, #8
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2280      	movs	r2, #128	; 0x80
 8003cec:	0192      	lsls	r2, r2, #6
 8003cee:	605a      	str	r2, [r3, #4]
  return 0;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b002      	add	sp, #8
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <_isatty>:

int _isatty(int file)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d02:	2301      	movs	r3, #1
}
 8003d04:	0018      	movs	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b002      	add	sp, #8
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b004      	add	sp, #16
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d2c:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <_sbrk+0x5c>)
 8003d2e:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <_sbrk+0x60>)
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d38:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <_sbrk+0x64>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d102      	bne.n	8003d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d40:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <_sbrk+0x64>)
 8003d42:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <_sbrk+0x68>)
 8003d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <_sbrk+0x64>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	18d3      	adds	r3, r2, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d207      	bcs.n	8003d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d54:	f003 fd64 	bl	8007820 <__errno>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	220c      	movs	r2, #12
 8003d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	425b      	negs	r3, r3
 8003d62:	e009      	b.n	8003d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <_sbrk+0x64>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d6a:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <_sbrk+0x64>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	18d2      	adds	r2, r2, r3
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <_sbrk+0x64>)
 8003d74:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003d76:	68fb      	ldr	r3, [r7, #12]
}
 8003d78:	0018      	movs	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b006      	add	sp, #24
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20009000 	.word	0x20009000
 8003d84:	00000400 	.word	0x00000400
 8003d88:	20004e8c 	.word	0x20004e8c
 8003d8c:	20004ea8 	.word	0x20004ea8

08003d90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d9c:	480d      	ldr	r0, [pc, #52]	; (8003dd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003da0:	f7ff fff6 	bl	8003d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003da4:	480c      	ldr	r0, [pc, #48]	; (8003dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003da6:	490d      	ldr	r1, [pc, #52]	; (8003ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003da8:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <LoopForever+0xe>)
  movs r3, #0
 8003daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dac:	e002      	b.n	8003db4 <LoopCopyDataInit>

08003dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003db2:	3304      	adds	r3, #4

08003db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003db8:	d3f9      	bcc.n	8003dae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dba:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003dbc:	4c0a      	ldr	r4, [pc, #40]	; (8003de8 <LoopForever+0x16>)
  movs r3, #0
 8003dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dc0:	e001      	b.n	8003dc6 <LoopFillZerobss>

08003dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dc4:	3204      	adds	r2, #4

08003dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dc8:	d3fb      	bcc.n	8003dc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003dca:	f003 fd2f 	bl	800782c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003dce:	f7ff f93f 	bl	8003050 <main>

08003dd2 <LoopForever>:

LoopForever:
  b LoopForever
 8003dd2:	e7fe      	b.n	8003dd2 <LoopForever>
  ldr   r0, =_estack
 8003dd4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ddc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003de0:	0800a9e4 	.word	0x0800a9e4
  ldr r2, =_sbss
 8003de4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003de8:	20004ea4 	.word	0x20004ea4

08003dec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003dec:	e7fe      	b.n	8003dec <ADC1_IRQHandler>
	...

08003df0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003df6:	1dfb      	adds	r3, r7, #7
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_Init+0x3c>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <HAL_Init+0x3c>)
 8003e02:	2180      	movs	r1, #128	; 0x80
 8003e04:	0049      	lsls	r1, r1, #1
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	f000 f810 	bl	8003e30 <HAL_InitTick>
 8003e10:	1e03      	subs	r3, r0, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	2201      	movs	r2, #1
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	e001      	b.n	8003e20 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003e1c:	f7ff fdd4 	bl	80039c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e20:	1dfb      	adds	r3, r7, #7
 8003e22:	781b      	ldrb	r3, [r3, #0]
}
 8003e24:	0018      	movs	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40022000 	.word	0x40022000

08003e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e38:	230f      	movs	r3, #15
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003e40:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <HAL_InitTick+0x88>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d02b      	beq.n	8003ea0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003e48:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <HAL_InitTick+0x8c>)
 8003e4a:	681c      	ldr	r4, [r3, #0]
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <HAL_InitTick+0x88>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	0019      	movs	r1, r3
 8003e52:	23fa      	movs	r3, #250	; 0xfa
 8003e54:	0098      	lsls	r0, r3, #2
 8003e56:	f7fc f96f 	bl	8000138 <__udivsi3>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	0020      	movs	r0, r4
 8003e60:	f7fc f96a 	bl	8000138 <__udivsi3>
 8003e64:	0003      	movs	r3, r0
 8003e66:	0018      	movs	r0, r3
 8003e68:	f001 f853 	bl	8004f12 <HAL_SYSTICK_Config>
 8003e6c:	1e03      	subs	r3, r0, #0
 8003e6e:	d112      	bne.n	8003e96 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d80a      	bhi.n	8003e8c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	2301      	movs	r3, #1
 8003e7a:	425b      	negs	r3, r3
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f001 f822 	bl	8004ec8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e84:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <HAL_InitTick+0x90>)
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	e00d      	b.n	8003ea8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003e8c:	230f      	movs	r3, #15
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e008      	b.n	8003ea8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e96:	230f      	movs	r3, #15
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	e003      	b.n	8003ea8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ea0:	230f      	movs	r3, #15
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003ea8:	230f      	movs	r3, #15
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	781b      	ldrb	r3, [r3, #0]
}
 8003eae:	0018      	movs	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b005      	add	sp, #20
 8003eb4:	bd90      	pop	{r4, r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	20000008 	.word	0x20000008
 8003ebc:	20000000 	.word	0x20000000
 8003ec0:	20000004 	.word	0x20000004

08003ec4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_IncTick+0x1c>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	001a      	movs	r2, r3
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_IncTick+0x20>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	18d2      	adds	r2, r2, r3
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_IncTick+0x20>)
 8003ed6:	601a      	str	r2, [r3, #0]
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	20000008 	.word	0x20000008
 8003ee4:	20004e90 	.word	0x20004e90

08003ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  return uwTick;
 8003eec:	4b02      	ldr	r3, [pc, #8]	; (8003ef8 <HAL_GetTick+0x10>)
 8003eee:	681b      	ldr	r3, [r3, #0]
}
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	20004e90 	.word	0x20004e90

08003efc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a05      	ldr	r2, [pc, #20]	; (8003f20 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	601a      	str	r2, [r3, #0]
}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b002      	add	sp, #8
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	fe3fffff 	.word	0xfe3fffff

08003f24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	23e0      	movs	r3, #224	; 0xe0
 8003f32:	045b      	lsls	r3, r3, #17
 8003f34:	4013      	ands	r3, r2
}
 8003f36:	0018      	movs	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b002      	add	sp, #8
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	2104      	movs	r1, #4
 8003f52:	400a      	ands	r2, r1
 8003f54:	2107      	movs	r1, #7
 8003f56:	4091      	lsls	r1, r2
 8003f58:	000a      	movs	r2, r1
 8003f5a:	43d2      	mvns	r2, r2
 8003f5c:	401a      	ands	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2104      	movs	r1, #4
 8003f62:	400b      	ands	r3, r1
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4099      	lsls	r1, r3
 8003f68:	000b      	movs	r3, r1
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b004      	add	sp, #16
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	2104      	movs	r1, #4
 8003f8a:	400a      	ands	r2, r1
 8003f8c:	2107      	movs	r1, #7
 8003f8e:	4091      	lsls	r1, r2
 8003f90:	000a      	movs	r2, r1
 8003f92:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2104      	movs	r1, #4
 8003f98:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003f9a:	40da      	lsrs	r2, r3
 8003f9c:	0013      	movs	r3, r2
}
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b002      	add	sp, #8
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	23c0      	movs	r3, #192	; 0xc0
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d101      	bne.n	8003fbe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b002      	add	sp, #8
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	211f      	movs	r1, #31
 8003fdc:	400a      	ands	r2, r1
 8003fde:	210f      	movs	r1, #15
 8003fe0:	4091      	lsls	r1, r2
 8003fe2:	000a      	movs	r2, r1
 8003fe4:	43d2      	mvns	r2, r2
 8003fe6:	401a      	ands	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	0e9b      	lsrs	r3, r3, #26
 8003fec:	210f      	movs	r1, #15
 8003fee:	4019      	ands	r1, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	201f      	movs	r0, #31
 8003ff4:	4003      	ands	r3, r0
 8003ff6:	4099      	lsls	r1, r3
 8003ff8:	000b      	movs	r3, r1
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004000:	46c0      	nop			; (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b004      	add	sp, #16
 8004006:	bd80      	pop	{r7, pc}

08004008 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	035b      	lsls	r3, r3, #13
 800401a:	0b5b      	lsrs	r3, r3, #13
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	b002      	add	sp, #8
 8004028:	bd80      	pop	{r7, pc}

0800402a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b082      	sub	sp, #8
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	0352      	lsls	r2, r2, #13
 800403c:	0b52      	lsrs	r2, r2, #13
 800403e:	43d2      	mvns	r2, r2
 8004040:	401a      	ands	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	46bd      	mov	sp, r7
 800404a:	b002      	add	sp, #8
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	0212      	lsls	r2, r2, #8
 8004064:	43d2      	mvns	r2, r2
 8004066:	401a      	ands	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	400b      	ands	r3, r1
 8004070:	4904      	ldr	r1, [pc, #16]	; (8004084 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004072:	400b      	ands	r3, r1
 8004074:	431a      	orrs	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	46bd      	mov	sp, r7
 800407e:	b004      	add	sp, #16
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	07ffff00 	.word	0x07ffff00

08004088 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4a05      	ldr	r2, [pc, #20]	; (80040ac <LL_ADC_EnableInternalRegulator+0x24>)
 8004096:	4013      	ands	r3, r2
 8004098:	2280      	movs	r2, #128	; 0x80
 800409a:	0552      	lsls	r2, r2, #21
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b002      	add	sp, #8
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	6fffffe8 	.word	0x6fffffe8

080040b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	055b      	lsls	r3, r3, #21
 80040c0:	401a      	ands	r2, r3
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	055b      	lsls	r3, r3, #21
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d101      	bne.n	80040ce <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	0018      	movs	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b002      	add	sp, #8
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <LL_ADC_Enable+0x20>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	2201      	movs	r2, #1
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b002      	add	sp, #8
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	7fffffe8 	.word	0x7fffffe8

080040fc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4a04      	ldr	r2, [pc, #16]	; (800411c <LL_ADC_Disable+0x20>)
 800410a:	4013      	ands	r3, r2
 800410c:	2202      	movs	r2, #2
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	b002      	add	sp, #8
 800411a:	bd80      	pop	{r7, pc}
 800411c:	7fffffe8 	.word	0x7fffffe8

08004120 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2201      	movs	r2, #1
 800412e:	4013      	ands	r3, r2
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <LL_ADC_IsEnabled+0x18>
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <LL_ADC_IsEnabled+0x1a>
 8004138:	2300      	movs	r3, #0
}
 800413a:	0018      	movs	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	b002      	add	sp, #8
 8004140:	bd80      	pop	{r7, pc}

08004142 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2202      	movs	r2, #2
 8004150:	4013      	ands	r3, r2
 8004152:	2b02      	cmp	r3, #2
 8004154:	d101      	bne.n	800415a <LL_ADC_IsDisableOngoing+0x18>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <LL_ADC_IsDisableOngoing+0x1a>
 800415a:	2300      	movs	r3, #0
}
 800415c:	0018      	movs	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	b002      	add	sp, #8
 8004162:	bd80      	pop	{r7, pc}

08004164 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4a04      	ldr	r2, [pc, #16]	; (8004184 <LL_ADC_REG_StartConversion+0x20>)
 8004172:	4013      	ands	r3, r2
 8004174:	2204      	movs	r2, #4
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	46bd      	mov	sp, r7
 8004180:	b002      	add	sp, #8
 8004182:	bd80      	pop	{r7, pc}
 8004184:	7fffffe8 	.word	0x7fffffe8

08004188 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <LL_ADC_REG_StopConversion+0x20>)
 8004196:	4013      	ands	r3, r2
 8004198:	2210      	movs	r2, #16
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80041a0:	46c0      	nop			; (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b002      	add	sp, #8
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	7fffffe8 	.word	0x7fffffe8

080041ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2204      	movs	r2, #4
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d101      	bne.n	80041c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	0018      	movs	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b002      	add	sp, #8
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041d8:	231f      	movs	r3, #31
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	2200      	movs	r2, #0
 80041de:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e17f      	b.n	80044f6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10a      	bne.n	8004214 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	0018      	movs	r0, r3
 8004202:	f7ff fc05 	bl	8003a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2254      	movs	r2, #84	; 0x54
 8004210:	2100      	movs	r1, #0
 8004212:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	0018      	movs	r0, r3
 800421a:	f7ff ff49 	bl	80040b0 <LL_ADC_IsInternalRegulatorEnabled>
 800421e:	1e03      	subs	r3, r0, #0
 8004220:	d115      	bne.n	800424e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	0018      	movs	r0, r3
 8004228:	f7ff ff2e 	bl	8004088 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800422c:	4bb4      	ldr	r3, [pc, #720]	; (8004500 <HAL_ADC_Init+0x330>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	49b4      	ldr	r1, [pc, #720]	; (8004504 <HAL_ADC_Init+0x334>)
 8004232:	0018      	movs	r0, r3
 8004234:	f7fb ff80 	bl	8000138 <__udivsi3>
 8004238:	0003      	movs	r3, r0
 800423a:	3301      	adds	r3, #1
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004240:	e002      	b.n	8004248 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3b01      	subs	r3, #1
 8004246:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f9      	bne.n	8004242 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	0018      	movs	r0, r3
 8004254:	f7ff ff2c 	bl	80040b0 <LL_ADC_IsInternalRegulatorEnabled>
 8004258:	1e03      	subs	r3, r0, #0
 800425a:	d10f      	bne.n	800427c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	2210      	movs	r2, #16
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	2201      	movs	r2, #1
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004274:	231f      	movs	r3, #31
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	2201      	movs	r2, #1
 800427a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	0018      	movs	r0, r3
 8004282:	f7ff ff93 	bl	80041ac <LL_ADC_REG_IsConversionOngoing>
 8004286:	0003      	movs	r3, r0
 8004288:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	2210      	movs	r2, #16
 8004290:	4013      	ands	r3, r2
 8004292:	d000      	beq.n	8004296 <HAL_ADC_Init+0xc6>
 8004294:	e122      	b.n	80044dc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d000      	beq.n	800429e <HAL_ADC_Init+0xce>
 800429c:	e11e      	b.n	80044dc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a2:	4a99      	ldr	r2, [pc, #612]	; (8004508 <HAL_ADC_Init+0x338>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	2202      	movs	r2, #2
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	0018      	movs	r0, r3
 80042b4:	f7ff ff34 	bl	8004120 <LL_ADC_IsEnabled>
 80042b8:	1e03      	subs	r3, r0, #0
 80042ba:	d000      	beq.n	80042be <HAL_ADC_Init+0xee>
 80042bc:	e0ad      	b.n	800441a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	7e1b      	ldrb	r3, [r3, #24]
 80042c6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80042c8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	7e5b      	ldrb	r3, [r3, #25]
 80042ce:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80042d0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	7e9b      	ldrb	r3, [r3, #26]
 80042d6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80042d8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_ADC_Init+0x118>
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	015b      	lsls	r3, r3, #5
 80042e6:	e000      	b.n	80042ea <HAL_ADC_Init+0x11a>
 80042e8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80042ea:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80042f0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	da04      	bge.n	8004304 <HAL_ADC_Init+0x134>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	e001      	b.n	8004308 <HAL_ADC_Init+0x138>
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004308:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	212c      	movs	r1, #44	; 0x2c
 800430e:	5c5b      	ldrb	r3, [r3, r1]
 8004310:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004312:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	5c9b      	ldrb	r3, [r3, r2]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d115      	bne.n	8004350 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	7e9b      	ldrb	r3, [r3, #26]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2280      	movs	r2, #128	; 0x80
 8004330:	0252      	lsls	r2, r2, #9
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	e00b      	b.n	8004350 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433c:	2220      	movs	r2, #32
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	2201      	movs	r2, #1
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800435c:	23e0      	movs	r3, #224	; 0xe0
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004366:	4313      	orrs	r3, r2
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4313      	orrs	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a65      	ldr	r2, [pc, #404]	; (800450c <HAL_ADC_Init+0x33c>)
 8004376:	4013      	ands	r3, r2
 8004378:	0019      	movs	r1, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	430a      	orrs	r2, r1
 8004382:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	0f9b      	lsrs	r3, r3, #30
 800438a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004390:	4313      	orrs	r3, r2
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	223c      	movs	r2, #60	; 0x3c
 800439c:	5c9b      	ldrb	r3, [r3, r2]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d111      	bne.n	80043c6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	0f9b      	lsrs	r3, r3, #30
 80043a8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80043ae:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80043b4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80043ba:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	2201      	movs	r2, #1
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	4a50      	ldr	r2, [pc, #320]	; (8004510 <HAL_ADC_Init+0x340>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	0019      	movs	r1, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	430a      	orrs	r2, r1
 80043da:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	23c0      	movs	r3, #192	; 0xc0
 80043e2:	061b      	lsls	r3, r3, #24
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d018      	beq.n	800441a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	05db      	lsls	r3, r3, #23
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d012      	beq.n	800441a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	061b      	lsls	r3, r3, #24
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d00c      	beq.n	800441a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004400:	4b44      	ldr	r3, [pc, #272]	; (8004514 <HAL_ADC_Init+0x344>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a44      	ldr	r2, [pc, #272]	; (8004518 <HAL_ADC_Init+0x348>)
 8004406:	4013      	ands	r3, r2
 8004408:	0019      	movs	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	23f0      	movs	r3, #240	; 0xf0
 8004410:	039b      	lsls	r3, r3, #14
 8004412:	401a      	ands	r2, r3
 8004414:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <HAL_ADC_Init+0x344>)
 8004416:	430a      	orrs	r2, r1
 8004418:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004422:	001a      	movs	r2, r3
 8004424:	2100      	movs	r1, #0
 8004426:	f7ff fd8a 	bl	8003f3e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	493a      	ldr	r1, [pc, #232]	; (800451c <HAL_ADC_Init+0x34c>)
 8004434:	001a      	movs	r2, r3
 8004436:	f7ff fd82 	bl	8003f3e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2110      	movs	r1, #16
 800444e:	4249      	negs	r1, r1
 8004450:	430a      	orrs	r2, r1
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
 8004454:	e018      	b.n	8004488 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	039b      	lsls	r3, r3, #14
 800445e:	429a      	cmp	r2, r3
 8004460:	d112      	bne.n	8004488 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	3b01      	subs	r3, #1
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	221c      	movs	r2, #28
 8004472:	4013      	ands	r3, r2
 8004474:	2210      	movs	r2, #16
 8004476:	4252      	negs	r2, r2
 8004478:	409a      	lsls	r2, r3
 800447a:	0011      	movs	r1, r2
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2100      	movs	r1, #0
 800448e:	0018      	movs	r0, r3
 8004490:	f7ff fd72 	bl	8003f78 <LL_ADC_GetSamplingTimeCommonChannels>
 8004494:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800449a:	429a      	cmp	r2, r3
 800449c:	d10b      	bne.n	80044b6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	2203      	movs	r2, #3
 80044aa:	4393      	bics	r3, r2
 80044ac:	2201      	movs	r2, #1
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80044b4:	e01c      	b.n	80044f0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ba:	2212      	movs	r2, #18
 80044bc:	4393      	bics	r3, r2
 80044be:	2210      	movs	r2, #16
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ca:	2201      	movs	r2, #1
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80044d2:	231f      	movs	r3, #31
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	2201      	movs	r2, #1
 80044d8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80044da:	e009      	b.n	80044f0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e0:	2210      	movs	r2, #16
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044e8:	231f      	movs	r3, #31
 80044ea:	18fb      	adds	r3, r7, r3
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80044f0:	231f      	movs	r3, #31
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	781b      	ldrb	r3, [r3, #0]
}
 80044f6:	0018      	movs	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b008      	add	sp, #32
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	20000000 	.word	0x20000000
 8004504:	00030d40 	.word	0x00030d40
 8004508:	fffffefd 	.word	0xfffffefd
 800450c:	fffe0201 	.word	0xfffe0201
 8004510:	1ffffc02 	.word	0x1ffffc02
 8004514:	40012708 	.word	0x40012708
 8004518:	ffc3ffff 	.word	0xffc3ffff
 800451c:	07ffff04 	.word	0x07ffff04

08004520 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004520:	b5b0      	push	{r4, r5, r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	0018      	movs	r0, r3
 800452e:	f7ff fe3d 	bl	80041ac <LL_ADC_REG_IsConversionOngoing>
 8004532:	1e03      	subs	r3, r0, #0
 8004534:	d135      	bne.n	80045a2 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2254      	movs	r2, #84	; 0x54
 800453a:	5c9b      	ldrb	r3, [r3, r2]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_ADC_Start+0x24>
 8004540:	2302      	movs	r3, #2
 8004542:	e035      	b.n	80045b0 <HAL_ADC_Start+0x90>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2254      	movs	r2, #84	; 0x54
 8004548:	2101      	movs	r1, #1
 800454a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800454c:	250f      	movs	r5, #15
 800454e:	197c      	adds	r4, r7, r5
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0018      	movs	r0, r3
 8004554:	f000 fb28 	bl	8004ba8 <ADC_Enable>
 8004558:	0003      	movs	r3, r0
 800455a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800455c:	197b      	adds	r3, r7, r5
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d119      	bne.n	8004598 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004568:	4a13      	ldr	r2, [pc, #76]	; (80045b8 <HAL_ADC_Start+0x98>)
 800456a:	4013      	ands	r3, r2
 800456c:	2280      	movs	r2, #128	; 0x80
 800456e:	0052      	lsls	r2, r2, #1
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	221c      	movs	r2, #28
 8004582:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2254      	movs	r2, #84	; 0x54
 8004588:	2100      	movs	r1, #0
 800458a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0018      	movs	r0, r3
 8004592:	f7ff fde7 	bl	8004164 <LL_ADC_REG_StartConversion>
 8004596:	e008      	b.n	80045aa <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2254      	movs	r2, #84	; 0x54
 800459c:	2100      	movs	r1, #0
 800459e:	5499      	strb	r1, [r3, r2]
 80045a0:	e003      	b.n	80045aa <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80045a2:	230f      	movs	r3, #15
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	2202      	movs	r2, #2
 80045a8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80045aa:	230f      	movs	r3, #15
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	781b      	ldrb	r3, [r3, #0]
}
 80045b0:	0018      	movs	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b004      	add	sp, #16
 80045b6:	bdb0      	pop	{r4, r5, r7, pc}
 80045b8:	fffff0fe 	.word	0xfffff0fe

080045bc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80045bc:	b5b0      	push	{r4, r5, r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2254      	movs	r2, #84	; 0x54
 80045c8:	5c9b      	ldrb	r3, [r3, r2]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_ADC_Stop+0x16>
 80045ce:	2302      	movs	r3, #2
 80045d0:	e029      	b.n	8004626 <HAL_ADC_Stop+0x6a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2254      	movs	r2, #84	; 0x54
 80045d6:	2101      	movs	r1, #1
 80045d8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80045da:	250f      	movs	r5, #15
 80045dc:	197c      	adds	r4, r7, r5
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	0018      	movs	r0, r3
 80045e2:	f000 fa9f 	bl	8004b24 <ADC_ConversionStop>
 80045e6:	0003      	movs	r3, r0
 80045e8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80045ea:	197b      	adds	r3, r7, r5
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d112      	bne.n	8004618 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80045f2:	197c      	adds	r4, r7, r5
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	0018      	movs	r0, r3
 80045f8:	f000 fb5c 	bl	8004cb4 <ADC_Disable>
 80045fc:	0003      	movs	r3, r0
 80045fe:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004600:	197b      	adds	r3, r7, r5
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d107      	bne.n	8004618 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	4a08      	ldr	r2, [pc, #32]	; (8004630 <HAL_ADC_Stop+0x74>)
 800460e:	4013      	ands	r3, r2
 8004610:	2201      	movs	r2, #1
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2254      	movs	r2, #84	; 0x54
 800461c:	2100      	movs	r1, #0
 800461e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004620:	230f      	movs	r3, #15
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	781b      	ldrb	r3, [r3, #0]
}
 8004626:	0018      	movs	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	b004      	add	sp, #16
 800462c:	bdb0      	pop	{r4, r5, r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	fffffefe 	.word	0xfffffefe

08004634 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	2b08      	cmp	r3, #8
 8004644:	d102      	bne.n	800464c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004646:	2308      	movs	r3, #8
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e00f      	b.n	800466c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	4013      	ands	r3, r2
 8004656:	d007      	beq.n	8004668 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465c:	2220      	movs	r2, #32
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e072      	b.n	800474e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004668:	2304      	movs	r3, #4
 800466a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800466c:	f7ff fc3c 	bl	8003ee8 <HAL_GetTick>
 8004670:	0003      	movs	r3, r0
 8004672:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004674:	e01f      	b.n	80046b6 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	3301      	adds	r3, #1
 800467a:	d01c      	beq.n	80046b6 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800467c:	f7ff fc34 	bl	8003ee8 <HAL_GetTick>
 8004680:	0002      	movs	r2, r0
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d302      	bcc.n	8004692 <HAL_ADC_PollForConversion+0x5e>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d111      	bne.n	80046b6 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4013      	ands	r3, r2
 800469c:	d10b      	bne.n	80046b6 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	2204      	movs	r2, #4
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2254      	movs	r2, #84	; 0x54
 80046ae:	2100      	movs	r1, #0
 80046b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e04b      	b.n	800474e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4013      	ands	r3, r2
 80046c0:	d0d9      	beq.n	8004676 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c6:	2280      	movs	r2, #128	; 0x80
 80046c8:	0092      	lsls	r2, r2, #2
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f7ff fc66 	bl	8003fa6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046da:	1e03      	subs	r3, r0, #0
 80046dc:	d02e      	beq.n	800473c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	7e9b      	ldrb	r3, [r3, #26]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d12a      	bne.n	800473c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2208      	movs	r2, #8
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d123      	bne.n	800473c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f7ff fd57 	bl	80041ac <LL_ADC_REG_IsConversionOngoing>
 80046fe:	1e03      	subs	r3, r0, #0
 8004700:	d110      	bne.n	8004724 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	210c      	movs	r1, #12
 800470e:	438a      	bics	r2, r1
 8004710:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	4a10      	ldr	r2, [pc, #64]	; (8004758 <HAL_ADC_PollForConversion+0x124>)
 8004718:	4013      	ands	r3, r2
 800471a:	2201      	movs	r2, #1
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	659a      	str	r2, [r3, #88]	; 0x58
 8004722:	e00b      	b.n	800473c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	2220      	movs	r2, #32
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004734:	2201      	movs	r2, #1
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	7e1b      	ldrb	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d103      	bne.n	800474c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	220c      	movs	r2, #12
 800474a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	0018      	movs	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	b004      	add	sp, #16
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	fffffefe 	.word	0xfffffefe

0800475c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800476a:	0018      	movs	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	b002      	add	sp, #8
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800477e:	2317      	movs	r3, #23
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	2200      	movs	r2, #0
 8004784:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2254      	movs	r2, #84	; 0x54
 800478e:	5c9b      	ldrb	r3, [r3, r2]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x24>
 8004794:	2302      	movs	r3, #2
 8004796:	e1c0      	b.n	8004b1a <HAL_ADC_ConfigChannel+0x3a6>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2254      	movs	r2, #84	; 0x54
 800479c:	2101      	movs	r1, #1
 800479e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	0018      	movs	r0, r3
 80047a6:	f7ff fd01 	bl	80041ac <LL_ADC_REG_IsConversionOngoing>
 80047aa:	1e03      	subs	r3, r0, #0
 80047ac:	d000      	beq.n	80047b0 <HAL_ADC_ConfigChannel+0x3c>
 80047ae:	e1a3      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d100      	bne.n	80047ba <HAL_ADC_ConfigChannel+0x46>
 80047b8:	e143      	b.n	8004a42 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	061b      	lsls	r3, r3, #24
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d004      	beq.n	80047d0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80047ca:	4ac1      	ldr	r2, [pc, #772]	; (8004ad0 <HAL_ADC_ConfigChannel+0x35c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d108      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	0019      	movs	r1, r3
 80047da:	0010      	movs	r0, r2
 80047dc:	f7ff fc14 	bl	8004008 <LL_ADC_REG_SetSequencerChAdd>
 80047e0:	e0c9      	b.n	8004976 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	211f      	movs	r1, #31
 80047ec:	400b      	ands	r3, r1
 80047ee:	210f      	movs	r1, #15
 80047f0:	4099      	lsls	r1, r3
 80047f2:	000b      	movs	r3, r1
 80047f4:	43db      	mvns	r3, r3
 80047f6:	4013      	ands	r3, r2
 80047f8:	0019      	movs	r1, r3
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	035b      	lsls	r3, r3, #13
 8004800:	0b5b      	lsrs	r3, r3, #13
 8004802:	d105      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x9c>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	0e9b      	lsrs	r3, r3, #26
 800480a:	221f      	movs	r2, #31
 800480c:	4013      	ands	r3, r2
 800480e:	e098      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2201      	movs	r2, #1
 8004816:	4013      	ands	r3, r2
 8004818:	d000      	beq.n	800481c <HAL_ADC_ConfigChannel+0xa8>
 800481a:	e091      	b.n	8004940 <HAL_ADC_ConfigChannel+0x1cc>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2202      	movs	r2, #2
 8004822:	4013      	ands	r3, r2
 8004824:	d000      	beq.n	8004828 <HAL_ADC_ConfigChannel+0xb4>
 8004826:	e089      	b.n	800493c <HAL_ADC_ConfigChannel+0x1c8>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2204      	movs	r2, #4
 800482e:	4013      	ands	r3, r2
 8004830:	d000      	beq.n	8004834 <HAL_ADC_ConfigChannel+0xc0>
 8004832:	e081      	b.n	8004938 <HAL_ADC_ConfigChannel+0x1c4>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2208      	movs	r2, #8
 800483a:	4013      	ands	r3, r2
 800483c:	d000      	beq.n	8004840 <HAL_ADC_ConfigChannel+0xcc>
 800483e:	e079      	b.n	8004934 <HAL_ADC_ConfigChannel+0x1c0>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2210      	movs	r2, #16
 8004846:	4013      	ands	r3, r2
 8004848:	d000      	beq.n	800484c <HAL_ADC_ConfigChannel+0xd8>
 800484a:	e071      	b.n	8004930 <HAL_ADC_ConfigChannel+0x1bc>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2220      	movs	r2, #32
 8004852:	4013      	ands	r3, r2
 8004854:	d000      	beq.n	8004858 <HAL_ADC_ConfigChannel+0xe4>
 8004856:	e069      	b.n	800492c <HAL_ADC_ConfigChannel+0x1b8>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2240      	movs	r2, #64	; 0x40
 800485e:	4013      	ands	r3, r2
 8004860:	d000      	beq.n	8004864 <HAL_ADC_ConfigChannel+0xf0>
 8004862:	e061      	b.n	8004928 <HAL_ADC_ConfigChannel+0x1b4>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2280      	movs	r2, #128	; 0x80
 800486a:	4013      	ands	r3, r2
 800486c:	d000      	beq.n	8004870 <HAL_ADC_ConfigChannel+0xfc>
 800486e:	e059      	b.n	8004924 <HAL_ADC_ConfigChannel+0x1b0>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	4013      	ands	r3, r2
 800487a:	d151      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x1ac>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	2380      	movs	r3, #128	; 0x80
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4013      	ands	r3, r2
 8004886:	d149      	bne.n	800491c <HAL_ADC_ConfigChannel+0x1a8>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4013      	ands	r3, r2
 8004892:	d141      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x1a4>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	4013      	ands	r3, r2
 800489e:	d139      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x1a0>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	015b      	lsls	r3, r3, #5
 80048a8:	4013      	ands	r3, r2
 80048aa:	d131      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x19c>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	019b      	lsls	r3, r3, #6
 80048b4:	4013      	ands	r3, r2
 80048b6:	d129      	bne.n	800490c <HAL_ADC_ConfigChannel+0x198>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	01db      	lsls	r3, r3, #7
 80048c0:	4013      	ands	r3, r2
 80048c2:	d121      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x194>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	4013      	ands	r3, r2
 80048ce:	d119      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x190>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	025b      	lsls	r3, r3, #9
 80048d8:	4013      	ands	r3, r2
 80048da:	d111      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x18c>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	029b      	lsls	r3, r3, #10
 80048e4:	4013      	ands	r3, r2
 80048e6:	d109      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x188>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	02db      	lsls	r3, r3, #11
 80048f0:	4013      	ands	r3, r2
 80048f2:	d001      	beq.n	80048f8 <HAL_ADC_ConfigChannel+0x184>
 80048f4:	2312      	movs	r3, #18
 80048f6:	e024      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 80048f8:	2300      	movs	r3, #0
 80048fa:	e022      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 80048fc:	2311      	movs	r3, #17
 80048fe:	e020      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 8004900:	2310      	movs	r3, #16
 8004902:	e01e      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 8004904:	230f      	movs	r3, #15
 8004906:	e01c      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 8004908:	230e      	movs	r3, #14
 800490a:	e01a      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 800490c:	230d      	movs	r3, #13
 800490e:	e018      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 8004910:	230c      	movs	r3, #12
 8004912:	e016      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 8004914:	230b      	movs	r3, #11
 8004916:	e014      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 8004918:	230a      	movs	r3, #10
 800491a:	e012      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 800491c:	2309      	movs	r3, #9
 800491e:	e010      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 8004920:	2308      	movs	r3, #8
 8004922:	e00e      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 8004924:	2307      	movs	r3, #7
 8004926:	e00c      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 8004928:	2306      	movs	r3, #6
 800492a:	e00a      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 800492c:	2305      	movs	r3, #5
 800492e:	e008      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 8004930:	2304      	movs	r3, #4
 8004932:	e006      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 8004934:	2303      	movs	r3, #3
 8004936:	e004      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 8004938:	2302      	movs	r3, #2
 800493a:	e002      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1ce>
 8004940:	2300      	movs	r3, #0
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	6852      	ldr	r2, [r2, #4]
 8004946:	201f      	movs	r0, #31
 8004948:	4002      	ands	r2, r0
 800494a:	4093      	lsls	r3, r2
 800494c:	000a      	movs	r2, r1
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	429a      	cmp	r2, r3
 8004962:	d808      	bhi.n	8004976 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	6859      	ldr	r1, [r3, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	001a      	movs	r2, r3
 8004972:	f7ff fb29 	bl	8003fc8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6819      	ldr	r1, [r3, #0]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	001a      	movs	r2, r3
 8004984:	f7ff fb64 	bl	8004050 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	db00      	blt.n	8004992 <HAL_ADC_ConfigChannel+0x21e>
 8004990:	e0bc      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004992:	4b50      	ldr	r3, [pc, #320]	; (8004ad4 <HAL_ADC_ConfigChannel+0x360>)
 8004994:	0018      	movs	r0, r3
 8004996:	f7ff fac5 	bl	8003f24 <LL_ADC_GetCommonPathInternalCh>
 800499a:	0003      	movs	r3, r0
 800499c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a4d      	ldr	r2, [pc, #308]	; (8004ad8 <HAL_ADC_ConfigChannel+0x364>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d122      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	2380      	movs	r3, #128	; 0x80
 80049ac:	041b      	lsls	r3, r3, #16
 80049ae:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049b0:	d11d      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2280      	movs	r2, #128	; 0x80
 80049b6:	0412      	lsls	r2, r2, #16
 80049b8:	4313      	orrs	r3, r2
 80049ba:	4a46      	ldr	r2, [pc, #280]	; (8004ad4 <HAL_ADC_ConfigChannel+0x360>)
 80049bc:	0019      	movs	r1, r3
 80049be:	0010      	movs	r0, r2
 80049c0:	f7ff fa9c 	bl	8003efc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049c4:	4b45      	ldr	r3, [pc, #276]	; (8004adc <HAL_ADC_ConfigChannel+0x368>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4945      	ldr	r1, [pc, #276]	; (8004ae0 <HAL_ADC_ConfigChannel+0x36c>)
 80049ca:	0018      	movs	r0, r3
 80049cc:	f7fb fbb4 	bl	8000138 <__udivsi3>
 80049d0:	0003      	movs	r3, r0
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	0013      	movs	r3, r2
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	189b      	adds	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049de:	e002      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f9      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049ec:	e08e      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a3c      	ldr	r2, [pc, #240]	; (8004ae4 <HAL_ADC_ConfigChannel+0x370>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d10e      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	045b      	lsls	r3, r3, #17
 80049fe:	4013      	ands	r3, r2
 8004a00:	d109      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2280      	movs	r2, #128	; 0x80
 8004a06:	0452      	lsls	r2, r2, #17
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	4a32      	ldr	r2, [pc, #200]	; (8004ad4 <HAL_ADC_ConfigChannel+0x360>)
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	0010      	movs	r0, r2
 8004a10:	f7ff fa74 	bl	8003efc <LL_ADC_SetCommonPathInternalCh>
 8004a14:	e07a      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a33      	ldr	r2, [pc, #204]	; (8004ae8 <HAL_ADC_ConfigChannel+0x374>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d000      	beq.n	8004a22 <HAL_ADC_ConfigChannel+0x2ae>
 8004a20:	e074      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	03db      	lsls	r3, r3, #15
 8004a28:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004a2a:	d000      	beq.n	8004a2e <HAL_ADC_ConfigChannel+0x2ba>
 8004a2c:	e06e      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2280      	movs	r2, #128	; 0x80
 8004a32:	03d2      	lsls	r2, r2, #15
 8004a34:	4313      	orrs	r3, r2
 8004a36:	4a27      	ldr	r2, [pc, #156]	; (8004ad4 <HAL_ADC_ConfigChannel+0x360>)
 8004a38:	0019      	movs	r1, r3
 8004a3a:	0010      	movs	r0, r2
 8004a3c:	f7ff fa5e 	bl	8003efc <LL_ADC_SetCommonPathInternalCh>
 8004a40:	e064      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	061b      	lsls	r3, r3, #24
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d004      	beq.n	8004a58 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a52:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <HAL_ADC_ConfigChannel+0x35c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d107      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	0019      	movs	r1, r3
 8004a62:	0010      	movs	r0, r2
 8004a64:	f7ff fae1 	bl	800402a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	da4d      	bge.n	8004b0c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a70:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <HAL_ADC_ConfigChannel+0x360>)
 8004a72:	0018      	movs	r0, r3
 8004a74:	f7ff fa56 	bl	8003f24 <LL_ADC_GetCommonPathInternalCh>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <HAL_ADC_ConfigChannel+0x364>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d108      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4a18      	ldr	r2, [pc, #96]	; (8004aec <HAL_ADC_ConfigChannel+0x378>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	4a11      	ldr	r2, [pc, #68]	; (8004ad4 <HAL_ADC_ConfigChannel+0x360>)
 8004a8e:	0019      	movs	r1, r3
 8004a90:	0010      	movs	r0, r2
 8004a92:	f7ff fa33 	bl	8003efc <LL_ADC_SetCommonPathInternalCh>
 8004a96:	e039      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a11      	ldr	r2, [pc, #68]	; (8004ae4 <HAL_ADC_ConfigChannel+0x370>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d108      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4a12      	ldr	r2, [pc, #72]	; (8004af0 <HAL_ADC_ConfigChannel+0x37c>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <HAL_ADC_ConfigChannel+0x360>)
 8004aaa:	0019      	movs	r1, r3
 8004aac:	0010      	movs	r0, r2
 8004aae:	f7ff fa25 	bl	8003efc <LL_ADC_SetCommonPathInternalCh>
 8004ab2:	e02b      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a0b      	ldr	r2, [pc, #44]	; (8004ae8 <HAL_ADC_ConfigChannel+0x374>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d126      	bne.n	8004b0c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4a0c      	ldr	r2, [pc, #48]	; (8004af4 <HAL_ADC_ConfigChannel+0x380>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	4a03      	ldr	r2, [pc, #12]	; (8004ad4 <HAL_ADC_ConfigChannel+0x360>)
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	0010      	movs	r0, r2
 8004aca:	f7ff fa17 	bl	8003efc <LL_ADC_SetCommonPathInternalCh>
 8004ace:	e01d      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x398>
 8004ad0:	80000004 	.word	0x80000004
 8004ad4:	40012708 	.word	0x40012708
 8004ad8:	b0001000 	.word	0xb0001000
 8004adc:	20000000 	.word	0x20000000
 8004ae0:	00030d40 	.word	0x00030d40
 8004ae4:	b8004000 	.word	0xb8004000
 8004ae8:	b4002000 	.word	0xb4002000
 8004aec:	ff7fffff 	.word	0xff7fffff
 8004af0:	feffffff 	.word	0xfeffffff
 8004af4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afc:	2220      	movs	r2, #32
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004b04:	2317      	movs	r3, #23
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2254      	movs	r2, #84	; 0x54
 8004b10:	2100      	movs	r1, #0
 8004b12:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004b14:	2317      	movs	r3, #23
 8004b16:	18fb      	adds	r3, r7, r3
 8004b18:	781b      	ldrb	r3, [r3, #0]
}
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b006      	add	sp, #24
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			; (mov r8, r8)

08004b24 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	0018      	movs	r0, r3
 8004b32:	f7ff fb3b 	bl	80041ac <LL_ADC_REG_IsConversionOngoing>
 8004b36:	1e03      	subs	r3, r0, #0
 8004b38:	d031      	beq.n	8004b9e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f7ff faff 	bl	8004142 <LL_ADC_IsDisableOngoing>
 8004b44:	1e03      	subs	r3, r0, #0
 8004b46:	d104      	bne.n	8004b52 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f7ff fb1b 	bl	8004188 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b52:	f7ff f9c9 	bl	8003ee8 <HAL_GetTick>
 8004b56:	0003      	movs	r3, r0
 8004b58:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004b5a:	e01a      	b.n	8004b92 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004b5c:	f7ff f9c4 	bl	8003ee8 <HAL_GetTick>
 8004b60:	0002      	movs	r2, r0
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d913      	bls.n	8004b92 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2204      	movs	r2, #4
 8004b72:	4013      	ands	r3, r2
 8004b74:	d00d      	beq.n	8004b92 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7a:	2210      	movs	r2, #16
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b86:	2201      	movs	r2, #1
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e006      	b.n	8004ba0 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2204      	movs	r2, #4
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d1de      	bne.n	8004b5c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b004      	add	sp, #16
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f7ff fab1 	bl	8004120 <LL_ADC_IsEnabled>
 8004bbe:	1e03      	subs	r3, r0, #0
 8004bc0:	d000      	beq.n	8004bc4 <ADC_Enable+0x1c>
 8004bc2:	e069      	b.n	8004c98 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	4a36      	ldr	r2, [pc, #216]	; (8004ca4 <ADC_Enable+0xfc>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d00d      	beq.n	8004bec <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be0:	2201      	movs	r2, #1
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e056      	b.n	8004c9a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f7ff fa71 	bl	80040d8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004bf6:	4b2c      	ldr	r3, [pc, #176]	; (8004ca8 <ADC_Enable+0x100>)
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f7ff f993 	bl	8003f24 <LL_ADC_GetCommonPathInternalCh>
 8004bfe:	0002      	movs	r2, r0
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	4013      	ands	r3, r2
 8004c06:	d00f      	beq.n	8004c28 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c08:	4b28      	ldr	r3, [pc, #160]	; (8004cac <ADC_Enable+0x104>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4928      	ldr	r1, [pc, #160]	; (8004cb0 <ADC_Enable+0x108>)
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f7fb fa92 	bl	8000138 <__udivsi3>
 8004c14:	0003      	movs	r3, r0
 8004c16:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004c18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c1a:	e002      	b.n	8004c22 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f9      	bne.n	8004c1c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	7e5b      	ldrb	r3, [r3, #25]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d033      	beq.n	8004c98 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004c30:	f7ff f95a 	bl	8003ee8 <HAL_GetTick>
 8004c34:	0003      	movs	r3, r0
 8004c36:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c38:	e027      	b.n	8004c8a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f7ff fa6e 	bl	8004120 <LL_ADC_IsEnabled>
 8004c44:	1e03      	subs	r3, r0, #0
 8004c46:	d104      	bne.n	8004c52 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7ff fa43 	bl	80040d8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c52:	f7ff f949 	bl	8003ee8 <HAL_GetTick>
 8004c56:	0002      	movs	r2, r0
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d914      	bls.n	8004c8a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2201      	movs	r2, #1
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d00d      	beq.n	8004c8a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c72:	2210      	movs	r2, #16
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7e:	2201      	movs	r2, #1
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e007      	b.n	8004c9a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2201      	movs	r2, #1
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d1d0      	bne.n	8004c3a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b004      	add	sp, #16
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	80000017 	.word	0x80000017
 8004ca8:	40012708 	.word	0x40012708
 8004cac:	20000000 	.word	0x20000000
 8004cb0:	00030d40 	.word	0x00030d40

08004cb4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f7ff fa3e 	bl	8004142 <LL_ADC_IsDisableOngoing>
 8004cc6:	0003      	movs	r3, r0
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f7ff fa26 	bl	8004120 <LL_ADC_IsEnabled>
 8004cd4:	1e03      	subs	r3, r0, #0
 8004cd6:	d046      	beq.n	8004d66 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d143      	bne.n	8004d66 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2205      	movs	r2, #5
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10d      	bne.n	8004d08 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f7ff fa03 	bl	80040fc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004cfe:	f7ff f8f3 	bl	8003ee8 <HAL_GetTick>
 8004d02:	0003      	movs	r3, r0
 8004d04:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d06:	e028      	b.n	8004d5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	2210      	movs	r2, #16
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d18:	2201      	movs	r2, #1
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e021      	b.n	8004d68 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d24:	f7ff f8e0 	bl	8003ee8 <HAL_GetTick>
 8004d28:	0002      	movs	r2, r0
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d913      	bls.n	8004d5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	d00d      	beq.n	8004d5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d42:	2210      	movs	r2, #16
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4e:	2201      	movs	r2, #1
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e006      	b.n	8004d68 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2201      	movs	r2, #1
 8004d62:	4013      	ands	r3, r2
 8004d64:	d1de      	bne.n	8004d24 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b004      	add	sp, #16
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	0002      	movs	r2, r0
 8004d78:	1dfb      	adds	r3, r7, #7
 8004d7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d7c:	1dfb      	adds	r3, r7, #7
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b7f      	cmp	r3, #127	; 0x7f
 8004d82:	d809      	bhi.n	8004d98 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d84:	1dfb      	adds	r3, r7, #7
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	001a      	movs	r2, r3
 8004d8a:	231f      	movs	r3, #31
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <__NVIC_EnableIRQ+0x30>)
 8004d90:	2101      	movs	r1, #1
 8004d92:	4091      	lsls	r1, r2
 8004d94:	000a      	movs	r2, r1
 8004d96:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	e000e100 	.word	0xe000e100

08004da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004da4:	b590      	push	{r4, r7, lr}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	0002      	movs	r2, r0
 8004dac:	6039      	str	r1, [r7, #0]
 8004dae:	1dfb      	adds	r3, r7, #7
 8004db0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004db2:	1dfb      	adds	r3, r7, #7
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b7f      	cmp	r3, #127	; 0x7f
 8004db8:	d828      	bhi.n	8004e0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004dba:	4a2f      	ldr	r2, [pc, #188]	; (8004e78 <__NVIC_SetPriority+0xd4>)
 8004dbc:	1dfb      	adds	r3, r7, #7
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	b25b      	sxtb	r3, r3
 8004dc2:	089b      	lsrs	r3, r3, #2
 8004dc4:	33c0      	adds	r3, #192	; 0xc0
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	589b      	ldr	r3, [r3, r2]
 8004dca:	1dfa      	adds	r2, r7, #7
 8004dcc:	7812      	ldrb	r2, [r2, #0]
 8004dce:	0011      	movs	r1, r2
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	400a      	ands	r2, r1
 8004dd4:	00d2      	lsls	r2, r2, #3
 8004dd6:	21ff      	movs	r1, #255	; 0xff
 8004dd8:	4091      	lsls	r1, r2
 8004dda:	000a      	movs	r2, r1
 8004ddc:	43d2      	mvns	r2, r2
 8004dde:	401a      	ands	r2, r3
 8004de0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	019b      	lsls	r3, r3, #6
 8004de6:	22ff      	movs	r2, #255	; 0xff
 8004de8:	401a      	ands	r2, r3
 8004dea:	1dfb      	adds	r3, r7, #7
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	0018      	movs	r0, r3
 8004df0:	2303      	movs	r3, #3
 8004df2:	4003      	ands	r3, r0
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004df8:	481f      	ldr	r0, [pc, #124]	; (8004e78 <__NVIC_SetPriority+0xd4>)
 8004dfa:	1dfb      	adds	r3, r7, #7
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b25b      	sxtb	r3, r3
 8004e00:	089b      	lsrs	r3, r3, #2
 8004e02:	430a      	orrs	r2, r1
 8004e04:	33c0      	adds	r3, #192	; 0xc0
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004e0a:	e031      	b.n	8004e70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e0c:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <__NVIC_SetPriority+0xd8>)
 8004e0e:	1dfb      	adds	r3, r7, #7
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	0019      	movs	r1, r3
 8004e14:	230f      	movs	r3, #15
 8004e16:	400b      	ands	r3, r1
 8004e18:	3b08      	subs	r3, #8
 8004e1a:	089b      	lsrs	r3, r3, #2
 8004e1c:	3306      	adds	r3, #6
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	18d3      	adds	r3, r2, r3
 8004e22:	3304      	adds	r3, #4
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	1dfa      	adds	r2, r7, #7
 8004e28:	7812      	ldrb	r2, [r2, #0]
 8004e2a:	0011      	movs	r1, r2
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	400a      	ands	r2, r1
 8004e30:	00d2      	lsls	r2, r2, #3
 8004e32:	21ff      	movs	r1, #255	; 0xff
 8004e34:	4091      	lsls	r1, r2
 8004e36:	000a      	movs	r2, r1
 8004e38:	43d2      	mvns	r2, r2
 8004e3a:	401a      	ands	r2, r3
 8004e3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	019b      	lsls	r3, r3, #6
 8004e42:	22ff      	movs	r2, #255	; 0xff
 8004e44:	401a      	ands	r2, r3
 8004e46:	1dfb      	adds	r3, r7, #7
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	4003      	ands	r3, r0
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e54:	4809      	ldr	r0, [pc, #36]	; (8004e7c <__NVIC_SetPriority+0xd8>)
 8004e56:	1dfb      	adds	r3, r7, #7
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	001c      	movs	r4, r3
 8004e5c:	230f      	movs	r3, #15
 8004e5e:	4023      	ands	r3, r4
 8004e60:	3b08      	subs	r3, #8
 8004e62:	089b      	lsrs	r3, r3, #2
 8004e64:	430a      	orrs	r2, r1
 8004e66:	3306      	adds	r3, #6
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	18c3      	adds	r3, r0, r3
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	601a      	str	r2, [r3, #0]
}
 8004e70:	46c0      	nop			; (mov r8, r8)
 8004e72:	46bd      	mov	sp, r7
 8004e74:	b003      	add	sp, #12
 8004e76:	bd90      	pop	{r4, r7, pc}
 8004e78:	e000e100 	.word	0xe000e100
 8004e7c:	e000ed00 	.word	0xe000ed00

08004e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	1e5a      	subs	r2, r3, #1
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	045b      	lsls	r3, r3, #17
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d301      	bcc.n	8004e98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e94:	2301      	movs	r3, #1
 8004e96:	e010      	b.n	8004eba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <SysTick_Config+0x44>)
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	3a01      	subs	r2, #1
 8004e9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	425b      	negs	r3, r3
 8004ea4:	2103      	movs	r1, #3
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f7ff ff7c 	bl	8004da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <SysTick_Config+0x44>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eb2:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <SysTick_Config+0x44>)
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	0018      	movs	r0, r3
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b002      	add	sp, #8
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	e000e010 	.word	0xe000e010

08004ec8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	210f      	movs	r1, #15
 8004ed4:	187b      	adds	r3, r7, r1
 8004ed6:	1c02      	adds	r2, r0, #0
 8004ed8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	187b      	adds	r3, r7, r1
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	b25b      	sxtb	r3, r3
 8004ee2:	0011      	movs	r1, r2
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f7ff ff5d 	bl	8004da4 <__NVIC_SetPriority>
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b004      	add	sp, #16
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	0002      	movs	r2, r0
 8004efa:	1dfb      	adds	r3, r7, #7
 8004efc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004efe:	1dfb      	adds	r3, r7, #7
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	b25b      	sxtb	r3, r3
 8004f04:	0018      	movs	r0, r3
 8004f06:	f7ff ff33 	bl	8004d70 <__NVIC_EnableIRQ>
}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b002      	add	sp, #8
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f7ff ffaf 	bl	8004e80 <SysTick_Config>
 8004f22:	0003      	movs	r3, r0
}
 8004f24:	0018      	movs	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b002      	add	sp, #8
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e050      	b.n	8004fe0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2225      	movs	r2, #37	; 0x25
 8004f42:	5c9b      	ldrb	r3, [r3, r2]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d008      	beq.n	8004f5c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2224      	movs	r2, #36	; 0x24
 8004f54:	2100      	movs	r1, #0
 8004f56:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e041      	b.n	8004fe0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	210e      	movs	r1, #14
 8004f68:	438a      	bics	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	491c      	ldr	r1, [pc, #112]	; (8004fe8 <HAL_DMA_Abort+0xbc>)
 8004f78:	400a      	ands	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2101      	movs	r1, #1
 8004f88:	438a      	bics	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004f8c:	4b17      	ldr	r3, [pc, #92]	; (8004fec <HAL_DMA_Abort+0xc0>)
 8004f8e:	6859      	ldr	r1, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	221c      	movs	r2, #28
 8004f96:	4013      	ands	r3, r2
 8004f98:	2201      	movs	r2, #1
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	4b13      	ldr	r3, [pc, #76]	; (8004fec <HAL_DMA_Abort+0xc0>)
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004faa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00c      	beq.n	8004fce <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbe:	490a      	ldr	r1, [pc, #40]	; (8004fe8 <HAL_DMA_Abort+0xbc>)
 8004fc0:	400a      	ands	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004fcc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2225      	movs	r2, #37	; 0x25
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2224      	movs	r2, #36	; 0x24
 8004fda:	2100      	movs	r1, #0
 8004fdc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b002      	add	sp, #8
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	fffffeff 	.word	0xfffffeff
 8004fec:	40020000 	.word	0x40020000

08004ff0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff8:	210f      	movs	r1, #15
 8004ffa:	187b      	adds	r3, r7, r1
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2225      	movs	r2, #37	; 0x25
 8005004:	5c9b      	ldrb	r3, [r3, r2]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d006      	beq.n	800501a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2204      	movs	r2, #4
 8005010:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005012:	187b      	adds	r3, r7, r1
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	e049      	b.n	80050ae <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	210e      	movs	r1, #14
 8005026:	438a      	bics	r2, r1
 8005028:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2101      	movs	r1, #1
 8005036:	438a      	bics	r2, r1
 8005038:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005044:	491d      	ldr	r1, [pc, #116]	; (80050bc <HAL_DMA_Abort_IT+0xcc>)
 8005046:	400a      	ands	r2, r1
 8005048:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800504a:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <HAL_DMA_Abort_IT+0xd0>)
 800504c:	6859      	ldr	r1, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	221c      	movs	r2, #28
 8005054:	4013      	ands	r3, r2
 8005056:	2201      	movs	r2, #1
 8005058:	409a      	lsls	r2, r3
 800505a:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_DMA_Abort_IT+0xd0>)
 800505c:	430a      	orrs	r2, r1
 800505e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005068:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00c      	beq.n	800508c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507c:	490f      	ldr	r1, [pc, #60]	; (80050bc <HAL_DMA_Abort_IT+0xcc>)
 800507e:	400a      	ands	r2, r1
 8005080:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800508a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2225      	movs	r2, #37	; 0x25
 8005090:	2101      	movs	r1, #1
 8005092:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	; 0x24
 8005098:	2100      	movs	r1, #0
 800509a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	0010      	movs	r0, r2
 80050ac:	4798      	blx	r3
    }
  }
  return status;
 80050ae:	230f      	movs	r3, #15
 80050b0:	18fb      	adds	r3, r7, r3
 80050b2:	781b      	ldrb	r3, [r3, #0]
}
 80050b4:	0018      	movs	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b004      	add	sp, #16
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	fffffeff 	.word	0xfffffeff
 80050c0:	40020000 	.word	0x40020000

080050c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050d2:	e147      	b.n	8005364 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2101      	movs	r1, #1
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4091      	lsls	r1, r2
 80050de:	000a      	movs	r2, r1
 80050e0:	4013      	ands	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d100      	bne.n	80050ec <HAL_GPIO_Init+0x28>
 80050ea:	e138      	b.n	800535e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2203      	movs	r2, #3
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d005      	beq.n	8005104 <HAL_GPIO_Init+0x40>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2203      	movs	r2, #3
 80050fe:	4013      	ands	r3, r2
 8005100:	2b02      	cmp	r3, #2
 8005102:	d130      	bne.n	8005166 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	2203      	movs	r2, #3
 8005110:	409a      	lsls	r2, r3
 8005112:	0013      	movs	r3, r2
 8005114:	43da      	mvns	r2, r3
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4013      	ands	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	409a      	lsls	r2, r3
 8005126:	0013      	movs	r3, r2
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800513a:	2201      	movs	r2, #1
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	409a      	lsls	r2, r3
 8005140:	0013      	movs	r3, r2
 8005142:	43da      	mvns	r2, r3
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	4013      	ands	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	091b      	lsrs	r3, r3, #4
 8005150:	2201      	movs	r2, #1
 8005152:	401a      	ands	r2, r3
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	409a      	lsls	r2, r3
 8005158:	0013      	movs	r3, r2
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2203      	movs	r2, #3
 800516c:	4013      	ands	r3, r2
 800516e:	2b03      	cmp	r3, #3
 8005170:	d017      	beq.n	80051a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	2203      	movs	r2, #3
 800517e:	409a      	lsls	r2, r3
 8005180:	0013      	movs	r3, r2
 8005182:	43da      	mvns	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4013      	ands	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	409a      	lsls	r2, r3
 8005194:	0013      	movs	r3, r2
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2203      	movs	r2, #3
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d123      	bne.n	80051f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	08da      	lsrs	r2, r3, #3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3208      	adds	r2, #8
 80051b6:	0092      	lsls	r2, r2, #2
 80051b8:	58d3      	ldr	r3, [r2, r3]
 80051ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2207      	movs	r2, #7
 80051c0:	4013      	ands	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	220f      	movs	r2, #15
 80051c6:	409a      	lsls	r2, r3
 80051c8:	0013      	movs	r3, r2
 80051ca:	43da      	mvns	r2, r3
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	4013      	ands	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2107      	movs	r1, #7
 80051da:	400b      	ands	r3, r1
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	409a      	lsls	r2, r3
 80051e0:	0013      	movs	r3, r2
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	08da      	lsrs	r2, r3, #3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3208      	adds	r2, #8
 80051f0:	0092      	lsls	r2, r2, #2
 80051f2:	6939      	ldr	r1, [r7, #16]
 80051f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	2203      	movs	r2, #3
 8005202:	409a      	lsls	r2, r3
 8005204:	0013      	movs	r3, r2
 8005206:	43da      	mvns	r2, r3
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4013      	ands	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2203      	movs	r2, #3
 8005214:	401a      	ands	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	409a      	lsls	r2, r3
 800521c:	0013      	movs	r3, r2
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	23c0      	movs	r3, #192	; 0xc0
 8005230:	029b      	lsls	r3, r3, #10
 8005232:	4013      	ands	r3, r2
 8005234:	d100      	bne.n	8005238 <HAL_GPIO_Init+0x174>
 8005236:	e092      	b.n	800535e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005238:	4a50      	ldr	r2, [pc, #320]	; (800537c <HAL_GPIO_Init+0x2b8>)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	089b      	lsrs	r3, r3, #2
 800523e:	3318      	adds	r3, #24
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	589b      	ldr	r3, [r3, r2]
 8005244:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2203      	movs	r2, #3
 800524a:	4013      	ands	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	220f      	movs	r2, #15
 8005250:	409a      	lsls	r2, r3
 8005252:	0013      	movs	r3, r2
 8005254:	43da      	mvns	r2, r3
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4013      	ands	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	23a0      	movs	r3, #160	; 0xa0
 8005260:	05db      	lsls	r3, r3, #23
 8005262:	429a      	cmp	r2, r3
 8005264:	d013      	beq.n	800528e <HAL_GPIO_Init+0x1ca>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a45      	ldr	r2, [pc, #276]	; (8005380 <HAL_GPIO_Init+0x2bc>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00d      	beq.n	800528a <HAL_GPIO_Init+0x1c6>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a44      	ldr	r2, [pc, #272]	; (8005384 <HAL_GPIO_Init+0x2c0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d007      	beq.n	8005286 <HAL_GPIO_Init+0x1c2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a43      	ldr	r2, [pc, #268]	; (8005388 <HAL_GPIO_Init+0x2c4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d101      	bne.n	8005282 <HAL_GPIO_Init+0x1be>
 800527e:	2303      	movs	r3, #3
 8005280:	e006      	b.n	8005290 <HAL_GPIO_Init+0x1cc>
 8005282:	2305      	movs	r3, #5
 8005284:	e004      	b.n	8005290 <HAL_GPIO_Init+0x1cc>
 8005286:	2302      	movs	r3, #2
 8005288:	e002      	b.n	8005290 <HAL_GPIO_Init+0x1cc>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <HAL_GPIO_Init+0x1cc>
 800528e:	2300      	movs	r3, #0
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	2103      	movs	r1, #3
 8005294:	400a      	ands	r2, r1
 8005296:	00d2      	lsls	r2, r2, #3
 8005298:	4093      	lsls	r3, r2
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80052a0:	4936      	ldr	r1, [pc, #216]	; (800537c <HAL_GPIO_Init+0x2b8>)
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	089b      	lsrs	r3, r3, #2
 80052a6:	3318      	adds	r3, #24
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052ae:	4b33      	ldr	r3, [pc, #204]	; (800537c <HAL_GPIO_Init+0x2b8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	43da      	mvns	r2, r3
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4013      	ands	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	2380      	movs	r3, #128	; 0x80
 80052c4:	035b      	lsls	r3, r3, #13
 80052c6:	4013      	ands	r3, r2
 80052c8:	d003      	beq.n	80052d2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052d2:	4b2a      	ldr	r3, [pc, #168]	; (800537c <HAL_GPIO_Init+0x2b8>)
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80052d8:	4b28      	ldr	r3, [pc, #160]	; (800537c <HAL_GPIO_Init+0x2b8>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	43da      	mvns	r2, r3
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4013      	ands	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	2380      	movs	r3, #128	; 0x80
 80052ee:	039b      	lsls	r3, r3, #14
 80052f0:	4013      	ands	r3, r2
 80052f2:	d003      	beq.n	80052fc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052fc:	4b1f      	ldr	r3, [pc, #124]	; (800537c <HAL_GPIO_Init+0x2b8>)
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005302:	4a1e      	ldr	r2, [pc, #120]	; (800537c <HAL_GPIO_Init+0x2b8>)
 8005304:	2384      	movs	r3, #132	; 0x84
 8005306:	58d3      	ldr	r3, [r2, r3]
 8005308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	43da      	mvns	r2, r3
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4013      	ands	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	2380      	movs	r3, #128	; 0x80
 800531a:	029b      	lsls	r3, r3, #10
 800531c:	4013      	ands	r3, r2
 800531e:	d003      	beq.n	8005328 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005328:	4914      	ldr	r1, [pc, #80]	; (800537c <HAL_GPIO_Init+0x2b8>)
 800532a:	2284      	movs	r2, #132	; 0x84
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005330:	4a12      	ldr	r2, [pc, #72]	; (800537c <HAL_GPIO_Init+0x2b8>)
 8005332:	2380      	movs	r3, #128	; 0x80
 8005334:	58d3      	ldr	r3, [r2, r3]
 8005336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	43da      	mvns	r2, r3
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4013      	ands	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	2380      	movs	r3, #128	; 0x80
 8005348:	025b      	lsls	r3, r3, #9
 800534a:	4013      	ands	r3, r2
 800534c:	d003      	beq.n	8005356 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005356:	4909      	ldr	r1, [pc, #36]	; (800537c <HAL_GPIO_Init+0x2b8>)
 8005358:	2280      	movs	r2, #128	; 0x80
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	3301      	adds	r3, #1
 8005362:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	40da      	lsrs	r2, r3
 800536c:	1e13      	subs	r3, r2, #0
 800536e:	d000      	beq.n	8005372 <HAL_GPIO_Init+0x2ae>
 8005370:	e6b0      	b.n	80050d4 <HAL_GPIO_Init+0x10>
  }
}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	46c0      	nop			; (mov r8, r8)
 8005376:	46bd      	mov	sp, r7
 8005378:	b006      	add	sp, #24
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40021800 	.word	0x40021800
 8005380:	50000400 	.word	0x50000400
 8005384:	50000800 	.word	0x50000800
 8005388:	50000c00 	.word	0x50000c00

0800538c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	0008      	movs	r0, r1
 8005396:	0011      	movs	r1, r2
 8005398:	1cbb      	adds	r3, r7, #2
 800539a:	1c02      	adds	r2, r0, #0
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	1c7b      	adds	r3, r7, #1
 80053a0:	1c0a      	adds	r2, r1, #0
 80053a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053a4:	1c7b      	adds	r3, r7, #1
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d004      	beq.n	80053b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053ac:	1cbb      	adds	r3, r7, #2
 80053ae:	881a      	ldrh	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053b4:	e003      	b.n	80053be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053b6:	1cbb      	adds	r3, r7, #2
 80053b8:	881a      	ldrh	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b002      	add	sp, #8
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	000a      	movs	r2, r1
 80053d0:	1cbb      	adds	r3, r7, #2
 80053d2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053da:	1cbb      	adds	r3, r7, #2
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4013      	ands	r3, r2
 80053e2:	041a      	lsls	r2, r3, #16
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	43db      	mvns	r3, r3
 80053e8:	1cb9      	adds	r1, r7, #2
 80053ea:	8809      	ldrh	r1, [r1, #0]
 80053ec:	400b      	ands	r3, r1
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	619a      	str	r2, [r3, #24]
}
 80053f4:	46c0      	nop			; (mov r8, r8)
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b004      	add	sp, #16
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005404:	4b19      	ldr	r3, [pc, #100]	; (800546c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a19      	ldr	r2, [pc, #100]	; (8005470 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800540a:	4013      	ands	r3, r2
 800540c:	0019      	movs	r1, r3
 800540e:	4b17      	ldr	r3, [pc, #92]	; (800546c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	430a      	orrs	r2, r1
 8005414:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	429a      	cmp	r2, r3
 800541e:	d11f      	bne.n	8005460 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005420:	4b14      	ldr	r3, [pc, #80]	; (8005474 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	0013      	movs	r3, r2
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	189b      	adds	r3, r3, r2
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	4912      	ldr	r1, [pc, #72]	; (8005478 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800542e:	0018      	movs	r0, r3
 8005430:	f7fa fe82 	bl	8000138 <__udivsi3>
 8005434:	0003      	movs	r3, r0
 8005436:	3301      	adds	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800543a:	e008      	b.n	800544e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3b01      	subs	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	e001      	b.n	800544e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e009      	b.n	8005462 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800544e:	4b07      	ldr	r3, [pc, #28]	; (800546c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005450:	695a      	ldr	r2, [r3, #20]
 8005452:	2380      	movs	r3, #128	; 0x80
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	401a      	ands	r2, r3
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	429a      	cmp	r2, r3
 800545e:	d0ed      	beq.n	800543c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	0018      	movs	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	b004      	add	sp, #16
 8005468:	bd80      	pop	{r7, pc}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	40007000 	.word	0x40007000
 8005470:	fffff9ff 	.word	0xfffff9ff
 8005474:	20000000 	.word	0x20000000
 8005478:	000f4240 	.word	0x000f4240

0800547c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005480:	4b03      	ldr	r3, [pc, #12]	; (8005490 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	23e0      	movs	r3, #224	; 0xe0
 8005486:	01db      	lsls	r3, r3, #7
 8005488:	4013      	ands	r3, r2
}
 800548a:	0018      	movs	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40021000 	.word	0x40021000

08005494 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e2f3      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2201      	movs	r2, #1
 80054ac:	4013      	ands	r3, r2
 80054ae:	d100      	bne.n	80054b2 <HAL_RCC_OscConfig+0x1e>
 80054b0:	e07c      	b.n	80055ac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054b2:	4bc3      	ldr	r3, [pc, #780]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2238      	movs	r2, #56	; 0x38
 80054b8:	4013      	ands	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054bc:	4bc0      	ldr	r3, [pc, #768]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2203      	movs	r2, #3
 80054c2:	4013      	ands	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d102      	bne.n	80054d2 <HAL_RCC_OscConfig+0x3e>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d002      	beq.n	80054d8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d10b      	bne.n	80054f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d8:	4bb9      	ldr	r3, [pc, #740]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	4013      	ands	r3, r2
 80054e2:	d062      	beq.n	80055aa <HAL_RCC_OscConfig+0x116>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d15e      	bne.n	80055aa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e2ce      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	2380      	movs	r3, #128	; 0x80
 80054f6:	025b      	lsls	r3, r3, #9
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d107      	bne.n	800550c <HAL_RCC_OscConfig+0x78>
 80054fc:	4bb0      	ldr	r3, [pc, #704]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4baf      	ldr	r3, [pc, #700]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005502:	2180      	movs	r1, #128	; 0x80
 8005504:	0249      	lsls	r1, r1, #9
 8005506:	430a      	orrs	r2, r1
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	e020      	b.n	800554e <HAL_RCC_OscConfig+0xba>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	23a0      	movs	r3, #160	; 0xa0
 8005512:	02db      	lsls	r3, r3, #11
 8005514:	429a      	cmp	r2, r3
 8005516:	d10e      	bne.n	8005536 <HAL_RCC_OscConfig+0xa2>
 8005518:	4ba9      	ldr	r3, [pc, #676]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	4ba8      	ldr	r3, [pc, #672]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800551e:	2180      	movs	r1, #128	; 0x80
 8005520:	02c9      	lsls	r1, r1, #11
 8005522:	430a      	orrs	r2, r1
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	4ba6      	ldr	r3, [pc, #664]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	4ba5      	ldr	r3, [pc, #660]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800552c:	2180      	movs	r1, #128	; 0x80
 800552e:	0249      	lsls	r1, r1, #9
 8005530:	430a      	orrs	r2, r1
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e00b      	b.n	800554e <HAL_RCC_OscConfig+0xba>
 8005536:	4ba2      	ldr	r3, [pc, #648]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4ba1      	ldr	r3, [pc, #644]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800553c:	49a1      	ldr	r1, [pc, #644]	; (80057c4 <HAL_RCC_OscConfig+0x330>)
 800553e:	400a      	ands	r2, r1
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	4b9f      	ldr	r3, [pc, #636]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4b9e      	ldr	r3, [pc, #632]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005548:	499f      	ldr	r1, [pc, #636]	; (80057c8 <HAL_RCC_OscConfig+0x334>)
 800554a:	400a      	ands	r2, r1
 800554c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d014      	beq.n	8005580 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005556:	f7fe fcc7 	bl	8003ee8 <HAL_GetTick>
 800555a:	0003      	movs	r3, r0
 800555c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005560:	f7fe fcc2 	bl	8003ee8 <HAL_GetTick>
 8005564:	0002      	movs	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b64      	cmp	r3, #100	; 0x64
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e28d      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005572:	4b93      	ldr	r3, [pc, #588]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	2380      	movs	r3, #128	; 0x80
 8005578:	029b      	lsls	r3, r3, #10
 800557a:	4013      	ands	r3, r2
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0xcc>
 800557e:	e015      	b.n	80055ac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fe fcb2 	bl	8003ee8 <HAL_GetTick>
 8005584:	0003      	movs	r3, r0
 8005586:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800558a:	f7fe fcad 	bl	8003ee8 <HAL_GetTick>
 800558e:	0002      	movs	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b64      	cmp	r3, #100	; 0x64
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e278      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800559c:	4b88      	ldr	r3, [pc, #544]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	2380      	movs	r3, #128	; 0x80
 80055a2:	029b      	lsls	r3, r3, #10
 80055a4:	4013      	ands	r3, r2
 80055a6:	d1f0      	bne.n	800558a <HAL_RCC_OscConfig+0xf6>
 80055a8:	e000      	b.n	80055ac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2202      	movs	r2, #2
 80055b2:	4013      	ands	r3, r2
 80055b4:	d100      	bne.n	80055b8 <HAL_RCC_OscConfig+0x124>
 80055b6:	e099      	b.n	80056ec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055b8:	4b81      	ldr	r3, [pc, #516]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2238      	movs	r2, #56	; 0x38
 80055be:	4013      	ands	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055c2:	4b7f      	ldr	r3, [pc, #508]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2203      	movs	r2, #3
 80055c8:	4013      	ands	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b10      	cmp	r3, #16
 80055d0:	d102      	bne.n	80055d8 <HAL_RCC_OscConfig+0x144>
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d002      	beq.n	80055de <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d135      	bne.n	800564a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055de:	4b78      	ldr	r3, [pc, #480]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	2380      	movs	r3, #128	; 0x80
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4013      	ands	r3, r2
 80055e8:	d005      	beq.n	80055f6 <HAL_RCC_OscConfig+0x162>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e24b      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f6:	4b72      	ldr	r3, [pc, #456]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4a74      	ldr	r2, [pc, #464]	; (80057cc <HAL_RCC_OscConfig+0x338>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	0019      	movs	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	021a      	lsls	r2, r3, #8
 8005606:	4b6e      	ldr	r3, [pc, #440]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005608:	430a      	orrs	r2, r1
 800560a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d112      	bne.n	8005638 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005612:	4b6b      	ldr	r3, [pc, #428]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a6e      	ldr	r2, [pc, #440]	; (80057d0 <HAL_RCC_OscConfig+0x33c>)
 8005618:	4013      	ands	r3, r2
 800561a:	0019      	movs	r1, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	4b67      	ldr	r3, [pc, #412]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005622:	430a      	orrs	r2, r1
 8005624:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005626:	4b66      	ldr	r3, [pc, #408]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	0adb      	lsrs	r3, r3, #11
 800562c:	2207      	movs	r2, #7
 800562e:	4013      	ands	r3, r2
 8005630:	4a68      	ldr	r2, [pc, #416]	; (80057d4 <HAL_RCC_OscConfig+0x340>)
 8005632:	40da      	lsrs	r2, r3
 8005634:	4b68      	ldr	r3, [pc, #416]	; (80057d8 <HAL_RCC_OscConfig+0x344>)
 8005636:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005638:	4b68      	ldr	r3, [pc, #416]	; (80057dc <HAL_RCC_OscConfig+0x348>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	0018      	movs	r0, r3
 800563e:	f7fe fbf7 	bl	8003e30 <HAL_InitTick>
 8005642:	1e03      	subs	r3, r0, #0
 8005644:	d051      	beq.n	80056ea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e221      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d030      	beq.n	80056b4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005652:	4b5b      	ldr	r3, [pc, #364]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a5e      	ldr	r2, [pc, #376]	; (80057d0 <HAL_RCC_OscConfig+0x33c>)
 8005658:	4013      	ands	r3, r2
 800565a:	0019      	movs	r1, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	4b57      	ldr	r3, [pc, #348]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005662:	430a      	orrs	r2, r1
 8005664:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005666:	4b56      	ldr	r3, [pc, #344]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b55      	ldr	r3, [pc, #340]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800566c:	2180      	movs	r1, #128	; 0x80
 800566e:	0049      	lsls	r1, r1, #1
 8005670:	430a      	orrs	r2, r1
 8005672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fe fc38 	bl	8003ee8 <HAL_GetTick>
 8005678:	0003      	movs	r3, r0
 800567a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800567e:	f7fe fc33 	bl	8003ee8 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e1fe      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005690:	4b4b      	ldr	r3, [pc, #300]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4013      	ands	r3, r2
 800569a:	d0f0      	beq.n	800567e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800569c:	4b48      	ldr	r3, [pc, #288]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4a4a      	ldr	r2, [pc, #296]	; (80057cc <HAL_RCC_OscConfig+0x338>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	0019      	movs	r1, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	021a      	lsls	r2, r3, #8
 80056ac:	4b44      	ldr	r3, [pc, #272]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	e01b      	b.n	80056ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80056b4:	4b42      	ldr	r3, [pc, #264]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4b41      	ldr	r3, [pc, #260]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80056ba:	4949      	ldr	r1, [pc, #292]	; (80057e0 <HAL_RCC_OscConfig+0x34c>)
 80056bc:	400a      	ands	r2, r1
 80056be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fe fc12 	bl	8003ee8 <HAL_GetTick>
 80056c4:	0003      	movs	r3, r0
 80056c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ca:	f7fe fc0d 	bl	8003ee8 <HAL_GetTick>
 80056ce:	0002      	movs	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e1d8      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056dc:	4b38      	ldr	r3, [pc, #224]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	4013      	ands	r3, r2
 80056e6:	d1f0      	bne.n	80056ca <HAL_RCC_OscConfig+0x236>
 80056e8:	e000      	b.n	80056ec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2208      	movs	r2, #8
 80056f2:	4013      	ands	r3, r2
 80056f4:	d047      	beq.n	8005786 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80056f6:	4b32      	ldr	r3, [pc, #200]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2238      	movs	r2, #56	; 0x38
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b18      	cmp	r3, #24
 8005700:	d10a      	bne.n	8005718 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005702:	4b2f      	ldr	r3, [pc, #188]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005706:	2202      	movs	r2, #2
 8005708:	4013      	ands	r3, r2
 800570a:	d03c      	beq.n	8005786 <HAL_RCC_OscConfig+0x2f2>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d138      	bne.n	8005786 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e1ba      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d019      	beq.n	8005754 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005720:	4b27      	ldr	r3, [pc, #156]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005722:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005724:	4b26      	ldr	r3, [pc, #152]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005726:	2101      	movs	r1, #1
 8005728:	430a      	orrs	r2, r1
 800572a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fe fbdc 	bl	8003ee8 <HAL_GetTick>
 8005730:	0003      	movs	r3, r0
 8005732:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005736:	f7fe fbd7 	bl	8003ee8 <HAL_GetTick>
 800573a:	0002      	movs	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e1a2      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005748:	4b1d      	ldr	r3, [pc, #116]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800574a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574c:	2202      	movs	r2, #2
 800574e:	4013      	ands	r3, r2
 8005750:	d0f1      	beq.n	8005736 <HAL_RCC_OscConfig+0x2a2>
 8005752:	e018      	b.n	8005786 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005754:	4b1a      	ldr	r3, [pc, #104]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005756:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005758:	4b19      	ldr	r3, [pc, #100]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800575a:	2101      	movs	r1, #1
 800575c:	438a      	bics	r2, r1
 800575e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005760:	f7fe fbc2 	bl	8003ee8 <HAL_GetTick>
 8005764:	0003      	movs	r3, r0
 8005766:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800576a:	f7fe fbbd 	bl	8003ee8 <HAL_GetTick>
 800576e:	0002      	movs	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e188      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800577c:	4b10      	ldr	r3, [pc, #64]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800577e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005780:	2202      	movs	r2, #2
 8005782:	4013      	ands	r3, r2
 8005784:	d1f1      	bne.n	800576a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2204      	movs	r2, #4
 800578c:	4013      	ands	r3, r2
 800578e:	d100      	bne.n	8005792 <HAL_RCC_OscConfig+0x2fe>
 8005790:	e0c6      	b.n	8005920 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005792:	231f      	movs	r3, #31
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2238      	movs	r2, #56	; 0x38
 80057a0:	4013      	ands	r3, r2
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d11e      	bne.n	80057e4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80057a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057aa:	2202      	movs	r2, #2
 80057ac:	4013      	ands	r3, r2
 80057ae:	d100      	bne.n	80057b2 <HAL_RCC_OscConfig+0x31e>
 80057b0:	e0b6      	b.n	8005920 <HAL_RCC_OscConfig+0x48c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d000      	beq.n	80057bc <HAL_RCC_OscConfig+0x328>
 80057ba:	e0b1      	b.n	8005920 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e166      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
 80057c0:	40021000 	.word	0x40021000
 80057c4:	fffeffff 	.word	0xfffeffff
 80057c8:	fffbffff 	.word	0xfffbffff
 80057cc:	ffff80ff 	.word	0xffff80ff
 80057d0:	ffffc7ff 	.word	0xffffc7ff
 80057d4:	00f42400 	.word	0x00f42400
 80057d8:	20000000 	.word	0x20000000
 80057dc:	20000004 	.word	0x20000004
 80057e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057e4:	4bac      	ldr	r3, [pc, #688]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80057e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	055b      	lsls	r3, r3, #21
 80057ec:	4013      	ands	r3, r2
 80057ee:	d101      	bne.n	80057f4 <HAL_RCC_OscConfig+0x360>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <HAL_RCC_OscConfig+0x362>
 80057f4:	2300      	movs	r3, #0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d011      	beq.n	800581e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80057fa:	4ba7      	ldr	r3, [pc, #668]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80057fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057fe:	4ba6      	ldr	r3, [pc, #664]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005800:	2180      	movs	r1, #128	; 0x80
 8005802:	0549      	lsls	r1, r1, #21
 8005804:	430a      	orrs	r2, r1
 8005806:	63da      	str	r2, [r3, #60]	; 0x3c
 8005808:	4ba3      	ldr	r3, [pc, #652]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800580a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800580c:	2380      	movs	r3, #128	; 0x80
 800580e:	055b      	lsls	r3, r3, #21
 8005810:	4013      	ands	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005816:	231f      	movs	r3, #31
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	2201      	movs	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800581e:	4b9f      	ldr	r3, [pc, #636]	; (8005a9c <HAL_RCC_OscConfig+0x608>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	4013      	ands	r3, r2
 8005828:	d11a      	bne.n	8005860 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800582a:	4b9c      	ldr	r3, [pc, #624]	; (8005a9c <HAL_RCC_OscConfig+0x608>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b9b      	ldr	r3, [pc, #620]	; (8005a9c <HAL_RCC_OscConfig+0x608>)
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	0049      	lsls	r1, r1, #1
 8005834:	430a      	orrs	r2, r1
 8005836:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005838:	f7fe fb56 	bl	8003ee8 <HAL_GetTick>
 800583c:	0003      	movs	r3, r0
 800583e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005840:	e008      	b.n	8005854 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005842:	f7fe fb51 	bl	8003ee8 <HAL_GetTick>
 8005846:	0002      	movs	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e11c      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005854:	4b91      	ldr	r3, [pc, #580]	; (8005a9c <HAL_RCC_OscConfig+0x608>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	2380      	movs	r3, #128	; 0x80
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	4013      	ands	r3, r2
 800585e:	d0f0      	beq.n	8005842 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d106      	bne.n	8005876 <HAL_RCC_OscConfig+0x3e2>
 8005868:	4b8b      	ldr	r3, [pc, #556]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800586a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800586c:	4b8a      	ldr	r3, [pc, #552]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800586e:	2101      	movs	r1, #1
 8005870:	430a      	orrs	r2, r1
 8005872:	65da      	str	r2, [r3, #92]	; 0x5c
 8005874:	e01c      	b.n	80058b0 <HAL_RCC_OscConfig+0x41c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2b05      	cmp	r3, #5
 800587c:	d10c      	bne.n	8005898 <HAL_RCC_OscConfig+0x404>
 800587e:	4b86      	ldr	r3, [pc, #536]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005880:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005882:	4b85      	ldr	r3, [pc, #532]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005884:	2104      	movs	r1, #4
 8005886:	430a      	orrs	r2, r1
 8005888:	65da      	str	r2, [r3, #92]	; 0x5c
 800588a:	4b83      	ldr	r3, [pc, #524]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800588c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800588e:	4b82      	ldr	r3, [pc, #520]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005890:	2101      	movs	r1, #1
 8005892:	430a      	orrs	r2, r1
 8005894:	65da      	str	r2, [r3, #92]	; 0x5c
 8005896:	e00b      	b.n	80058b0 <HAL_RCC_OscConfig+0x41c>
 8005898:	4b7f      	ldr	r3, [pc, #508]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800589a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800589c:	4b7e      	ldr	r3, [pc, #504]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800589e:	2101      	movs	r1, #1
 80058a0:	438a      	bics	r2, r1
 80058a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80058a4:	4b7c      	ldr	r3, [pc, #496]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80058a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058a8:	4b7b      	ldr	r3, [pc, #492]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80058aa:	2104      	movs	r1, #4
 80058ac:	438a      	bics	r2, r1
 80058ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d014      	beq.n	80058e2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b8:	f7fe fb16 	bl	8003ee8 <HAL_GetTick>
 80058bc:	0003      	movs	r3, r0
 80058be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058c0:	e009      	b.n	80058d6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c2:	f7fe fb11 	bl	8003ee8 <HAL_GetTick>
 80058c6:	0002      	movs	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	4a74      	ldr	r2, [pc, #464]	; (8005aa0 <HAL_RCC_OscConfig+0x60c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e0db      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d6:	4b70      	ldr	r3, [pc, #448]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80058d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058da:	2202      	movs	r2, #2
 80058dc:	4013      	ands	r3, r2
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCC_OscConfig+0x42e>
 80058e0:	e013      	b.n	800590a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e2:	f7fe fb01 	bl	8003ee8 <HAL_GetTick>
 80058e6:	0003      	movs	r3, r0
 80058e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058ea:	e009      	b.n	8005900 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ec:	f7fe fafc 	bl	8003ee8 <HAL_GetTick>
 80058f0:	0002      	movs	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	4a6a      	ldr	r2, [pc, #424]	; (8005aa0 <HAL_RCC_OscConfig+0x60c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e0c6      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005900:	4b65      	ldr	r3, [pc, #404]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005904:	2202      	movs	r2, #2
 8005906:	4013      	ands	r3, r2
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800590a:	231f      	movs	r3, #31
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d105      	bne.n	8005920 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005914:	4b60      	ldr	r3, [pc, #384]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005918:	4b5f      	ldr	r3, [pc, #380]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800591a:	4962      	ldr	r1, [pc, #392]	; (8005aa4 <HAL_RCC_OscConfig+0x610>)
 800591c:	400a      	ands	r2, r1
 800591e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d100      	bne.n	800592a <HAL_RCC_OscConfig+0x496>
 8005928:	e0b0      	b.n	8005a8c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800592a:	4b5b      	ldr	r3, [pc, #364]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	2238      	movs	r2, #56	; 0x38
 8005930:	4013      	ands	r3, r2
 8005932:	2b10      	cmp	r3, #16
 8005934:	d100      	bne.n	8005938 <HAL_RCC_OscConfig+0x4a4>
 8005936:	e078      	b.n	8005a2a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d153      	bne.n	80059e8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005940:	4b55      	ldr	r3, [pc, #340]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4b54      	ldr	r3, [pc, #336]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005946:	4958      	ldr	r1, [pc, #352]	; (8005aa8 <HAL_RCC_OscConfig+0x614>)
 8005948:	400a      	ands	r2, r1
 800594a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fe facc 	bl	8003ee8 <HAL_GetTick>
 8005950:	0003      	movs	r3, r0
 8005952:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005956:	f7fe fac7 	bl	8003ee8 <HAL_GetTick>
 800595a:	0002      	movs	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e092      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005968:	4b4b      	ldr	r3, [pc, #300]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	2380      	movs	r3, #128	; 0x80
 800596e:	049b      	lsls	r3, r3, #18
 8005970:	4013      	ands	r3, r2
 8005972:	d1f0      	bne.n	8005956 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005974:	4b48      	ldr	r3, [pc, #288]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4a4c      	ldr	r2, [pc, #304]	; (8005aac <HAL_RCC_OscConfig+0x618>)
 800597a:	4013      	ands	r3, r2
 800597c:	0019      	movs	r1, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1a      	ldr	r2, [r3, #32]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	431a      	orrs	r2, r3
 800599c:	4b3e      	ldr	r3, [pc, #248]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800599e:	430a      	orrs	r2, r1
 80059a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059a2:	4b3d      	ldr	r3, [pc, #244]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b3c      	ldr	r3, [pc, #240]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80059a8:	2180      	movs	r1, #128	; 0x80
 80059aa:	0449      	lsls	r1, r1, #17
 80059ac:	430a      	orrs	r2, r1
 80059ae:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80059b0:	4b39      	ldr	r3, [pc, #228]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	4b38      	ldr	r3, [pc, #224]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80059b6:	2180      	movs	r1, #128	; 0x80
 80059b8:	0549      	lsls	r1, r1, #21
 80059ba:	430a      	orrs	r2, r1
 80059bc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059be:	f7fe fa93 	bl	8003ee8 <HAL_GetTick>
 80059c2:	0003      	movs	r3, r0
 80059c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c8:	f7fe fa8e 	bl	8003ee8 <HAL_GetTick>
 80059cc:	0002      	movs	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e059      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059da:	4b2f      	ldr	r3, [pc, #188]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	2380      	movs	r3, #128	; 0x80
 80059e0:	049b      	lsls	r3, r3, #18
 80059e2:	4013      	ands	r3, r2
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0x534>
 80059e6:	e051      	b.n	8005a8c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059e8:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4b2a      	ldr	r3, [pc, #168]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80059ee:	492e      	ldr	r1, [pc, #184]	; (8005aa8 <HAL_RCC_OscConfig+0x614>)
 80059f0:	400a      	ands	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f4:	f7fe fa78 	bl	8003ee8 <HAL_GetTick>
 80059f8:	0003      	movs	r3, r0
 80059fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059fc:	e008      	b.n	8005a10 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059fe:	f7fe fa73 	bl	8003ee8 <HAL_GetTick>
 8005a02:	0002      	movs	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e03e      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a10:	4b21      	ldr	r3, [pc, #132]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	2380      	movs	r3, #128	; 0x80
 8005a16:	049b      	lsls	r3, r3, #18
 8005a18:	4013      	ands	r3, r2
 8005a1a:	d1f0      	bne.n	80059fe <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005a1c:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005a22:	4923      	ldr	r1, [pc, #140]	; (8005ab0 <HAL_RCC_OscConfig+0x61c>)
 8005a24:	400a      	ands	r2, r1
 8005a26:	60da      	str	r2, [r3, #12]
 8005a28:	e030      	b.n	8005a8c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e02b      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005a36:	4b18      	ldr	r3, [pc, #96]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2203      	movs	r2, #3
 8005a40:	401a      	ands	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d11e      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2270      	movs	r2, #112	; 0x70
 8005a4e:	401a      	ands	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d117      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	23fe      	movs	r3, #254	; 0xfe
 8005a5c:	01db      	lsls	r3, r3, #7
 8005a5e:	401a      	ands	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d10e      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	23f8      	movs	r3, #248	; 0xf8
 8005a6e:	039b      	lsls	r3, r3, #14
 8005a70:	401a      	ands	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d106      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	0f5b      	lsrs	r3, r3, #29
 8005a7e:	075a      	lsls	r2, r3, #29
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d001      	beq.n	8005a8c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e000      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	0018      	movs	r0, r3
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b008      	add	sp, #32
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	40007000 	.word	0x40007000
 8005aa0:	00001388 	.word	0x00001388
 8005aa4:	efffffff 	.word	0xefffffff
 8005aa8:	feffffff 	.word	0xfeffffff
 8005aac:	1fc1808c 	.word	0x1fc1808c
 8005ab0:	effefffc 	.word	0xeffefffc

08005ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0e9      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ac8:	4b76      	ldr	r3, [pc, #472]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2207      	movs	r2, #7
 8005ace:	4013      	ands	r3, r2
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d91e      	bls.n	8005b14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ad6:	4b73      	ldr	r3, [pc, #460]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2207      	movs	r2, #7
 8005adc:	4393      	bics	r3, r2
 8005ade:	0019      	movs	r1, r3
 8005ae0:	4b70      	ldr	r3, [pc, #448]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ae8:	f7fe f9fe 	bl	8003ee8 <HAL_GetTick>
 8005aec:	0003      	movs	r3, r0
 8005aee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005af0:	e009      	b.n	8005b06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af2:	f7fe f9f9 	bl	8003ee8 <HAL_GetTick>
 8005af6:	0002      	movs	r2, r0
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	4a6a      	ldr	r2, [pc, #424]	; (8005ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e0ca      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b06:	4b67      	ldr	r3, [pc, #412]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2207      	movs	r2, #7
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d1ee      	bne.n	8005af2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d015      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2204      	movs	r2, #4
 8005b24:	4013      	ands	r3, r2
 8005b26:	d006      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005b28:	4b60      	ldr	r3, [pc, #384]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	4b5f      	ldr	r3, [pc, #380]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005b2e:	21e0      	movs	r1, #224	; 0xe0
 8005b30:	01c9      	lsls	r1, r1, #7
 8005b32:	430a      	orrs	r2, r1
 8005b34:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b36:	4b5d      	ldr	r3, [pc, #372]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	4a5d      	ldr	r2, [pc, #372]	; (8005cb0 <HAL_RCC_ClockConfig+0x1fc>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	0019      	movs	r1, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	4b59      	ldr	r3, [pc, #356]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005b46:	430a      	orrs	r2, r1
 8005b48:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	4013      	ands	r3, r2
 8005b52:	d057      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d107      	bne.n	8005b6c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b5c:	4b53      	ldr	r3, [pc, #332]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	2380      	movs	r3, #128	; 0x80
 8005b62:	029b      	lsls	r3, r3, #10
 8005b64:	4013      	ands	r3, r2
 8005b66:	d12b      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e097      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d107      	bne.n	8005b84 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b74:	4b4d      	ldr	r3, [pc, #308]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	049b      	lsls	r3, r3, #18
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d11f      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e08b      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d107      	bne.n	8005b9c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b8c:	4b47      	ldr	r3, [pc, #284]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4013      	ands	r3, r2
 8005b96:	d113      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e07f      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d106      	bne.n	8005bb2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ba4:	4b41      	ldr	r3, [pc, #260]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba8:	2202      	movs	r2, #2
 8005baa:	4013      	ands	r3, r2
 8005bac:	d108      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e074      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bb2:	4b3e      	ldr	r3, [pc, #248]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d101      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e06d      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bc0:	4b3a      	ldr	r3, [pc, #232]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	2207      	movs	r2, #7
 8005bc6:	4393      	bics	r3, r2
 8005bc8:	0019      	movs	r1, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	4b37      	ldr	r3, [pc, #220]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd4:	f7fe f988 	bl	8003ee8 <HAL_GetTick>
 8005bd8:	0003      	movs	r3, r0
 8005bda:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bdc:	e009      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bde:	f7fe f983 	bl	8003ee8 <HAL_GetTick>
 8005be2:	0002      	movs	r2, r0
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	4a2f      	ldr	r2, [pc, #188]	; (8005ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e054      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf2:	4b2e      	ldr	r3, [pc, #184]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2238      	movs	r2, #56	; 0x38
 8005bf8:	401a      	ands	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d1ec      	bne.n	8005bde <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c04:	4b27      	ldr	r3, [pc, #156]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2207      	movs	r2, #7
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d21e      	bcs.n	8005c50 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c12:	4b24      	ldr	r3, [pc, #144]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2207      	movs	r2, #7
 8005c18:	4393      	bics	r3, r2
 8005c1a:	0019      	movs	r1, r3
 8005c1c:	4b21      	ldr	r3, [pc, #132]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c24:	f7fe f960 	bl	8003ee8 <HAL_GetTick>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c2c:	e009      	b.n	8005c42 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c2e:	f7fe f95b 	bl	8003ee8 <HAL_GetTick>
 8005c32:	0002      	movs	r2, r0
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	4a1b      	ldr	r2, [pc, #108]	; (8005ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e02c      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c42:	4b18      	ldr	r3, [pc, #96]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2207      	movs	r2, #7
 8005c48:	4013      	ands	r3, r2
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d1ee      	bne.n	8005c2e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2204      	movs	r2, #4
 8005c56:	4013      	ands	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005c5a:	4b14      	ldr	r3, [pc, #80]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <HAL_RCC_ClockConfig+0x200>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	0019      	movs	r1, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	4b10      	ldr	r3, [pc, #64]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005c6e:	f000 f829 	bl	8005cc4 <HAL_RCC_GetSysClockFreq>
 8005c72:	0001      	movs	r1, r0
 8005c74:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	0a1b      	lsrs	r3, r3, #8
 8005c7a:	220f      	movs	r2, #15
 8005c7c:	401a      	ands	r2, r3
 8005c7e:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <HAL_RCC_ClockConfig+0x204>)
 8005c80:	0092      	lsls	r2, r2, #2
 8005c82:	58d3      	ldr	r3, [r2, r3]
 8005c84:	221f      	movs	r2, #31
 8005c86:	4013      	ands	r3, r2
 8005c88:	000a      	movs	r2, r1
 8005c8a:	40da      	lsrs	r2, r3
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <HAL_RCC_ClockConfig+0x208>)
 8005c8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_RCC_ClockConfig+0x20c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	0018      	movs	r0, r3
 8005c96:	f7fe f8cb 	bl	8003e30 <HAL_InitTick>
 8005c9a:	0003      	movs	r3, r0
}
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	b004      	add	sp, #16
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40022000 	.word	0x40022000
 8005ca8:	00001388 	.word	0x00001388
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	fffff0ff 	.word	0xfffff0ff
 8005cb4:	ffff8fff 	.word	0xffff8fff
 8005cb8:	0800a578 	.word	0x0800a578
 8005cbc:	20000000 	.word	0x20000000
 8005cc0:	20000004 	.word	0x20000004

08005cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cca:	4b3c      	ldr	r3, [pc, #240]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2238      	movs	r2, #56	; 0x38
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	d10f      	bne.n	8005cf4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005cd4:	4b39      	ldr	r3, [pc, #228]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	0adb      	lsrs	r3, r3, #11
 8005cda:	2207      	movs	r2, #7
 8005cdc:	4013      	ands	r3, r2
 8005cde:	2201      	movs	r2, #1
 8005ce0:	409a      	lsls	r2, r3
 8005ce2:	0013      	movs	r3, r2
 8005ce4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	4835      	ldr	r0, [pc, #212]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005cea:	f7fa fa25 	bl	8000138 <__udivsi3>
 8005cee:	0003      	movs	r3, r0
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	e05d      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cf4:	4b31      	ldr	r3, [pc, #196]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2238      	movs	r2, #56	; 0x38
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d102      	bne.n	8005d06 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d00:	4b30      	ldr	r3, [pc, #192]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005d02:	613b      	str	r3, [r7, #16]
 8005d04:	e054      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d06:	4b2d      	ldr	r3, [pc, #180]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2238      	movs	r2, #56	; 0x38
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2b10      	cmp	r3, #16
 8005d10:	d138      	bne.n	8005d84 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005d12:	4b2a      	ldr	r3, [pc, #168]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2203      	movs	r2, #3
 8005d18:	4013      	ands	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d1c:	4b27      	ldr	r3, [pc, #156]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	2207      	movs	r2, #7
 8005d24:	4013      	ands	r3, r2
 8005d26:	3301      	adds	r3, #1
 8005d28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d10d      	bne.n	8005d4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	4824      	ldr	r0, [pc, #144]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005d34:	f7fa fa00 	bl	8000138 <__udivsi3>
 8005d38:	0003      	movs	r3, r0
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	4b1f      	ldr	r3, [pc, #124]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	0a1b      	lsrs	r3, r3, #8
 8005d42:	227f      	movs	r2, #127	; 0x7f
 8005d44:	4013      	ands	r3, r2
 8005d46:	434b      	muls	r3, r1
 8005d48:	617b      	str	r3, [r7, #20]
        break;
 8005d4a:	e00d      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005d4c:	68b9      	ldr	r1, [r7, #8]
 8005d4e:	481c      	ldr	r0, [pc, #112]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d50:	f7fa f9f2 	bl	8000138 <__udivsi3>
 8005d54:	0003      	movs	r3, r0
 8005d56:	0019      	movs	r1, r3
 8005d58:	4b18      	ldr	r3, [pc, #96]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	0a1b      	lsrs	r3, r3, #8
 8005d5e:	227f      	movs	r2, #127	; 0x7f
 8005d60:	4013      	ands	r3, r2
 8005d62:	434b      	muls	r3, r1
 8005d64:	617b      	str	r3, [r7, #20]
        break;
 8005d66:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005d68:	4b14      	ldr	r3, [pc, #80]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	0f5b      	lsrs	r3, r3, #29
 8005d6e:	2207      	movs	r2, #7
 8005d70:	4013      	ands	r3, r2
 8005d72:	3301      	adds	r3, #1
 8005d74:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	6978      	ldr	r0, [r7, #20]
 8005d7a:	f7fa f9dd 	bl	8000138 <__udivsi3>
 8005d7e:	0003      	movs	r3, r0
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	e015      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005d84:	4b0d      	ldr	r3, [pc, #52]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	2238      	movs	r2, #56	; 0x38
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d103      	bne.n	8005d98 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	e00b      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005d98:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2238      	movs	r2, #56	; 0x38
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b18      	cmp	r3, #24
 8005da2:	d103      	bne.n	8005dac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005da4:	23fa      	movs	r3, #250	; 0xfa
 8005da6:	01db      	lsls	r3, r3, #7
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	e001      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005db0:	693b      	ldr	r3, [r7, #16]
}
 8005db2:	0018      	movs	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b006      	add	sp, #24
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	00f42400 	.word	0x00f42400
 8005dc4:	007a1200 	.word	0x007a1200

08005dc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dcc:	4b02      	ldr	r3, [pc, #8]	; (8005dd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005dce:	681b      	ldr	r3, [r3, #0]
}
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	20000000 	.word	0x20000000

08005ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ddc:	b5b0      	push	{r4, r5, r7, lr}
 8005dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005de0:	f7ff fff2 	bl	8005dc8 <HAL_RCC_GetHCLKFreq>
 8005de4:	0004      	movs	r4, r0
 8005de6:	f7ff fb49 	bl	800547c <LL_RCC_GetAPB1Prescaler>
 8005dea:	0003      	movs	r3, r0
 8005dec:	0b1a      	lsrs	r2, r3, #12
 8005dee:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005df0:	0092      	lsls	r2, r2, #2
 8005df2:	58d3      	ldr	r3, [r2, r3]
 8005df4:	221f      	movs	r2, #31
 8005df6:	4013      	ands	r3, r2
 8005df8:	40dc      	lsrs	r4, r3
 8005dfa:	0023      	movs	r3, r4
}
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bdb0      	pop	{r4, r5, r7, pc}
 8005e02:	46c0      	nop			; (mov r8, r8)
 8005e04:	0800a5b8 	.word	0x0800a5b8

08005e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005e10:	2313      	movs	r3, #19
 8005e12:	18fb      	adds	r3, r7, r3
 8005e14:	2200      	movs	r2, #0
 8005e16:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e18:	2312      	movs	r3, #18
 8005e1a:	18fb      	adds	r3, r7, r3
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	2380      	movs	r3, #128	; 0x80
 8005e26:	029b      	lsls	r3, r3, #10
 8005e28:	4013      	ands	r3, r2
 8005e2a:	d100      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005e2c:	e0a3      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e2e:	2011      	movs	r0, #17
 8005e30:	183b      	adds	r3, r7, r0
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e36:	4b86      	ldr	r3, [pc, #536]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e3a:	2380      	movs	r3, #128	; 0x80
 8005e3c:	055b      	lsls	r3, r3, #21
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d110      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e42:	4b83      	ldr	r3, [pc, #524]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e46:	4b82      	ldr	r3, [pc, #520]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e48:	2180      	movs	r1, #128	; 0x80
 8005e4a:	0549      	lsls	r1, r1, #21
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e50:	4b7f      	ldr	r3, [pc, #508]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	055b      	lsls	r3, r3, #21
 8005e58:	4013      	ands	r3, r2
 8005e5a:	60bb      	str	r3, [r7, #8]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e5e:	183b      	adds	r3, r7, r0
 8005e60:	2201      	movs	r2, #1
 8005e62:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e64:	4b7b      	ldr	r3, [pc, #492]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	4b7a      	ldr	r3, [pc, #488]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005e6a:	2180      	movs	r1, #128	; 0x80
 8005e6c:	0049      	lsls	r1, r1, #1
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e72:	f7fe f839 	bl	8003ee8 <HAL_GetTick>
 8005e76:	0003      	movs	r3, r0
 8005e78:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e7a:	e00b      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e7c:	f7fe f834 	bl	8003ee8 <HAL_GetTick>
 8005e80:	0002      	movs	r2, r0
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d904      	bls.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005e8a:	2313      	movs	r3, #19
 8005e8c:	18fb      	adds	r3, r7, r3
 8005e8e:	2203      	movs	r2, #3
 8005e90:	701a      	strb	r2, [r3, #0]
        break;
 8005e92:	e005      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e94:	4b6f      	ldr	r3, [pc, #444]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d0ed      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005ea0:	2313      	movs	r3, #19
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d154      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005eaa:	4b69      	ldr	r3, [pc, #420]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005eac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005eae:	23c0      	movs	r3, #192	; 0xc0
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d019      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d014      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ec6:	4b62      	ldr	r3, [pc, #392]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eca:	4a63      	ldr	r2, [pc, #396]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ed0:	4b5f      	ldr	r3, [pc, #380]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ed2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ed4:	4b5e      	ldr	r3, [pc, #376]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ed6:	2180      	movs	r1, #128	; 0x80
 8005ed8:	0249      	lsls	r1, r1, #9
 8005eda:	430a      	orrs	r2, r1
 8005edc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ede:	4b5c      	ldr	r3, [pc, #368]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ee0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ee2:	4b5b      	ldr	r3, [pc, #364]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ee4:	495d      	ldr	r1, [pc, #372]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ee6:	400a      	ands	r2, r1
 8005ee8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005eea:	4b59      	ldr	r3, [pc, #356]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	d016      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef8:	f7fd fff6 	bl	8003ee8 <HAL_GetTick>
 8005efc:	0003      	movs	r3, r0
 8005efe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f00:	e00c      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f02:	f7fd fff1 	bl	8003ee8 <HAL_GetTick>
 8005f06:	0002      	movs	r2, r0
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	4a54      	ldr	r2, [pc, #336]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d904      	bls.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005f12:	2313      	movs	r3, #19
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	2203      	movs	r2, #3
 8005f18:	701a      	strb	r2, [r3, #0]
            break;
 8005f1a:	e004      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f1c:	4b4c      	ldr	r3, [pc, #304]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f20:	2202      	movs	r2, #2
 8005f22:	4013      	ands	r3, r2
 8005f24:	d0ed      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005f26:	2313      	movs	r3, #19
 8005f28:	18fb      	adds	r3, r7, r3
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f30:	4b47      	ldr	r3, [pc, #284]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f34:	4a48      	ldr	r2, [pc, #288]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	0019      	movs	r1, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	4b44      	ldr	r3, [pc, #272]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f40:	430a      	orrs	r2, r1
 8005f42:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f44:	e00c      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f46:	2312      	movs	r3, #18
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	2213      	movs	r2, #19
 8005f4c:	18ba      	adds	r2, r7, r2
 8005f4e:	7812      	ldrb	r2, [r2, #0]
 8005f50:	701a      	strb	r2, [r3, #0]
 8005f52:	e005      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	2312      	movs	r3, #18
 8005f56:	18fb      	adds	r3, r7, r3
 8005f58:	2213      	movs	r2, #19
 8005f5a:	18ba      	adds	r2, r7, r2
 8005f5c:	7812      	ldrb	r2, [r2, #0]
 8005f5e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f60:	2311      	movs	r3, #17
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d105      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f6a:	4b39      	ldr	r3, [pc, #228]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f6e:	4b38      	ldr	r3, [pc, #224]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f70:	493c      	ldr	r1, [pc, #240]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005f72:	400a      	ands	r2, r1
 8005f74:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	d009      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f80:	4b33      	ldr	r3, [pc, #204]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f84:	2203      	movs	r2, #3
 8005f86:	4393      	bics	r3, r2
 8005f88:	0019      	movs	r1, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	4b30      	ldr	r3, [pc, #192]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f90:	430a      	orrs	r2, r1
 8005f92:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	d009      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f9e:	4b2c      	ldr	r3, [pc, #176]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa2:	220c      	movs	r2, #12
 8005fa4:	4393      	bics	r3, r2
 8005fa6:	0019      	movs	r1, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	4b28      	ldr	r3, [pc, #160]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	4013      	ands	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fbc:	4b24      	ldr	r3, [pc, #144]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	4a29      	ldr	r2, [pc, #164]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	0019      	movs	r1, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	4b21      	ldr	r3, [pc, #132]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	2380      	movs	r3, #128	; 0x80
 8005fd6:	01db      	lsls	r3, r3, #7
 8005fd8:	4013      	ands	r3, r2
 8005fda:	d015      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fdc:	4b1c      	ldr	r3, [pc, #112]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	0899      	lsrs	r1, r3, #2
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	695a      	ldr	r2, [r3, #20]
 8005fe8:	4b19      	ldr	r3, [pc, #100]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fea:	430a      	orrs	r2, r1
 8005fec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695a      	ldr	r2, [r3, #20]
 8005ff2:	2380      	movs	r3, #128	; 0x80
 8005ff4:	05db      	lsls	r3, r3, #23
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d106      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ffa:	4b15      	ldr	r3, [pc, #84]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	4b14      	ldr	r3, [pc, #80]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006000:	2180      	movs	r1, #128	; 0x80
 8006002:	0249      	lsls	r1, r1, #9
 8006004:	430a      	orrs	r2, r1
 8006006:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	2380      	movs	r3, #128	; 0x80
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	4013      	ands	r3, r2
 8006012:	d016      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006014:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006018:	4a14      	ldr	r2, [pc, #80]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800601a:	4013      	ands	r3, r2
 800601c:	0019      	movs	r1, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691a      	ldr	r2, [r3, #16]
 8006022:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006024:	430a      	orrs	r2, r1
 8006026:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	2380      	movs	r3, #128	; 0x80
 800602e:	01db      	lsls	r3, r3, #7
 8006030:	429a      	cmp	r2, r3
 8006032:	d106      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006034:	4b06      	ldr	r3, [pc, #24]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	4b05      	ldr	r3, [pc, #20]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800603a:	2180      	movs	r1, #128	; 0x80
 800603c:	0249      	lsls	r1, r1, #9
 800603e:	430a      	orrs	r2, r1
 8006040:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006042:	2312      	movs	r3, #18
 8006044:	18fb      	adds	r3, r7, r3
 8006046:	781b      	ldrb	r3, [r3, #0]
}
 8006048:	0018      	movs	r0, r3
 800604a:	46bd      	mov	sp, r7
 800604c:	b006      	add	sp, #24
 800604e:	bd80      	pop	{r7, pc}
 8006050:	40021000 	.word	0x40021000
 8006054:	40007000 	.word	0x40007000
 8006058:	fffffcff 	.word	0xfffffcff
 800605c:	fffeffff 	.word	0xfffeffff
 8006060:	00001388 	.word	0x00001388
 8006064:	efffffff 	.word	0xefffffff
 8006068:	ffffcfff 	.word	0xffffcfff
 800606c:	ffff3fff 	.word	0xffff3fff

08006070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e04a      	b.n	8006118 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	223d      	movs	r2, #61	; 0x3d
 8006086:	5c9b      	ldrb	r3, [r3, r2]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d107      	bne.n	800609e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	223c      	movs	r2, #60	; 0x3c
 8006092:	2100      	movs	r1, #0
 8006094:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	0018      	movs	r0, r3
 800609a:	f7fd fcfd 	bl	8003a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	223d      	movs	r2, #61	; 0x3d
 80060a2:	2102      	movs	r1, #2
 80060a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3304      	adds	r3, #4
 80060ae:	0019      	movs	r1, r3
 80060b0:	0010      	movs	r0, r2
 80060b2:	f000 f9dd 	bl	8006470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2248      	movs	r2, #72	; 0x48
 80060ba:	2101      	movs	r1, #1
 80060bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	223e      	movs	r2, #62	; 0x3e
 80060c2:	2101      	movs	r1, #1
 80060c4:	5499      	strb	r1, [r3, r2]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	223f      	movs	r2, #63	; 0x3f
 80060ca:	2101      	movs	r1, #1
 80060cc:	5499      	strb	r1, [r3, r2]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2240      	movs	r2, #64	; 0x40
 80060d2:	2101      	movs	r1, #1
 80060d4:	5499      	strb	r1, [r3, r2]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2241      	movs	r2, #65	; 0x41
 80060da:	2101      	movs	r1, #1
 80060dc:	5499      	strb	r1, [r3, r2]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2242      	movs	r2, #66	; 0x42
 80060e2:	2101      	movs	r1, #1
 80060e4:	5499      	strb	r1, [r3, r2]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2243      	movs	r2, #67	; 0x43
 80060ea:	2101      	movs	r1, #1
 80060ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2244      	movs	r2, #68	; 0x44
 80060f2:	2101      	movs	r1, #1
 80060f4:	5499      	strb	r1, [r3, r2]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2245      	movs	r2, #69	; 0x45
 80060fa:	2101      	movs	r1, #1
 80060fc:	5499      	strb	r1, [r3, r2]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2246      	movs	r2, #70	; 0x46
 8006102:	2101      	movs	r1, #1
 8006104:	5499      	strb	r1, [r3, r2]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2247      	movs	r2, #71	; 0x47
 800610a:	2101      	movs	r1, #1
 800610c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	223d      	movs	r2, #61	; 0x3d
 8006112:	2101      	movs	r1, #1
 8006114:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	0018      	movs	r0, r3
 800611a:	46bd      	mov	sp, r7
 800611c:	b002      	add	sp, #8
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	223d      	movs	r2, #61	; 0x3d
 800612c:	5c9b      	ldrb	r3, [r3, r2]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b01      	cmp	r3, #1
 8006132:	d001      	beq.n	8006138 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e034      	b.n	80061a2 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	223d      	movs	r2, #61	; 0x3d
 800613c:	2102      	movs	r1, #2
 800613e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a19      	ldr	r2, [pc, #100]	; (80061ac <HAL_TIM_Base_Start+0x8c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d009      	beq.n	800615e <HAL_TIM_Base_Start+0x3e>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <HAL_TIM_Base_Start+0x90>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <HAL_TIM_Base_Start+0x3e>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a16      	ldr	r2, [pc, #88]	; (80061b4 <HAL_TIM_Base_Start+0x94>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d116      	bne.n	800618c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	4a14      	ldr	r2, [pc, #80]	; (80061b8 <HAL_TIM_Base_Start+0x98>)
 8006166:	4013      	ands	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b06      	cmp	r3, #6
 800616e:	d016      	beq.n	800619e <HAL_TIM_Base_Start+0x7e>
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	2380      	movs	r3, #128	; 0x80
 8006174:	025b      	lsls	r3, r3, #9
 8006176:	429a      	cmp	r2, r3
 8006178:	d011      	beq.n	800619e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2101      	movs	r1, #1
 8006186:	430a      	orrs	r2, r1
 8006188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618a:	e008      	b.n	800619e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2101      	movs	r1, #1
 8006198:	430a      	orrs	r2, r1
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	e000      	b.n	80061a0 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800619e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	0018      	movs	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b004      	add	sp, #16
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	40012c00 	.word	0x40012c00
 80061b0:	40000400 	.word	0x40000400
 80061b4:	40014000 	.word	0x40014000
 80061b8:	00010007 	.word	0x00010007

080061bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2202      	movs	r2, #2
 80061cc:	4013      	ands	r3, r2
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d124      	bne.n	800621c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	2202      	movs	r2, #2
 80061da:	4013      	ands	r3, r2
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d11d      	bne.n	800621c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2203      	movs	r2, #3
 80061e6:	4252      	negs	r2, r2
 80061e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	2203      	movs	r2, #3
 80061f8:	4013      	ands	r3, r2
 80061fa:	d004      	beq.n	8006206 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	0018      	movs	r0, r3
 8006200:	f000 f91e 	bl	8006440 <HAL_TIM_IC_CaptureCallback>
 8006204:	e007      	b.n	8006216 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	0018      	movs	r0, r3
 800620a:	f000 f911 	bl	8006430 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	0018      	movs	r0, r3
 8006212:	f000 f91d 	bl	8006450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2204      	movs	r2, #4
 8006224:	4013      	ands	r3, r2
 8006226:	2b04      	cmp	r3, #4
 8006228:	d125      	bne.n	8006276 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	2204      	movs	r2, #4
 8006232:	4013      	ands	r3, r2
 8006234:	2b04      	cmp	r3, #4
 8006236:	d11e      	bne.n	8006276 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2205      	movs	r2, #5
 800623e:	4252      	negs	r2, r2
 8006240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	23c0      	movs	r3, #192	; 0xc0
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4013      	ands	r3, r2
 8006254:	d004      	beq.n	8006260 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	0018      	movs	r0, r3
 800625a:	f000 f8f1 	bl	8006440 <HAL_TIM_IC_CaptureCallback>
 800625e:	e007      	b.n	8006270 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	0018      	movs	r0, r3
 8006264:	f000 f8e4 	bl	8006430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	0018      	movs	r0, r3
 800626c:	f000 f8f0 	bl	8006450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	2208      	movs	r2, #8
 800627e:	4013      	ands	r3, r2
 8006280:	2b08      	cmp	r3, #8
 8006282:	d124      	bne.n	80062ce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	2208      	movs	r2, #8
 800628c:	4013      	ands	r3, r2
 800628e:	2b08      	cmp	r3, #8
 8006290:	d11d      	bne.n	80062ce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2209      	movs	r2, #9
 8006298:	4252      	negs	r2, r2
 800629a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2204      	movs	r2, #4
 80062a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	2203      	movs	r2, #3
 80062aa:	4013      	ands	r3, r2
 80062ac:	d004      	beq.n	80062b8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	0018      	movs	r0, r3
 80062b2:	f000 f8c5 	bl	8006440 <HAL_TIM_IC_CaptureCallback>
 80062b6:	e007      	b.n	80062c8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	0018      	movs	r0, r3
 80062bc:	f000 f8b8 	bl	8006430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	0018      	movs	r0, r3
 80062c4:	f000 f8c4 	bl	8006450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	2210      	movs	r2, #16
 80062d6:	4013      	ands	r3, r2
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d125      	bne.n	8006328 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	2210      	movs	r2, #16
 80062e4:	4013      	ands	r3, r2
 80062e6:	2b10      	cmp	r3, #16
 80062e8:	d11e      	bne.n	8006328 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2211      	movs	r2, #17
 80062f0:	4252      	negs	r2, r2
 80062f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2208      	movs	r2, #8
 80062f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69da      	ldr	r2, [r3, #28]
 8006300:	23c0      	movs	r3, #192	; 0xc0
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4013      	ands	r3, r2
 8006306:	d004      	beq.n	8006312 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	0018      	movs	r0, r3
 800630c:	f000 f898 	bl	8006440 <HAL_TIM_IC_CaptureCallback>
 8006310:	e007      	b.n	8006322 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	0018      	movs	r0, r3
 8006316:	f000 f88b 	bl	8006430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	0018      	movs	r0, r3
 800631e:	f000 f897 	bl	8006450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	2201      	movs	r2, #1
 8006330:	4013      	ands	r3, r2
 8006332:	2b01      	cmp	r3, #1
 8006334:	d10f      	bne.n	8006356 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	2201      	movs	r2, #1
 800633e:	4013      	ands	r3, r2
 8006340:	2b01      	cmp	r3, #1
 8006342:	d108      	bne.n	8006356 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2202      	movs	r2, #2
 800634a:	4252      	negs	r2, r2
 800634c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	0018      	movs	r0, r3
 8006352:	f000 f865 	bl	8006420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2280      	movs	r2, #128	; 0x80
 800635e:	4013      	ands	r3, r2
 8006360:	2b80      	cmp	r3, #128	; 0x80
 8006362:	d10f      	bne.n	8006384 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	2280      	movs	r2, #128	; 0x80
 800636c:	4013      	ands	r3, r2
 800636e:	2b80      	cmp	r3, #128	; 0x80
 8006370:	d108      	bne.n	8006384 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2281      	movs	r2, #129	; 0x81
 8006378:	4252      	negs	r2, r2
 800637a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	0018      	movs	r0, r3
 8006380:	f000 f95c 	bl	800663c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	2380      	movs	r3, #128	; 0x80
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	401a      	ands	r2, r3
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	429a      	cmp	r2, r3
 8006396:	d10e      	bne.n	80063b6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	2280      	movs	r2, #128	; 0x80
 80063a0:	4013      	ands	r3, r2
 80063a2:	2b80      	cmp	r3, #128	; 0x80
 80063a4:	d107      	bne.n	80063b6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a1c      	ldr	r2, [pc, #112]	; (800641c <HAL_TIM_IRQHandler+0x260>)
 80063ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	0018      	movs	r0, r3
 80063b2:	f000 f94b 	bl	800664c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2240      	movs	r2, #64	; 0x40
 80063be:	4013      	ands	r3, r2
 80063c0:	2b40      	cmp	r3, #64	; 0x40
 80063c2:	d10f      	bne.n	80063e4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	2240      	movs	r2, #64	; 0x40
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b40      	cmp	r3, #64	; 0x40
 80063d0:	d108      	bne.n	80063e4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2241      	movs	r2, #65	; 0x41
 80063d8:	4252      	negs	r2, r2
 80063da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	0018      	movs	r0, r3
 80063e0:	f000 f83e 	bl	8006460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2220      	movs	r2, #32
 80063ec:	4013      	ands	r3, r2
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d10f      	bne.n	8006412 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2220      	movs	r2, #32
 80063fa:	4013      	ands	r3, r2
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	d108      	bne.n	8006412 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2221      	movs	r2, #33	; 0x21
 8006406:	4252      	negs	r2, r2
 8006408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	0018      	movs	r0, r3
 800640e:	f000 f90d 	bl	800662c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	46bd      	mov	sp, r7
 8006416:	b002      	add	sp, #8
 8006418:	bd80      	pop	{r7, pc}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	fffffeff 	.word	0xfffffeff

08006420 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006428:	46c0      	nop			; (mov r8, r8)
 800642a:	46bd      	mov	sp, r7
 800642c:	b002      	add	sp, #8
 800642e:	bd80      	pop	{r7, pc}

08006430 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006438:	46c0      	nop			; (mov r8, r8)
 800643a:	46bd      	mov	sp, r7
 800643c:	b002      	add	sp, #8
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006448:	46c0      	nop			; (mov r8, r8)
 800644a:	46bd      	mov	sp, r7
 800644c:	b002      	add	sp, #8
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006458:	46c0      	nop			; (mov r8, r8)
 800645a:	46bd      	mov	sp, r7
 800645c:	b002      	add	sp, #8
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006468:	46c0      	nop			; (mov r8, r8)
 800646a:	46bd      	mov	sp, r7
 800646c:	b002      	add	sp, #8
 800646e:	bd80      	pop	{r7, pc}

08006470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a2f      	ldr	r2, [pc, #188]	; (8006540 <TIM_Base_SetConfig+0xd0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d003      	beq.n	8006490 <TIM_Base_SetConfig+0x20>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a2e      	ldr	r2, [pc, #184]	; (8006544 <TIM_Base_SetConfig+0xd4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d108      	bne.n	80064a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2270      	movs	r2, #112	; 0x70
 8006494:	4393      	bics	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a26      	ldr	r2, [pc, #152]	; (8006540 <TIM_Base_SetConfig+0xd0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d013      	beq.n	80064d2 <TIM_Base_SetConfig+0x62>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a25      	ldr	r2, [pc, #148]	; (8006544 <TIM_Base_SetConfig+0xd4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00f      	beq.n	80064d2 <TIM_Base_SetConfig+0x62>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a24      	ldr	r2, [pc, #144]	; (8006548 <TIM_Base_SetConfig+0xd8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00b      	beq.n	80064d2 <TIM_Base_SetConfig+0x62>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a23      	ldr	r2, [pc, #140]	; (800654c <TIM_Base_SetConfig+0xdc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d007      	beq.n	80064d2 <TIM_Base_SetConfig+0x62>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a22      	ldr	r2, [pc, #136]	; (8006550 <TIM_Base_SetConfig+0xe0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d003      	beq.n	80064d2 <TIM_Base_SetConfig+0x62>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a21      	ldr	r2, [pc, #132]	; (8006554 <TIM_Base_SetConfig+0xe4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d108      	bne.n	80064e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4a20      	ldr	r2, [pc, #128]	; (8006558 <TIM_Base_SetConfig+0xe8>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2280      	movs	r2, #128	; 0x80
 80064e8:	4393      	bics	r3, r2
 80064ea:	001a      	movs	r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a0c      	ldr	r2, [pc, #48]	; (8006540 <TIM_Base_SetConfig+0xd0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00b      	beq.n	800652a <TIM_Base_SetConfig+0xba>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a0d      	ldr	r2, [pc, #52]	; (800654c <TIM_Base_SetConfig+0xdc>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <TIM_Base_SetConfig+0xba>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a0c      	ldr	r2, [pc, #48]	; (8006550 <TIM_Base_SetConfig+0xe0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d003      	beq.n	800652a <TIM_Base_SetConfig+0xba>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a0b      	ldr	r2, [pc, #44]	; (8006554 <TIM_Base_SetConfig+0xe4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d103      	bne.n	8006532 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	615a      	str	r2, [r3, #20]
}
 8006538:	46c0      	nop			; (mov r8, r8)
 800653a:	46bd      	mov	sp, r7
 800653c:	b004      	add	sp, #16
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40012c00 	.word	0x40012c00
 8006544:	40000400 	.word	0x40000400
 8006548:	40002000 	.word	0x40002000
 800654c:	40014000 	.word	0x40014000
 8006550:	40014400 	.word	0x40014400
 8006554:	40014800 	.word	0x40014800
 8006558:	fffffcff 	.word	0xfffffcff

0800655c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	223c      	movs	r2, #60	; 0x3c
 800656a:	5c9b      	ldrb	r3, [r3, r2]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006570:	2302      	movs	r3, #2
 8006572:	e04f      	b.n	8006614 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	223c      	movs	r2, #60	; 0x3c
 8006578:	2101      	movs	r1, #1
 800657a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	223d      	movs	r2, #61	; 0x3d
 8006580:	2102      	movs	r1, #2
 8006582:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a20      	ldr	r2, [pc, #128]	; (800661c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d108      	bne.n	80065b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4a1f      	ldr	r2, [pc, #124]	; (8006620 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80065a2:	4013      	ands	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2270      	movs	r2, #112	; 0x70
 80065b4:	4393      	bics	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a13      	ldr	r2, [pc, #76]	; (800661c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d009      	beq.n	80065e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a12      	ldr	r2, [pc, #72]	; (8006624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a11      	ldr	r2, [pc, #68]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d10c      	bne.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2280      	movs	r2, #128	; 0x80
 80065ec:	4393      	bics	r3, r2
 80065ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	223d      	movs	r2, #61	; 0x3d
 8006606:	2101      	movs	r1, #1
 8006608:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	223c      	movs	r2, #60	; 0x3c
 800660e:	2100      	movs	r1, #0
 8006610:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	0018      	movs	r0, r3
 8006616:	46bd      	mov	sp, r7
 8006618:	b004      	add	sp, #16
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40012c00 	.word	0x40012c00
 8006620:	ff0fffff 	.word	0xff0fffff
 8006624:	40000400 	.word	0x40000400
 8006628:	40014000 	.word	0x40014000

0800662c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006634:	46c0      	nop			; (mov r8, r8)
 8006636:	46bd      	mov	sp, r7
 8006638:	b002      	add	sp, #8
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006644:	46c0      	nop			; (mov r8, r8)
 8006646:	46bd      	mov	sp, r7
 8006648:	b002      	add	sp, #8
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006654:	46c0      	nop			; (mov r8, r8)
 8006656:	46bd      	mov	sp, r7
 8006658:	b002      	add	sp, #8
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e046      	b.n	80066fc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2288      	movs	r2, #136	; 0x88
 8006672:	589b      	ldr	r3, [r3, r2]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d107      	bne.n	8006688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2284      	movs	r2, #132	; 0x84
 800667c:	2100      	movs	r1, #0
 800667e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	0018      	movs	r0, r3
 8006684:	f7fd fa2e 	bl	8003ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2288      	movs	r2, #136	; 0x88
 800668c:	2124      	movs	r1, #36	; 0x24
 800668e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2101      	movs	r1, #1
 800669c:	438a      	bics	r2, r1
 800669e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	0018      	movs	r0, r3
 80066a4:	f000 fb72 	bl	8006d8c <UART_SetConfig>
 80066a8:	0003      	movs	r3, r0
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d101      	bne.n	80066b2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e024      	b.n	80066fc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	0018      	movs	r0, r3
 80066be:	f000 fd09 	bl	80070d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	490d      	ldr	r1, [pc, #52]	; (8006704 <HAL_UART_Init+0xa8>)
 80066ce:	400a      	ands	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	212a      	movs	r1, #42	; 0x2a
 80066de:	438a      	bics	r2, r1
 80066e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2101      	movs	r1, #1
 80066ee:	430a      	orrs	r2, r1
 80066f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	0018      	movs	r0, r3
 80066f6:	f000 fda1 	bl	800723c <UART_CheckIdleState>
 80066fa:	0003      	movs	r3, r0
}
 80066fc:	0018      	movs	r0, r3
 80066fe:	46bd      	mov	sp, r7
 8006700:	b002      	add	sp, #8
 8006702:	bd80      	pop	{r7, pc}
 8006704:	ffffb7ff 	.word	0xffffb7ff

08006708 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006708:	b5b0      	push	{r4, r5, r7, lr}
 800670a:	b0aa      	sub	sp, #168	; 0xa8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	22a4      	movs	r2, #164	; 0xa4
 8006718:	18b9      	adds	r1, r7, r2
 800671a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	20a0      	movs	r0, #160	; 0xa0
 8006724:	1839      	adds	r1, r7, r0
 8006726:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	249c      	movs	r4, #156	; 0x9c
 8006730:	1939      	adds	r1, r7, r4
 8006732:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006734:	0011      	movs	r1, r2
 8006736:	18bb      	adds	r3, r7, r2
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4aa2      	ldr	r2, [pc, #648]	; (80069c4 <HAL_UART_IRQHandler+0x2bc>)
 800673c:	4013      	ands	r3, r2
 800673e:	2298      	movs	r2, #152	; 0x98
 8006740:	18bd      	adds	r5, r7, r2
 8006742:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006744:	18bb      	adds	r3, r7, r2
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d11a      	bne.n	8006782 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800674c:	187b      	adds	r3, r7, r1
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2220      	movs	r2, #32
 8006752:	4013      	ands	r3, r2
 8006754:	d015      	beq.n	8006782 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006756:	183b      	adds	r3, r7, r0
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2220      	movs	r2, #32
 800675c:	4013      	ands	r3, r2
 800675e:	d105      	bne.n	800676c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006760:	193b      	adds	r3, r7, r4
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	2380      	movs	r3, #128	; 0x80
 8006766:	055b      	lsls	r3, r3, #21
 8006768:	4013      	ands	r3, r2
 800676a:	d00a      	beq.n	8006782 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006770:	2b00      	cmp	r3, #0
 8006772:	d100      	bne.n	8006776 <HAL_UART_IRQHandler+0x6e>
 8006774:	e2dc      	b.n	8006d30 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	0010      	movs	r0, r2
 800677e:	4798      	blx	r3
      }
      return;
 8006780:	e2d6      	b.n	8006d30 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006782:	2398      	movs	r3, #152	; 0x98
 8006784:	18fb      	adds	r3, r7, r3
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d100      	bne.n	800678e <HAL_UART_IRQHandler+0x86>
 800678c:	e122      	b.n	80069d4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800678e:	239c      	movs	r3, #156	; 0x9c
 8006790:	18fb      	adds	r3, r7, r3
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a8c      	ldr	r2, [pc, #560]	; (80069c8 <HAL_UART_IRQHandler+0x2c0>)
 8006796:	4013      	ands	r3, r2
 8006798:	d106      	bne.n	80067a8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800679a:	23a0      	movs	r3, #160	; 0xa0
 800679c:	18fb      	adds	r3, r7, r3
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a8a      	ldr	r2, [pc, #552]	; (80069cc <HAL_UART_IRQHandler+0x2c4>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	d100      	bne.n	80067a8 <HAL_UART_IRQHandler+0xa0>
 80067a6:	e115      	b.n	80069d4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067a8:	23a4      	movs	r3, #164	; 0xa4
 80067aa:	18fb      	adds	r3, r7, r3
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2201      	movs	r2, #1
 80067b0:	4013      	ands	r3, r2
 80067b2:	d012      	beq.n	80067da <HAL_UART_IRQHandler+0xd2>
 80067b4:	23a0      	movs	r3, #160	; 0xa0
 80067b6:	18fb      	adds	r3, r7, r3
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	2380      	movs	r3, #128	; 0x80
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	4013      	ands	r3, r2
 80067c0:	d00b      	beq.n	80067da <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2201      	movs	r2, #1
 80067c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2290      	movs	r2, #144	; 0x90
 80067ce:	589b      	ldr	r3, [r3, r2]
 80067d0:	2201      	movs	r2, #1
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2190      	movs	r1, #144	; 0x90
 80067d8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067da:	23a4      	movs	r3, #164	; 0xa4
 80067dc:	18fb      	adds	r3, r7, r3
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2202      	movs	r2, #2
 80067e2:	4013      	ands	r3, r2
 80067e4:	d011      	beq.n	800680a <HAL_UART_IRQHandler+0x102>
 80067e6:	239c      	movs	r3, #156	; 0x9c
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2201      	movs	r2, #1
 80067ee:	4013      	ands	r3, r2
 80067f0:	d00b      	beq.n	800680a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2202      	movs	r2, #2
 80067f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2290      	movs	r2, #144	; 0x90
 80067fe:	589b      	ldr	r3, [r3, r2]
 8006800:	2204      	movs	r2, #4
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2190      	movs	r1, #144	; 0x90
 8006808:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800680a:	23a4      	movs	r3, #164	; 0xa4
 800680c:	18fb      	adds	r3, r7, r3
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2204      	movs	r2, #4
 8006812:	4013      	ands	r3, r2
 8006814:	d011      	beq.n	800683a <HAL_UART_IRQHandler+0x132>
 8006816:	239c      	movs	r3, #156	; 0x9c
 8006818:	18fb      	adds	r3, r7, r3
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2201      	movs	r2, #1
 800681e:	4013      	ands	r3, r2
 8006820:	d00b      	beq.n	800683a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2204      	movs	r2, #4
 8006828:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2290      	movs	r2, #144	; 0x90
 800682e:	589b      	ldr	r3, [r3, r2]
 8006830:	2202      	movs	r2, #2
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2190      	movs	r1, #144	; 0x90
 8006838:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800683a:	23a4      	movs	r3, #164	; 0xa4
 800683c:	18fb      	adds	r3, r7, r3
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2208      	movs	r2, #8
 8006842:	4013      	ands	r3, r2
 8006844:	d017      	beq.n	8006876 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006846:	23a0      	movs	r3, #160	; 0xa0
 8006848:	18fb      	adds	r3, r7, r3
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2220      	movs	r2, #32
 800684e:	4013      	ands	r3, r2
 8006850:	d105      	bne.n	800685e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006852:	239c      	movs	r3, #156	; 0x9c
 8006854:	18fb      	adds	r3, r7, r3
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a5b      	ldr	r2, [pc, #364]	; (80069c8 <HAL_UART_IRQHandler+0x2c0>)
 800685a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800685c:	d00b      	beq.n	8006876 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2208      	movs	r2, #8
 8006864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2290      	movs	r2, #144	; 0x90
 800686a:	589b      	ldr	r3, [r3, r2]
 800686c:	2208      	movs	r2, #8
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2190      	movs	r1, #144	; 0x90
 8006874:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006876:	23a4      	movs	r3, #164	; 0xa4
 8006878:	18fb      	adds	r3, r7, r3
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	2380      	movs	r3, #128	; 0x80
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	4013      	ands	r3, r2
 8006882:	d013      	beq.n	80068ac <HAL_UART_IRQHandler+0x1a4>
 8006884:	23a0      	movs	r3, #160	; 0xa0
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	2380      	movs	r3, #128	; 0x80
 800688c:	04db      	lsls	r3, r3, #19
 800688e:	4013      	ands	r3, r2
 8006890:	d00c      	beq.n	80068ac <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2280      	movs	r2, #128	; 0x80
 8006898:	0112      	lsls	r2, r2, #4
 800689a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2290      	movs	r2, #144	; 0x90
 80068a0:	589b      	ldr	r3, [r3, r2]
 80068a2:	2220      	movs	r2, #32
 80068a4:	431a      	orrs	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2190      	movs	r1, #144	; 0x90
 80068aa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2290      	movs	r2, #144	; 0x90
 80068b0:	589b      	ldr	r3, [r3, r2]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d100      	bne.n	80068b8 <HAL_UART_IRQHandler+0x1b0>
 80068b6:	e23d      	b.n	8006d34 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068b8:	23a4      	movs	r3, #164	; 0xa4
 80068ba:	18fb      	adds	r3, r7, r3
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2220      	movs	r2, #32
 80068c0:	4013      	ands	r3, r2
 80068c2:	d015      	beq.n	80068f0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068c4:	23a0      	movs	r3, #160	; 0xa0
 80068c6:	18fb      	adds	r3, r7, r3
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2220      	movs	r2, #32
 80068cc:	4013      	ands	r3, r2
 80068ce:	d106      	bne.n	80068de <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068d0:	239c      	movs	r3, #156	; 0x9c
 80068d2:	18fb      	adds	r3, r7, r3
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	2380      	movs	r3, #128	; 0x80
 80068d8:	055b      	lsls	r3, r3, #21
 80068da:	4013      	ands	r3, r2
 80068dc:	d008      	beq.n	80068f0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d004      	beq.n	80068f0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	0010      	movs	r0, r2
 80068ee:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2290      	movs	r2, #144	; 0x90
 80068f4:	589b      	ldr	r3, [r3, r2]
 80068f6:	2194      	movs	r1, #148	; 0x94
 80068f8:	187a      	adds	r2, r7, r1
 80068fa:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	2240      	movs	r2, #64	; 0x40
 8006904:	4013      	ands	r3, r2
 8006906:	2b40      	cmp	r3, #64	; 0x40
 8006908:	d004      	beq.n	8006914 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800690a:	187b      	adds	r3, r7, r1
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2228      	movs	r2, #40	; 0x28
 8006910:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006912:	d04c      	beq.n	80069ae <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	0018      	movs	r0, r3
 8006918:	f000 fda6 	bl	8007468 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	2240      	movs	r2, #64	; 0x40
 8006924:	4013      	ands	r3, r2
 8006926:	2b40      	cmp	r3, #64	; 0x40
 8006928:	d13c      	bne.n	80069a4 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800692a:	f3ef 8310 	mrs	r3, PRIMASK
 800692e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006932:	2090      	movs	r0, #144	; 0x90
 8006934:	183a      	adds	r2, r7, r0
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	2301      	movs	r3, #1
 800693a:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800693c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800693e:	f383 8810 	msr	PRIMASK, r3
}
 8006942:	46c0      	nop			; (mov r8, r8)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2140      	movs	r1, #64	; 0x40
 8006950:	438a      	bics	r2, r1
 8006952:	609a      	str	r2, [r3, #8]
 8006954:	183b      	adds	r3, r7, r0
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800695a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800695c:	f383 8810 	msr	PRIMASK, r3
}
 8006960:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2280      	movs	r2, #128	; 0x80
 8006966:	589b      	ldr	r3, [r3, r2]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d016      	beq.n	800699a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2280      	movs	r2, #128	; 0x80
 8006970:	589b      	ldr	r3, [r3, r2]
 8006972:	4a17      	ldr	r2, [pc, #92]	; (80069d0 <HAL_UART_IRQHandler+0x2c8>)
 8006974:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2280      	movs	r2, #128	; 0x80
 800697a:	589b      	ldr	r3, [r3, r2]
 800697c:	0018      	movs	r0, r3
 800697e:	f7fe fb37 	bl	8004ff0 <HAL_DMA_Abort_IT>
 8006982:	1e03      	subs	r3, r0, #0
 8006984:	d01c      	beq.n	80069c0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2280      	movs	r2, #128	; 0x80
 800698a:	589b      	ldr	r3, [r3, r2]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	2180      	movs	r1, #128	; 0x80
 8006992:	5852      	ldr	r2, [r2, r1]
 8006994:	0010      	movs	r0, r2
 8006996:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006998:	e012      	b.n	80069c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	0018      	movs	r0, r3
 800699e:	f000 f9e1 	bl	8006d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a2:	e00d      	b.n	80069c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	0018      	movs	r0, r3
 80069a8:	f000 f9dc 	bl	8006d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ac:	e008      	b.n	80069c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	0018      	movs	r0, r3
 80069b2:	f000 f9d7 	bl	8006d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2290      	movs	r2, #144	; 0x90
 80069ba:	2100      	movs	r1, #0
 80069bc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80069be:	e1b9      	b.n	8006d34 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c0:	46c0      	nop			; (mov r8, r8)
    return;
 80069c2:	e1b7      	b.n	8006d34 <HAL_UART_IRQHandler+0x62c>
 80069c4:	0000080f 	.word	0x0000080f
 80069c8:	10000001 	.word	0x10000001
 80069cc:	04000120 	.word	0x04000120
 80069d0:	08007535 	.word	0x08007535

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d000      	beq.n	80069de <HAL_UART_IRQHandler+0x2d6>
 80069dc:	e13e      	b.n	8006c5c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069de:	23a4      	movs	r3, #164	; 0xa4
 80069e0:	18fb      	adds	r3, r7, r3
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2210      	movs	r2, #16
 80069e6:	4013      	ands	r3, r2
 80069e8:	d100      	bne.n	80069ec <HAL_UART_IRQHandler+0x2e4>
 80069ea:	e137      	b.n	8006c5c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069ec:	23a0      	movs	r3, #160	; 0xa0
 80069ee:	18fb      	adds	r3, r7, r3
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2210      	movs	r2, #16
 80069f4:	4013      	ands	r3, r2
 80069f6:	d100      	bne.n	80069fa <HAL_UART_IRQHandler+0x2f2>
 80069f8:	e130      	b.n	8006c5c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2210      	movs	r2, #16
 8006a00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2240      	movs	r2, #64	; 0x40
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	d000      	beq.n	8006a12 <HAL_UART_IRQHandler+0x30a>
 8006a10:	e0a4      	b.n	8006b5c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2280      	movs	r2, #128	; 0x80
 8006a16:	589b      	ldr	r3, [r3, r2]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	217e      	movs	r1, #126	; 0x7e
 8006a1e:	187b      	adds	r3, r7, r1
 8006a20:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006a22:	187b      	adds	r3, r7, r1
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d100      	bne.n	8006a2c <HAL_UART_IRQHandler+0x324>
 8006a2a:	e185      	b.n	8006d38 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	225c      	movs	r2, #92	; 0x5c
 8006a30:	5a9b      	ldrh	r3, [r3, r2]
 8006a32:	187a      	adds	r2, r7, r1
 8006a34:	8812      	ldrh	r2, [r2, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d300      	bcc.n	8006a3c <HAL_UART_IRQHandler+0x334>
 8006a3a:	e17d      	b.n	8006d38 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	187a      	adds	r2, r7, r1
 8006a40:	215e      	movs	r1, #94	; 0x5e
 8006a42:	8812      	ldrh	r2, [r2, #0]
 8006a44:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2280      	movs	r2, #128	; 0x80
 8006a4a:	589b      	ldr	r3, [r3, r2]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2220      	movs	r2, #32
 8006a52:	4013      	ands	r3, r2
 8006a54:	d170      	bne.n	8006b38 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a56:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a60:	2301      	movs	r3, #1
 8006a62:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a66:	f383 8810 	msr	PRIMASK, r3
}
 8006a6a:	46c0      	nop			; (mov r8, r8)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	49b4      	ldr	r1, [pc, #720]	; (8006d48 <HAL_UART_IRQHandler+0x640>)
 8006a78:	400a      	ands	r2, r1
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	f383 8810 	msr	PRIMASK, r3
}
 8006a86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a88:	f3ef 8310 	mrs	r3, PRIMASK
 8006a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a90:	677b      	str	r3, [r7, #116]	; 0x74
 8006a92:	2301      	movs	r3, #1
 8006a94:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a98:	f383 8810 	msr	PRIMASK, r3
}
 8006a9c:	46c0      	nop			; (mov r8, r8)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	438a      	bics	r2, r1
 8006aac:	609a      	str	r2, [r3, #8]
 8006aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ab0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab4:	f383 8810 	msr	PRIMASK, r3
}
 8006ab8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aba:	f3ef 8310 	mrs	r3, PRIMASK
 8006abe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac2:	673b      	str	r3, [r7, #112]	; 0x70
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aca:	f383 8810 	msr	PRIMASK, r3
}
 8006ace:	46c0      	nop			; (mov r8, r8)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2140      	movs	r1, #64	; 0x40
 8006adc:	438a      	bics	r2, r1
 8006ade:	609a      	str	r2, [r3, #8]
 8006ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ae2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae6:	f383 8810 	msr	PRIMASK, r3
}
 8006aea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	228c      	movs	r2, #140	; 0x8c
 8006af0:	2120      	movs	r1, #32
 8006af2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006afa:	f3ef 8310 	mrs	r3, PRIMASK
 8006afe:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b04:	2301      	movs	r3, #1
 8006b06:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b0a:	f383 8810 	msr	PRIMASK, r3
}
 8006b0e:	46c0      	nop			; (mov r8, r8)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2110      	movs	r1, #16
 8006b1c:	438a      	bics	r2, r1
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b22:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b26:	f383 8810 	msr	PRIMASK, r3
}
 8006b2a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2280      	movs	r2, #128	; 0x80
 8006b30:	589b      	ldr	r3, [r3, r2]
 8006b32:	0018      	movs	r0, r3
 8006b34:	f7fe f9fa 	bl	8004f2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	225c      	movs	r2, #92	; 0x5c
 8006b42:	5a9a      	ldrh	r2, [r3, r2]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	215e      	movs	r1, #94	; 0x5e
 8006b48:	5a5b      	ldrh	r3, [r3, r1]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	0011      	movs	r1, r2
 8006b54:	0018      	movs	r0, r3
 8006b56:	f000 f90d 	bl	8006d74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b5a:	e0ed      	b.n	8006d38 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	225c      	movs	r2, #92	; 0x5c
 8006b60:	5a99      	ldrh	r1, [r3, r2]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	225e      	movs	r2, #94	; 0x5e
 8006b66:	5a9b      	ldrh	r3, [r3, r2]
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	208e      	movs	r0, #142	; 0x8e
 8006b6c:	183b      	adds	r3, r7, r0
 8006b6e:	1a8a      	subs	r2, r1, r2
 8006b70:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	225e      	movs	r2, #94	; 0x5e
 8006b76:	5a9b      	ldrh	r3, [r3, r2]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d100      	bne.n	8006b80 <HAL_UART_IRQHandler+0x478>
 8006b7e:	e0dd      	b.n	8006d3c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006b80:	183b      	adds	r3, r7, r0
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d100      	bne.n	8006b8a <HAL_UART_IRQHandler+0x482>
 8006b88:	e0d8      	b.n	8006d3c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b90:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b92:	2488      	movs	r4, #136	; 0x88
 8006b94:	193a      	adds	r2, r7, r4
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	2301      	movs	r3, #1
 8006b9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f383 8810 	msr	PRIMASK, r3
}
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4967      	ldr	r1, [pc, #412]	; (8006d4c <HAL_UART_IRQHandler+0x644>)
 8006bb0:	400a      	ands	r2, r1
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	193b      	adds	r3, r7, r4
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f383 8810 	msr	PRIMASK, r3
}
 8006bc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bc8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bca:	2484      	movs	r4, #132	; 0x84
 8006bcc:	193a      	adds	r2, r7, r4
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	f383 8810 	msr	PRIMASK, r3
}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	495a      	ldr	r1, [pc, #360]	; (8006d50 <HAL_UART_IRQHandler+0x648>)
 8006be8:	400a      	ands	r2, r1
 8006bea:	609a      	str	r2, [r3, #8]
 8006bec:	193b      	adds	r3, r7, r4
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	f383 8810 	msr	PRIMASK, r3
}
 8006bf8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	228c      	movs	r2, #140	; 0x8c
 8006bfe:	2120      	movs	r1, #32
 8006c00:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c16:	2480      	movs	r4, #128	; 0x80
 8006c18:	193a      	adds	r2, r7, r4
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	f383 8810 	msr	PRIMASK, r3
}
 8006c26:	46c0      	nop			; (mov r8, r8)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2110      	movs	r1, #16
 8006c34:	438a      	bics	r2, r1
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	193b      	adds	r3, r7, r4
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c40:	f383 8810 	msr	PRIMASK, r3
}
 8006c44:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c4c:	183b      	adds	r3, r7, r0
 8006c4e:	881a      	ldrh	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	0011      	movs	r1, r2
 8006c54:	0018      	movs	r0, r3
 8006c56:	f000 f88d 	bl	8006d74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c5a:	e06f      	b.n	8006d3c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c5c:	23a4      	movs	r3, #164	; 0xa4
 8006c5e:	18fb      	adds	r3, r7, r3
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	2380      	movs	r3, #128	; 0x80
 8006c64:	035b      	lsls	r3, r3, #13
 8006c66:	4013      	ands	r3, r2
 8006c68:	d010      	beq.n	8006c8c <HAL_UART_IRQHandler+0x584>
 8006c6a:	239c      	movs	r3, #156	; 0x9c
 8006c6c:	18fb      	adds	r3, r7, r3
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	2380      	movs	r3, #128	; 0x80
 8006c72:	03db      	lsls	r3, r3, #15
 8006c74:	4013      	ands	r3, r2
 8006c76:	d009      	beq.n	8006c8c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2280      	movs	r2, #128	; 0x80
 8006c7e:	0352      	lsls	r2, r2, #13
 8006c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	0018      	movs	r0, r3
 8006c86:	f000 fc98 	bl	80075ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c8a:	e05a      	b.n	8006d42 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c8c:	23a4      	movs	r3, #164	; 0xa4
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2280      	movs	r2, #128	; 0x80
 8006c94:	4013      	ands	r3, r2
 8006c96:	d016      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c98:	23a0      	movs	r3, #160	; 0xa0
 8006c9a:	18fb      	adds	r3, r7, r3
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2280      	movs	r2, #128	; 0x80
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d106      	bne.n	8006cb2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ca4:	239c      	movs	r3, #156	; 0x9c
 8006ca6:	18fb      	adds	r3, r7, r3
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	2380      	movs	r3, #128	; 0x80
 8006cac:	041b      	lsls	r3, r3, #16
 8006cae:	4013      	ands	r3, r2
 8006cb0:	d009      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d042      	beq.n	8006d40 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	0010      	movs	r0, r2
 8006cc2:	4798      	blx	r3
    }
    return;
 8006cc4:	e03c      	b.n	8006d40 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cc6:	23a4      	movs	r3, #164	; 0xa4
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2240      	movs	r2, #64	; 0x40
 8006cce:	4013      	ands	r3, r2
 8006cd0:	d00a      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x5e0>
 8006cd2:	23a0      	movs	r3, #160	; 0xa0
 8006cd4:	18fb      	adds	r3, r7, r3
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2240      	movs	r2, #64	; 0x40
 8006cda:	4013      	ands	r3, r2
 8006cdc:	d004      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f000 fc3e 	bl	8007562 <UART_EndTransmit_IT>
    return;
 8006ce6:	e02c      	b.n	8006d42 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006ce8:	23a4      	movs	r3, #164	; 0xa4
 8006cea:	18fb      	adds	r3, r7, r3
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	2380      	movs	r3, #128	; 0x80
 8006cf0:	041b      	lsls	r3, r3, #16
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	d00b      	beq.n	8006d0e <HAL_UART_IRQHandler+0x606>
 8006cf6:	23a0      	movs	r3, #160	; 0xa0
 8006cf8:	18fb      	adds	r3, r7, r3
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	2380      	movs	r3, #128	; 0x80
 8006cfe:	05db      	lsls	r3, r3, #23
 8006d00:	4013      	ands	r3, r2
 8006d02:	d004      	beq.n	8006d0e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	0018      	movs	r0, r3
 8006d08:	f000 fc67 	bl	80075da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d0c:	e019      	b.n	8006d42 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d0e:	23a4      	movs	r3, #164	; 0xa4
 8006d10:	18fb      	adds	r3, r7, r3
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	2380      	movs	r3, #128	; 0x80
 8006d16:	045b      	lsls	r3, r3, #17
 8006d18:	4013      	ands	r3, r2
 8006d1a:	d012      	beq.n	8006d42 <HAL_UART_IRQHandler+0x63a>
 8006d1c:	23a0      	movs	r3, #160	; 0xa0
 8006d1e:	18fb      	adds	r3, r7, r3
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	da0d      	bge.n	8006d42 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f000 fc4e 	bl	80075ca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d2e:	e008      	b.n	8006d42 <HAL_UART_IRQHandler+0x63a>
      return;
 8006d30:	46c0      	nop			; (mov r8, r8)
 8006d32:	e006      	b.n	8006d42 <HAL_UART_IRQHandler+0x63a>
    return;
 8006d34:	46c0      	nop			; (mov r8, r8)
 8006d36:	e004      	b.n	8006d42 <HAL_UART_IRQHandler+0x63a>
      return;
 8006d38:	46c0      	nop			; (mov r8, r8)
 8006d3a:	e002      	b.n	8006d42 <HAL_UART_IRQHandler+0x63a>
      return;
 8006d3c:	46c0      	nop			; (mov r8, r8)
 8006d3e:	e000      	b.n	8006d42 <HAL_UART_IRQHandler+0x63a>
    return;
 8006d40:	46c0      	nop			; (mov r8, r8)
  }
}
 8006d42:	46bd      	mov	sp, r7
 8006d44:	b02a      	add	sp, #168	; 0xa8
 8006d46:	bdb0      	pop	{r4, r5, r7, pc}
 8006d48:	fffffeff 	.word	0xfffffeff
 8006d4c:	fffffedf 	.word	0xfffffedf
 8006d50:	effffffe 	.word	0xeffffffe

08006d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d5c:	46c0      	nop			; (mov r8, r8)
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b002      	add	sp, #8
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d6c:	46c0      	nop			; (mov r8, r8)
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	b002      	add	sp, #8
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	000a      	movs	r2, r1
 8006d7e:	1cbb      	adds	r3, r7, #2
 8006d80:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b002      	add	sp, #8
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b088      	sub	sp, #32
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d94:	231a      	movs	r3, #26
 8006d96:	18fb      	adds	r3, r7, r3
 8006d98:	2200      	movs	r2, #0
 8006d9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	431a      	orrs	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4abc      	ldr	r2, [pc, #752]	; (80070ac <UART_SetConfig+0x320>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	0019      	movs	r1, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	69fa      	ldr	r2, [r7, #28]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	4ab7      	ldr	r2, [pc, #732]	; (80070b0 <UART_SetConfig+0x324>)
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	0019      	movs	r1, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	4aae      	ldr	r2, [pc, #696]	; (80070b4 <UART_SetConfig+0x328>)
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	0019      	movs	r1, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69fa      	ldr	r2, [r7, #28]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	220f      	movs	r2, #15
 8006e10:	4393      	bics	r3, r2
 8006e12:	0019      	movs	r1, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4aa4      	ldr	r2, [pc, #656]	; (80070b8 <UART_SetConfig+0x32c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d127      	bne.n	8006e7a <UART_SetConfig+0xee>
 8006e2a:	4ba4      	ldr	r3, [pc, #656]	; (80070bc <UART_SetConfig+0x330>)
 8006e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2e:	2203      	movs	r2, #3
 8006e30:	4013      	ands	r3, r2
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d017      	beq.n	8006e66 <UART_SetConfig+0xda>
 8006e36:	d81b      	bhi.n	8006e70 <UART_SetConfig+0xe4>
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d00a      	beq.n	8006e52 <UART_SetConfig+0xc6>
 8006e3c:	d818      	bhi.n	8006e70 <UART_SetConfig+0xe4>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <UART_SetConfig+0xbc>
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d00a      	beq.n	8006e5c <UART_SetConfig+0xd0>
 8006e46:	e013      	b.n	8006e70 <UART_SetConfig+0xe4>
 8006e48:	231b      	movs	r3, #27
 8006e4a:	18fb      	adds	r3, r7, r3
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	701a      	strb	r2, [r3, #0]
 8006e50:	e058      	b.n	8006f04 <UART_SetConfig+0x178>
 8006e52:	231b      	movs	r3, #27
 8006e54:	18fb      	adds	r3, r7, r3
 8006e56:	2202      	movs	r2, #2
 8006e58:	701a      	strb	r2, [r3, #0]
 8006e5a:	e053      	b.n	8006f04 <UART_SetConfig+0x178>
 8006e5c:	231b      	movs	r3, #27
 8006e5e:	18fb      	adds	r3, r7, r3
 8006e60:	2204      	movs	r2, #4
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	e04e      	b.n	8006f04 <UART_SetConfig+0x178>
 8006e66:	231b      	movs	r3, #27
 8006e68:	18fb      	adds	r3, r7, r3
 8006e6a:	2208      	movs	r2, #8
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	e049      	b.n	8006f04 <UART_SetConfig+0x178>
 8006e70:	231b      	movs	r3, #27
 8006e72:	18fb      	adds	r3, r7, r3
 8006e74:	2210      	movs	r2, #16
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	e044      	b.n	8006f04 <UART_SetConfig+0x178>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a90      	ldr	r2, [pc, #576]	; (80070c0 <UART_SetConfig+0x334>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d127      	bne.n	8006ed4 <UART_SetConfig+0x148>
 8006e84:	4b8d      	ldr	r3, [pc, #564]	; (80070bc <UART_SetConfig+0x330>)
 8006e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e88:	220c      	movs	r2, #12
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b0c      	cmp	r3, #12
 8006e8e:	d017      	beq.n	8006ec0 <UART_SetConfig+0x134>
 8006e90:	d81b      	bhi.n	8006eca <UART_SetConfig+0x13e>
 8006e92:	2b08      	cmp	r3, #8
 8006e94:	d00a      	beq.n	8006eac <UART_SetConfig+0x120>
 8006e96:	d818      	bhi.n	8006eca <UART_SetConfig+0x13e>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <UART_SetConfig+0x116>
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d00a      	beq.n	8006eb6 <UART_SetConfig+0x12a>
 8006ea0:	e013      	b.n	8006eca <UART_SetConfig+0x13e>
 8006ea2:	231b      	movs	r3, #27
 8006ea4:	18fb      	adds	r3, r7, r3
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	e02b      	b.n	8006f04 <UART_SetConfig+0x178>
 8006eac:	231b      	movs	r3, #27
 8006eae:	18fb      	adds	r3, r7, r3
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	701a      	strb	r2, [r3, #0]
 8006eb4:	e026      	b.n	8006f04 <UART_SetConfig+0x178>
 8006eb6:	231b      	movs	r3, #27
 8006eb8:	18fb      	adds	r3, r7, r3
 8006eba:	2204      	movs	r2, #4
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	e021      	b.n	8006f04 <UART_SetConfig+0x178>
 8006ec0:	231b      	movs	r3, #27
 8006ec2:	18fb      	adds	r3, r7, r3
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	e01c      	b.n	8006f04 <UART_SetConfig+0x178>
 8006eca:	231b      	movs	r3, #27
 8006ecc:	18fb      	adds	r3, r7, r3
 8006ece:	2210      	movs	r2, #16
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	e017      	b.n	8006f04 <UART_SetConfig+0x178>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a7a      	ldr	r2, [pc, #488]	; (80070c4 <UART_SetConfig+0x338>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d104      	bne.n	8006ee8 <UART_SetConfig+0x15c>
 8006ede:	231b      	movs	r3, #27
 8006ee0:	18fb      	adds	r3, r7, r3
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	e00d      	b.n	8006f04 <UART_SetConfig+0x178>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a76      	ldr	r2, [pc, #472]	; (80070c8 <UART_SetConfig+0x33c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d104      	bne.n	8006efc <UART_SetConfig+0x170>
 8006ef2:	231b      	movs	r3, #27
 8006ef4:	18fb      	adds	r3, r7, r3
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	e003      	b.n	8006f04 <UART_SetConfig+0x178>
 8006efc:	231b      	movs	r3, #27
 8006efe:	18fb      	adds	r3, r7, r3
 8006f00:	2210      	movs	r2, #16
 8006f02:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	69da      	ldr	r2, [r3, #28]
 8006f08:	2380      	movs	r3, #128	; 0x80
 8006f0a:	021b      	lsls	r3, r3, #8
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d000      	beq.n	8006f12 <UART_SetConfig+0x186>
 8006f10:	e065      	b.n	8006fde <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8006f12:	231b      	movs	r3, #27
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d015      	beq.n	8006f48 <UART_SetConfig+0x1bc>
 8006f1c:	dc18      	bgt.n	8006f50 <UART_SetConfig+0x1c4>
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d00d      	beq.n	8006f3e <UART_SetConfig+0x1b2>
 8006f22:	dc15      	bgt.n	8006f50 <UART_SetConfig+0x1c4>
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <UART_SetConfig+0x1a2>
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d005      	beq.n	8006f38 <UART_SetConfig+0x1ac>
 8006f2c:	e010      	b.n	8006f50 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f2e:	f7fe ff55 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 8006f32:	0003      	movs	r3, r0
 8006f34:	617b      	str	r3, [r7, #20]
        break;
 8006f36:	e012      	b.n	8006f5e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f38:	4b64      	ldr	r3, [pc, #400]	; (80070cc <UART_SetConfig+0x340>)
 8006f3a:	617b      	str	r3, [r7, #20]
        break;
 8006f3c:	e00f      	b.n	8006f5e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f3e:	f7fe fec1 	bl	8005cc4 <HAL_RCC_GetSysClockFreq>
 8006f42:	0003      	movs	r3, r0
 8006f44:	617b      	str	r3, [r7, #20]
        break;
 8006f46:	e00a      	b.n	8006f5e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	617b      	str	r3, [r7, #20]
        break;
 8006f4e:	e006      	b.n	8006f5e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f54:	231a      	movs	r3, #26
 8006f56:	18fb      	adds	r3, r7, r3
 8006f58:	2201      	movs	r2, #1
 8006f5a:	701a      	strb	r2, [r3, #0]
        break;
 8006f5c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d100      	bne.n	8006f66 <UART_SetConfig+0x1da>
 8006f64:	e08d      	b.n	8007082 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f6a:	4b59      	ldr	r3, [pc, #356]	; (80070d0 <UART_SetConfig+0x344>)
 8006f6c:	0052      	lsls	r2, r2, #1
 8006f6e:	5ad3      	ldrh	r3, [r2, r3]
 8006f70:	0019      	movs	r1, r3
 8006f72:	6978      	ldr	r0, [r7, #20]
 8006f74:	f7f9 f8e0 	bl	8000138 <__udivsi3>
 8006f78:	0003      	movs	r3, r0
 8006f7a:	005a      	lsls	r2, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	085b      	lsrs	r3, r3, #1
 8006f82:	18d2      	adds	r2, r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	0019      	movs	r1, r3
 8006f8a:	0010      	movs	r0, r2
 8006f8c:	f7f9 f8d4 	bl	8000138 <__udivsi3>
 8006f90:	0003      	movs	r3, r0
 8006f92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	2b0f      	cmp	r3, #15
 8006f98:	d91c      	bls.n	8006fd4 <UART_SetConfig+0x248>
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	2380      	movs	r3, #128	; 0x80
 8006f9e:	025b      	lsls	r3, r3, #9
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d217      	bcs.n	8006fd4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	200e      	movs	r0, #14
 8006faa:	183b      	adds	r3, r7, r0
 8006fac:	210f      	movs	r1, #15
 8006fae:	438a      	bics	r2, r1
 8006fb0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	085b      	lsrs	r3, r3, #1
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	2207      	movs	r2, #7
 8006fba:	4013      	ands	r3, r2
 8006fbc:	b299      	uxth	r1, r3
 8006fbe:	183b      	adds	r3, r7, r0
 8006fc0:	183a      	adds	r2, r7, r0
 8006fc2:	8812      	ldrh	r2, [r2, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	183a      	adds	r2, r7, r0
 8006fce:	8812      	ldrh	r2, [r2, #0]
 8006fd0:	60da      	str	r2, [r3, #12]
 8006fd2:	e056      	b.n	8007082 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006fd4:	231a      	movs	r3, #26
 8006fd6:	18fb      	adds	r3, r7, r3
 8006fd8:	2201      	movs	r2, #1
 8006fda:	701a      	strb	r2, [r3, #0]
 8006fdc:	e051      	b.n	8007082 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fde:	231b      	movs	r3, #27
 8006fe0:	18fb      	adds	r3, r7, r3
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b08      	cmp	r3, #8
 8006fe6:	d015      	beq.n	8007014 <UART_SetConfig+0x288>
 8006fe8:	dc18      	bgt.n	800701c <UART_SetConfig+0x290>
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d00d      	beq.n	800700a <UART_SetConfig+0x27e>
 8006fee:	dc15      	bgt.n	800701c <UART_SetConfig+0x290>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <UART_SetConfig+0x26e>
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d005      	beq.n	8007004 <UART_SetConfig+0x278>
 8006ff8:	e010      	b.n	800701c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ffa:	f7fe feef 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 8006ffe:	0003      	movs	r3, r0
 8007000:	617b      	str	r3, [r7, #20]
        break;
 8007002:	e012      	b.n	800702a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007004:	4b31      	ldr	r3, [pc, #196]	; (80070cc <UART_SetConfig+0x340>)
 8007006:	617b      	str	r3, [r7, #20]
        break;
 8007008:	e00f      	b.n	800702a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800700a:	f7fe fe5b 	bl	8005cc4 <HAL_RCC_GetSysClockFreq>
 800700e:	0003      	movs	r3, r0
 8007010:	617b      	str	r3, [r7, #20]
        break;
 8007012:	e00a      	b.n	800702a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007014:	2380      	movs	r3, #128	; 0x80
 8007016:	021b      	lsls	r3, r3, #8
 8007018:	617b      	str	r3, [r7, #20]
        break;
 800701a:	e006      	b.n	800702a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007020:	231a      	movs	r3, #26
 8007022:	18fb      	adds	r3, r7, r3
 8007024:	2201      	movs	r2, #1
 8007026:	701a      	strb	r2, [r3, #0]
        break;
 8007028:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d028      	beq.n	8007082 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007034:	4b26      	ldr	r3, [pc, #152]	; (80070d0 <UART_SetConfig+0x344>)
 8007036:	0052      	lsls	r2, r2, #1
 8007038:	5ad3      	ldrh	r3, [r2, r3]
 800703a:	0019      	movs	r1, r3
 800703c:	6978      	ldr	r0, [r7, #20]
 800703e:	f7f9 f87b 	bl	8000138 <__udivsi3>
 8007042:	0003      	movs	r3, r0
 8007044:	001a      	movs	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	085b      	lsrs	r3, r3, #1
 800704c:	18d2      	adds	r2, r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	0019      	movs	r1, r3
 8007054:	0010      	movs	r0, r2
 8007056:	f7f9 f86f 	bl	8000138 <__udivsi3>
 800705a:	0003      	movs	r3, r0
 800705c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	2b0f      	cmp	r3, #15
 8007062:	d90a      	bls.n	800707a <UART_SetConfig+0x2ee>
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	2380      	movs	r3, #128	; 0x80
 8007068:	025b      	lsls	r3, r3, #9
 800706a:	429a      	cmp	r2, r3
 800706c:	d205      	bcs.n	800707a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	b29a      	uxth	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60da      	str	r2, [r3, #12]
 8007078:	e003      	b.n	8007082 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800707a:	231a      	movs	r3, #26
 800707c:	18fb      	adds	r3, r7, r3
 800707e:	2201      	movs	r2, #1
 8007080:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	226a      	movs	r2, #106	; 0x6a
 8007086:	2101      	movs	r1, #1
 8007088:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2268      	movs	r2, #104	; 0x68
 800708e:	2101      	movs	r1, #1
 8007090:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800709e:	231a      	movs	r3, #26
 80070a0:	18fb      	adds	r3, r7, r3
 80070a2:	781b      	ldrb	r3, [r3, #0]
}
 80070a4:	0018      	movs	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b008      	add	sp, #32
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	cfff69f3 	.word	0xcfff69f3
 80070b0:	ffffcfff 	.word	0xffffcfff
 80070b4:	11fff4ff 	.word	0x11fff4ff
 80070b8:	40013800 	.word	0x40013800
 80070bc:	40021000 	.word	0x40021000
 80070c0:	40004400 	.word	0x40004400
 80070c4:	40004800 	.word	0x40004800
 80070c8:	40004c00 	.word	0x40004c00
 80070cc:	00f42400 	.word	0x00f42400
 80070d0:	0800a5d8 	.word	0x0800a5d8

080070d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e0:	2201      	movs	r2, #1
 80070e2:	4013      	ands	r3, r2
 80070e4:	d00b      	beq.n	80070fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	4a4a      	ldr	r2, [pc, #296]	; (8007218 <UART_AdvFeatureConfig+0x144>)
 80070ee:	4013      	ands	r3, r2
 80070f0:	0019      	movs	r1, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007102:	2202      	movs	r2, #2
 8007104:	4013      	ands	r3, r2
 8007106:	d00b      	beq.n	8007120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	4a43      	ldr	r2, [pc, #268]	; (800721c <UART_AdvFeatureConfig+0x148>)
 8007110:	4013      	ands	r3, r2
 8007112:	0019      	movs	r1, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007124:	2204      	movs	r2, #4
 8007126:	4013      	ands	r3, r2
 8007128:	d00b      	beq.n	8007142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	4a3b      	ldr	r2, [pc, #236]	; (8007220 <UART_AdvFeatureConfig+0x14c>)
 8007132:	4013      	ands	r3, r2
 8007134:	0019      	movs	r1, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	2208      	movs	r2, #8
 8007148:	4013      	ands	r3, r2
 800714a:	d00b      	beq.n	8007164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	4a34      	ldr	r2, [pc, #208]	; (8007224 <UART_AdvFeatureConfig+0x150>)
 8007154:	4013      	ands	r3, r2
 8007156:	0019      	movs	r1, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	2210      	movs	r2, #16
 800716a:	4013      	ands	r3, r2
 800716c:	d00b      	beq.n	8007186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	4a2c      	ldr	r2, [pc, #176]	; (8007228 <UART_AdvFeatureConfig+0x154>)
 8007176:	4013      	ands	r3, r2
 8007178:	0019      	movs	r1, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	2220      	movs	r2, #32
 800718c:	4013      	ands	r3, r2
 800718e:	d00b      	beq.n	80071a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	4a25      	ldr	r2, [pc, #148]	; (800722c <UART_AdvFeatureConfig+0x158>)
 8007198:	4013      	ands	r3, r2
 800719a:	0019      	movs	r1, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ac:	2240      	movs	r2, #64	; 0x40
 80071ae:	4013      	ands	r3, r2
 80071b0:	d01d      	beq.n	80071ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	4a1d      	ldr	r2, [pc, #116]	; (8007230 <UART_AdvFeatureConfig+0x15c>)
 80071ba:	4013      	ands	r3, r2
 80071bc:	0019      	movs	r1, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071ce:	2380      	movs	r3, #128	; 0x80
 80071d0:	035b      	lsls	r3, r3, #13
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d10b      	bne.n	80071ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	4a15      	ldr	r2, [pc, #84]	; (8007234 <UART_AdvFeatureConfig+0x160>)
 80071de:	4013      	ands	r3, r2
 80071e0:	0019      	movs	r1, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	2280      	movs	r2, #128	; 0x80
 80071f4:	4013      	ands	r3, r2
 80071f6:	d00b      	beq.n	8007210 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	4a0e      	ldr	r2, [pc, #56]	; (8007238 <UART_AdvFeatureConfig+0x164>)
 8007200:	4013      	ands	r3, r2
 8007202:	0019      	movs	r1, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	605a      	str	r2, [r3, #4]
  }
}
 8007210:	46c0      	nop			; (mov r8, r8)
 8007212:	46bd      	mov	sp, r7
 8007214:	b002      	add	sp, #8
 8007216:	bd80      	pop	{r7, pc}
 8007218:	fffdffff 	.word	0xfffdffff
 800721c:	fffeffff 	.word	0xfffeffff
 8007220:	fffbffff 	.word	0xfffbffff
 8007224:	ffff7fff 	.word	0xffff7fff
 8007228:	ffffefff 	.word	0xffffefff
 800722c:	ffffdfff 	.word	0xffffdfff
 8007230:	ffefffff 	.word	0xffefffff
 8007234:	ff9fffff 	.word	0xff9fffff
 8007238:	fff7ffff 	.word	0xfff7ffff

0800723c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af02      	add	r7, sp, #8
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2290      	movs	r2, #144	; 0x90
 8007248:	2100      	movs	r1, #0
 800724a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800724c:	f7fc fe4c 	bl	8003ee8 <HAL_GetTick>
 8007250:	0003      	movs	r3, r0
 8007252:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2208      	movs	r2, #8
 800725c:	4013      	ands	r3, r2
 800725e:	2b08      	cmp	r3, #8
 8007260:	d10c      	bne.n	800727c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2280      	movs	r2, #128	; 0x80
 8007266:	0391      	lsls	r1, r2, #14
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4a1a      	ldr	r2, [pc, #104]	; (80072d4 <UART_CheckIdleState+0x98>)
 800726c:	9200      	str	r2, [sp, #0]
 800726e:	2200      	movs	r2, #0
 8007270:	f000 f832 	bl	80072d8 <UART_WaitOnFlagUntilTimeout>
 8007274:	1e03      	subs	r3, r0, #0
 8007276:	d001      	beq.n	800727c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e026      	b.n	80072ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2204      	movs	r2, #4
 8007284:	4013      	ands	r3, r2
 8007286:	2b04      	cmp	r3, #4
 8007288:	d10c      	bne.n	80072a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2280      	movs	r2, #128	; 0x80
 800728e:	03d1      	lsls	r1, r2, #15
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	4a10      	ldr	r2, [pc, #64]	; (80072d4 <UART_CheckIdleState+0x98>)
 8007294:	9200      	str	r2, [sp, #0]
 8007296:	2200      	movs	r2, #0
 8007298:	f000 f81e 	bl	80072d8 <UART_WaitOnFlagUntilTimeout>
 800729c:	1e03      	subs	r3, r0, #0
 800729e:	d001      	beq.n	80072a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e012      	b.n	80072ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2288      	movs	r2, #136	; 0x88
 80072a8:	2120      	movs	r1, #32
 80072aa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	228c      	movs	r2, #140	; 0x8c
 80072b0:	2120      	movs	r1, #32
 80072b2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2284      	movs	r2, #132	; 0x84
 80072c4:	2100      	movs	r1, #0
 80072c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	0018      	movs	r0, r3
 80072cc:	46bd      	mov	sp, r7
 80072ce:	b004      	add	sp, #16
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	46c0      	nop			; (mov r8, r8)
 80072d4:	01ffffff 	.word	0x01ffffff

080072d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b094      	sub	sp, #80	; 0x50
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	603b      	str	r3, [r7, #0]
 80072e4:	1dfb      	adds	r3, r7, #7
 80072e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e8:	e0a7      	b.n	800743a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072ec:	3301      	adds	r3, #1
 80072ee:	d100      	bne.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80072f0:	e0a3      	b.n	800743a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072f2:	f7fc fdf9 	bl	8003ee8 <HAL_GetTick>
 80072f6:	0002      	movs	r2, r0
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072fe:	429a      	cmp	r2, r3
 8007300:	d302      	bcc.n	8007308 <UART_WaitOnFlagUntilTimeout+0x30>
 8007302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007304:	2b00      	cmp	r3, #0
 8007306:	d13f      	bne.n	8007388 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007308:	f3ef 8310 	mrs	r3, PRIMASK
 800730c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007310:	647b      	str	r3, [r7, #68]	; 0x44
 8007312:	2301      	movs	r3, #1
 8007314:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	f383 8810 	msr	PRIMASK, r3
}
 800731c:	46c0      	nop			; (mov r8, r8)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	494e      	ldr	r1, [pc, #312]	; (8007464 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800732a:	400a      	ands	r2, r1
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007330:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	f383 8810 	msr	PRIMASK, r3
}
 8007338:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733a:	f3ef 8310 	mrs	r3, PRIMASK
 800733e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007342:	643b      	str	r3, [r7, #64]	; 0x40
 8007344:	2301      	movs	r3, #1
 8007346:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	f383 8810 	msr	PRIMASK, r3
}
 800734e:	46c0      	nop			; (mov r8, r8)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689a      	ldr	r2, [r3, #8]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2101      	movs	r1, #1
 800735c:	438a      	bics	r2, r1
 800735e:	609a      	str	r2, [r3, #8]
 8007360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007366:	f383 8810 	msr	PRIMASK, r3
}
 800736a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2288      	movs	r2, #136	; 0x88
 8007370:	2120      	movs	r1, #32
 8007372:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	228c      	movs	r2, #140	; 0x8c
 8007378:	2120      	movs	r1, #32
 800737a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2284      	movs	r2, #132	; 0x84
 8007380:	2100      	movs	r1, #0
 8007382:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e069      	b.n	800745c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2204      	movs	r2, #4
 8007390:	4013      	ands	r3, r2
 8007392:	d052      	beq.n	800743a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	69da      	ldr	r2, [r3, #28]
 800739a:	2380      	movs	r3, #128	; 0x80
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	401a      	ands	r2, r3
 80073a0:	2380      	movs	r3, #128	; 0x80
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d148      	bne.n	800743a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2280      	movs	r2, #128	; 0x80
 80073ae:	0112      	lsls	r2, r2, #4
 80073b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b2:	f3ef 8310 	mrs	r3, PRIMASK
 80073b6:	613b      	str	r3, [r7, #16]
  return(result);
 80073b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073bc:	2301      	movs	r3, #1
 80073be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f383 8810 	msr	PRIMASK, r3
}
 80073c6:	46c0      	nop			; (mov r8, r8)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4924      	ldr	r1, [pc, #144]	; (8007464 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80073d4:	400a      	ands	r2, r1
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	f383 8810 	msr	PRIMASK, r3
}
 80073e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073e4:	f3ef 8310 	mrs	r3, PRIMASK
 80073e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80073ea:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ee:	2301      	movs	r3, #1
 80073f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	f383 8810 	msr	PRIMASK, r3
}
 80073f8:	46c0      	nop			; (mov r8, r8)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2101      	movs	r1, #1
 8007406:	438a      	bics	r2, r1
 8007408:	609a      	str	r2, [r3, #8]
 800740a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	f383 8810 	msr	PRIMASK, r3
}
 8007414:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2288      	movs	r2, #136	; 0x88
 800741a:	2120      	movs	r1, #32
 800741c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	228c      	movs	r2, #140	; 0x8c
 8007422:	2120      	movs	r1, #32
 8007424:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2290      	movs	r2, #144	; 0x90
 800742a:	2120      	movs	r1, #32
 800742c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2284      	movs	r2, #132	; 0x84
 8007432:	2100      	movs	r1, #0
 8007434:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e010      	b.n	800745c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	4013      	ands	r3, r2
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	425a      	negs	r2, r3
 800744a:	4153      	adcs	r3, r2
 800744c:	b2db      	uxtb	r3, r3
 800744e:	001a      	movs	r2, r3
 8007450:	1dfb      	adds	r3, r7, #7
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d100      	bne.n	800745a <UART_WaitOnFlagUntilTimeout+0x182>
 8007458:	e747      	b.n	80072ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	0018      	movs	r0, r3
 800745e:	46bd      	mov	sp, r7
 8007460:	b014      	add	sp, #80	; 0x50
 8007462:	bd80      	pop	{r7, pc}
 8007464:	fffffe5f 	.word	0xfffffe5f

08007468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08e      	sub	sp, #56	; 0x38
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007470:	f3ef 8310 	mrs	r3, PRIMASK
 8007474:	617b      	str	r3, [r7, #20]
  return(result);
 8007476:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007478:	637b      	str	r3, [r7, #52]	; 0x34
 800747a:	2301      	movs	r3, #1
 800747c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	f383 8810 	msr	PRIMASK, r3
}
 8007484:	46c0      	nop			; (mov r8, r8)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4926      	ldr	r1, [pc, #152]	; (800752c <UART_EndRxTransfer+0xc4>)
 8007492:	400a      	ands	r2, r1
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007498:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	f383 8810 	msr	PRIMASK, r3
}
 80074a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074a2:	f3ef 8310 	mrs	r3, PRIMASK
 80074a6:	623b      	str	r3, [r7, #32]
  return(result);
 80074a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074aa:	633b      	str	r3, [r7, #48]	; 0x30
 80074ac:	2301      	movs	r3, #1
 80074ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	f383 8810 	msr	PRIMASK, r3
}
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	491b      	ldr	r1, [pc, #108]	; (8007530 <UART_EndRxTransfer+0xc8>)
 80074c4:	400a      	ands	r2, r1
 80074c6:	609a      	str	r2, [r3, #8]
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	f383 8810 	msr	PRIMASK, r3
}
 80074d2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d118      	bne.n	800750e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074dc:	f3ef 8310 	mrs	r3, PRIMASK
 80074e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80074e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074e6:	2301      	movs	r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f383 8810 	msr	PRIMASK, r3
}
 80074f0:	46c0      	nop			; (mov r8, r8)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2110      	movs	r1, #16
 80074fe:	438a      	bics	r2, r1
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f383 8810 	msr	PRIMASK, r3
}
 800750c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	228c      	movs	r2, #140	; 0x8c
 8007512:	2120      	movs	r1, #32
 8007514:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	46bd      	mov	sp, r7
 8007526:	b00e      	add	sp, #56	; 0x38
 8007528:	bd80      	pop	{r7, pc}
 800752a:	46c0      	nop			; (mov r8, r8)
 800752c:	fffffedf 	.word	0xfffffedf
 8007530:	effffffe 	.word	0xeffffffe

08007534 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	225e      	movs	r2, #94	; 0x5e
 8007546:	2100      	movs	r1, #0
 8007548:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2256      	movs	r2, #86	; 0x56
 800754e:	2100      	movs	r1, #0
 8007550:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	0018      	movs	r0, r3
 8007556:	f7ff fc05 	bl	8006d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	46bd      	mov	sp, r7
 800755e:	b004      	add	sp, #16
 8007560:	bd80      	pop	{r7, pc}

08007562 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b086      	sub	sp, #24
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800756a:	f3ef 8310 	mrs	r3, PRIMASK
 800756e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007570:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	2301      	movs	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f383 8810 	msr	PRIMASK, r3
}
 800757e:	46c0      	nop			; (mov r8, r8)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2140      	movs	r1, #64	; 0x40
 800758c:	438a      	bics	r2, r1
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f383 8810 	msr	PRIMASK, r3
}
 800759a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2288      	movs	r2, #136	; 0x88
 80075a0:	2120      	movs	r1, #32
 80075a2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	0018      	movs	r0, r3
 80075ae:	f7ff fbd1 	bl	8006d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075b2:	46c0      	nop			; (mov r8, r8)
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b006      	add	sp, #24
 80075b8:	bd80      	pop	{r7, pc}

080075ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075c2:	46c0      	nop			; (mov r8, r8)
 80075c4:	46bd      	mov	sp, r7
 80075c6:	b002      	add	sp, #8
 80075c8:	bd80      	pop	{r7, pc}

080075ca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b082      	sub	sp, #8
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80075d2:	46c0      	nop			; (mov r8, r8)
 80075d4:	46bd      	mov	sp, r7
 80075d6:	b002      	add	sp, #8
 80075d8:	bd80      	pop	{r7, pc}

080075da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	46bd      	mov	sp, r7
 80075e6:	b002      	add	sp, #8
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2284      	movs	r2, #132	; 0x84
 80075f8:	5c9b      	ldrb	r3, [r3, r2]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d101      	bne.n	8007602 <HAL_UARTEx_DisableFifoMode+0x16>
 80075fe:	2302      	movs	r3, #2
 8007600:	e027      	b.n	8007652 <HAL_UARTEx_DisableFifoMode+0x66>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2284      	movs	r2, #132	; 0x84
 8007606:	2101      	movs	r1, #1
 8007608:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2288      	movs	r2, #136	; 0x88
 800760e:	2124      	movs	r1, #36	; 0x24
 8007610:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2101      	movs	r1, #1
 8007626:	438a      	bics	r2, r1
 8007628:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4a0b      	ldr	r2, [pc, #44]	; (800765c <HAL_UARTEx_DisableFifoMode+0x70>)
 800762e:	4013      	ands	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2288      	movs	r2, #136	; 0x88
 8007644:	2120      	movs	r1, #32
 8007646:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2284      	movs	r2, #132	; 0x84
 800764c:	2100      	movs	r1, #0
 800764e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	0018      	movs	r0, r3
 8007654:	46bd      	mov	sp, r7
 8007656:	b004      	add	sp, #16
 8007658:	bd80      	pop	{r7, pc}
 800765a:	46c0      	nop			; (mov r8, r8)
 800765c:	dfffffff 	.word	0xdfffffff

08007660 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2284      	movs	r2, #132	; 0x84
 800766e:	5c9b      	ldrb	r3, [r3, r2]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d101      	bne.n	8007678 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007674:	2302      	movs	r3, #2
 8007676:	e02e      	b.n	80076d6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2284      	movs	r2, #132	; 0x84
 800767c:	2101      	movs	r1, #1
 800767e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2288      	movs	r2, #136	; 0x88
 8007684:	2124      	movs	r1, #36	; 0x24
 8007686:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2101      	movs	r1, #1
 800769c:	438a      	bics	r2, r1
 800769e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	08d9      	lsrs	r1, r3, #3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	0018      	movs	r0, r3
 80076b8:	f000 f854 	bl	8007764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2288      	movs	r2, #136	; 0x88
 80076c8:	2120      	movs	r1, #32
 80076ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2284      	movs	r2, #132	; 0x84
 80076d0:	2100      	movs	r1, #0
 80076d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	0018      	movs	r0, r3
 80076d8:	46bd      	mov	sp, r7
 80076da:	b004      	add	sp, #16
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2284      	movs	r2, #132	; 0x84
 80076ee:	5c9b      	ldrb	r3, [r3, r2]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076f4:	2302      	movs	r3, #2
 80076f6:	e02f      	b.n	8007758 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2284      	movs	r2, #132	; 0x84
 80076fc:	2101      	movs	r1, #1
 80076fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2288      	movs	r2, #136	; 0x88
 8007704:	2124      	movs	r1, #36	; 0x24
 8007706:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2101      	movs	r1, #1
 800771c:	438a      	bics	r2, r1
 800771e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	4a0e      	ldr	r2, [pc, #56]	; (8007760 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007728:	4013      	ands	r3, r2
 800772a:	0019      	movs	r1, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	0018      	movs	r0, r3
 800773a:	f000 f813 	bl	8007764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2288      	movs	r2, #136	; 0x88
 800774a:	2120      	movs	r1, #32
 800774c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2284      	movs	r2, #132	; 0x84
 8007752:	2100      	movs	r1, #0
 8007754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	0018      	movs	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	b004      	add	sp, #16
 800775e:	bd80      	pop	{r7, pc}
 8007760:	f1ffffff 	.word	0xf1ffffff

08007764 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007770:	2b00      	cmp	r3, #0
 8007772:	d108      	bne.n	8007786 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	226a      	movs	r2, #106	; 0x6a
 8007778:	2101      	movs	r1, #1
 800777a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2268      	movs	r2, #104	; 0x68
 8007780:	2101      	movs	r1, #1
 8007782:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007784:	e043      	b.n	800780e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007786:	260f      	movs	r6, #15
 8007788:	19bb      	adds	r3, r7, r6
 800778a:	2208      	movs	r2, #8
 800778c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800778e:	200e      	movs	r0, #14
 8007790:	183b      	adds	r3, r7, r0
 8007792:	2208      	movs	r2, #8
 8007794:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	0e5b      	lsrs	r3, r3, #25
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	240d      	movs	r4, #13
 80077a2:	193b      	adds	r3, r7, r4
 80077a4:	2107      	movs	r1, #7
 80077a6:	400a      	ands	r2, r1
 80077a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	0f5b      	lsrs	r3, r3, #29
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	250c      	movs	r5, #12
 80077b6:	197b      	adds	r3, r7, r5
 80077b8:	2107      	movs	r1, #7
 80077ba:	400a      	ands	r2, r1
 80077bc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077be:	183b      	adds	r3, r7, r0
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	197a      	adds	r2, r7, r5
 80077c4:	7812      	ldrb	r2, [r2, #0]
 80077c6:	4914      	ldr	r1, [pc, #80]	; (8007818 <UARTEx_SetNbDataToProcess+0xb4>)
 80077c8:	5c8a      	ldrb	r2, [r1, r2]
 80077ca:	435a      	muls	r2, r3
 80077cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80077ce:	197b      	adds	r3, r7, r5
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	4a12      	ldr	r2, [pc, #72]	; (800781c <UARTEx_SetNbDataToProcess+0xb8>)
 80077d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077d6:	0019      	movs	r1, r3
 80077d8:	f7f8 fd38 	bl	800024c <__divsi3>
 80077dc:	0003      	movs	r3, r0
 80077de:	b299      	uxth	r1, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	226a      	movs	r2, #106	; 0x6a
 80077e4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077e6:	19bb      	adds	r3, r7, r6
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	193a      	adds	r2, r7, r4
 80077ec:	7812      	ldrb	r2, [r2, #0]
 80077ee:	490a      	ldr	r1, [pc, #40]	; (8007818 <UARTEx_SetNbDataToProcess+0xb4>)
 80077f0:	5c8a      	ldrb	r2, [r1, r2]
 80077f2:	435a      	muls	r2, r3
 80077f4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80077f6:	193b      	adds	r3, r7, r4
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	4a08      	ldr	r2, [pc, #32]	; (800781c <UARTEx_SetNbDataToProcess+0xb8>)
 80077fc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077fe:	0019      	movs	r1, r3
 8007800:	f7f8 fd24 	bl	800024c <__divsi3>
 8007804:	0003      	movs	r3, r0
 8007806:	b299      	uxth	r1, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2268      	movs	r2, #104	; 0x68
 800780c:	5299      	strh	r1, [r3, r2]
}
 800780e:	46c0      	nop			; (mov r8, r8)
 8007810:	46bd      	mov	sp, r7
 8007812:	b005      	add	sp, #20
 8007814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007816:	46c0      	nop			; (mov r8, r8)
 8007818:	0800a5f0 	.word	0x0800a5f0
 800781c:	0800a5f8 	.word	0x0800a5f8

08007820 <__errno>:
 8007820:	4b01      	ldr	r3, [pc, #4]	; (8007828 <__errno+0x8>)
 8007822:	6818      	ldr	r0, [r3, #0]
 8007824:	4770      	bx	lr
 8007826:	46c0      	nop			; (mov r8, r8)
 8007828:	2000000c 	.word	0x2000000c

0800782c <__libc_init_array>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	2600      	movs	r6, #0
 8007830:	4d0c      	ldr	r5, [pc, #48]	; (8007864 <__libc_init_array+0x38>)
 8007832:	4c0d      	ldr	r4, [pc, #52]	; (8007868 <__libc_init_array+0x3c>)
 8007834:	1b64      	subs	r4, r4, r5
 8007836:	10a4      	asrs	r4, r4, #2
 8007838:	42a6      	cmp	r6, r4
 800783a:	d109      	bne.n	8007850 <__libc_init_array+0x24>
 800783c:	2600      	movs	r6, #0
 800783e:	f002 fdef 	bl	800a420 <_init>
 8007842:	4d0a      	ldr	r5, [pc, #40]	; (800786c <__libc_init_array+0x40>)
 8007844:	4c0a      	ldr	r4, [pc, #40]	; (8007870 <__libc_init_array+0x44>)
 8007846:	1b64      	subs	r4, r4, r5
 8007848:	10a4      	asrs	r4, r4, #2
 800784a:	42a6      	cmp	r6, r4
 800784c:	d105      	bne.n	800785a <__libc_init_array+0x2e>
 800784e:	bd70      	pop	{r4, r5, r6, pc}
 8007850:	00b3      	lsls	r3, r6, #2
 8007852:	58eb      	ldr	r3, [r5, r3]
 8007854:	4798      	blx	r3
 8007856:	3601      	adds	r6, #1
 8007858:	e7ee      	b.n	8007838 <__libc_init_array+0xc>
 800785a:	00b3      	lsls	r3, r6, #2
 800785c:	58eb      	ldr	r3, [r5, r3]
 800785e:	4798      	blx	r3
 8007860:	3601      	adds	r6, #1
 8007862:	e7f2      	b.n	800784a <__libc_init_array+0x1e>
 8007864:	0800a9dc 	.word	0x0800a9dc
 8007868:	0800a9dc 	.word	0x0800a9dc
 800786c:	0800a9dc 	.word	0x0800a9dc
 8007870:	0800a9e0 	.word	0x0800a9e0

08007874 <memset>:
 8007874:	0003      	movs	r3, r0
 8007876:	1882      	adds	r2, r0, r2
 8007878:	4293      	cmp	r3, r2
 800787a:	d100      	bne.n	800787e <memset+0xa>
 800787c:	4770      	bx	lr
 800787e:	7019      	strb	r1, [r3, #0]
 8007880:	3301      	adds	r3, #1
 8007882:	e7f9      	b.n	8007878 <memset+0x4>

08007884 <__cvt>:
 8007884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007886:	001e      	movs	r6, r3
 8007888:	2300      	movs	r3, #0
 800788a:	0014      	movs	r4, r2
 800788c:	b08b      	sub	sp, #44	; 0x2c
 800788e:	429e      	cmp	r6, r3
 8007890:	da04      	bge.n	800789c <__cvt+0x18>
 8007892:	2180      	movs	r1, #128	; 0x80
 8007894:	0609      	lsls	r1, r1, #24
 8007896:	1873      	adds	r3, r6, r1
 8007898:	001e      	movs	r6, r3
 800789a:	232d      	movs	r3, #45	; 0x2d
 800789c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800789e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80078a0:	7013      	strb	r3, [r2, #0]
 80078a2:	2320      	movs	r3, #32
 80078a4:	2203      	movs	r2, #3
 80078a6:	439f      	bics	r7, r3
 80078a8:	2f46      	cmp	r7, #70	; 0x46
 80078aa:	d007      	beq.n	80078bc <__cvt+0x38>
 80078ac:	003b      	movs	r3, r7
 80078ae:	3b45      	subs	r3, #69	; 0x45
 80078b0:	4259      	negs	r1, r3
 80078b2:	414b      	adcs	r3, r1
 80078b4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80078b6:	3a01      	subs	r2, #1
 80078b8:	18cb      	adds	r3, r1, r3
 80078ba:	9310      	str	r3, [sp, #64]	; 0x40
 80078bc:	ab09      	add	r3, sp, #36	; 0x24
 80078be:	9304      	str	r3, [sp, #16]
 80078c0:	ab08      	add	r3, sp, #32
 80078c2:	9303      	str	r3, [sp, #12]
 80078c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078c6:	9200      	str	r2, [sp, #0]
 80078c8:	9302      	str	r3, [sp, #8]
 80078ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078cc:	0022      	movs	r2, r4
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	0033      	movs	r3, r6
 80078d2:	f000 fcd1 	bl	8008278 <_dtoa_r>
 80078d6:	0005      	movs	r5, r0
 80078d8:	2f47      	cmp	r7, #71	; 0x47
 80078da:	d102      	bne.n	80078e2 <__cvt+0x5e>
 80078dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078de:	07db      	lsls	r3, r3, #31
 80078e0:	d528      	bpl.n	8007934 <__cvt+0xb0>
 80078e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078e4:	18eb      	adds	r3, r5, r3
 80078e6:	9307      	str	r3, [sp, #28]
 80078e8:	2f46      	cmp	r7, #70	; 0x46
 80078ea:	d114      	bne.n	8007916 <__cvt+0x92>
 80078ec:	782b      	ldrb	r3, [r5, #0]
 80078ee:	2b30      	cmp	r3, #48	; 0x30
 80078f0:	d10c      	bne.n	800790c <__cvt+0x88>
 80078f2:	2200      	movs	r2, #0
 80078f4:	2300      	movs	r3, #0
 80078f6:	0020      	movs	r0, r4
 80078f8:	0031      	movs	r1, r6
 80078fa:	f7f8 fda3 	bl	8000444 <__aeabi_dcmpeq>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d104      	bne.n	800790c <__cvt+0x88>
 8007902:	2301      	movs	r3, #1
 8007904:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007906:	1a9b      	subs	r3, r3, r2
 8007908:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800790e:	9a07      	ldr	r2, [sp, #28]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	18d3      	adds	r3, r2, r3
 8007914:	9307      	str	r3, [sp, #28]
 8007916:	2200      	movs	r2, #0
 8007918:	2300      	movs	r3, #0
 800791a:	0020      	movs	r0, r4
 800791c:	0031      	movs	r1, r6
 800791e:	f7f8 fd91 	bl	8000444 <__aeabi_dcmpeq>
 8007922:	2800      	cmp	r0, #0
 8007924:	d001      	beq.n	800792a <__cvt+0xa6>
 8007926:	9b07      	ldr	r3, [sp, #28]
 8007928:	9309      	str	r3, [sp, #36]	; 0x24
 800792a:	2230      	movs	r2, #48	; 0x30
 800792c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800792e:	9907      	ldr	r1, [sp, #28]
 8007930:	428b      	cmp	r3, r1
 8007932:	d306      	bcc.n	8007942 <__cvt+0xbe>
 8007934:	0028      	movs	r0, r5
 8007936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007938:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800793a:	1b5b      	subs	r3, r3, r5
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	b00b      	add	sp, #44	; 0x2c
 8007940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007942:	1c59      	adds	r1, r3, #1
 8007944:	9109      	str	r1, [sp, #36]	; 0x24
 8007946:	701a      	strb	r2, [r3, #0]
 8007948:	e7f0      	b.n	800792c <__cvt+0xa8>

0800794a <__exponent>:
 800794a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800794c:	1c83      	adds	r3, r0, #2
 800794e:	b087      	sub	sp, #28
 8007950:	9303      	str	r3, [sp, #12]
 8007952:	0005      	movs	r5, r0
 8007954:	000c      	movs	r4, r1
 8007956:	232b      	movs	r3, #43	; 0x2b
 8007958:	7002      	strb	r2, [r0, #0]
 800795a:	2900      	cmp	r1, #0
 800795c:	da01      	bge.n	8007962 <__exponent+0x18>
 800795e:	424c      	negs	r4, r1
 8007960:	3302      	adds	r3, #2
 8007962:	706b      	strb	r3, [r5, #1]
 8007964:	2c09      	cmp	r4, #9
 8007966:	dd31      	ble.n	80079cc <__exponent+0x82>
 8007968:	270a      	movs	r7, #10
 800796a:	ab04      	add	r3, sp, #16
 800796c:	1dde      	adds	r6, r3, #7
 800796e:	0020      	movs	r0, r4
 8007970:	0039      	movs	r1, r7
 8007972:	9601      	str	r6, [sp, #4]
 8007974:	f7f8 fd50 	bl	8000418 <__aeabi_idivmod>
 8007978:	3e01      	subs	r6, #1
 800797a:	3130      	adds	r1, #48	; 0x30
 800797c:	0020      	movs	r0, r4
 800797e:	7031      	strb	r1, [r6, #0]
 8007980:	0039      	movs	r1, r7
 8007982:	9402      	str	r4, [sp, #8]
 8007984:	f7f8 fc62 	bl	800024c <__divsi3>
 8007988:	9b02      	ldr	r3, [sp, #8]
 800798a:	0004      	movs	r4, r0
 800798c:	2b63      	cmp	r3, #99	; 0x63
 800798e:	dcee      	bgt.n	800796e <__exponent+0x24>
 8007990:	9b01      	ldr	r3, [sp, #4]
 8007992:	3430      	adds	r4, #48	; 0x30
 8007994:	1e9a      	subs	r2, r3, #2
 8007996:	0013      	movs	r3, r2
 8007998:	9903      	ldr	r1, [sp, #12]
 800799a:	7014      	strb	r4, [r2, #0]
 800799c:	a804      	add	r0, sp, #16
 800799e:	3007      	adds	r0, #7
 80079a0:	4298      	cmp	r0, r3
 80079a2:	d80e      	bhi.n	80079c2 <__exponent+0x78>
 80079a4:	ab04      	add	r3, sp, #16
 80079a6:	3307      	adds	r3, #7
 80079a8:	2000      	movs	r0, #0
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d804      	bhi.n	80079b8 <__exponent+0x6e>
 80079ae:	ab04      	add	r3, sp, #16
 80079b0:	3009      	adds	r0, #9
 80079b2:	18c0      	adds	r0, r0, r3
 80079b4:	9b01      	ldr	r3, [sp, #4]
 80079b6:	1ac0      	subs	r0, r0, r3
 80079b8:	9b03      	ldr	r3, [sp, #12]
 80079ba:	1818      	adds	r0, r3, r0
 80079bc:	1b40      	subs	r0, r0, r5
 80079be:	b007      	add	sp, #28
 80079c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079c2:	7818      	ldrb	r0, [r3, #0]
 80079c4:	3301      	adds	r3, #1
 80079c6:	7008      	strb	r0, [r1, #0]
 80079c8:	3101      	adds	r1, #1
 80079ca:	e7e7      	b.n	800799c <__exponent+0x52>
 80079cc:	2330      	movs	r3, #48	; 0x30
 80079ce:	18e4      	adds	r4, r4, r3
 80079d0:	70ab      	strb	r3, [r5, #2]
 80079d2:	1d28      	adds	r0, r5, #4
 80079d4:	70ec      	strb	r4, [r5, #3]
 80079d6:	e7f1      	b.n	80079bc <__exponent+0x72>

080079d8 <_printf_float>:
 80079d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079da:	b095      	sub	sp, #84	; 0x54
 80079dc:	000c      	movs	r4, r1
 80079de:	9209      	str	r2, [sp, #36]	; 0x24
 80079e0:	001e      	movs	r6, r3
 80079e2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80079e4:	0007      	movs	r7, r0
 80079e6:	f001 fa61 	bl	8008eac <_localeconv_r>
 80079ea:	6803      	ldr	r3, [r0, #0]
 80079ec:	0018      	movs	r0, r3
 80079ee:	930c      	str	r3, [sp, #48]	; 0x30
 80079f0:	f7f8 fb86 	bl	8000100 <strlen>
 80079f4:	2300      	movs	r3, #0
 80079f6:	9312      	str	r3, [sp, #72]	; 0x48
 80079f8:	7e23      	ldrb	r3, [r4, #24]
 80079fa:	2207      	movs	r2, #7
 80079fc:	930a      	str	r3, [sp, #40]	; 0x28
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	900e      	str	r0, [sp, #56]	; 0x38
 8007a02:	930d      	str	r3, [sp, #52]	; 0x34
 8007a04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a06:	682b      	ldr	r3, [r5, #0]
 8007a08:	05c9      	lsls	r1, r1, #23
 8007a0a:	d547      	bpl.n	8007a9c <_printf_float+0xc4>
 8007a0c:	189b      	adds	r3, r3, r2
 8007a0e:	4393      	bics	r3, r2
 8007a10:	001a      	movs	r2, r3
 8007a12:	3208      	adds	r2, #8
 8007a14:	602a      	str	r2, [r5, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	64a2      	str	r2, [r4, #72]	; 0x48
 8007a1c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007a1e:	2201      	movs	r2, #1
 8007a20:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007a22:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007a24:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a26:	006b      	lsls	r3, r5, #1
 8007a28:	085b      	lsrs	r3, r3, #1
 8007a2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a2e:	4ba7      	ldr	r3, [pc, #668]	; (8007ccc <_printf_float+0x2f4>)
 8007a30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a32:	4252      	negs	r2, r2
 8007a34:	f7fb f974 	bl	8002d20 <__aeabi_dcmpun>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d131      	bne.n	8007aa0 <_printf_float+0xc8>
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	4ba3      	ldr	r3, [pc, #652]	; (8007ccc <_printf_float+0x2f4>)
 8007a40:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a42:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a44:	4252      	negs	r2, r2
 8007a46:	f7f8 fd0d 	bl	8000464 <__aeabi_dcmple>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	d128      	bne.n	8007aa0 <_printf_float+0xc8>
 8007a4e:	2200      	movs	r2, #0
 8007a50:	2300      	movs	r3, #0
 8007a52:	0029      	movs	r1, r5
 8007a54:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a56:	f7f8 fcfb 	bl	8000450 <__aeabi_dcmplt>
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d003      	beq.n	8007a66 <_printf_float+0x8e>
 8007a5e:	0023      	movs	r3, r4
 8007a60:	222d      	movs	r2, #45	; 0x2d
 8007a62:	3343      	adds	r3, #67	; 0x43
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a68:	4d99      	ldr	r5, [pc, #612]	; (8007cd0 <_printf_float+0x2f8>)
 8007a6a:	2b47      	cmp	r3, #71	; 0x47
 8007a6c:	d900      	bls.n	8007a70 <_printf_float+0x98>
 8007a6e:	4d99      	ldr	r5, [pc, #612]	; (8007cd4 <_printf_float+0x2fc>)
 8007a70:	2303      	movs	r3, #3
 8007a72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a74:	6123      	str	r3, [r4, #16]
 8007a76:	3301      	adds	r3, #1
 8007a78:	439a      	bics	r2, r3
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	6022      	str	r2, [r4, #0]
 8007a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a82:	0021      	movs	r1, r4
 8007a84:	0038      	movs	r0, r7
 8007a86:	9600      	str	r6, [sp, #0]
 8007a88:	aa13      	add	r2, sp, #76	; 0x4c
 8007a8a:	f000 f9e7 	bl	8007e5c <_printf_common>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	d000      	beq.n	8007a94 <_printf_float+0xbc>
 8007a92:	e0a2      	b.n	8007bda <_printf_float+0x202>
 8007a94:	2001      	movs	r0, #1
 8007a96:	4240      	negs	r0, r0
 8007a98:	b015      	add	sp, #84	; 0x54
 8007a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a9c:	3307      	adds	r3, #7
 8007a9e:	e7b6      	b.n	8007a0e <_printf_float+0x36>
 8007aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007aa2:	002b      	movs	r3, r5
 8007aa4:	0010      	movs	r0, r2
 8007aa6:	0029      	movs	r1, r5
 8007aa8:	f7fb f93a 	bl	8002d20 <__aeabi_dcmpun>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d00b      	beq.n	8007ac8 <_printf_float+0xf0>
 8007ab0:	2d00      	cmp	r5, #0
 8007ab2:	da03      	bge.n	8007abc <_printf_float+0xe4>
 8007ab4:	0023      	movs	r3, r4
 8007ab6:	222d      	movs	r2, #45	; 0x2d
 8007ab8:	3343      	adds	r3, #67	; 0x43
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007abe:	4d86      	ldr	r5, [pc, #536]	; (8007cd8 <_printf_float+0x300>)
 8007ac0:	2b47      	cmp	r3, #71	; 0x47
 8007ac2:	d9d5      	bls.n	8007a70 <_printf_float+0x98>
 8007ac4:	4d85      	ldr	r5, [pc, #532]	; (8007cdc <_printf_float+0x304>)
 8007ac6:	e7d3      	b.n	8007a70 <_printf_float+0x98>
 8007ac8:	2220      	movs	r2, #32
 8007aca:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007acc:	6863      	ldr	r3, [r4, #4]
 8007ace:	4391      	bics	r1, r2
 8007ad0:	910f      	str	r1, [sp, #60]	; 0x3c
 8007ad2:	1c5a      	adds	r2, r3, #1
 8007ad4:	d149      	bne.n	8007b6a <_printf_float+0x192>
 8007ad6:	3307      	adds	r3, #7
 8007ad8:	6063      	str	r3, [r4, #4]
 8007ada:	2380      	movs	r3, #128	; 0x80
 8007adc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	9206      	str	r2, [sp, #24]
 8007ae6:	aa12      	add	r2, sp, #72	; 0x48
 8007ae8:	9205      	str	r2, [sp, #20]
 8007aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aec:	a908      	add	r1, sp, #32
 8007aee:	9204      	str	r2, [sp, #16]
 8007af0:	aa11      	add	r2, sp, #68	; 0x44
 8007af2:	9203      	str	r2, [sp, #12]
 8007af4:	2223      	movs	r2, #35	; 0x23
 8007af6:	6023      	str	r3, [r4, #0]
 8007af8:	9301      	str	r3, [sp, #4]
 8007afa:	6863      	ldr	r3, [r4, #4]
 8007afc:	1852      	adds	r2, r2, r1
 8007afe:	9202      	str	r2, [sp, #8]
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	0038      	movs	r0, r7
 8007b04:	002b      	movs	r3, r5
 8007b06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b08:	f7ff febc 	bl	8007884 <__cvt>
 8007b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b0e:	0005      	movs	r5, r0
 8007b10:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007b12:	2b47      	cmp	r3, #71	; 0x47
 8007b14:	d108      	bne.n	8007b28 <_printf_float+0x150>
 8007b16:	1ccb      	adds	r3, r1, #3
 8007b18:	db02      	blt.n	8007b20 <_printf_float+0x148>
 8007b1a:	6863      	ldr	r3, [r4, #4]
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	dd48      	ble.n	8007bb2 <_printf_float+0x1da>
 8007b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b22:	3b02      	subs	r3, #2
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	930a      	str	r3, [sp, #40]	; 0x28
 8007b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b2a:	2b65      	cmp	r3, #101	; 0x65
 8007b2c:	d824      	bhi.n	8007b78 <_printf_float+0x1a0>
 8007b2e:	0020      	movs	r0, r4
 8007b30:	001a      	movs	r2, r3
 8007b32:	3901      	subs	r1, #1
 8007b34:	3050      	adds	r0, #80	; 0x50
 8007b36:	9111      	str	r1, [sp, #68]	; 0x44
 8007b38:	f7ff ff07 	bl	800794a <__exponent>
 8007b3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b3e:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b40:	1813      	adds	r3, r2, r0
 8007b42:	6123      	str	r3, [r4, #16]
 8007b44:	2a01      	cmp	r2, #1
 8007b46:	dc02      	bgt.n	8007b4e <_printf_float+0x176>
 8007b48:	6822      	ldr	r2, [r4, #0]
 8007b4a:	07d2      	lsls	r2, r2, #31
 8007b4c:	d501      	bpl.n	8007b52 <_printf_float+0x17a>
 8007b4e:	3301      	adds	r3, #1
 8007b50:	6123      	str	r3, [r4, #16]
 8007b52:	2323      	movs	r3, #35	; 0x23
 8007b54:	aa08      	add	r2, sp, #32
 8007b56:	189b      	adds	r3, r3, r2
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d100      	bne.n	8007b60 <_printf_float+0x188>
 8007b5e:	e78f      	b.n	8007a80 <_printf_float+0xa8>
 8007b60:	0023      	movs	r3, r4
 8007b62:	222d      	movs	r2, #45	; 0x2d
 8007b64:	3343      	adds	r3, #67	; 0x43
 8007b66:	701a      	strb	r2, [r3, #0]
 8007b68:	e78a      	b.n	8007a80 <_printf_float+0xa8>
 8007b6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b6c:	2a47      	cmp	r2, #71	; 0x47
 8007b6e:	d1b4      	bne.n	8007ada <_printf_float+0x102>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1b2      	bne.n	8007ada <_printf_float+0x102>
 8007b74:	3301      	adds	r3, #1
 8007b76:	e7af      	b.n	8007ad8 <_printf_float+0x100>
 8007b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b7a:	2b66      	cmp	r3, #102	; 0x66
 8007b7c:	d11b      	bne.n	8007bb6 <_printf_float+0x1de>
 8007b7e:	6863      	ldr	r3, [r4, #4]
 8007b80:	2900      	cmp	r1, #0
 8007b82:	dd0d      	ble.n	8007ba0 <_printf_float+0x1c8>
 8007b84:	6121      	str	r1, [r4, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d102      	bne.n	8007b90 <_printf_float+0x1b8>
 8007b8a:	6822      	ldr	r2, [r4, #0]
 8007b8c:	07d2      	lsls	r2, r2, #31
 8007b8e:	d502      	bpl.n	8007b96 <_printf_float+0x1be>
 8007b90:	3301      	adds	r3, #1
 8007b92:	1859      	adds	r1, r3, r1
 8007b94:	6121      	str	r1, [r4, #16]
 8007b96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b98:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b9e:	e7d8      	b.n	8007b52 <_printf_float+0x17a>
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d103      	bne.n	8007bac <_printf_float+0x1d4>
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	6821      	ldr	r1, [r4, #0]
 8007ba8:	4211      	tst	r1, r2
 8007baa:	d000      	beq.n	8007bae <_printf_float+0x1d6>
 8007bac:	1c9a      	adds	r2, r3, #2
 8007bae:	6122      	str	r2, [r4, #16]
 8007bb0:	e7f1      	b.n	8007b96 <_printf_float+0x1be>
 8007bb2:	2367      	movs	r3, #103	; 0x67
 8007bb4:	930a      	str	r3, [sp, #40]	; 0x28
 8007bb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	db06      	blt.n	8007bcc <_printf_float+0x1f4>
 8007bbe:	6822      	ldr	r2, [r4, #0]
 8007bc0:	6123      	str	r3, [r4, #16]
 8007bc2:	07d2      	lsls	r2, r2, #31
 8007bc4:	d5e7      	bpl.n	8007b96 <_printf_float+0x1be>
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	6123      	str	r3, [r4, #16]
 8007bca:	e7e4      	b.n	8007b96 <_printf_float+0x1be>
 8007bcc:	2101      	movs	r1, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dc01      	bgt.n	8007bd6 <_printf_float+0x1fe>
 8007bd2:	1849      	adds	r1, r1, r1
 8007bd4:	1ac9      	subs	r1, r1, r3
 8007bd6:	1852      	adds	r2, r2, r1
 8007bd8:	e7e9      	b.n	8007bae <_printf_float+0x1d6>
 8007bda:	6822      	ldr	r2, [r4, #0]
 8007bdc:	0553      	lsls	r3, r2, #21
 8007bde:	d407      	bmi.n	8007bf0 <_printf_float+0x218>
 8007be0:	6923      	ldr	r3, [r4, #16]
 8007be2:	002a      	movs	r2, r5
 8007be4:	0038      	movs	r0, r7
 8007be6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007be8:	47b0      	blx	r6
 8007bea:	1c43      	adds	r3, r0, #1
 8007bec:	d128      	bne.n	8007c40 <_printf_float+0x268>
 8007bee:	e751      	b.n	8007a94 <_printf_float+0xbc>
 8007bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf2:	2b65      	cmp	r3, #101	; 0x65
 8007bf4:	d800      	bhi.n	8007bf8 <_printf_float+0x220>
 8007bf6:	e0e1      	b.n	8007dbc <_printf_float+0x3e4>
 8007bf8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007bfa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f7f8 fc20 	bl	8000444 <__aeabi_dcmpeq>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d031      	beq.n	8007c6c <_printf_float+0x294>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	0038      	movs	r0, r7
 8007c0c:	4a34      	ldr	r2, [pc, #208]	; (8007ce0 <_printf_float+0x308>)
 8007c0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c10:	47b0      	blx	r6
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	d100      	bne.n	8007c18 <_printf_float+0x240>
 8007c16:	e73d      	b.n	8007a94 <_printf_float+0xbc>
 8007c18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	db02      	blt.n	8007c26 <_printf_float+0x24e>
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	07db      	lsls	r3, r3, #31
 8007c24:	d50c      	bpl.n	8007c40 <_printf_float+0x268>
 8007c26:	0038      	movs	r0, r7
 8007c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c2e:	47b0      	blx	r6
 8007c30:	2500      	movs	r5, #0
 8007c32:	1c43      	adds	r3, r0, #1
 8007c34:	d100      	bne.n	8007c38 <_printf_float+0x260>
 8007c36:	e72d      	b.n	8007a94 <_printf_float+0xbc>
 8007c38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	42ab      	cmp	r3, r5
 8007c3e:	dc0a      	bgt.n	8007c56 <_printf_float+0x27e>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	079b      	lsls	r3, r3, #30
 8007c44:	d500      	bpl.n	8007c48 <_printf_float+0x270>
 8007c46:	e106      	b.n	8007e56 <_printf_float+0x47e>
 8007c48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c4a:	68e0      	ldr	r0, [r4, #12]
 8007c4c:	4298      	cmp	r0, r3
 8007c4e:	db00      	blt.n	8007c52 <_printf_float+0x27a>
 8007c50:	e722      	b.n	8007a98 <_printf_float+0xc0>
 8007c52:	0018      	movs	r0, r3
 8007c54:	e720      	b.n	8007a98 <_printf_float+0xc0>
 8007c56:	0022      	movs	r2, r4
 8007c58:	2301      	movs	r3, #1
 8007c5a:	0038      	movs	r0, r7
 8007c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c5e:	321a      	adds	r2, #26
 8007c60:	47b0      	blx	r6
 8007c62:	1c43      	adds	r3, r0, #1
 8007c64:	d100      	bne.n	8007c68 <_printf_float+0x290>
 8007c66:	e715      	b.n	8007a94 <_printf_float+0xbc>
 8007c68:	3501      	adds	r5, #1
 8007c6a:	e7e5      	b.n	8007c38 <_printf_float+0x260>
 8007c6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dc38      	bgt.n	8007ce4 <_printf_float+0x30c>
 8007c72:	2301      	movs	r3, #1
 8007c74:	0038      	movs	r0, r7
 8007c76:	4a1a      	ldr	r2, [pc, #104]	; (8007ce0 <_printf_float+0x308>)
 8007c78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c7a:	47b0      	blx	r6
 8007c7c:	1c43      	adds	r3, r0, #1
 8007c7e:	d100      	bne.n	8007c82 <_printf_float+0x2aa>
 8007c80:	e708      	b.n	8007a94 <_printf_float+0xbc>
 8007c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c86:	4313      	orrs	r3, r2
 8007c88:	d102      	bne.n	8007c90 <_printf_float+0x2b8>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	07db      	lsls	r3, r3, #31
 8007c8e:	d5d7      	bpl.n	8007c40 <_printf_float+0x268>
 8007c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c92:	0038      	movs	r0, r7
 8007c94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c98:	47b0      	blx	r6
 8007c9a:	1c43      	adds	r3, r0, #1
 8007c9c:	d100      	bne.n	8007ca0 <_printf_float+0x2c8>
 8007c9e:	e6f9      	b.n	8007a94 <_printf_float+0xbc>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ca4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ca6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ca8:	425b      	negs	r3, r3
 8007caa:	4293      	cmp	r3, r2
 8007cac:	dc01      	bgt.n	8007cb2 <_printf_float+0x2da>
 8007cae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cb0:	e797      	b.n	8007be2 <_printf_float+0x20a>
 8007cb2:	0022      	movs	r2, r4
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	0038      	movs	r0, r7
 8007cb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cba:	321a      	adds	r2, #26
 8007cbc:	47b0      	blx	r6
 8007cbe:	1c43      	adds	r3, r0, #1
 8007cc0:	d100      	bne.n	8007cc4 <_printf_float+0x2ec>
 8007cc2:	e6e7      	b.n	8007a94 <_printf_float+0xbc>
 8007cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	e7eb      	b.n	8007ca2 <_printf_float+0x2ca>
 8007cca:	46c0      	nop			; (mov r8, r8)
 8007ccc:	7fefffff 	.word	0x7fefffff
 8007cd0:	0800a604 	.word	0x0800a604
 8007cd4:	0800a608 	.word	0x0800a608
 8007cd8:	0800a60c 	.word	0x0800a60c
 8007cdc:	0800a610 	.word	0x0800a610
 8007ce0:	0800a614 	.word	0x0800a614
 8007ce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ce6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ce8:	920a      	str	r2, [sp, #40]	; 0x28
 8007cea:	429a      	cmp	r2, r3
 8007cec:	dd00      	ble.n	8007cf0 <_printf_float+0x318>
 8007cee:	930a      	str	r3, [sp, #40]	; 0x28
 8007cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	dc3c      	bgt.n	8007d70 <_printf_float+0x398>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	930d      	str	r3, [sp, #52]	; 0x34
 8007cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cfc:	43db      	mvns	r3, r3
 8007cfe:	17db      	asrs	r3, r3, #31
 8007d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d12:	4293      	cmp	r3, r2
 8007d14:	dc34      	bgt.n	8007d80 <_printf_float+0x3a8>
 8007d16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	db3d      	blt.n	8007d9a <_printf_float+0x3c2>
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	07db      	lsls	r3, r3, #31
 8007d22:	d43a      	bmi.n	8007d9a <_printf_float+0x3c2>
 8007d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d28:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	1a52      	subs	r2, r2, r1
 8007d2e:	920a      	str	r2, [sp, #40]	; 0x28
 8007d30:	429a      	cmp	r2, r3
 8007d32:	dd00      	ble.n	8007d36 <_printf_float+0x35e>
 8007d34:	930a      	str	r3, [sp, #40]	; 0x28
 8007d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	dc36      	bgt.n	8007daa <_printf_float+0x3d2>
 8007d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3e:	2500      	movs	r5, #0
 8007d40:	43db      	mvns	r3, r3
 8007d42:	17db      	asrs	r3, r3, #31
 8007d44:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007d48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d4c:	1a9b      	subs	r3, r3, r2
 8007d4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d50:	400a      	ands	r2, r1
 8007d52:	1a9b      	subs	r3, r3, r2
 8007d54:	42ab      	cmp	r3, r5
 8007d56:	dc00      	bgt.n	8007d5a <_printf_float+0x382>
 8007d58:	e772      	b.n	8007c40 <_printf_float+0x268>
 8007d5a:	0022      	movs	r2, r4
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	0038      	movs	r0, r7
 8007d60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d62:	321a      	adds	r2, #26
 8007d64:	47b0      	blx	r6
 8007d66:	1c43      	adds	r3, r0, #1
 8007d68:	d100      	bne.n	8007d6c <_printf_float+0x394>
 8007d6a:	e693      	b.n	8007a94 <_printf_float+0xbc>
 8007d6c:	3501      	adds	r5, #1
 8007d6e:	e7ea      	b.n	8007d46 <_printf_float+0x36e>
 8007d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d72:	002a      	movs	r2, r5
 8007d74:	0038      	movs	r0, r7
 8007d76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d78:	47b0      	blx	r6
 8007d7a:	1c43      	adds	r3, r0, #1
 8007d7c:	d1bb      	bne.n	8007cf6 <_printf_float+0x31e>
 8007d7e:	e689      	b.n	8007a94 <_printf_float+0xbc>
 8007d80:	0022      	movs	r2, r4
 8007d82:	2301      	movs	r3, #1
 8007d84:	0038      	movs	r0, r7
 8007d86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d88:	321a      	adds	r2, #26
 8007d8a:	47b0      	blx	r6
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d100      	bne.n	8007d92 <_printf_float+0x3ba>
 8007d90:	e680      	b.n	8007a94 <_printf_float+0xbc>
 8007d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d94:	3301      	adds	r3, #1
 8007d96:	930d      	str	r3, [sp, #52]	; 0x34
 8007d98:	e7b3      	b.n	8007d02 <_printf_float+0x32a>
 8007d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d9c:	0038      	movs	r0, r7
 8007d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007da0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007da2:	47b0      	blx	r6
 8007da4:	1c43      	adds	r3, r0, #1
 8007da6:	d1bd      	bne.n	8007d24 <_printf_float+0x34c>
 8007da8:	e674      	b.n	8007a94 <_printf_float+0xbc>
 8007daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dac:	0038      	movs	r0, r7
 8007dae:	18ea      	adds	r2, r5, r3
 8007db0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db4:	47b0      	blx	r6
 8007db6:	1c43      	adds	r3, r0, #1
 8007db8:	d1c0      	bne.n	8007d3c <_printf_float+0x364>
 8007dba:	e66b      	b.n	8007a94 <_printf_float+0xbc>
 8007dbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	dc02      	bgt.n	8007dc8 <_printf_float+0x3f0>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	421a      	tst	r2, r3
 8007dc6:	d034      	beq.n	8007e32 <_printf_float+0x45a>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	002a      	movs	r2, r5
 8007dcc:	0038      	movs	r0, r7
 8007dce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dd0:	47b0      	blx	r6
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	d100      	bne.n	8007dd8 <_printf_float+0x400>
 8007dd6:	e65d      	b.n	8007a94 <_printf_float+0xbc>
 8007dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dda:	0038      	movs	r0, r7
 8007ddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007de0:	47b0      	blx	r6
 8007de2:	1c43      	adds	r3, r0, #1
 8007de4:	d100      	bne.n	8007de8 <_printf_float+0x410>
 8007de6:	e655      	b.n	8007a94 <_printf_float+0xbc>
 8007de8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007dea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007dec:	2200      	movs	r2, #0
 8007dee:	2300      	movs	r3, #0
 8007df0:	f7f8 fb28 	bl	8000444 <__aeabi_dcmpeq>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d11a      	bne.n	8007e2e <_printf_float+0x456>
 8007df8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dfa:	1c6a      	adds	r2, r5, #1
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	0038      	movs	r0, r7
 8007e00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e02:	47b0      	blx	r6
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d10e      	bne.n	8007e26 <_printf_float+0x44e>
 8007e08:	e644      	b.n	8007a94 <_printf_float+0xbc>
 8007e0a:	0022      	movs	r2, r4
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	0038      	movs	r0, r7
 8007e10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e12:	321a      	adds	r2, #26
 8007e14:	47b0      	blx	r6
 8007e16:	1c43      	adds	r3, r0, #1
 8007e18:	d100      	bne.n	8007e1c <_printf_float+0x444>
 8007e1a:	e63b      	b.n	8007a94 <_printf_float+0xbc>
 8007e1c:	3501      	adds	r5, #1
 8007e1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e20:	3b01      	subs	r3, #1
 8007e22:	42ab      	cmp	r3, r5
 8007e24:	dcf1      	bgt.n	8007e0a <_printf_float+0x432>
 8007e26:	0022      	movs	r2, r4
 8007e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e2a:	3250      	adds	r2, #80	; 0x50
 8007e2c:	e6da      	b.n	8007be4 <_printf_float+0x20c>
 8007e2e:	2500      	movs	r5, #0
 8007e30:	e7f5      	b.n	8007e1e <_printf_float+0x446>
 8007e32:	002a      	movs	r2, r5
 8007e34:	e7e3      	b.n	8007dfe <_printf_float+0x426>
 8007e36:	0022      	movs	r2, r4
 8007e38:	2301      	movs	r3, #1
 8007e3a:	0038      	movs	r0, r7
 8007e3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e3e:	3219      	adds	r2, #25
 8007e40:	47b0      	blx	r6
 8007e42:	1c43      	adds	r3, r0, #1
 8007e44:	d100      	bne.n	8007e48 <_printf_float+0x470>
 8007e46:	e625      	b.n	8007a94 <_printf_float+0xbc>
 8007e48:	3501      	adds	r5, #1
 8007e4a:	68e3      	ldr	r3, [r4, #12]
 8007e4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e4e:	1a9b      	subs	r3, r3, r2
 8007e50:	42ab      	cmp	r3, r5
 8007e52:	dcf0      	bgt.n	8007e36 <_printf_float+0x45e>
 8007e54:	e6f8      	b.n	8007c48 <_printf_float+0x270>
 8007e56:	2500      	movs	r5, #0
 8007e58:	e7f7      	b.n	8007e4a <_printf_float+0x472>
 8007e5a:	46c0      	nop			; (mov r8, r8)

08007e5c <_printf_common>:
 8007e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e5e:	0015      	movs	r5, r2
 8007e60:	9301      	str	r3, [sp, #4]
 8007e62:	688a      	ldr	r2, [r1, #8]
 8007e64:	690b      	ldr	r3, [r1, #16]
 8007e66:	000c      	movs	r4, r1
 8007e68:	9000      	str	r0, [sp, #0]
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	da00      	bge.n	8007e70 <_printf_common+0x14>
 8007e6e:	0013      	movs	r3, r2
 8007e70:	0022      	movs	r2, r4
 8007e72:	602b      	str	r3, [r5, #0]
 8007e74:	3243      	adds	r2, #67	; 0x43
 8007e76:	7812      	ldrb	r2, [r2, #0]
 8007e78:	2a00      	cmp	r2, #0
 8007e7a:	d001      	beq.n	8007e80 <_printf_common+0x24>
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	602b      	str	r3, [r5, #0]
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	069b      	lsls	r3, r3, #26
 8007e84:	d502      	bpl.n	8007e8c <_printf_common+0x30>
 8007e86:	682b      	ldr	r3, [r5, #0]
 8007e88:	3302      	adds	r3, #2
 8007e8a:	602b      	str	r3, [r5, #0]
 8007e8c:	6822      	ldr	r2, [r4, #0]
 8007e8e:	2306      	movs	r3, #6
 8007e90:	0017      	movs	r7, r2
 8007e92:	401f      	ands	r7, r3
 8007e94:	421a      	tst	r2, r3
 8007e96:	d027      	beq.n	8007ee8 <_printf_common+0x8c>
 8007e98:	0023      	movs	r3, r4
 8007e9a:	3343      	adds	r3, #67	; 0x43
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	1e5a      	subs	r2, r3, #1
 8007ea0:	4193      	sbcs	r3, r2
 8007ea2:	6822      	ldr	r2, [r4, #0]
 8007ea4:	0692      	lsls	r2, r2, #26
 8007ea6:	d430      	bmi.n	8007f0a <_printf_common+0xae>
 8007ea8:	0022      	movs	r2, r4
 8007eaa:	9901      	ldr	r1, [sp, #4]
 8007eac:	9800      	ldr	r0, [sp, #0]
 8007eae:	9e08      	ldr	r6, [sp, #32]
 8007eb0:	3243      	adds	r2, #67	; 0x43
 8007eb2:	47b0      	blx	r6
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d025      	beq.n	8007f04 <_printf_common+0xa8>
 8007eb8:	2306      	movs	r3, #6
 8007eba:	6820      	ldr	r0, [r4, #0]
 8007ebc:	682a      	ldr	r2, [r5, #0]
 8007ebe:	68e1      	ldr	r1, [r4, #12]
 8007ec0:	2500      	movs	r5, #0
 8007ec2:	4003      	ands	r3, r0
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d103      	bne.n	8007ed0 <_printf_common+0x74>
 8007ec8:	1a8d      	subs	r5, r1, r2
 8007eca:	43eb      	mvns	r3, r5
 8007ecc:	17db      	asrs	r3, r3, #31
 8007ece:	401d      	ands	r5, r3
 8007ed0:	68a3      	ldr	r3, [r4, #8]
 8007ed2:	6922      	ldr	r2, [r4, #16]
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	dd01      	ble.n	8007edc <_printf_common+0x80>
 8007ed8:	1a9b      	subs	r3, r3, r2
 8007eda:	18ed      	adds	r5, r5, r3
 8007edc:	2700      	movs	r7, #0
 8007ede:	42bd      	cmp	r5, r7
 8007ee0:	d120      	bne.n	8007f24 <_printf_common+0xc8>
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	e010      	b.n	8007f08 <_printf_common+0xac>
 8007ee6:	3701      	adds	r7, #1
 8007ee8:	68e3      	ldr	r3, [r4, #12]
 8007eea:	682a      	ldr	r2, [r5, #0]
 8007eec:	1a9b      	subs	r3, r3, r2
 8007eee:	42bb      	cmp	r3, r7
 8007ef0:	ddd2      	ble.n	8007e98 <_printf_common+0x3c>
 8007ef2:	0022      	movs	r2, r4
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	9901      	ldr	r1, [sp, #4]
 8007ef8:	9800      	ldr	r0, [sp, #0]
 8007efa:	9e08      	ldr	r6, [sp, #32]
 8007efc:	3219      	adds	r2, #25
 8007efe:	47b0      	blx	r6
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	d1f0      	bne.n	8007ee6 <_printf_common+0x8a>
 8007f04:	2001      	movs	r0, #1
 8007f06:	4240      	negs	r0, r0
 8007f08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f0a:	2030      	movs	r0, #48	; 0x30
 8007f0c:	18e1      	adds	r1, r4, r3
 8007f0e:	3143      	adds	r1, #67	; 0x43
 8007f10:	7008      	strb	r0, [r1, #0]
 8007f12:	0021      	movs	r1, r4
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	3145      	adds	r1, #69	; 0x45
 8007f18:	7809      	ldrb	r1, [r1, #0]
 8007f1a:	18a2      	adds	r2, r4, r2
 8007f1c:	3243      	adds	r2, #67	; 0x43
 8007f1e:	3302      	adds	r3, #2
 8007f20:	7011      	strb	r1, [r2, #0]
 8007f22:	e7c1      	b.n	8007ea8 <_printf_common+0x4c>
 8007f24:	0022      	movs	r2, r4
 8007f26:	2301      	movs	r3, #1
 8007f28:	9901      	ldr	r1, [sp, #4]
 8007f2a:	9800      	ldr	r0, [sp, #0]
 8007f2c:	9e08      	ldr	r6, [sp, #32]
 8007f2e:	321a      	adds	r2, #26
 8007f30:	47b0      	blx	r6
 8007f32:	1c43      	adds	r3, r0, #1
 8007f34:	d0e6      	beq.n	8007f04 <_printf_common+0xa8>
 8007f36:	3701      	adds	r7, #1
 8007f38:	e7d1      	b.n	8007ede <_printf_common+0x82>
	...

08007f3c <_printf_i>:
 8007f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f3e:	b08b      	sub	sp, #44	; 0x2c
 8007f40:	9206      	str	r2, [sp, #24]
 8007f42:	000a      	movs	r2, r1
 8007f44:	3243      	adds	r2, #67	; 0x43
 8007f46:	9307      	str	r3, [sp, #28]
 8007f48:	9005      	str	r0, [sp, #20]
 8007f4a:	9204      	str	r2, [sp, #16]
 8007f4c:	7e0a      	ldrb	r2, [r1, #24]
 8007f4e:	000c      	movs	r4, r1
 8007f50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f52:	2a78      	cmp	r2, #120	; 0x78
 8007f54:	d807      	bhi.n	8007f66 <_printf_i+0x2a>
 8007f56:	2a62      	cmp	r2, #98	; 0x62
 8007f58:	d809      	bhi.n	8007f6e <_printf_i+0x32>
 8007f5a:	2a00      	cmp	r2, #0
 8007f5c:	d100      	bne.n	8007f60 <_printf_i+0x24>
 8007f5e:	e0c1      	b.n	80080e4 <_printf_i+0x1a8>
 8007f60:	2a58      	cmp	r2, #88	; 0x58
 8007f62:	d100      	bne.n	8007f66 <_printf_i+0x2a>
 8007f64:	e08c      	b.n	8008080 <_printf_i+0x144>
 8007f66:	0026      	movs	r6, r4
 8007f68:	3642      	adds	r6, #66	; 0x42
 8007f6a:	7032      	strb	r2, [r6, #0]
 8007f6c:	e022      	b.n	8007fb4 <_printf_i+0x78>
 8007f6e:	0010      	movs	r0, r2
 8007f70:	3863      	subs	r0, #99	; 0x63
 8007f72:	2815      	cmp	r0, #21
 8007f74:	d8f7      	bhi.n	8007f66 <_printf_i+0x2a>
 8007f76:	f7f8 f8d5 	bl	8000124 <__gnu_thumb1_case_shi>
 8007f7a:	0016      	.short	0x0016
 8007f7c:	fff6001f 	.word	0xfff6001f
 8007f80:	fff6fff6 	.word	0xfff6fff6
 8007f84:	001ffff6 	.word	0x001ffff6
 8007f88:	fff6fff6 	.word	0xfff6fff6
 8007f8c:	fff6fff6 	.word	0xfff6fff6
 8007f90:	003600a8 	.word	0x003600a8
 8007f94:	fff6009a 	.word	0xfff6009a
 8007f98:	00b9fff6 	.word	0x00b9fff6
 8007f9c:	0036fff6 	.word	0x0036fff6
 8007fa0:	fff6fff6 	.word	0xfff6fff6
 8007fa4:	009e      	.short	0x009e
 8007fa6:	0026      	movs	r6, r4
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	3642      	adds	r6, #66	; 0x42
 8007fac:	1d11      	adds	r1, r2, #4
 8007fae:	6019      	str	r1, [r3, #0]
 8007fb0:	6813      	ldr	r3, [r2, #0]
 8007fb2:	7033      	strb	r3, [r6, #0]
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e0a7      	b.n	8008108 <_printf_i+0x1cc>
 8007fb8:	6808      	ldr	r0, [r1, #0]
 8007fba:	6819      	ldr	r1, [r3, #0]
 8007fbc:	1d0a      	adds	r2, r1, #4
 8007fbe:	0605      	lsls	r5, r0, #24
 8007fc0:	d50b      	bpl.n	8007fda <_printf_i+0x9e>
 8007fc2:	680d      	ldr	r5, [r1, #0]
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	2d00      	cmp	r5, #0
 8007fc8:	da03      	bge.n	8007fd2 <_printf_i+0x96>
 8007fca:	232d      	movs	r3, #45	; 0x2d
 8007fcc:	9a04      	ldr	r2, [sp, #16]
 8007fce:	426d      	negs	r5, r5
 8007fd0:	7013      	strb	r3, [r2, #0]
 8007fd2:	4b61      	ldr	r3, [pc, #388]	; (8008158 <_printf_i+0x21c>)
 8007fd4:	270a      	movs	r7, #10
 8007fd6:	9303      	str	r3, [sp, #12]
 8007fd8:	e01b      	b.n	8008012 <_printf_i+0xd6>
 8007fda:	680d      	ldr	r5, [r1, #0]
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	0641      	lsls	r1, r0, #25
 8007fe0:	d5f1      	bpl.n	8007fc6 <_printf_i+0x8a>
 8007fe2:	b22d      	sxth	r5, r5
 8007fe4:	e7ef      	b.n	8007fc6 <_printf_i+0x8a>
 8007fe6:	680d      	ldr	r5, [r1, #0]
 8007fe8:	6819      	ldr	r1, [r3, #0]
 8007fea:	1d08      	adds	r0, r1, #4
 8007fec:	6018      	str	r0, [r3, #0]
 8007fee:	062e      	lsls	r6, r5, #24
 8007ff0:	d501      	bpl.n	8007ff6 <_printf_i+0xba>
 8007ff2:	680d      	ldr	r5, [r1, #0]
 8007ff4:	e003      	b.n	8007ffe <_printf_i+0xc2>
 8007ff6:	066d      	lsls	r5, r5, #25
 8007ff8:	d5fb      	bpl.n	8007ff2 <_printf_i+0xb6>
 8007ffa:	680d      	ldr	r5, [r1, #0]
 8007ffc:	b2ad      	uxth	r5, r5
 8007ffe:	4b56      	ldr	r3, [pc, #344]	; (8008158 <_printf_i+0x21c>)
 8008000:	2708      	movs	r7, #8
 8008002:	9303      	str	r3, [sp, #12]
 8008004:	2a6f      	cmp	r2, #111	; 0x6f
 8008006:	d000      	beq.n	800800a <_printf_i+0xce>
 8008008:	3702      	adds	r7, #2
 800800a:	0023      	movs	r3, r4
 800800c:	2200      	movs	r2, #0
 800800e:	3343      	adds	r3, #67	; 0x43
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	6863      	ldr	r3, [r4, #4]
 8008014:	60a3      	str	r3, [r4, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	db03      	blt.n	8008022 <_printf_i+0xe6>
 800801a:	2204      	movs	r2, #4
 800801c:	6821      	ldr	r1, [r4, #0]
 800801e:	4391      	bics	r1, r2
 8008020:	6021      	str	r1, [r4, #0]
 8008022:	2d00      	cmp	r5, #0
 8008024:	d102      	bne.n	800802c <_printf_i+0xf0>
 8008026:	9e04      	ldr	r6, [sp, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00c      	beq.n	8008046 <_printf_i+0x10a>
 800802c:	9e04      	ldr	r6, [sp, #16]
 800802e:	0028      	movs	r0, r5
 8008030:	0039      	movs	r1, r7
 8008032:	f7f8 f907 	bl	8000244 <__aeabi_uidivmod>
 8008036:	9b03      	ldr	r3, [sp, #12]
 8008038:	3e01      	subs	r6, #1
 800803a:	5c5b      	ldrb	r3, [r3, r1]
 800803c:	7033      	strb	r3, [r6, #0]
 800803e:	002b      	movs	r3, r5
 8008040:	0005      	movs	r5, r0
 8008042:	429f      	cmp	r7, r3
 8008044:	d9f3      	bls.n	800802e <_printf_i+0xf2>
 8008046:	2f08      	cmp	r7, #8
 8008048:	d109      	bne.n	800805e <_printf_i+0x122>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	07db      	lsls	r3, r3, #31
 800804e:	d506      	bpl.n	800805e <_printf_i+0x122>
 8008050:	6863      	ldr	r3, [r4, #4]
 8008052:	6922      	ldr	r2, [r4, #16]
 8008054:	4293      	cmp	r3, r2
 8008056:	dc02      	bgt.n	800805e <_printf_i+0x122>
 8008058:	2330      	movs	r3, #48	; 0x30
 800805a:	3e01      	subs	r6, #1
 800805c:	7033      	strb	r3, [r6, #0]
 800805e:	9b04      	ldr	r3, [sp, #16]
 8008060:	1b9b      	subs	r3, r3, r6
 8008062:	6123      	str	r3, [r4, #16]
 8008064:	9b07      	ldr	r3, [sp, #28]
 8008066:	0021      	movs	r1, r4
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	9805      	ldr	r0, [sp, #20]
 800806c:	9b06      	ldr	r3, [sp, #24]
 800806e:	aa09      	add	r2, sp, #36	; 0x24
 8008070:	f7ff fef4 	bl	8007e5c <_printf_common>
 8008074:	1c43      	adds	r3, r0, #1
 8008076:	d14c      	bne.n	8008112 <_printf_i+0x1d6>
 8008078:	2001      	movs	r0, #1
 800807a:	4240      	negs	r0, r0
 800807c:	b00b      	add	sp, #44	; 0x2c
 800807e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008080:	3145      	adds	r1, #69	; 0x45
 8008082:	700a      	strb	r2, [r1, #0]
 8008084:	4a34      	ldr	r2, [pc, #208]	; (8008158 <_printf_i+0x21c>)
 8008086:	9203      	str	r2, [sp, #12]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	6821      	ldr	r1, [r4, #0]
 800808c:	ca20      	ldmia	r2!, {r5}
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	0608      	lsls	r0, r1, #24
 8008092:	d516      	bpl.n	80080c2 <_printf_i+0x186>
 8008094:	07cb      	lsls	r3, r1, #31
 8008096:	d502      	bpl.n	800809e <_printf_i+0x162>
 8008098:	2320      	movs	r3, #32
 800809a:	4319      	orrs	r1, r3
 800809c:	6021      	str	r1, [r4, #0]
 800809e:	2710      	movs	r7, #16
 80080a0:	2d00      	cmp	r5, #0
 80080a2:	d1b2      	bne.n	800800a <_printf_i+0xce>
 80080a4:	2320      	movs	r3, #32
 80080a6:	6822      	ldr	r2, [r4, #0]
 80080a8:	439a      	bics	r2, r3
 80080aa:	6022      	str	r2, [r4, #0]
 80080ac:	e7ad      	b.n	800800a <_printf_i+0xce>
 80080ae:	2220      	movs	r2, #32
 80080b0:	6809      	ldr	r1, [r1, #0]
 80080b2:	430a      	orrs	r2, r1
 80080b4:	6022      	str	r2, [r4, #0]
 80080b6:	0022      	movs	r2, r4
 80080b8:	2178      	movs	r1, #120	; 0x78
 80080ba:	3245      	adds	r2, #69	; 0x45
 80080bc:	7011      	strb	r1, [r2, #0]
 80080be:	4a27      	ldr	r2, [pc, #156]	; (800815c <_printf_i+0x220>)
 80080c0:	e7e1      	b.n	8008086 <_printf_i+0x14a>
 80080c2:	0648      	lsls	r0, r1, #25
 80080c4:	d5e6      	bpl.n	8008094 <_printf_i+0x158>
 80080c6:	b2ad      	uxth	r5, r5
 80080c8:	e7e4      	b.n	8008094 <_printf_i+0x158>
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	680d      	ldr	r5, [r1, #0]
 80080ce:	1d10      	adds	r0, r2, #4
 80080d0:	6949      	ldr	r1, [r1, #20]
 80080d2:	6018      	str	r0, [r3, #0]
 80080d4:	6813      	ldr	r3, [r2, #0]
 80080d6:	062e      	lsls	r6, r5, #24
 80080d8:	d501      	bpl.n	80080de <_printf_i+0x1a2>
 80080da:	6019      	str	r1, [r3, #0]
 80080dc:	e002      	b.n	80080e4 <_printf_i+0x1a8>
 80080de:	066d      	lsls	r5, r5, #25
 80080e0:	d5fb      	bpl.n	80080da <_printf_i+0x19e>
 80080e2:	8019      	strh	r1, [r3, #0]
 80080e4:	2300      	movs	r3, #0
 80080e6:	9e04      	ldr	r6, [sp, #16]
 80080e8:	6123      	str	r3, [r4, #16]
 80080ea:	e7bb      	b.n	8008064 <_printf_i+0x128>
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	1d11      	adds	r1, r2, #4
 80080f0:	6019      	str	r1, [r3, #0]
 80080f2:	6816      	ldr	r6, [r2, #0]
 80080f4:	2100      	movs	r1, #0
 80080f6:	0030      	movs	r0, r6
 80080f8:	6862      	ldr	r2, [r4, #4]
 80080fa:	f000 fee5 	bl	8008ec8 <memchr>
 80080fe:	2800      	cmp	r0, #0
 8008100:	d001      	beq.n	8008106 <_printf_i+0x1ca>
 8008102:	1b80      	subs	r0, r0, r6
 8008104:	6060      	str	r0, [r4, #4]
 8008106:	6863      	ldr	r3, [r4, #4]
 8008108:	6123      	str	r3, [r4, #16]
 800810a:	2300      	movs	r3, #0
 800810c:	9a04      	ldr	r2, [sp, #16]
 800810e:	7013      	strb	r3, [r2, #0]
 8008110:	e7a8      	b.n	8008064 <_printf_i+0x128>
 8008112:	6923      	ldr	r3, [r4, #16]
 8008114:	0032      	movs	r2, r6
 8008116:	9906      	ldr	r1, [sp, #24]
 8008118:	9805      	ldr	r0, [sp, #20]
 800811a:	9d07      	ldr	r5, [sp, #28]
 800811c:	47a8      	blx	r5
 800811e:	1c43      	adds	r3, r0, #1
 8008120:	d0aa      	beq.n	8008078 <_printf_i+0x13c>
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	079b      	lsls	r3, r3, #30
 8008126:	d415      	bmi.n	8008154 <_printf_i+0x218>
 8008128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800812a:	68e0      	ldr	r0, [r4, #12]
 800812c:	4298      	cmp	r0, r3
 800812e:	daa5      	bge.n	800807c <_printf_i+0x140>
 8008130:	0018      	movs	r0, r3
 8008132:	e7a3      	b.n	800807c <_printf_i+0x140>
 8008134:	0022      	movs	r2, r4
 8008136:	2301      	movs	r3, #1
 8008138:	9906      	ldr	r1, [sp, #24]
 800813a:	9805      	ldr	r0, [sp, #20]
 800813c:	9e07      	ldr	r6, [sp, #28]
 800813e:	3219      	adds	r2, #25
 8008140:	47b0      	blx	r6
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	d098      	beq.n	8008078 <_printf_i+0x13c>
 8008146:	3501      	adds	r5, #1
 8008148:	68e3      	ldr	r3, [r4, #12]
 800814a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800814c:	1a9b      	subs	r3, r3, r2
 800814e:	42ab      	cmp	r3, r5
 8008150:	dcf0      	bgt.n	8008134 <_printf_i+0x1f8>
 8008152:	e7e9      	b.n	8008128 <_printf_i+0x1ec>
 8008154:	2500      	movs	r5, #0
 8008156:	e7f7      	b.n	8008148 <_printf_i+0x20c>
 8008158:	0800a616 	.word	0x0800a616
 800815c:	0800a627 	.word	0x0800a627

08008160 <quorem>:
 8008160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008162:	0006      	movs	r6, r0
 8008164:	690b      	ldr	r3, [r1, #16]
 8008166:	6932      	ldr	r2, [r6, #16]
 8008168:	b087      	sub	sp, #28
 800816a:	2000      	movs	r0, #0
 800816c:	9103      	str	r1, [sp, #12]
 800816e:	429a      	cmp	r2, r3
 8008170:	db65      	blt.n	800823e <quorem+0xde>
 8008172:	3b01      	subs	r3, #1
 8008174:	009c      	lsls	r4, r3, #2
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	000b      	movs	r3, r1
 800817a:	3314      	adds	r3, #20
 800817c:	9305      	str	r3, [sp, #20]
 800817e:	191b      	adds	r3, r3, r4
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	0033      	movs	r3, r6
 8008184:	3314      	adds	r3, #20
 8008186:	9302      	str	r3, [sp, #8]
 8008188:	191c      	adds	r4, r3, r4
 800818a:	9b04      	ldr	r3, [sp, #16]
 800818c:	6827      	ldr	r7, [r4, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	0038      	movs	r0, r7
 8008192:	1c5d      	adds	r5, r3, #1
 8008194:	0029      	movs	r1, r5
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	f7f7 ffce 	bl	8000138 <__udivsi3>
 800819c:	9001      	str	r0, [sp, #4]
 800819e:	42af      	cmp	r7, r5
 80081a0:	d324      	bcc.n	80081ec <quorem+0x8c>
 80081a2:	2500      	movs	r5, #0
 80081a4:	46ac      	mov	ip, r5
 80081a6:	9802      	ldr	r0, [sp, #8]
 80081a8:	9f05      	ldr	r7, [sp, #20]
 80081aa:	cf08      	ldmia	r7!, {r3}
 80081ac:	9a01      	ldr	r2, [sp, #4]
 80081ae:	b299      	uxth	r1, r3
 80081b0:	4351      	muls	r1, r2
 80081b2:	0c1b      	lsrs	r3, r3, #16
 80081b4:	4353      	muls	r3, r2
 80081b6:	1949      	adds	r1, r1, r5
 80081b8:	0c0a      	lsrs	r2, r1, #16
 80081ba:	189b      	adds	r3, r3, r2
 80081bc:	6802      	ldr	r2, [r0, #0]
 80081be:	b289      	uxth	r1, r1
 80081c0:	b292      	uxth	r2, r2
 80081c2:	4462      	add	r2, ip
 80081c4:	1a52      	subs	r2, r2, r1
 80081c6:	6801      	ldr	r1, [r0, #0]
 80081c8:	0c1d      	lsrs	r5, r3, #16
 80081ca:	0c09      	lsrs	r1, r1, #16
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	1acb      	subs	r3, r1, r3
 80081d0:	1411      	asrs	r1, r2, #16
 80081d2:	185b      	adds	r3, r3, r1
 80081d4:	1419      	asrs	r1, r3, #16
 80081d6:	b292      	uxth	r2, r2
 80081d8:	041b      	lsls	r3, r3, #16
 80081da:	431a      	orrs	r2, r3
 80081dc:	9b04      	ldr	r3, [sp, #16]
 80081de:	468c      	mov	ip, r1
 80081e0:	c004      	stmia	r0!, {r2}
 80081e2:	42bb      	cmp	r3, r7
 80081e4:	d2e1      	bcs.n	80081aa <quorem+0x4a>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d030      	beq.n	800824e <quorem+0xee>
 80081ec:	0030      	movs	r0, r6
 80081ee:	9903      	ldr	r1, [sp, #12]
 80081f0:	f001 f902 	bl	80093f8 <__mcmp>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	db21      	blt.n	800823c <quorem+0xdc>
 80081f8:	0030      	movs	r0, r6
 80081fa:	2400      	movs	r4, #0
 80081fc:	9b01      	ldr	r3, [sp, #4]
 80081fe:	9903      	ldr	r1, [sp, #12]
 8008200:	3301      	adds	r3, #1
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	3014      	adds	r0, #20
 8008206:	3114      	adds	r1, #20
 8008208:	6803      	ldr	r3, [r0, #0]
 800820a:	c920      	ldmia	r1!, {r5}
 800820c:	b29a      	uxth	r2, r3
 800820e:	1914      	adds	r4, r2, r4
 8008210:	b2aa      	uxth	r2, r5
 8008212:	1aa2      	subs	r2, r4, r2
 8008214:	0c1b      	lsrs	r3, r3, #16
 8008216:	0c2d      	lsrs	r5, r5, #16
 8008218:	1414      	asrs	r4, r2, #16
 800821a:	1b5b      	subs	r3, r3, r5
 800821c:	191b      	adds	r3, r3, r4
 800821e:	141c      	asrs	r4, r3, #16
 8008220:	b292      	uxth	r2, r2
 8008222:	041b      	lsls	r3, r3, #16
 8008224:	4313      	orrs	r3, r2
 8008226:	c008      	stmia	r0!, {r3}
 8008228:	9b04      	ldr	r3, [sp, #16]
 800822a:	428b      	cmp	r3, r1
 800822c:	d2ec      	bcs.n	8008208 <quorem+0xa8>
 800822e:	9b00      	ldr	r3, [sp, #0]
 8008230:	9a02      	ldr	r2, [sp, #8]
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	18d3      	adds	r3, r2, r3
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	2a00      	cmp	r2, #0
 800823a:	d015      	beq.n	8008268 <quorem+0x108>
 800823c:	9801      	ldr	r0, [sp, #4]
 800823e:	b007      	add	sp, #28
 8008240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d106      	bne.n	8008256 <quorem+0xf6>
 8008248:	9b00      	ldr	r3, [sp, #0]
 800824a:	3b01      	subs	r3, #1
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	9b02      	ldr	r3, [sp, #8]
 8008250:	3c04      	subs	r4, #4
 8008252:	42a3      	cmp	r3, r4
 8008254:	d3f5      	bcc.n	8008242 <quorem+0xe2>
 8008256:	9b00      	ldr	r3, [sp, #0]
 8008258:	6133      	str	r3, [r6, #16]
 800825a:	e7c7      	b.n	80081ec <quorem+0x8c>
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	2a00      	cmp	r2, #0
 8008260:	d106      	bne.n	8008270 <quorem+0x110>
 8008262:	9a00      	ldr	r2, [sp, #0]
 8008264:	3a01      	subs	r2, #1
 8008266:	9200      	str	r2, [sp, #0]
 8008268:	9a02      	ldr	r2, [sp, #8]
 800826a:	3b04      	subs	r3, #4
 800826c:	429a      	cmp	r2, r3
 800826e:	d3f5      	bcc.n	800825c <quorem+0xfc>
 8008270:	9b00      	ldr	r3, [sp, #0]
 8008272:	6133      	str	r3, [r6, #16]
 8008274:	e7e2      	b.n	800823c <quorem+0xdc>
	...

08008278 <_dtoa_r>:
 8008278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800827a:	b09d      	sub	sp, #116	; 0x74
 800827c:	9202      	str	r2, [sp, #8]
 800827e:	9303      	str	r3, [sp, #12]
 8008280:	9b02      	ldr	r3, [sp, #8]
 8008282:	9c03      	ldr	r4, [sp, #12]
 8008284:	9308      	str	r3, [sp, #32]
 8008286:	9409      	str	r4, [sp, #36]	; 0x24
 8008288:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800828a:	0007      	movs	r7, r0
 800828c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800828e:	2c00      	cmp	r4, #0
 8008290:	d10e      	bne.n	80082b0 <_dtoa_r+0x38>
 8008292:	2010      	movs	r0, #16
 8008294:	f000 fe0e 	bl	8008eb4 <malloc>
 8008298:	1e02      	subs	r2, r0, #0
 800829a:	6278      	str	r0, [r7, #36]	; 0x24
 800829c:	d104      	bne.n	80082a8 <_dtoa_r+0x30>
 800829e:	21ea      	movs	r1, #234	; 0xea
 80082a0:	4bc7      	ldr	r3, [pc, #796]	; (80085c0 <_dtoa_r+0x348>)
 80082a2:	48c8      	ldr	r0, [pc, #800]	; (80085c4 <_dtoa_r+0x34c>)
 80082a4:	f001 fae0 	bl	8009868 <__assert_func>
 80082a8:	6044      	str	r4, [r0, #4]
 80082aa:	6084      	str	r4, [r0, #8]
 80082ac:	6004      	str	r4, [r0, #0]
 80082ae:	60c4      	str	r4, [r0, #12]
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	6819      	ldr	r1, [r3, #0]
 80082b4:	2900      	cmp	r1, #0
 80082b6:	d00a      	beq.n	80082ce <_dtoa_r+0x56>
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	2301      	movs	r3, #1
 80082bc:	4093      	lsls	r3, r2
 80082be:	604a      	str	r2, [r1, #4]
 80082c0:	608b      	str	r3, [r1, #8]
 80082c2:	0038      	movs	r0, r7
 80082c4:	f000 fe58 	bl	8008f78 <_Bfree>
 80082c8:	2200      	movs	r2, #0
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	9b03      	ldr	r3, [sp, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	da20      	bge.n	8008316 <_dtoa_r+0x9e>
 80082d4:	2301      	movs	r3, #1
 80082d6:	602b      	str	r3, [r5, #0]
 80082d8:	9b03      	ldr	r3, [sp, #12]
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	085b      	lsrs	r3, r3, #1
 80082de:	9309      	str	r3, [sp, #36]	; 0x24
 80082e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80082e2:	4bb9      	ldr	r3, [pc, #740]	; (80085c8 <_dtoa_r+0x350>)
 80082e4:	4ab8      	ldr	r2, [pc, #736]	; (80085c8 <_dtoa_r+0x350>)
 80082e6:	402b      	ands	r3, r5
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d117      	bne.n	800831c <_dtoa_r+0xa4>
 80082ec:	4bb7      	ldr	r3, [pc, #732]	; (80085cc <_dtoa_r+0x354>)
 80082ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80082f0:	0328      	lsls	r0, r5, #12
 80082f2:	6013      	str	r3, [r2, #0]
 80082f4:	9b02      	ldr	r3, [sp, #8]
 80082f6:	0b00      	lsrs	r0, r0, #12
 80082f8:	4318      	orrs	r0, r3
 80082fa:	d101      	bne.n	8008300 <_dtoa_r+0x88>
 80082fc:	f000 fdbf 	bl	8008e7e <_dtoa_r+0xc06>
 8008300:	48b3      	ldr	r0, [pc, #716]	; (80085d0 <_dtoa_r+0x358>)
 8008302:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008304:	9006      	str	r0, [sp, #24]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d002      	beq.n	8008310 <_dtoa_r+0x98>
 800830a:	4bb2      	ldr	r3, [pc, #712]	; (80085d4 <_dtoa_r+0x35c>)
 800830c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800830e:	6013      	str	r3, [r2, #0]
 8008310:	9806      	ldr	r0, [sp, #24]
 8008312:	b01d      	add	sp, #116	; 0x74
 8008314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008316:	2300      	movs	r3, #0
 8008318:	602b      	str	r3, [r5, #0]
 800831a:	e7e1      	b.n	80082e0 <_dtoa_r+0x68>
 800831c:	9b08      	ldr	r3, [sp, #32]
 800831e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008320:	9312      	str	r3, [sp, #72]	; 0x48
 8008322:	9413      	str	r4, [sp, #76]	; 0x4c
 8008324:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008326:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008328:	2200      	movs	r2, #0
 800832a:	2300      	movs	r3, #0
 800832c:	f7f8 f88a 	bl	8000444 <__aeabi_dcmpeq>
 8008330:	1e04      	subs	r4, r0, #0
 8008332:	d009      	beq.n	8008348 <_dtoa_r+0xd0>
 8008334:	2301      	movs	r3, #1
 8008336:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008338:	6013      	str	r3, [r2, #0]
 800833a:	4ba7      	ldr	r3, [pc, #668]	; (80085d8 <_dtoa_r+0x360>)
 800833c:	9306      	str	r3, [sp, #24]
 800833e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0e5      	beq.n	8008310 <_dtoa_r+0x98>
 8008344:	4ba5      	ldr	r3, [pc, #660]	; (80085dc <_dtoa_r+0x364>)
 8008346:	e7e1      	b.n	800830c <_dtoa_r+0x94>
 8008348:	ab1a      	add	r3, sp, #104	; 0x68
 800834a:	9301      	str	r3, [sp, #4]
 800834c:	ab1b      	add	r3, sp, #108	; 0x6c
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	0038      	movs	r0, r7
 8008352:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008354:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008356:	f001 f903 	bl	8009560 <__d2b>
 800835a:	006e      	lsls	r6, r5, #1
 800835c:	9005      	str	r0, [sp, #20]
 800835e:	0d76      	lsrs	r6, r6, #21
 8008360:	d100      	bne.n	8008364 <_dtoa_r+0xec>
 8008362:	e07c      	b.n	800845e <_dtoa_r+0x1e6>
 8008364:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008366:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008368:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800836a:	4a9d      	ldr	r2, [pc, #628]	; (80085e0 <_dtoa_r+0x368>)
 800836c:	031b      	lsls	r3, r3, #12
 800836e:	0b1b      	lsrs	r3, r3, #12
 8008370:	431a      	orrs	r2, r3
 8008372:	0011      	movs	r1, r2
 8008374:	4b9b      	ldr	r3, [pc, #620]	; (80085e4 <_dtoa_r+0x36c>)
 8008376:	9418      	str	r4, [sp, #96]	; 0x60
 8008378:	18f6      	adds	r6, r6, r3
 800837a:	2200      	movs	r2, #0
 800837c:	4b9a      	ldr	r3, [pc, #616]	; (80085e8 <_dtoa_r+0x370>)
 800837e:	f7fa f93d 	bl	80025fc <__aeabi_dsub>
 8008382:	4a9a      	ldr	r2, [pc, #616]	; (80085ec <_dtoa_r+0x374>)
 8008384:	4b9a      	ldr	r3, [pc, #616]	; (80085f0 <_dtoa_r+0x378>)
 8008386:	f7f9 fecd 	bl	8002124 <__aeabi_dmul>
 800838a:	4a9a      	ldr	r2, [pc, #616]	; (80085f4 <_dtoa_r+0x37c>)
 800838c:	4b9a      	ldr	r3, [pc, #616]	; (80085f8 <_dtoa_r+0x380>)
 800838e:	f7f8 ff8b 	bl	80012a8 <__aeabi_dadd>
 8008392:	0004      	movs	r4, r0
 8008394:	0030      	movs	r0, r6
 8008396:	000d      	movs	r5, r1
 8008398:	f7fa fd16 	bl	8002dc8 <__aeabi_i2d>
 800839c:	4a97      	ldr	r2, [pc, #604]	; (80085fc <_dtoa_r+0x384>)
 800839e:	4b98      	ldr	r3, [pc, #608]	; (8008600 <_dtoa_r+0x388>)
 80083a0:	f7f9 fec0 	bl	8002124 <__aeabi_dmul>
 80083a4:	0002      	movs	r2, r0
 80083a6:	000b      	movs	r3, r1
 80083a8:	0020      	movs	r0, r4
 80083aa:	0029      	movs	r1, r5
 80083ac:	f7f8 ff7c 	bl	80012a8 <__aeabi_dadd>
 80083b0:	0004      	movs	r4, r0
 80083b2:	000d      	movs	r5, r1
 80083b4:	f7fa fcd2 	bl	8002d5c <__aeabi_d2iz>
 80083b8:	2200      	movs	r2, #0
 80083ba:	9002      	str	r0, [sp, #8]
 80083bc:	2300      	movs	r3, #0
 80083be:	0020      	movs	r0, r4
 80083c0:	0029      	movs	r1, r5
 80083c2:	f7f8 f845 	bl	8000450 <__aeabi_dcmplt>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d00b      	beq.n	80083e2 <_dtoa_r+0x16a>
 80083ca:	9802      	ldr	r0, [sp, #8]
 80083cc:	f7fa fcfc 	bl	8002dc8 <__aeabi_i2d>
 80083d0:	002b      	movs	r3, r5
 80083d2:	0022      	movs	r2, r4
 80083d4:	f7f8 f836 	bl	8000444 <__aeabi_dcmpeq>
 80083d8:	4243      	negs	r3, r0
 80083da:	4158      	adcs	r0, r3
 80083dc:	9b02      	ldr	r3, [sp, #8]
 80083de:	1a1b      	subs	r3, r3, r0
 80083e0:	9302      	str	r3, [sp, #8]
 80083e2:	2301      	movs	r3, #1
 80083e4:	9316      	str	r3, [sp, #88]	; 0x58
 80083e6:	9b02      	ldr	r3, [sp, #8]
 80083e8:	2b16      	cmp	r3, #22
 80083ea:	d80f      	bhi.n	800840c <_dtoa_r+0x194>
 80083ec:	9812      	ldr	r0, [sp, #72]	; 0x48
 80083ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80083f0:	00da      	lsls	r2, r3, #3
 80083f2:	4b84      	ldr	r3, [pc, #528]	; (8008604 <_dtoa_r+0x38c>)
 80083f4:	189b      	adds	r3, r3, r2
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f7f8 f829 	bl	8000450 <__aeabi_dcmplt>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d049      	beq.n	8008496 <_dtoa_r+0x21e>
 8008402:	9b02      	ldr	r3, [sp, #8]
 8008404:	3b01      	subs	r3, #1
 8008406:	9302      	str	r3, [sp, #8]
 8008408:	2300      	movs	r3, #0
 800840a:	9316      	str	r3, [sp, #88]	; 0x58
 800840c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800840e:	1b9e      	subs	r6, r3, r6
 8008410:	2300      	movs	r3, #0
 8008412:	930a      	str	r3, [sp, #40]	; 0x28
 8008414:	0033      	movs	r3, r6
 8008416:	3b01      	subs	r3, #1
 8008418:	930d      	str	r3, [sp, #52]	; 0x34
 800841a:	d504      	bpl.n	8008426 <_dtoa_r+0x1ae>
 800841c:	2301      	movs	r3, #1
 800841e:	1b9b      	subs	r3, r3, r6
 8008420:	930a      	str	r3, [sp, #40]	; 0x28
 8008422:	2300      	movs	r3, #0
 8008424:	930d      	str	r3, [sp, #52]	; 0x34
 8008426:	9b02      	ldr	r3, [sp, #8]
 8008428:	2b00      	cmp	r3, #0
 800842a:	db36      	blt.n	800849a <_dtoa_r+0x222>
 800842c:	9a02      	ldr	r2, [sp, #8]
 800842e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008430:	4694      	mov	ip, r2
 8008432:	4463      	add	r3, ip
 8008434:	930d      	str	r3, [sp, #52]	; 0x34
 8008436:	2300      	movs	r3, #0
 8008438:	9215      	str	r2, [sp, #84]	; 0x54
 800843a:	930e      	str	r3, [sp, #56]	; 0x38
 800843c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800843e:	2401      	movs	r4, #1
 8008440:	2b09      	cmp	r3, #9
 8008442:	d864      	bhi.n	800850e <_dtoa_r+0x296>
 8008444:	2b05      	cmp	r3, #5
 8008446:	dd02      	ble.n	800844e <_dtoa_r+0x1d6>
 8008448:	2400      	movs	r4, #0
 800844a:	3b04      	subs	r3, #4
 800844c:	9322      	str	r3, [sp, #136]	; 0x88
 800844e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008450:	1e98      	subs	r0, r3, #2
 8008452:	2803      	cmp	r0, #3
 8008454:	d864      	bhi.n	8008520 <_dtoa_r+0x2a8>
 8008456:	f7f7 fe5b 	bl	8000110 <__gnu_thumb1_case_uqi>
 800845a:	3829      	.short	0x3829
 800845c:	5836      	.short	0x5836
 800845e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008460:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008462:	189e      	adds	r6, r3, r2
 8008464:	4b68      	ldr	r3, [pc, #416]	; (8008608 <_dtoa_r+0x390>)
 8008466:	18f2      	adds	r2, r6, r3
 8008468:	2a20      	cmp	r2, #32
 800846a:	dd0f      	ble.n	800848c <_dtoa_r+0x214>
 800846c:	2340      	movs	r3, #64	; 0x40
 800846e:	1a9b      	subs	r3, r3, r2
 8008470:	409d      	lsls	r5, r3
 8008472:	4b66      	ldr	r3, [pc, #408]	; (800860c <_dtoa_r+0x394>)
 8008474:	9802      	ldr	r0, [sp, #8]
 8008476:	18f3      	adds	r3, r6, r3
 8008478:	40d8      	lsrs	r0, r3
 800847a:	4328      	orrs	r0, r5
 800847c:	f7fa fcd4 	bl	8002e28 <__aeabi_ui2d>
 8008480:	2301      	movs	r3, #1
 8008482:	4c63      	ldr	r4, [pc, #396]	; (8008610 <_dtoa_r+0x398>)
 8008484:	3e01      	subs	r6, #1
 8008486:	1909      	adds	r1, r1, r4
 8008488:	9318      	str	r3, [sp, #96]	; 0x60
 800848a:	e776      	b.n	800837a <_dtoa_r+0x102>
 800848c:	2320      	movs	r3, #32
 800848e:	9802      	ldr	r0, [sp, #8]
 8008490:	1a9b      	subs	r3, r3, r2
 8008492:	4098      	lsls	r0, r3
 8008494:	e7f2      	b.n	800847c <_dtoa_r+0x204>
 8008496:	9016      	str	r0, [sp, #88]	; 0x58
 8008498:	e7b8      	b.n	800840c <_dtoa_r+0x194>
 800849a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800849c:	9a02      	ldr	r2, [sp, #8]
 800849e:	1a9b      	subs	r3, r3, r2
 80084a0:	930a      	str	r3, [sp, #40]	; 0x28
 80084a2:	4253      	negs	r3, r2
 80084a4:	930e      	str	r3, [sp, #56]	; 0x38
 80084a6:	2300      	movs	r3, #0
 80084a8:	9315      	str	r3, [sp, #84]	; 0x54
 80084aa:	e7c7      	b.n	800843c <_dtoa_r+0x1c4>
 80084ac:	2300      	movs	r3, #0
 80084ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80084b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084b2:	930c      	str	r3, [sp, #48]	; 0x30
 80084b4:	9307      	str	r3, [sp, #28]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	dc13      	bgt.n	80084e2 <_dtoa_r+0x26a>
 80084ba:	2301      	movs	r3, #1
 80084bc:	001a      	movs	r2, r3
 80084be:	930c      	str	r3, [sp, #48]	; 0x30
 80084c0:	9307      	str	r3, [sp, #28]
 80084c2:	9223      	str	r2, [sp, #140]	; 0x8c
 80084c4:	e00d      	b.n	80084e2 <_dtoa_r+0x26a>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e7f1      	b.n	80084ae <_dtoa_r+0x236>
 80084ca:	2300      	movs	r3, #0
 80084cc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80084ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80084d0:	4694      	mov	ip, r2
 80084d2:	9b02      	ldr	r3, [sp, #8]
 80084d4:	4463      	add	r3, ip
 80084d6:	930c      	str	r3, [sp, #48]	; 0x30
 80084d8:	3301      	adds	r3, #1
 80084da:	9307      	str	r3, [sp, #28]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	dc00      	bgt.n	80084e2 <_dtoa_r+0x26a>
 80084e0:	2301      	movs	r3, #1
 80084e2:	2200      	movs	r2, #0
 80084e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084e6:	6042      	str	r2, [r0, #4]
 80084e8:	3204      	adds	r2, #4
 80084ea:	0015      	movs	r5, r2
 80084ec:	3514      	adds	r5, #20
 80084ee:	6841      	ldr	r1, [r0, #4]
 80084f0:	429d      	cmp	r5, r3
 80084f2:	d919      	bls.n	8008528 <_dtoa_r+0x2b0>
 80084f4:	0038      	movs	r0, r7
 80084f6:	f000 fcfb 	bl	8008ef0 <_Balloc>
 80084fa:	9006      	str	r0, [sp, #24]
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d117      	bne.n	8008530 <_dtoa_r+0x2b8>
 8008500:	21d5      	movs	r1, #213	; 0xd5
 8008502:	0002      	movs	r2, r0
 8008504:	4b43      	ldr	r3, [pc, #268]	; (8008614 <_dtoa_r+0x39c>)
 8008506:	0049      	lsls	r1, r1, #1
 8008508:	e6cb      	b.n	80082a2 <_dtoa_r+0x2a>
 800850a:	2301      	movs	r3, #1
 800850c:	e7de      	b.n	80084cc <_dtoa_r+0x254>
 800850e:	2300      	movs	r3, #0
 8008510:	940f      	str	r4, [sp, #60]	; 0x3c
 8008512:	9322      	str	r3, [sp, #136]	; 0x88
 8008514:	3b01      	subs	r3, #1
 8008516:	930c      	str	r3, [sp, #48]	; 0x30
 8008518:	9307      	str	r3, [sp, #28]
 800851a:	2200      	movs	r2, #0
 800851c:	3313      	adds	r3, #19
 800851e:	e7d0      	b.n	80084c2 <_dtoa_r+0x24a>
 8008520:	2301      	movs	r3, #1
 8008522:	930f      	str	r3, [sp, #60]	; 0x3c
 8008524:	3b02      	subs	r3, #2
 8008526:	e7f6      	b.n	8008516 <_dtoa_r+0x29e>
 8008528:	3101      	adds	r1, #1
 800852a:	6041      	str	r1, [r0, #4]
 800852c:	0052      	lsls	r2, r2, #1
 800852e:	e7dc      	b.n	80084ea <_dtoa_r+0x272>
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	9a06      	ldr	r2, [sp, #24]
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	9b07      	ldr	r3, [sp, #28]
 8008538:	2b0e      	cmp	r3, #14
 800853a:	d900      	bls.n	800853e <_dtoa_r+0x2c6>
 800853c:	e0eb      	b.n	8008716 <_dtoa_r+0x49e>
 800853e:	2c00      	cmp	r4, #0
 8008540:	d100      	bne.n	8008544 <_dtoa_r+0x2cc>
 8008542:	e0e8      	b.n	8008716 <_dtoa_r+0x49e>
 8008544:	9b02      	ldr	r3, [sp, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	dd68      	ble.n	800861c <_dtoa_r+0x3a4>
 800854a:	001a      	movs	r2, r3
 800854c:	210f      	movs	r1, #15
 800854e:	4b2d      	ldr	r3, [pc, #180]	; (8008604 <_dtoa_r+0x38c>)
 8008550:	400a      	ands	r2, r1
 8008552:	00d2      	lsls	r2, r2, #3
 8008554:	189b      	adds	r3, r3, r2
 8008556:	681d      	ldr	r5, [r3, #0]
 8008558:	685e      	ldr	r6, [r3, #4]
 800855a:	9b02      	ldr	r3, [sp, #8]
 800855c:	111c      	asrs	r4, r3, #4
 800855e:	2302      	movs	r3, #2
 8008560:	9310      	str	r3, [sp, #64]	; 0x40
 8008562:	9b02      	ldr	r3, [sp, #8]
 8008564:	05db      	lsls	r3, r3, #23
 8008566:	d50b      	bpl.n	8008580 <_dtoa_r+0x308>
 8008568:	4b2b      	ldr	r3, [pc, #172]	; (8008618 <_dtoa_r+0x3a0>)
 800856a:	400c      	ands	r4, r1
 800856c:	6a1a      	ldr	r2, [r3, #32]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008572:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008574:	f7f9 f9d4 	bl	8001920 <__aeabi_ddiv>
 8008578:	2303      	movs	r3, #3
 800857a:	9008      	str	r0, [sp, #32]
 800857c:	9109      	str	r1, [sp, #36]	; 0x24
 800857e:	9310      	str	r3, [sp, #64]	; 0x40
 8008580:	4b25      	ldr	r3, [pc, #148]	; (8008618 <_dtoa_r+0x3a0>)
 8008582:	9314      	str	r3, [sp, #80]	; 0x50
 8008584:	2c00      	cmp	r4, #0
 8008586:	d108      	bne.n	800859a <_dtoa_r+0x322>
 8008588:	9808      	ldr	r0, [sp, #32]
 800858a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800858c:	002a      	movs	r2, r5
 800858e:	0033      	movs	r3, r6
 8008590:	f7f9 f9c6 	bl	8001920 <__aeabi_ddiv>
 8008594:	9008      	str	r0, [sp, #32]
 8008596:	9109      	str	r1, [sp, #36]	; 0x24
 8008598:	e05c      	b.n	8008654 <_dtoa_r+0x3dc>
 800859a:	2301      	movs	r3, #1
 800859c:	421c      	tst	r4, r3
 800859e:	d00b      	beq.n	80085b8 <_dtoa_r+0x340>
 80085a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085a2:	0028      	movs	r0, r5
 80085a4:	3301      	adds	r3, #1
 80085a6:	9310      	str	r3, [sp, #64]	; 0x40
 80085a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085aa:	0031      	movs	r1, r6
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f7f9 fdb8 	bl	8002124 <__aeabi_dmul>
 80085b4:	0005      	movs	r5, r0
 80085b6:	000e      	movs	r6, r1
 80085b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085ba:	1064      	asrs	r4, r4, #1
 80085bc:	3308      	adds	r3, #8
 80085be:	e7e0      	b.n	8008582 <_dtoa_r+0x30a>
 80085c0:	0800a645 	.word	0x0800a645
 80085c4:	0800a65c 	.word	0x0800a65c
 80085c8:	7ff00000 	.word	0x7ff00000
 80085cc:	0000270f 	.word	0x0000270f
 80085d0:	0800a641 	.word	0x0800a641
 80085d4:	0800a644 	.word	0x0800a644
 80085d8:	0800a614 	.word	0x0800a614
 80085dc:	0800a615 	.word	0x0800a615
 80085e0:	3ff00000 	.word	0x3ff00000
 80085e4:	fffffc01 	.word	0xfffffc01
 80085e8:	3ff80000 	.word	0x3ff80000
 80085ec:	636f4361 	.word	0x636f4361
 80085f0:	3fd287a7 	.word	0x3fd287a7
 80085f4:	8b60c8b3 	.word	0x8b60c8b3
 80085f8:	3fc68a28 	.word	0x3fc68a28
 80085fc:	509f79fb 	.word	0x509f79fb
 8008600:	3fd34413 	.word	0x3fd34413
 8008604:	0800a750 	.word	0x0800a750
 8008608:	00000432 	.word	0x00000432
 800860c:	00000412 	.word	0x00000412
 8008610:	fe100000 	.word	0xfe100000
 8008614:	0800a6b7 	.word	0x0800a6b7
 8008618:	0800a728 	.word	0x0800a728
 800861c:	2302      	movs	r3, #2
 800861e:	9310      	str	r3, [sp, #64]	; 0x40
 8008620:	9b02      	ldr	r3, [sp, #8]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d016      	beq.n	8008654 <_dtoa_r+0x3dc>
 8008626:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008628:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800862a:	425c      	negs	r4, r3
 800862c:	230f      	movs	r3, #15
 800862e:	4ab6      	ldr	r2, [pc, #728]	; (8008908 <_dtoa_r+0x690>)
 8008630:	4023      	ands	r3, r4
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	18d3      	adds	r3, r2, r3
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f7f9 fd73 	bl	8002124 <__aeabi_dmul>
 800863e:	2601      	movs	r6, #1
 8008640:	2300      	movs	r3, #0
 8008642:	9008      	str	r0, [sp, #32]
 8008644:	9109      	str	r1, [sp, #36]	; 0x24
 8008646:	4db1      	ldr	r5, [pc, #708]	; (800890c <_dtoa_r+0x694>)
 8008648:	1124      	asrs	r4, r4, #4
 800864a:	2c00      	cmp	r4, #0
 800864c:	d000      	beq.n	8008650 <_dtoa_r+0x3d8>
 800864e:	e094      	b.n	800877a <_dtoa_r+0x502>
 8008650:	2b00      	cmp	r3, #0
 8008652:	d19f      	bne.n	8008594 <_dtoa_r+0x31c>
 8008654:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008656:	2b00      	cmp	r3, #0
 8008658:	d100      	bne.n	800865c <_dtoa_r+0x3e4>
 800865a:	e09b      	b.n	8008794 <_dtoa_r+0x51c>
 800865c:	9c08      	ldr	r4, [sp, #32]
 800865e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008660:	2200      	movs	r2, #0
 8008662:	0020      	movs	r0, r4
 8008664:	0029      	movs	r1, r5
 8008666:	4baa      	ldr	r3, [pc, #680]	; (8008910 <_dtoa_r+0x698>)
 8008668:	f7f7 fef2 	bl	8000450 <__aeabi_dcmplt>
 800866c:	2800      	cmp	r0, #0
 800866e:	d100      	bne.n	8008672 <_dtoa_r+0x3fa>
 8008670:	e090      	b.n	8008794 <_dtoa_r+0x51c>
 8008672:	9b07      	ldr	r3, [sp, #28]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d100      	bne.n	800867a <_dtoa_r+0x402>
 8008678:	e08c      	b.n	8008794 <_dtoa_r+0x51c>
 800867a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800867c:	2b00      	cmp	r3, #0
 800867e:	dd46      	ble.n	800870e <_dtoa_r+0x496>
 8008680:	9b02      	ldr	r3, [sp, #8]
 8008682:	2200      	movs	r2, #0
 8008684:	0020      	movs	r0, r4
 8008686:	0029      	movs	r1, r5
 8008688:	1e5e      	subs	r6, r3, #1
 800868a:	4ba2      	ldr	r3, [pc, #648]	; (8008914 <_dtoa_r+0x69c>)
 800868c:	f7f9 fd4a 	bl	8002124 <__aeabi_dmul>
 8008690:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008692:	9008      	str	r0, [sp, #32]
 8008694:	9109      	str	r1, [sp, #36]	; 0x24
 8008696:	3301      	adds	r3, #1
 8008698:	9310      	str	r3, [sp, #64]	; 0x40
 800869a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800869c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800869e:	9c08      	ldr	r4, [sp, #32]
 80086a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086a2:	9314      	str	r3, [sp, #80]	; 0x50
 80086a4:	f7fa fb90 	bl	8002dc8 <__aeabi_i2d>
 80086a8:	0022      	movs	r2, r4
 80086aa:	002b      	movs	r3, r5
 80086ac:	f7f9 fd3a 	bl	8002124 <__aeabi_dmul>
 80086b0:	2200      	movs	r2, #0
 80086b2:	4b99      	ldr	r3, [pc, #612]	; (8008918 <_dtoa_r+0x6a0>)
 80086b4:	f7f8 fdf8 	bl	80012a8 <__aeabi_dadd>
 80086b8:	9010      	str	r0, [sp, #64]	; 0x40
 80086ba:	9111      	str	r1, [sp, #68]	; 0x44
 80086bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086c0:	9208      	str	r2, [sp, #32]
 80086c2:	9309      	str	r3, [sp, #36]	; 0x24
 80086c4:	4a95      	ldr	r2, [pc, #596]	; (800891c <_dtoa_r+0x6a4>)
 80086c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086c8:	4694      	mov	ip, r2
 80086ca:	4463      	add	r3, ip
 80086cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80086ce:	9309      	str	r3, [sp, #36]	; 0x24
 80086d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d161      	bne.n	800879a <_dtoa_r+0x522>
 80086d6:	2200      	movs	r2, #0
 80086d8:	0020      	movs	r0, r4
 80086da:	0029      	movs	r1, r5
 80086dc:	4b90      	ldr	r3, [pc, #576]	; (8008920 <_dtoa_r+0x6a8>)
 80086de:	f7f9 ff8d 	bl	80025fc <__aeabi_dsub>
 80086e2:	9a08      	ldr	r2, [sp, #32]
 80086e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086e6:	0004      	movs	r4, r0
 80086e8:	000d      	movs	r5, r1
 80086ea:	f7f7 fec5 	bl	8000478 <__aeabi_dcmpgt>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d000      	beq.n	80086f4 <_dtoa_r+0x47c>
 80086f2:	e2af      	b.n	8008c54 <_dtoa_r+0x9dc>
 80086f4:	488b      	ldr	r0, [pc, #556]	; (8008924 <_dtoa_r+0x6ac>)
 80086f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80086f8:	4684      	mov	ip, r0
 80086fa:	4461      	add	r1, ip
 80086fc:	000b      	movs	r3, r1
 80086fe:	0020      	movs	r0, r4
 8008700:	0029      	movs	r1, r5
 8008702:	9a08      	ldr	r2, [sp, #32]
 8008704:	f7f7 fea4 	bl	8000450 <__aeabi_dcmplt>
 8008708:	2800      	cmp	r0, #0
 800870a:	d000      	beq.n	800870e <_dtoa_r+0x496>
 800870c:	e29f      	b.n	8008c4e <_dtoa_r+0x9d6>
 800870e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008710:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008712:	9308      	str	r3, [sp, #32]
 8008714:	9409      	str	r4, [sp, #36]	; 0x24
 8008716:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008718:	2b00      	cmp	r3, #0
 800871a:	da00      	bge.n	800871e <_dtoa_r+0x4a6>
 800871c:	e172      	b.n	8008a04 <_dtoa_r+0x78c>
 800871e:	9a02      	ldr	r2, [sp, #8]
 8008720:	2a0e      	cmp	r2, #14
 8008722:	dd00      	ble.n	8008726 <_dtoa_r+0x4ae>
 8008724:	e16e      	b.n	8008a04 <_dtoa_r+0x78c>
 8008726:	4b78      	ldr	r3, [pc, #480]	; (8008908 <_dtoa_r+0x690>)
 8008728:	00d2      	lsls	r2, r2, #3
 800872a:	189b      	adds	r3, r3, r2
 800872c:	685c      	ldr	r4, [r3, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	930a      	str	r3, [sp, #40]	; 0x28
 8008732:	940b      	str	r4, [sp, #44]	; 0x2c
 8008734:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008736:	2b00      	cmp	r3, #0
 8008738:	db00      	blt.n	800873c <_dtoa_r+0x4c4>
 800873a:	e0f7      	b.n	800892c <_dtoa_r+0x6b4>
 800873c:	9b07      	ldr	r3, [sp, #28]
 800873e:	2b00      	cmp	r3, #0
 8008740:	dd00      	ble.n	8008744 <_dtoa_r+0x4cc>
 8008742:	e0f3      	b.n	800892c <_dtoa_r+0x6b4>
 8008744:	d000      	beq.n	8008748 <_dtoa_r+0x4d0>
 8008746:	e282      	b.n	8008c4e <_dtoa_r+0x9d6>
 8008748:	980a      	ldr	r0, [sp, #40]	; 0x28
 800874a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800874c:	2200      	movs	r2, #0
 800874e:	4b74      	ldr	r3, [pc, #464]	; (8008920 <_dtoa_r+0x6a8>)
 8008750:	f7f9 fce8 	bl	8002124 <__aeabi_dmul>
 8008754:	9a08      	ldr	r2, [sp, #32]
 8008756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008758:	f7f7 fe98 	bl	800048c <__aeabi_dcmpge>
 800875c:	9e07      	ldr	r6, [sp, #28]
 800875e:	0035      	movs	r5, r6
 8008760:	2800      	cmp	r0, #0
 8008762:	d000      	beq.n	8008766 <_dtoa_r+0x4ee>
 8008764:	e259      	b.n	8008c1a <_dtoa_r+0x9a2>
 8008766:	9b06      	ldr	r3, [sp, #24]
 8008768:	9a06      	ldr	r2, [sp, #24]
 800876a:	3301      	adds	r3, #1
 800876c:	9308      	str	r3, [sp, #32]
 800876e:	2331      	movs	r3, #49	; 0x31
 8008770:	7013      	strb	r3, [r2, #0]
 8008772:	9b02      	ldr	r3, [sp, #8]
 8008774:	3301      	adds	r3, #1
 8008776:	9302      	str	r3, [sp, #8]
 8008778:	e254      	b.n	8008c24 <_dtoa_r+0x9ac>
 800877a:	4234      	tst	r4, r6
 800877c:	d007      	beq.n	800878e <_dtoa_r+0x516>
 800877e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008780:	3301      	adds	r3, #1
 8008782:	9310      	str	r3, [sp, #64]	; 0x40
 8008784:	682a      	ldr	r2, [r5, #0]
 8008786:	686b      	ldr	r3, [r5, #4]
 8008788:	f7f9 fccc 	bl	8002124 <__aeabi_dmul>
 800878c:	0033      	movs	r3, r6
 800878e:	1064      	asrs	r4, r4, #1
 8008790:	3508      	adds	r5, #8
 8008792:	e75a      	b.n	800864a <_dtoa_r+0x3d2>
 8008794:	9e02      	ldr	r6, [sp, #8]
 8008796:	9b07      	ldr	r3, [sp, #28]
 8008798:	e780      	b.n	800869c <_dtoa_r+0x424>
 800879a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800879c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800879e:	1e5a      	subs	r2, r3, #1
 80087a0:	4b59      	ldr	r3, [pc, #356]	; (8008908 <_dtoa_r+0x690>)
 80087a2:	00d2      	lsls	r2, r2, #3
 80087a4:	189b      	adds	r3, r3, r2
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	2900      	cmp	r1, #0
 80087ac:	d051      	beq.n	8008852 <_dtoa_r+0x5da>
 80087ae:	2000      	movs	r0, #0
 80087b0:	495d      	ldr	r1, [pc, #372]	; (8008928 <_dtoa_r+0x6b0>)
 80087b2:	f7f9 f8b5 	bl	8001920 <__aeabi_ddiv>
 80087b6:	9a08      	ldr	r2, [sp, #32]
 80087b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ba:	f7f9 ff1f 	bl	80025fc <__aeabi_dsub>
 80087be:	9a06      	ldr	r2, [sp, #24]
 80087c0:	9b06      	ldr	r3, [sp, #24]
 80087c2:	4694      	mov	ip, r2
 80087c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80087c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087c8:	9010      	str	r0, [sp, #64]	; 0x40
 80087ca:	9111      	str	r1, [sp, #68]	; 0x44
 80087cc:	4463      	add	r3, ip
 80087ce:	9319      	str	r3, [sp, #100]	; 0x64
 80087d0:	0029      	movs	r1, r5
 80087d2:	0020      	movs	r0, r4
 80087d4:	f7fa fac2 	bl	8002d5c <__aeabi_d2iz>
 80087d8:	9014      	str	r0, [sp, #80]	; 0x50
 80087da:	f7fa faf5 	bl	8002dc8 <__aeabi_i2d>
 80087de:	0002      	movs	r2, r0
 80087e0:	000b      	movs	r3, r1
 80087e2:	0020      	movs	r0, r4
 80087e4:	0029      	movs	r1, r5
 80087e6:	f7f9 ff09 	bl	80025fc <__aeabi_dsub>
 80087ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087ee:	3301      	adds	r3, #1
 80087f0:	9308      	str	r3, [sp, #32]
 80087f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087f4:	0004      	movs	r4, r0
 80087f6:	3330      	adds	r3, #48	; 0x30
 80087f8:	7013      	strb	r3, [r2, #0]
 80087fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087fe:	000d      	movs	r5, r1
 8008800:	f7f7 fe26 	bl	8000450 <__aeabi_dcmplt>
 8008804:	2800      	cmp	r0, #0
 8008806:	d175      	bne.n	80088f4 <_dtoa_r+0x67c>
 8008808:	0022      	movs	r2, r4
 800880a:	002b      	movs	r3, r5
 800880c:	2000      	movs	r0, #0
 800880e:	4940      	ldr	r1, [pc, #256]	; (8008910 <_dtoa_r+0x698>)
 8008810:	f7f9 fef4 	bl	80025fc <__aeabi_dsub>
 8008814:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008816:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008818:	f7f7 fe1a 	bl	8000450 <__aeabi_dcmplt>
 800881c:	2800      	cmp	r0, #0
 800881e:	d000      	beq.n	8008822 <_dtoa_r+0x5aa>
 8008820:	e0d2      	b.n	80089c8 <_dtoa_r+0x750>
 8008822:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008824:	9a08      	ldr	r2, [sp, #32]
 8008826:	4293      	cmp	r3, r2
 8008828:	d100      	bne.n	800882c <_dtoa_r+0x5b4>
 800882a:	e770      	b.n	800870e <_dtoa_r+0x496>
 800882c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800882e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008830:	2200      	movs	r2, #0
 8008832:	4b38      	ldr	r3, [pc, #224]	; (8008914 <_dtoa_r+0x69c>)
 8008834:	f7f9 fc76 	bl	8002124 <__aeabi_dmul>
 8008838:	4b36      	ldr	r3, [pc, #216]	; (8008914 <_dtoa_r+0x69c>)
 800883a:	9010      	str	r0, [sp, #64]	; 0x40
 800883c:	9111      	str	r1, [sp, #68]	; 0x44
 800883e:	2200      	movs	r2, #0
 8008840:	0020      	movs	r0, r4
 8008842:	0029      	movs	r1, r5
 8008844:	f7f9 fc6e 	bl	8002124 <__aeabi_dmul>
 8008848:	9b08      	ldr	r3, [sp, #32]
 800884a:	0004      	movs	r4, r0
 800884c:	000d      	movs	r5, r1
 800884e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008850:	e7be      	b.n	80087d0 <_dtoa_r+0x558>
 8008852:	9808      	ldr	r0, [sp, #32]
 8008854:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008856:	f7f9 fc65 	bl	8002124 <__aeabi_dmul>
 800885a:	9a06      	ldr	r2, [sp, #24]
 800885c:	9b06      	ldr	r3, [sp, #24]
 800885e:	4694      	mov	ip, r2
 8008860:	9308      	str	r3, [sp, #32]
 8008862:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008864:	9010      	str	r0, [sp, #64]	; 0x40
 8008866:	9111      	str	r1, [sp, #68]	; 0x44
 8008868:	4463      	add	r3, ip
 800886a:	9319      	str	r3, [sp, #100]	; 0x64
 800886c:	0029      	movs	r1, r5
 800886e:	0020      	movs	r0, r4
 8008870:	f7fa fa74 	bl	8002d5c <__aeabi_d2iz>
 8008874:	9017      	str	r0, [sp, #92]	; 0x5c
 8008876:	f7fa faa7 	bl	8002dc8 <__aeabi_i2d>
 800887a:	0002      	movs	r2, r0
 800887c:	000b      	movs	r3, r1
 800887e:	0020      	movs	r0, r4
 8008880:	0029      	movs	r1, r5
 8008882:	f7f9 febb 	bl	80025fc <__aeabi_dsub>
 8008886:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008888:	9a08      	ldr	r2, [sp, #32]
 800888a:	3330      	adds	r3, #48	; 0x30
 800888c:	7013      	strb	r3, [r2, #0]
 800888e:	0013      	movs	r3, r2
 8008890:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008892:	3301      	adds	r3, #1
 8008894:	0004      	movs	r4, r0
 8008896:	000d      	movs	r5, r1
 8008898:	9308      	str	r3, [sp, #32]
 800889a:	4293      	cmp	r3, r2
 800889c:	d12c      	bne.n	80088f8 <_dtoa_r+0x680>
 800889e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80088a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80088a2:	9a06      	ldr	r2, [sp, #24]
 80088a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088a6:	4694      	mov	ip, r2
 80088a8:	4463      	add	r3, ip
 80088aa:	2200      	movs	r2, #0
 80088ac:	9308      	str	r3, [sp, #32]
 80088ae:	4b1e      	ldr	r3, [pc, #120]	; (8008928 <_dtoa_r+0x6b0>)
 80088b0:	f7f8 fcfa 	bl	80012a8 <__aeabi_dadd>
 80088b4:	0002      	movs	r2, r0
 80088b6:	000b      	movs	r3, r1
 80088b8:	0020      	movs	r0, r4
 80088ba:	0029      	movs	r1, r5
 80088bc:	f7f7 fddc 	bl	8000478 <__aeabi_dcmpgt>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d000      	beq.n	80088c6 <_dtoa_r+0x64e>
 80088c4:	e080      	b.n	80089c8 <_dtoa_r+0x750>
 80088c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80088c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088ca:	2000      	movs	r0, #0
 80088cc:	4916      	ldr	r1, [pc, #88]	; (8008928 <_dtoa_r+0x6b0>)
 80088ce:	f7f9 fe95 	bl	80025fc <__aeabi_dsub>
 80088d2:	0002      	movs	r2, r0
 80088d4:	000b      	movs	r3, r1
 80088d6:	0020      	movs	r0, r4
 80088d8:	0029      	movs	r1, r5
 80088da:	f7f7 fdb9 	bl	8000450 <__aeabi_dcmplt>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d100      	bne.n	80088e4 <_dtoa_r+0x66c>
 80088e2:	e714      	b.n	800870e <_dtoa_r+0x496>
 80088e4:	9b08      	ldr	r3, [sp, #32]
 80088e6:	001a      	movs	r2, r3
 80088e8:	3a01      	subs	r2, #1
 80088ea:	9208      	str	r2, [sp, #32]
 80088ec:	7812      	ldrb	r2, [r2, #0]
 80088ee:	2a30      	cmp	r2, #48	; 0x30
 80088f0:	d0f8      	beq.n	80088e4 <_dtoa_r+0x66c>
 80088f2:	9308      	str	r3, [sp, #32]
 80088f4:	9602      	str	r6, [sp, #8]
 80088f6:	e055      	b.n	80089a4 <_dtoa_r+0x72c>
 80088f8:	2200      	movs	r2, #0
 80088fa:	4b06      	ldr	r3, [pc, #24]	; (8008914 <_dtoa_r+0x69c>)
 80088fc:	f7f9 fc12 	bl	8002124 <__aeabi_dmul>
 8008900:	0004      	movs	r4, r0
 8008902:	000d      	movs	r5, r1
 8008904:	e7b2      	b.n	800886c <_dtoa_r+0x5f4>
 8008906:	46c0      	nop			; (mov r8, r8)
 8008908:	0800a750 	.word	0x0800a750
 800890c:	0800a728 	.word	0x0800a728
 8008910:	3ff00000 	.word	0x3ff00000
 8008914:	40240000 	.word	0x40240000
 8008918:	401c0000 	.word	0x401c0000
 800891c:	fcc00000 	.word	0xfcc00000
 8008920:	40140000 	.word	0x40140000
 8008924:	7cc00000 	.word	0x7cc00000
 8008928:	3fe00000 	.word	0x3fe00000
 800892c:	9b07      	ldr	r3, [sp, #28]
 800892e:	9e06      	ldr	r6, [sp, #24]
 8008930:	3b01      	subs	r3, #1
 8008932:	199b      	adds	r3, r3, r6
 8008934:	930c      	str	r3, [sp, #48]	; 0x30
 8008936:	9c08      	ldr	r4, [sp, #32]
 8008938:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800893a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800893c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800893e:	0020      	movs	r0, r4
 8008940:	0029      	movs	r1, r5
 8008942:	f7f8 ffed 	bl	8001920 <__aeabi_ddiv>
 8008946:	f7fa fa09 	bl	8002d5c <__aeabi_d2iz>
 800894a:	9007      	str	r0, [sp, #28]
 800894c:	f7fa fa3c 	bl	8002dc8 <__aeabi_i2d>
 8008950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008954:	f7f9 fbe6 	bl	8002124 <__aeabi_dmul>
 8008958:	0002      	movs	r2, r0
 800895a:	000b      	movs	r3, r1
 800895c:	0020      	movs	r0, r4
 800895e:	0029      	movs	r1, r5
 8008960:	f7f9 fe4c 	bl	80025fc <__aeabi_dsub>
 8008964:	0033      	movs	r3, r6
 8008966:	9a07      	ldr	r2, [sp, #28]
 8008968:	3601      	adds	r6, #1
 800896a:	3230      	adds	r2, #48	; 0x30
 800896c:	701a      	strb	r2, [r3, #0]
 800896e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008970:	9608      	str	r6, [sp, #32]
 8008972:	429a      	cmp	r2, r3
 8008974:	d139      	bne.n	80089ea <_dtoa_r+0x772>
 8008976:	0002      	movs	r2, r0
 8008978:	000b      	movs	r3, r1
 800897a:	f7f8 fc95 	bl	80012a8 <__aeabi_dadd>
 800897e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008982:	0004      	movs	r4, r0
 8008984:	000d      	movs	r5, r1
 8008986:	f7f7 fd77 	bl	8000478 <__aeabi_dcmpgt>
 800898a:	2800      	cmp	r0, #0
 800898c:	d11b      	bne.n	80089c6 <_dtoa_r+0x74e>
 800898e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008992:	0020      	movs	r0, r4
 8008994:	0029      	movs	r1, r5
 8008996:	f7f7 fd55 	bl	8000444 <__aeabi_dcmpeq>
 800899a:	2800      	cmp	r0, #0
 800899c:	d002      	beq.n	80089a4 <_dtoa_r+0x72c>
 800899e:	9b07      	ldr	r3, [sp, #28]
 80089a0:	07db      	lsls	r3, r3, #31
 80089a2:	d410      	bmi.n	80089c6 <_dtoa_r+0x74e>
 80089a4:	0038      	movs	r0, r7
 80089a6:	9905      	ldr	r1, [sp, #20]
 80089a8:	f000 fae6 	bl	8008f78 <_Bfree>
 80089ac:	2300      	movs	r3, #0
 80089ae:	9a08      	ldr	r2, [sp, #32]
 80089b0:	9802      	ldr	r0, [sp, #8]
 80089b2:	7013      	strb	r3, [r2, #0]
 80089b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80089b6:	3001      	adds	r0, #1
 80089b8:	6018      	str	r0, [r3, #0]
 80089ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d100      	bne.n	80089c2 <_dtoa_r+0x74a>
 80089c0:	e4a6      	b.n	8008310 <_dtoa_r+0x98>
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	e4a4      	b.n	8008310 <_dtoa_r+0x98>
 80089c6:	9e02      	ldr	r6, [sp, #8]
 80089c8:	9b08      	ldr	r3, [sp, #32]
 80089ca:	9308      	str	r3, [sp, #32]
 80089cc:	3b01      	subs	r3, #1
 80089ce:	781a      	ldrb	r2, [r3, #0]
 80089d0:	2a39      	cmp	r2, #57	; 0x39
 80089d2:	d106      	bne.n	80089e2 <_dtoa_r+0x76a>
 80089d4:	9a06      	ldr	r2, [sp, #24]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d1f7      	bne.n	80089ca <_dtoa_r+0x752>
 80089da:	2230      	movs	r2, #48	; 0x30
 80089dc:	9906      	ldr	r1, [sp, #24]
 80089de:	3601      	adds	r6, #1
 80089e0:	700a      	strb	r2, [r1, #0]
 80089e2:	781a      	ldrb	r2, [r3, #0]
 80089e4:	3201      	adds	r2, #1
 80089e6:	701a      	strb	r2, [r3, #0]
 80089e8:	e784      	b.n	80088f4 <_dtoa_r+0x67c>
 80089ea:	2200      	movs	r2, #0
 80089ec:	4baa      	ldr	r3, [pc, #680]	; (8008c98 <_dtoa_r+0xa20>)
 80089ee:	f7f9 fb99 	bl	8002124 <__aeabi_dmul>
 80089f2:	2200      	movs	r2, #0
 80089f4:	2300      	movs	r3, #0
 80089f6:	0004      	movs	r4, r0
 80089f8:	000d      	movs	r5, r1
 80089fa:	f7f7 fd23 	bl	8000444 <__aeabi_dcmpeq>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d09b      	beq.n	800893a <_dtoa_r+0x6c2>
 8008a02:	e7cf      	b.n	80089a4 <_dtoa_r+0x72c>
 8008a04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a06:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008a08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a0a:	2d00      	cmp	r5, #0
 8008a0c:	d012      	beq.n	8008a34 <_dtoa_r+0x7bc>
 8008a0e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a10:	2a01      	cmp	r2, #1
 8008a12:	dc66      	bgt.n	8008ae2 <_dtoa_r+0x86a>
 8008a14:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a16:	2a00      	cmp	r2, #0
 8008a18:	d05d      	beq.n	8008ad6 <_dtoa_r+0x85e>
 8008a1a:	4aa0      	ldr	r2, [pc, #640]	; (8008c9c <_dtoa_r+0xa24>)
 8008a1c:	189b      	adds	r3, r3, r2
 8008a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a20:	2101      	movs	r1, #1
 8008a22:	18d2      	adds	r2, r2, r3
 8008a24:	920a      	str	r2, [sp, #40]	; 0x28
 8008a26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a28:	0038      	movs	r0, r7
 8008a2a:	18d3      	adds	r3, r2, r3
 8008a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8008a2e:	f000 fb53 	bl	80090d8 <__i2b>
 8008a32:	0005      	movs	r5, r0
 8008a34:	2c00      	cmp	r4, #0
 8008a36:	dd0e      	ble.n	8008a56 <_dtoa_r+0x7de>
 8008a38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	dd0b      	ble.n	8008a56 <_dtoa_r+0x7de>
 8008a3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a40:	0023      	movs	r3, r4
 8008a42:	4294      	cmp	r4, r2
 8008a44:	dd00      	ble.n	8008a48 <_dtoa_r+0x7d0>
 8008a46:	0013      	movs	r3, r2
 8008a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a4a:	1ae4      	subs	r4, r4, r3
 8008a4c:	1ad2      	subs	r2, r2, r3
 8008a4e:	920a      	str	r2, [sp, #40]	; 0x28
 8008a50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	930d      	str	r3, [sp, #52]	; 0x34
 8008a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d01f      	beq.n	8008a9c <_dtoa_r+0x824>
 8008a5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d054      	beq.n	8008b0c <_dtoa_r+0x894>
 8008a62:	2e00      	cmp	r6, #0
 8008a64:	dd11      	ble.n	8008a8a <_dtoa_r+0x812>
 8008a66:	0029      	movs	r1, r5
 8008a68:	0032      	movs	r2, r6
 8008a6a:	0038      	movs	r0, r7
 8008a6c:	f000 fbfa 	bl	8009264 <__pow5mult>
 8008a70:	9a05      	ldr	r2, [sp, #20]
 8008a72:	0001      	movs	r1, r0
 8008a74:	0005      	movs	r5, r0
 8008a76:	0038      	movs	r0, r7
 8008a78:	f000 fb44 	bl	8009104 <__multiply>
 8008a7c:	9905      	ldr	r1, [sp, #20]
 8008a7e:	9014      	str	r0, [sp, #80]	; 0x50
 8008a80:	0038      	movs	r0, r7
 8008a82:	f000 fa79 	bl	8008f78 <_Bfree>
 8008a86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a88:	9305      	str	r3, [sp, #20]
 8008a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a8c:	1b9a      	subs	r2, r3, r6
 8008a8e:	42b3      	cmp	r3, r6
 8008a90:	d004      	beq.n	8008a9c <_dtoa_r+0x824>
 8008a92:	0038      	movs	r0, r7
 8008a94:	9905      	ldr	r1, [sp, #20]
 8008a96:	f000 fbe5 	bl	8009264 <__pow5mult>
 8008a9a:	9005      	str	r0, [sp, #20]
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	0038      	movs	r0, r7
 8008aa0:	f000 fb1a 	bl	80090d8 <__i2b>
 8008aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008aa6:	0006      	movs	r6, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	dd31      	ble.n	8008b10 <_dtoa_r+0x898>
 8008aac:	001a      	movs	r2, r3
 8008aae:	0001      	movs	r1, r0
 8008ab0:	0038      	movs	r0, r7
 8008ab2:	f000 fbd7 	bl	8009264 <__pow5mult>
 8008ab6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ab8:	0006      	movs	r6, r0
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	dd2d      	ble.n	8008b1a <_dtoa_r+0x8a2>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	930e      	str	r3, [sp, #56]	; 0x38
 8008ac2:	6933      	ldr	r3, [r6, #16]
 8008ac4:	3303      	adds	r3, #3
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	18f3      	adds	r3, r6, r3
 8008aca:	6858      	ldr	r0, [r3, #4]
 8008acc:	f000 fabc 	bl	8009048 <__hi0bits>
 8008ad0:	2320      	movs	r3, #32
 8008ad2:	1a18      	subs	r0, r3, r0
 8008ad4:	e039      	b.n	8008b4a <_dtoa_r+0x8d2>
 8008ad6:	2336      	movs	r3, #54	; 0x36
 8008ad8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ada:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008adc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ade:	1a9b      	subs	r3, r3, r2
 8008ae0:	e79d      	b.n	8008a1e <_dtoa_r+0x7a6>
 8008ae2:	9b07      	ldr	r3, [sp, #28]
 8008ae4:	1e5e      	subs	r6, r3, #1
 8008ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ae8:	42b3      	cmp	r3, r6
 8008aea:	db07      	blt.n	8008afc <_dtoa_r+0x884>
 8008aec:	1b9e      	subs	r6, r3, r6
 8008aee:	9b07      	ldr	r3, [sp, #28]
 8008af0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	da93      	bge.n	8008a1e <_dtoa_r+0x7a6>
 8008af6:	1ae4      	subs	r4, r4, r3
 8008af8:	2300      	movs	r3, #0
 8008afa:	e790      	b.n	8008a1e <_dtoa_r+0x7a6>
 8008afc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008afe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b00:	1af3      	subs	r3, r6, r3
 8008b02:	18d3      	adds	r3, r2, r3
 8008b04:	960e      	str	r6, [sp, #56]	; 0x38
 8008b06:	9315      	str	r3, [sp, #84]	; 0x54
 8008b08:	2600      	movs	r6, #0
 8008b0a:	e7f0      	b.n	8008aee <_dtoa_r+0x876>
 8008b0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b0e:	e7c0      	b.n	8008a92 <_dtoa_r+0x81a>
 8008b10:	2300      	movs	r3, #0
 8008b12:	930e      	str	r3, [sp, #56]	; 0x38
 8008b14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	dc13      	bgt.n	8008b42 <_dtoa_r+0x8ca>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	930e      	str	r3, [sp, #56]	; 0x38
 8008b1e:	9b08      	ldr	r3, [sp, #32]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10e      	bne.n	8008b42 <_dtoa_r+0x8ca>
 8008b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b26:	031b      	lsls	r3, r3, #12
 8008b28:	d10b      	bne.n	8008b42 <_dtoa_r+0x8ca>
 8008b2a:	4b5d      	ldr	r3, [pc, #372]	; (8008ca0 <_dtoa_r+0xa28>)
 8008b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b2e:	4213      	tst	r3, r2
 8008b30:	d007      	beq.n	8008b42 <_dtoa_r+0x8ca>
 8008b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b34:	3301      	adds	r3, #1
 8008b36:	930a      	str	r3, [sp, #40]	; 0x28
 8008b38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	930d      	str	r3, [sp, #52]	; 0x34
 8008b3e:	2301      	movs	r3, #1
 8008b40:	930e      	str	r3, [sp, #56]	; 0x38
 8008b42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b44:	2001      	movs	r0, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1bb      	bne.n	8008ac2 <_dtoa_r+0x84a>
 8008b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b4c:	221f      	movs	r2, #31
 8008b4e:	1818      	adds	r0, r3, r0
 8008b50:	0003      	movs	r3, r0
 8008b52:	4013      	ands	r3, r2
 8008b54:	4210      	tst	r0, r2
 8008b56:	d046      	beq.n	8008be6 <_dtoa_r+0x96e>
 8008b58:	3201      	adds	r2, #1
 8008b5a:	1ad2      	subs	r2, r2, r3
 8008b5c:	2a04      	cmp	r2, #4
 8008b5e:	dd3f      	ble.n	8008be0 <_dtoa_r+0x968>
 8008b60:	221c      	movs	r2, #28
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b66:	18e4      	adds	r4, r4, r3
 8008b68:	18d2      	adds	r2, r2, r3
 8008b6a:	920a      	str	r2, [sp, #40]	; 0x28
 8008b6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b6e:	18d3      	adds	r3, r2, r3
 8008b70:	930d      	str	r3, [sp, #52]	; 0x34
 8008b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dd05      	ble.n	8008b84 <_dtoa_r+0x90c>
 8008b78:	001a      	movs	r2, r3
 8008b7a:	0038      	movs	r0, r7
 8008b7c:	9905      	ldr	r1, [sp, #20]
 8008b7e:	f000 fbcd 	bl	800931c <__lshift>
 8008b82:	9005      	str	r0, [sp, #20]
 8008b84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	dd05      	ble.n	8008b96 <_dtoa_r+0x91e>
 8008b8a:	0031      	movs	r1, r6
 8008b8c:	001a      	movs	r2, r3
 8008b8e:	0038      	movs	r0, r7
 8008b90:	f000 fbc4 	bl	800931c <__lshift>
 8008b94:	0006      	movs	r6, r0
 8008b96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d026      	beq.n	8008bea <_dtoa_r+0x972>
 8008b9c:	0031      	movs	r1, r6
 8008b9e:	9805      	ldr	r0, [sp, #20]
 8008ba0:	f000 fc2a 	bl	80093f8 <__mcmp>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	da20      	bge.n	8008bea <_dtoa_r+0x972>
 8008ba8:	9b02      	ldr	r3, [sp, #8]
 8008baa:	220a      	movs	r2, #10
 8008bac:	3b01      	subs	r3, #1
 8008bae:	9302      	str	r3, [sp, #8]
 8008bb0:	0038      	movs	r0, r7
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	9905      	ldr	r1, [sp, #20]
 8008bb6:	f000 fa03 	bl	8008fc0 <__multadd>
 8008bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bbc:	9005      	str	r0, [sp, #20]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d100      	bne.n	8008bc4 <_dtoa_r+0x94c>
 8008bc2:	e166      	b.n	8008e92 <_dtoa_r+0xc1a>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	0029      	movs	r1, r5
 8008bc8:	220a      	movs	r2, #10
 8008bca:	0038      	movs	r0, r7
 8008bcc:	f000 f9f8 	bl	8008fc0 <__multadd>
 8008bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bd2:	0005      	movs	r5, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	dc47      	bgt.n	8008c68 <_dtoa_r+0x9f0>
 8008bd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	dc0d      	bgt.n	8008bfa <_dtoa_r+0x982>
 8008bde:	e043      	b.n	8008c68 <_dtoa_r+0x9f0>
 8008be0:	2a04      	cmp	r2, #4
 8008be2:	d0c6      	beq.n	8008b72 <_dtoa_r+0x8fa>
 8008be4:	0013      	movs	r3, r2
 8008be6:	331c      	adds	r3, #28
 8008be8:	e7bc      	b.n	8008b64 <_dtoa_r+0x8ec>
 8008bea:	9b07      	ldr	r3, [sp, #28]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	dc35      	bgt.n	8008c5c <_dtoa_r+0x9e4>
 8008bf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	dd32      	ble.n	8008c5c <_dtoa_r+0x9e4>
 8008bf6:	9b07      	ldr	r3, [sp, #28]
 8008bf8:	930c      	str	r3, [sp, #48]	; 0x30
 8008bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10c      	bne.n	8008c1a <_dtoa_r+0x9a2>
 8008c00:	0031      	movs	r1, r6
 8008c02:	2205      	movs	r2, #5
 8008c04:	0038      	movs	r0, r7
 8008c06:	f000 f9db 	bl	8008fc0 <__multadd>
 8008c0a:	0006      	movs	r6, r0
 8008c0c:	0001      	movs	r1, r0
 8008c0e:	9805      	ldr	r0, [sp, #20]
 8008c10:	f000 fbf2 	bl	80093f8 <__mcmp>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	dd00      	ble.n	8008c1a <_dtoa_r+0x9a2>
 8008c18:	e5a5      	b.n	8008766 <_dtoa_r+0x4ee>
 8008c1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c1c:	43db      	mvns	r3, r3
 8008c1e:	9302      	str	r3, [sp, #8]
 8008c20:	9b06      	ldr	r3, [sp, #24]
 8008c22:	9308      	str	r3, [sp, #32]
 8008c24:	2400      	movs	r4, #0
 8008c26:	0031      	movs	r1, r6
 8008c28:	0038      	movs	r0, r7
 8008c2a:	f000 f9a5 	bl	8008f78 <_Bfree>
 8008c2e:	2d00      	cmp	r5, #0
 8008c30:	d100      	bne.n	8008c34 <_dtoa_r+0x9bc>
 8008c32:	e6b7      	b.n	80089a4 <_dtoa_r+0x72c>
 8008c34:	2c00      	cmp	r4, #0
 8008c36:	d005      	beq.n	8008c44 <_dtoa_r+0x9cc>
 8008c38:	42ac      	cmp	r4, r5
 8008c3a:	d003      	beq.n	8008c44 <_dtoa_r+0x9cc>
 8008c3c:	0021      	movs	r1, r4
 8008c3e:	0038      	movs	r0, r7
 8008c40:	f000 f99a 	bl	8008f78 <_Bfree>
 8008c44:	0029      	movs	r1, r5
 8008c46:	0038      	movs	r0, r7
 8008c48:	f000 f996 	bl	8008f78 <_Bfree>
 8008c4c:	e6aa      	b.n	80089a4 <_dtoa_r+0x72c>
 8008c4e:	2600      	movs	r6, #0
 8008c50:	0035      	movs	r5, r6
 8008c52:	e7e2      	b.n	8008c1a <_dtoa_r+0x9a2>
 8008c54:	9602      	str	r6, [sp, #8]
 8008c56:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008c58:	0035      	movs	r5, r6
 8008c5a:	e584      	b.n	8008766 <_dtoa_r+0x4ee>
 8008c5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d100      	bne.n	8008c64 <_dtoa_r+0x9ec>
 8008c62:	e0ce      	b.n	8008e02 <_dtoa_r+0xb8a>
 8008c64:	9b07      	ldr	r3, [sp, #28]
 8008c66:	930c      	str	r3, [sp, #48]	; 0x30
 8008c68:	2c00      	cmp	r4, #0
 8008c6a:	dd05      	ble.n	8008c78 <_dtoa_r+0xa00>
 8008c6c:	0029      	movs	r1, r5
 8008c6e:	0022      	movs	r2, r4
 8008c70:	0038      	movs	r0, r7
 8008c72:	f000 fb53 	bl	800931c <__lshift>
 8008c76:	0005      	movs	r5, r0
 8008c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c7a:	0028      	movs	r0, r5
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d022      	beq.n	8008cc6 <_dtoa_r+0xa4e>
 8008c80:	0038      	movs	r0, r7
 8008c82:	6869      	ldr	r1, [r5, #4]
 8008c84:	f000 f934 	bl	8008ef0 <_Balloc>
 8008c88:	1e04      	subs	r4, r0, #0
 8008c8a:	d10f      	bne.n	8008cac <_dtoa_r+0xa34>
 8008c8c:	0002      	movs	r2, r0
 8008c8e:	4b05      	ldr	r3, [pc, #20]	; (8008ca4 <_dtoa_r+0xa2c>)
 8008c90:	4905      	ldr	r1, [pc, #20]	; (8008ca8 <_dtoa_r+0xa30>)
 8008c92:	f7ff fb06 	bl	80082a2 <_dtoa_r+0x2a>
 8008c96:	46c0      	nop			; (mov r8, r8)
 8008c98:	40240000 	.word	0x40240000
 8008c9c:	00000433 	.word	0x00000433
 8008ca0:	7ff00000 	.word	0x7ff00000
 8008ca4:	0800a6b7 	.word	0x0800a6b7
 8008ca8:	000002ea 	.word	0x000002ea
 8008cac:	0029      	movs	r1, r5
 8008cae:	692b      	ldr	r3, [r5, #16]
 8008cb0:	310c      	adds	r1, #12
 8008cb2:	1c9a      	adds	r2, r3, #2
 8008cb4:	0092      	lsls	r2, r2, #2
 8008cb6:	300c      	adds	r0, #12
 8008cb8:	f000 f911 	bl	8008ede <memcpy>
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	0021      	movs	r1, r4
 8008cc0:	0038      	movs	r0, r7
 8008cc2:	f000 fb2b 	bl	800931c <__lshift>
 8008cc6:	9b06      	ldr	r3, [sp, #24]
 8008cc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cca:	930a      	str	r3, [sp, #40]	; 0x28
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	189b      	adds	r3, r3, r2
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	002c      	movs	r4, r5
 8008cd4:	0005      	movs	r5, r0
 8008cd6:	9314      	str	r3, [sp, #80]	; 0x50
 8008cd8:	9b08      	ldr	r3, [sp, #32]
 8008cda:	4013      	ands	r3, r2
 8008cdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cde:	0031      	movs	r1, r6
 8008ce0:	9805      	ldr	r0, [sp, #20]
 8008ce2:	f7ff fa3d 	bl	8008160 <quorem>
 8008ce6:	0003      	movs	r3, r0
 8008ce8:	0021      	movs	r1, r4
 8008cea:	3330      	adds	r3, #48	; 0x30
 8008cec:	900d      	str	r0, [sp, #52]	; 0x34
 8008cee:	9805      	ldr	r0, [sp, #20]
 8008cf0:	9307      	str	r3, [sp, #28]
 8008cf2:	f000 fb81 	bl	80093f8 <__mcmp>
 8008cf6:	002a      	movs	r2, r5
 8008cf8:	900e      	str	r0, [sp, #56]	; 0x38
 8008cfa:	0031      	movs	r1, r6
 8008cfc:	0038      	movs	r0, r7
 8008cfe:	f000 fb97 	bl	8009430 <__mdiff>
 8008d02:	68c3      	ldr	r3, [r0, #12]
 8008d04:	9008      	str	r0, [sp, #32]
 8008d06:	9310      	str	r3, [sp, #64]	; 0x40
 8008d08:	2301      	movs	r3, #1
 8008d0a:	930c      	str	r3, [sp, #48]	; 0x30
 8008d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d104      	bne.n	8008d1c <_dtoa_r+0xaa4>
 8008d12:	0001      	movs	r1, r0
 8008d14:	9805      	ldr	r0, [sp, #20]
 8008d16:	f000 fb6f 	bl	80093f8 <__mcmp>
 8008d1a:	900c      	str	r0, [sp, #48]	; 0x30
 8008d1c:	0038      	movs	r0, r7
 8008d1e:	9908      	ldr	r1, [sp, #32]
 8008d20:	f000 f92a 	bl	8008f78 <_Bfree>
 8008d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d28:	3301      	adds	r3, #1
 8008d2a:	9308      	str	r3, [sp, #32]
 8008d2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d32:	4313      	orrs	r3, r2
 8008d34:	d10c      	bne.n	8008d50 <_dtoa_r+0xad8>
 8008d36:	9b07      	ldr	r3, [sp, #28]
 8008d38:	2b39      	cmp	r3, #57	; 0x39
 8008d3a:	d026      	beq.n	8008d8a <_dtoa_r+0xb12>
 8008d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	dd02      	ble.n	8008d48 <_dtoa_r+0xad0>
 8008d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d44:	3331      	adds	r3, #49	; 0x31
 8008d46:	9307      	str	r3, [sp, #28]
 8008d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d4a:	9a07      	ldr	r2, [sp, #28]
 8008d4c:	701a      	strb	r2, [r3, #0]
 8008d4e:	e76a      	b.n	8008c26 <_dtoa_r+0x9ae>
 8008d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	db04      	blt.n	8008d60 <_dtoa_r+0xae8>
 8008d56:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	d11f      	bne.n	8008da0 <_dtoa_r+0xb28>
 8008d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	ddf0      	ble.n	8008d48 <_dtoa_r+0xad0>
 8008d66:	9905      	ldr	r1, [sp, #20]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	0038      	movs	r0, r7
 8008d6c:	f000 fad6 	bl	800931c <__lshift>
 8008d70:	0031      	movs	r1, r6
 8008d72:	9005      	str	r0, [sp, #20]
 8008d74:	f000 fb40 	bl	80093f8 <__mcmp>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	dc03      	bgt.n	8008d84 <_dtoa_r+0xb0c>
 8008d7c:	d1e4      	bne.n	8008d48 <_dtoa_r+0xad0>
 8008d7e:	9b07      	ldr	r3, [sp, #28]
 8008d80:	07db      	lsls	r3, r3, #31
 8008d82:	d5e1      	bpl.n	8008d48 <_dtoa_r+0xad0>
 8008d84:	9b07      	ldr	r3, [sp, #28]
 8008d86:	2b39      	cmp	r3, #57	; 0x39
 8008d88:	d1db      	bne.n	8008d42 <_dtoa_r+0xaca>
 8008d8a:	2339      	movs	r3, #57	; 0x39
 8008d8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d8e:	7013      	strb	r3, [r2, #0]
 8008d90:	9b08      	ldr	r3, [sp, #32]
 8008d92:	9308      	str	r3, [sp, #32]
 8008d94:	3b01      	subs	r3, #1
 8008d96:	781a      	ldrb	r2, [r3, #0]
 8008d98:	2a39      	cmp	r2, #57	; 0x39
 8008d9a:	d068      	beq.n	8008e6e <_dtoa_r+0xbf6>
 8008d9c:	3201      	adds	r2, #1
 8008d9e:	e7d5      	b.n	8008d4c <_dtoa_r+0xad4>
 8008da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dd07      	ble.n	8008db6 <_dtoa_r+0xb3e>
 8008da6:	9b07      	ldr	r3, [sp, #28]
 8008da8:	2b39      	cmp	r3, #57	; 0x39
 8008daa:	d0ee      	beq.n	8008d8a <_dtoa_r+0xb12>
 8008dac:	9b07      	ldr	r3, [sp, #28]
 8008dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008db0:	3301      	adds	r3, #1
 8008db2:	7013      	strb	r3, [r2, #0]
 8008db4:	e737      	b.n	8008c26 <_dtoa_r+0x9ae>
 8008db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008db8:	9a07      	ldr	r2, [sp, #28]
 8008dba:	701a      	strb	r2, [r3, #0]
 8008dbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008dbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d03e      	beq.n	8008e42 <_dtoa_r+0xbca>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	220a      	movs	r2, #10
 8008dc8:	9905      	ldr	r1, [sp, #20]
 8008dca:	0038      	movs	r0, r7
 8008dcc:	f000 f8f8 	bl	8008fc0 <__multadd>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	9005      	str	r0, [sp, #20]
 8008dd4:	220a      	movs	r2, #10
 8008dd6:	0021      	movs	r1, r4
 8008dd8:	0038      	movs	r0, r7
 8008dda:	42ac      	cmp	r4, r5
 8008ddc:	d106      	bne.n	8008dec <_dtoa_r+0xb74>
 8008dde:	f000 f8ef 	bl	8008fc0 <__multadd>
 8008de2:	0004      	movs	r4, r0
 8008de4:	0005      	movs	r5, r0
 8008de6:	9b08      	ldr	r3, [sp, #32]
 8008de8:	930a      	str	r3, [sp, #40]	; 0x28
 8008dea:	e778      	b.n	8008cde <_dtoa_r+0xa66>
 8008dec:	f000 f8e8 	bl	8008fc0 <__multadd>
 8008df0:	0029      	movs	r1, r5
 8008df2:	0004      	movs	r4, r0
 8008df4:	2300      	movs	r3, #0
 8008df6:	220a      	movs	r2, #10
 8008df8:	0038      	movs	r0, r7
 8008dfa:	f000 f8e1 	bl	8008fc0 <__multadd>
 8008dfe:	0005      	movs	r5, r0
 8008e00:	e7f1      	b.n	8008de6 <_dtoa_r+0xb6e>
 8008e02:	9b07      	ldr	r3, [sp, #28]
 8008e04:	930c      	str	r3, [sp, #48]	; 0x30
 8008e06:	2400      	movs	r4, #0
 8008e08:	0031      	movs	r1, r6
 8008e0a:	9805      	ldr	r0, [sp, #20]
 8008e0c:	f7ff f9a8 	bl	8008160 <quorem>
 8008e10:	9b06      	ldr	r3, [sp, #24]
 8008e12:	3030      	adds	r0, #48	; 0x30
 8008e14:	5518      	strb	r0, [r3, r4]
 8008e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e18:	3401      	adds	r4, #1
 8008e1a:	9007      	str	r0, [sp, #28]
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	dd07      	ble.n	8008e30 <_dtoa_r+0xbb8>
 8008e20:	2300      	movs	r3, #0
 8008e22:	220a      	movs	r2, #10
 8008e24:	0038      	movs	r0, r7
 8008e26:	9905      	ldr	r1, [sp, #20]
 8008e28:	f000 f8ca 	bl	8008fc0 <__multadd>
 8008e2c:	9005      	str	r0, [sp, #20]
 8008e2e:	e7eb      	b.n	8008e08 <_dtoa_r+0xb90>
 8008e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e32:	2001      	movs	r0, #1
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	dd00      	ble.n	8008e3a <_dtoa_r+0xbc2>
 8008e38:	0018      	movs	r0, r3
 8008e3a:	2400      	movs	r4, #0
 8008e3c:	9b06      	ldr	r3, [sp, #24]
 8008e3e:	181b      	adds	r3, r3, r0
 8008e40:	9308      	str	r3, [sp, #32]
 8008e42:	9905      	ldr	r1, [sp, #20]
 8008e44:	2201      	movs	r2, #1
 8008e46:	0038      	movs	r0, r7
 8008e48:	f000 fa68 	bl	800931c <__lshift>
 8008e4c:	0031      	movs	r1, r6
 8008e4e:	9005      	str	r0, [sp, #20]
 8008e50:	f000 fad2 	bl	80093f8 <__mcmp>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	dc9b      	bgt.n	8008d90 <_dtoa_r+0xb18>
 8008e58:	d102      	bne.n	8008e60 <_dtoa_r+0xbe8>
 8008e5a:	9b07      	ldr	r3, [sp, #28]
 8008e5c:	07db      	lsls	r3, r3, #31
 8008e5e:	d497      	bmi.n	8008d90 <_dtoa_r+0xb18>
 8008e60:	9b08      	ldr	r3, [sp, #32]
 8008e62:	9308      	str	r3, [sp, #32]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	781a      	ldrb	r2, [r3, #0]
 8008e68:	2a30      	cmp	r2, #48	; 0x30
 8008e6a:	d0fa      	beq.n	8008e62 <_dtoa_r+0xbea>
 8008e6c:	e6db      	b.n	8008c26 <_dtoa_r+0x9ae>
 8008e6e:	9a06      	ldr	r2, [sp, #24]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d18e      	bne.n	8008d92 <_dtoa_r+0xb1a>
 8008e74:	9b02      	ldr	r3, [sp, #8]
 8008e76:	3301      	adds	r3, #1
 8008e78:	9302      	str	r3, [sp, #8]
 8008e7a:	2331      	movs	r3, #49	; 0x31
 8008e7c:	e799      	b.n	8008db2 <_dtoa_r+0xb3a>
 8008e7e:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <_dtoa_r+0xc2c>)
 8008e80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008e82:	9306      	str	r3, [sp, #24]
 8008e84:	4b08      	ldr	r3, [pc, #32]	; (8008ea8 <_dtoa_r+0xc30>)
 8008e86:	2a00      	cmp	r2, #0
 8008e88:	d001      	beq.n	8008e8e <_dtoa_r+0xc16>
 8008e8a:	f7ff fa3f 	bl	800830c <_dtoa_r+0x94>
 8008e8e:	f7ff fa3f 	bl	8008310 <_dtoa_r+0x98>
 8008e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	dcb6      	bgt.n	8008e06 <_dtoa_r+0xb8e>
 8008e98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	dd00      	ble.n	8008ea0 <_dtoa_r+0xc28>
 8008e9e:	e6ac      	b.n	8008bfa <_dtoa_r+0x982>
 8008ea0:	e7b1      	b.n	8008e06 <_dtoa_r+0xb8e>
 8008ea2:	46c0      	nop			; (mov r8, r8)
 8008ea4:	0800a638 	.word	0x0800a638
 8008ea8:	0800a640 	.word	0x0800a640

08008eac <_localeconv_r>:
 8008eac:	4800      	ldr	r0, [pc, #0]	; (8008eb0 <_localeconv_r+0x4>)
 8008eae:	4770      	bx	lr
 8008eb0:	20000160 	.word	0x20000160

08008eb4 <malloc>:
 8008eb4:	b510      	push	{r4, lr}
 8008eb6:	4b03      	ldr	r3, [pc, #12]	; (8008ec4 <malloc+0x10>)
 8008eb8:	0001      	movs	r1, r0
 8008eba:	6818      	ldr	r0, [r3, #0]
 8008ebc:	f000 fc4c 	bl	8009758 <_malloc_r>
 8008ec0:	bd10      	pop	{r4, pc}
 8008ec2:	46c0      	nop			; (mov r8, r8)
 8008ec4:	2000000c 	.word	0x2000000c

08008ec8 <memchr>:
 8008ec8:	b2c9      	uxtb	r1, r1
 8008eca:	1882      	adds	r2, r0, r2
 8008ecc:	4290      	cmp	r0, r2
 8008ece:	d101      	bne.n	8008ed4 <memchr+0xc>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	4770      	bx	lr
 8008ed4:	7803      	ldrb	r3, [r0, #0]
 8008ed6:	428b      	cmp	r3, r1
 8008ed8:	d0fb      	beq.n	8008ed2 <memchr+0xa>
 8008eda:	3001      	adds	r0, #1
 8008edc:	e7f6      	b.n	8008ecc <memchr+0x4>

08008ede <memcpy>:
 8008ede:	2300      	movs	r3, #0
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d100      	bne.n	8008ee8 <memcpy+0xa>
 8008ee6:	bd10      	pop	{r4, pc}
 8008ee8:	5ccc      	ldrb	r4, [r1, r3]
 8008eea:	54c4      	strb	r4, [r0, r3]
 8008eec:	3301      	adds	r3, #1
 8008eee:	e7f8      	b.n	8008ee2 <memcpy+0x4>

08008ef0 <_Balloc>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ef4:	0006      	movs	r6, r0
 8008ef6:	000c      	movs	r4, r1
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	d10e      	bne.n	8008f1a <_Balloc+0x2a>
 8008efc:	2010      	movs	r0, #16
 8008efe:	f7ff ffd9 	bl	8008eb4 <malloc>
 8008f02:	1e02      	subs	r2, r0, #0
 8008f04:	6270      	str	r0, [r6, #36]	; 0x24
 8008f06:	d104      	bne.n	8008f12 <_Balloc+0x22>
 8008f08:	2166      	movs	r1, #102	; 0x66
 8008f0a:	4b19      	ldr	r3, [pc, #100]	; (8008f70 <_Balloc+0x80>)
 8008f0c:	4819      	ldr	r0, [pc, #100]	; (8008f74 <_Balloc+0x84>)
 8008f0e:	f000 fcab 	bl	8009868 <__assert_func>
 8008f12:	6045      	str	r5, [r0, #4]
 8008f14:	6085      	str	r5, [r0, #8]
 8008f16:	6005      	str	r5, [r0, #0]
 8008f18:	60c5      	str	r5, [r0, #12]
 8008f1a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008f1c:	68eb      	ldr	r3, [r5, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d013      	beq.n	8008f4a <_Balloc+0x5a>
 8008f22:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008f24:	00a2      	lsls	r2, r4, #2
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	189b      	adds	r3, r3, r2
 8008f2a:	6818      	ldr	r0, [r3, #0]
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d118      	bne.n	8008f62 <_Balloc+0x72>
 8008f30:	2101      	movs	r1, #1
 8008f32:	000d      	movs	r5, r1
 8008f34:	40a5      	lsls	r5, r4
 8008f36:	1d6a      	adds	r2, r5, #5
 8008f38:	0030      	movs	r0, r6
 8008f3a:	0092      	lsls	r2, r2, #2
 8008f3c:	f000 fb74 	bl	8009628 <_calloc_r>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d00c      	beq.n	8008f5e <_Balloc+0x6e>
 8008f44:	6044      	str	r4, [r0, #4]
 8008f46:	6085      	str	r5, [r0, #8]
 8008f48:	e00d      	b.n	8008f66 <_Balloc+0x76>
 8008f4a:	2221      	movs	r2, #33	; 0x21
 8008f4c:	2104      	movs	r1, #4
 8008f4e:	0030      	movs	r0, r6
 8008f50:	f000 fb6a 	bl	8009628 <_calloc_r>
 8008f54:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008f56:	60e8      	str	r0, [r5, #12]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1e1      	bne.n	8008f22 <_Balloc+0x32>
 8008f5e:	2000      	movs	r0, #0
 8008f60:	bd70      	pop	{r4, r5, r6, pc}
 8008f62:	6802      	ldr	r2, [r0, #0]
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	2300      	movs	r3, #0
 8008f68:	6103      	str	r3, [r0, #16]
 8008f6a:	60c3      	str	r3, [r0, #12]
 8008f6c:	e7f8      	b.n	8008f60 <_Balloc+0x70>
 8008f6e:	46c0      	nop			; (mov r8, r8)
 8008f70:	0800a645 	.word	0x0800a645
 8008f74:	0800a6c8 	.word	0x0800a6c8

08008f78 <_Bfree>:
 8008f78:	b570      	push	{r4, r5, r6, lr}
 8008f7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f7c:	0005      	movs	r5, r0
 8008f7e:	000c      	movs	r4, r1
 8008f80:	2e00      	cmp	r6, #0
 8008f82:	d10e      	bne.n	8008fa2 <_Bfree+0x2a>
 8008f84:	2010      	movs	r0, #16
 8008f86:	f7ff ff95 	bl	8008eb4 <malloc>
 8008f8a:	1e02      	subs	r2, r0, #0
 8008f8c:	6268      	str	r0, [r5, #36]	; 0x24
 8008f8e:	d104      	bne.n	8008f9a <_Bfree+0x22>
 8008f90:	218a      	movs	r1, #138	; 0x8a
 8008f92:	4b09      	ldr	r3, [pc, #36]	; (8008fb8 <_Bfree+0x40>)
 8008f94:	4809      	ldr	r0, [pc, #36]	; (8008fbc <_Bfree+0x44>)
 8008f96:	f000 fc67 	bl	8009868 <__assert_func>
 8008f9a:	6046      	str	r6, [r0, #4]
 8008f9c:	6086      	str	r6, [r0, #8]
 8008f9e:	6006      	str	r6, [r0, #0]
 8008fa0:	60c6      	str	r6, [r0, #12]
 8008fa2:	2c00      	cmp	r4, #0
 8008fa4:	d007      	beq.n	8008fb6 <_Bfree+0x3e>
 8008fa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fa8:	6862      	ldr	r2, [r4, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	0092      	lsls	r2, r2, #2
 8008fae:	189b      	adds	r3, r3, r2
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	6022      	str	r2, [r4, #0]
 8008fb4:	601c      	str	r4, [r3, #0]
 8008fb6:	bd70      	pop	{r4, r5, r6, pc}
 8008fb8:	0800a645 	.word	0x0800a645
 8008fbc:	0800a6c8 	.word	0x0800a6c8

08008fc0 <__multadd>:
 8008fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fc2:	000e      	movs	r6, r1
 8008fc4:	9001      	str	r0, [sp, #4]
 8008fc6:	000c      	movs	r4, r1
 8008fc8:	001d      	movs	r5, r3
 8008fca:	2000      	movs	r0, #0
 8008fcc:	690f      	ldr	r7, [r1, #16]
 8008fce:	3614      	adds	r6, #20
 8008fd0:	6833      	ldr	r3, [r6, #0]
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	b299      	uxth	r1, r3
 8008fd6:	4351      	muls	r1, r2
 8008fd8:	0c1b      	lsrs	r3, r3, #16
 8008fda:	4353      	muls	r3, r2
 8008fdc:	1949      	adds	r1, r1, r5
 8008fde:	0c0d      	lsrs	r5, r1, #16
 8008fe0:	195b      	adds	r3, r3, r5
 8008fe2:	0c1d      	lsrs	r5, r3, #16
 8008fe4:	b289      	uxth	r1, r1
 8008fe6:	041b      	lsls	r3, r3, #16
 8008fe8:	185b      	adds	r3, r3, r1
 8008fea:	c608      	stmia	r6!, {r3}
 8008fec:	4287      	cmp	r7, r0
 8008fee:	dcef      	bgt.n	8008fd0 <__multadd+0x10>
 8008ff0:	2d00      	cmp	r5, #0
 8008ff2:	d022      	beq.n	800903a <__multadd+0x7a>
 8008ff4:	68a3      	ldr	r3, [r4, #8]
 8008ff6:	42bb      	cmp	r3, r7
 8008ff8:	dc19      	bgt.n	800902e <__multadd+0x6e>
 8008ffa:	6863      	ldr	r3, [r4, #4]
 8008ffc:	9801      	ldr	r0, [sp, #4]
 8008ffe:	1c59      	adds	r1, r3, #1
 8009000:	f7ff ff76 	bl	8008ef0 <_Balloc>
 8009004:	1e06      	subs	r6, r0, #0
 8009006:	d105      	bne.n	8009014 <__multadd+0x54>
 8009008:	0002      	movs	r2, r0
 800900a:	21b5      	movs	r1, #181	; 0xb5
 800900c:	4b0c      	ldr	r3, [pc, #48]	; (8009040 <__multadd+0x80>)
 800900e:	480d      	ldr	r0, [pc, #52]	; (8009044 <__multadd+0x84>)
 8009010:	f000 fc2a 	bl	8009868 <__assert_func>
 8009014:	0021      	movs	r1, r4
 8009016:	6923      	ldr	r3, [r4, #16]
 8009018:	310c      	adds	r1, #12
 800901a:	1c9a      	adds	r2, r3, #2
 800901c:	0092      	lsls	r2, r2, #2
 800901e:	300c      	adds	r0, #12
 8009020:	f7ff ff5d 	bl	8008ede <memcpy>
 8009024:	0021      	movs	r1, r4
 8009026:	9801      	ldr	r0, [sp, #4]
 8009028:	f7ff ffa6 	bl	8008f78 <_Bfree>
 800902c:	0034      	movs	r4, r6
 800902e:	1d3b      	adds	r3, r7, #4
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	18e3      	adds	r3, r4, r3
 8009034:	605d      	str	r5, [r3, #4]
 8009036:	1c7b      	adds	r3, r7, #1
 8009038:	6123      	str	r3, [r4, #16]
 800903a:	0020      	movs	r0, r4
 800903c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800903e:	46c0      	nop			; (mov r8, r8)
 8009040:	0800a6b7 	.word	0x0800a6b7
 8009044:	0800a6c8 	.word	0x0800a6c8

08009048 <__hi0bits>:
 8009048:	0003      	movs	r3, r0
 800904a:	0c02      	lsrs	r2, r0, #16
 800904c:	2000      	movs	r0, #0
 800904e:	4282      	cmp	r2, r0
 8009050:	d101      	bne.n	8009056 <__hi0bits+0xe>
 8009052:	041b      	lsls	r3, r3, #16
 8009054:	3010      	adds	r0, #16
 8009056:	0e1a      	lsrs	r2, r3, #24
 8009058:	d101      	bne.n	800905e <__hi0bits+0x16>
 800905a:	3008      	adds	r0, #8
 800905c:	021b      	lsls	r3, r3, #8
 800905e:	0f1a      	lsrs	r2, r3, #28
 8009060:	d101      	bne.n	8009066 <__hi0bits+0x1e>
 8009062:	3004      	adds	r0, #4
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	0f9a      	lsrs	r2, r3, #30
 8009068:	d101      	bne.n	800906e <__hi0bits+0x26>
 800906a:	3002      	adds	r0, #2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	2b00      	cmp	r3, #0
 8009070:	db03      	blt.n	800907a <__hi0bits+0x32>
 8009072:	3001      	adds	r0, #1
 8009074:	005b      	lsls	r3, r3, #1
 8009076:	d400      	bmi.n	800907a <__hi0bits+0x32>
 8009078:	2020      	movs	r0, #32
 800907a:	4770      	bx	lr

0800907c <__lo0bits>:
 800907c:	6803      	ldr	r3, [r0, #0]
 800907e:	0002      	movs	r2, r0
 8009080:	2107      	movs	r1, #7
 8009082:	0018      	movs	r0, r3
 8009084:	4008      	ands	r0, r1
 8009086:	420b      	tst	r3, r1
 8009088:	d00d      	beq.n	80090a6 <__lo0bits+0x2a>
 800908a:	3906      	subs	r1, #6
 800908c:	2000      	movs	r0, #0
 800908e:	420b      	tst	r3, r1
 8009090:	d105      	bne.n	800909e <__lo0bits+0x22>
 8009092:	3002      	adds	r0, #2
 8009094:	4203      	tst	r3, r0
 8009096:	d003      	beq.n	80090a0 <__lo0bits+0x24>
 8009098:	40cb      	lsrs	r3, r1
 800909a:	0008      	movs	r0, r1
 800909c:	6013      	str	r3, [r2, #0]
 800909e:	4770      	bx	lr
 80090a0:	089b      	lsrs	r3, r3, #2
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	e7fb      	b.n	800909e <__lo0bits+0x22>
 80090a6:	b299      	uxth	r1, r3
 80090a8:	2900      	cmp	r1, #0
 80090aa:	d101      	bne.n	80090b0 <__lo0bits+0x34>
 80090ac:	2010      	movs	r0, #16
 80090ae:	0c1b      	lsrs	r3, r3, #16
 80090b0:	b2d9      	uxtb	r1, r3
 80090b2:	2900      	cmp	r1, #0
 80090b4:	d101      	bne.n	80090ba <__lo0bits+0x3e>
 80090b6:	3008      	adds	r0, #8
 80090b8:	0a1b      	lsrs	r3, r3, #8
 80090ba:	0719      	lsls	r1, r3, #28
 80090bc:	d101      	bne.n	80090c2 <__lo0bits+0x46>
 80090be:	3004      	adds	r0, #4
 80090c0:	091b      	lsrs	r3, r3, #4
 80090c2:	0799      	lsls	r1, r3, #30
 80090c4:	d101      	bne.n	80090ca <__lo0bits+0x4e>
 80090c6:	3002      	adds	r0, #2
 80090c8:	089b      	lsrs	r3, r3, #2
 80090ca:	07d9      	lsls	r1, r3, #31
 80090cc:	d4e9      	bmi.n	80090a2 <__lo0bits+0x26>
 80090ce:	3001      	adds	r0, #1
 80090d0:	085b      	lsrs	r3, r3, #1
 80090d2:	d1e6      	bne.n	80090a2 <__lo0bits+0x26>
 80090d4:	2020      	movs	r0, #32
 80090d6:	e7e2      	b.n	800909e <__lo0bits+0x22>

080090d8 <__i2b>:
 80090d8:	b510      	push	{r4, lr}
 80090da:	000c      	movs	r4, r1
 80090dc:	2101      	movs	r1, #1
 80090de:	f7ff ff07 	bl	8008ef0 <_Balloc>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d106      	bne.n	80090f4 <__i2b+0x1c>
 80090e6:	21a0      	movs	r1, #160	; 0xa0
 80090e8:	0002      	movs	r2, r0
 80090ea:	4b04      	ldr	r3, [pc, #16]	; (80090fc <__i2b+0x24>)
 80090ec:	4804      	ldr	r0, [pc, #16]	; (8009100 <__i2b+0x28>)
 80090ee:	0049      	lsls	r1, r1, #1
 80090f0:	f000 fbba 	bl	8009868 <__assert_func>
 80090f4:	2301      	movs	r3, #1
 80090f6:	6144      	str	r4, [r0, #20]
 80090f8:	6103      	str	r3, [r0, #16]
 80090fa:	bd10      	pop	{r4, pc}
 80090fc:	0800a6b7 	.word	0x0800a6b7
 8009100:	0800a6c8 	.word	0x0800a6c8

08009104 <__multiply>:
 8009104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009106:	690b      	ldr	r3, [r1, #16]
 8009108:	0014      	movs	r4, r2
 800910a:	6912      	ldr	r2, [r2, #16]
 800910c:	000d      	movs	r5, r1
 800910e:	b089      	sub	sp, #36	; 0x24
 8009110:	4293      	cmp	r3, r2
 8009112:	da01      	bge.n	8009118 <__multiply+0x14>
 8009114:	0025      	movs	r5, r4
 8009116:	000c      	movs	r4, r1
 8009118:	692f      	ldr	r7, [r5, #16]
 800911a:	6926      	ldr	r6, [r4, #16]
 800911c:	6869      	ldr	r1, [r5, #4]
 800911e:	19bb      	adds	r3, r7, r6
 8009120:	9302      	str	r3, [sp, #8]
 8009122:	68ab      	ldr	r3, [r5, #8]
 8009124:	19ba      	adds	r2, r7, r6
 8009126:	4293      	cmp	r3, r2
 8009128:	da00      	bge.n	800912c <__multiply+0x28>
 800912a:	3101      	adds	r1, #1
 800912c:	f7ff fee0 	bl	8008ef0 <_Balloc>
 8009130:	9001      	str	r0, [sp, #4]
 8009132:	2800      	cmp	r0, #0
 8009134:	d106      	bne.n	8009144 <__multiply+0x40>
 8009136:	215e      	movs	r1, #94	; 0x5e
 8009138:	0002      	movs	r2, r0
 800913a:	4b48      	ldr	r3, [pc, #288]	; (800925c <__multiply+0x158>)
 800913c:	4848      	ldr	r0, [pc, #288]	; (8009260 <__multiply+0x15c>)
 800913e:	31ff      	adds	r1, #255	; 0xff
 8009140:	f000 fb92 	bl	8009868 <__assert_func>
 8009144:	9b01      	ldr	r3, [sp, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	3314      	adds	r3, #20
 800914a:	469c      	mov	ip, r3
 800914c:	19bb      	adds	r3, r7, r6
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4463      	add	r3, ip
 8009152:	9303      	str	r3, [sp, #12]
 8009154:	4663      	mov	r3, ip
 8009156:	9903      	ldr	r1, [sp, #12]
 8009158:	428b      	cmp	r3, r1
 800915a:	d32c      	bcc.n	80091b6 <__multiply+0xb2>
 800915c:	002b      	movs	r3, r5
 800915e:	0022      	movs	r2, r4
 8009160:	3314      	adds	r3, #20
 8009162:	00bf      	lsls	r7, r7, #2
 8009164:	3214      	adds	r2, #20
 8009166:	9306      	str	r3, [sp, #24]
 8009168:	00b6      	lsls	r6, r6, #2
 800916a:	19db      	adds	r3, r3, r7
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	1993      	adds	r3, r2, r6
 8009170:	9307      	str	r3, [sp, #28]
 8009172:	2304      	movs	r3, #4
 8009174:	9305      	str	r3, [sp, #20]
 8009176:	002b      	movs	r3, r5
 8009178:	9904      	ldr	r1, [sp, #16]
 800917a:	3315      	adds	r3, #21
 800917c:	9200      	str	r2, [sp, #0]
 800917e:	4299      	cmp	r1, r3
 8009180:	d305      	bcc.n	800918e <__multiply+0x8a>
 8009182:	1b4b      	subs	r3, r1, r5
 8009184:	3b15      	subs	r3, #21
 8009186:	089b      	lsrs	r3, r3, #2
 8009188:	3301      	adds	r3, #1
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	9305      	str	r3, [sp, #20]
 800918e:	9b07      	ldr	r3, [sp, #28]
 8009190:	9a00      	ldr	r2, [sp, #0]
 8009192:	429a      	cmp	r2, r3
 8009194:	d311      	bcc.n	80091ba <__multiply+0xb6>
 8009196:	9b02      	ldr	r3, [sp, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	dd06      	ble.n	80091aa <__multiply+0xa6>
 800919c:	9b03      	ldr	r3, [sp, #12]
 800919e:	3b04      	subs	r3, #4
 80091a0:	9303      	str	r3, [sp, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d053      	beq.n	8009252 <__multiply+0x14e>
 80091aa:	9b01      	ldr	r3, [sp, #4]
 80091ac:	9a02      	ldr	r2, [sp, #8]
 80091ae:	0018      	movs	r0, r3
 80091b0:	611a      	str	r2, [r3, #16]
 80091b2:	b009      	add	sp, #36	; 0x24
 80091b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091b6:	c304      	stmia	r3!, {r2}
 80091b8:	e7cd      	b.n	8009156 <__multiply+0x52>
 80091ba:	9b00      	ldr	r3, [sp, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	b298      	uxth	r0, r3
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d01b      	beq.n	80091fc <__multiply+0xf8>
 80091c4:	4667      	mov	r7, ip
 80091c6:	2400      	movs	r4, #0
 80091c8:	9e06      	ldr	r6, [sp, #24]
 80091ca:	ce02      	ldmia	r6!, {r1}
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	b28b      	uxth	r3, r1
 80091d0:	4343      	muls	r3, r0
 80091d2:	b292      	uxth	r2, r2
 80091d4:	189b      	adds	r3, r3, r2
 80091d6:	191b      	adds	r3, r3, r4
 80091d8:	0c0c      	lsrs	r4, r1, #16
 80091da:	4344      	muls	r4, r0
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	0c11      	lsrs	r1, r2, #16
 80091e0:	1861      	adds	r1, r4, r1
 80091e2:	0c1c      	lsrs	r4, r3, #16
 80091e4:	1909      	adds	r1, r1, r4
 80091e6:	0c0c      	lsrs	r4, r1, #16
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	0409      	lsls	r1, r1, #16
 80091ec:	430b      	orrs	r3, r1
 80091ee:	c708      	stmia	r7!, {r3}
 80091f0:	9b04      	ldr	r3, [sp, #16]
 80091f2:	42b3      	cmp	r3, r6
 80091f4:	d8e9      	bhi.n	80091ca <__multiply+0xc6>
 80091f6:	4663      	mov	r3, ip
 80091f8:	9a05      	ldr	r2, [sp, #20]
 80091fa:	509c      	str	r4, [r3, r2]
 80091fc:	9b00      	ldr	r3, [sp, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	0c1e      	lsrs	r6, r3, #16
 8009202:	d020      	beq.n	8009246 <__multiply+0x142>
 8009204:	4663      	mov	r3, ip
 8009206:	002c      	movs	r4, r5
 8009208:	4660      	mov	r0, ip
 800920a:	2700      	movs	r7, #0
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3414      	adds	r4, #20
 8009210:	6822      	ldr	r2, [r4, #0]
 8009212:	b29b      	uxth	r3, r3
 8009214:	b291      	uxth	r1, r2
 8009216:	4371      	muls	r1, r6
 8009218:	6802      	ldr	r2, [r0, #0]
 800921a:	0c12      	lsrs	r2, r2, #16
 800921c:	1889      	adds	r1, r1, r2
 800921e:	19cf      	adds	r7, r1, r7
 8009220:	0439      	lsls	r1, r7, #16
 8009222:	430b      	orrs	r3, r1
 8009224:	6003      	str	r3, [r0, #0]
 8009226:	cc02      	ldmia	r4!, {r1}
 8009228:	6843      	ldr	r3, [r0, #4]
 800922a:	0c09      	lsrs	r1, r1, #16
 800922c:	4371      	muls	r1, r6
 800922e:	b29b      	uxth	r3, r3
 8009230:	0c3f      	lsrs	r7, r7, #16
 8009232:	18cb      	adds	r3, r1, r3
 8009234:	9a04      	ldr	r2, [sp, #16]
 8009236:	19db      	adds	r3, r3, r7
 8009238:	0c1f      	lsrs	r7, r3, #16
 800923a:	3004      	adds	r0, #4
 800923c:	42a2      	cmp	r2, r4
 800923e:	d8e7      	bhi.n	8009210 <__multiply+0x10c>
 8009240:	4662      	mov	r2, ip
 8009242:	9905      	ldr	r1, [sp, #20]
 8009244:	5053      	str	r3, [r2, r1]
 8009246:	9b00      	ldr	r3, [sp, #0]
 8009248:	3304      	adds	r3, #4
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	2304      	movs	r3, #4
 800924e:	449c      	add	ip, r3
 8009250:	e79d      	b.n	800918e <__multiply+0x8a>
 8009252:	9b02      	ldr	r3, [sp, #8]
 8009254:	3b01      	subs	r3, #1
 8009256:	9302      	str	r3, [sp, #8]
 8009258:	e79d      	b.n	8009196 <__multiply+0x92>
 800925a:	46c0      	nop			; (mov r8, r8)
 800925c:	0800a6b7 	.word	0x0800a6b7
 8009260:	0800a6c8 	.word	0x0800a6c8

08009264 <__pow5mult>:
 8009264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009266:	2303      	movs	r3, #3
 8009268:	0015      	movs	r5, r2
 800926a:	0007      	movs	r7, r0
 800926c:	000e      	movs	r6, r1
 800926e:	401a      	ands	r2, r3
 8009270:	421d      	tst	r5, r3
 8009272:	d008      	beq.n	8009286 <__pow5mult+0x22>
 8009274:	4925      	ldr	r1, [pc, #148]	; (800930c <__pow5mult+0xa8>)
 8009276:	3a01      	subs	r2, #1
 8009278:	0092      	lsls	r2, r2, #2
 800927a:	5852      	ldr	r2, [r2, r1]
 800927c:	2300      	movs	r3, #0
 800927e:	0031      	movs	r1, r6
 8009280:	f7ff fe9e 	bl	8008fc0 <__multadd>
 8009284:	0006      	movs	r6, r0
 8009286:	10ad      	asrs	r5, r5, #2
 8009288:	d03d      	beq.n	8009306 <__pow5mult+0xa2>
 800928a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800928c:	2c00      	cmp	r4, #0
 800928e:	d10f      	bne.n	80092b0 <__pow5mult+0x4c>
 8009290:	2010      	movs	r0, #16
 8009292:	f7ff fe0f 	bl	8008eb4 <malloc>
 8009296:	1e02      	subs	r2, r0, #0
 8009298:	6278      	str	r0, [r7, #36]	; 0x24
 800929a:	d105      	bne.n	80092a8 <__pow5mult+0x44>
 800929c:	21d7      	movs	r1, #215	; 0xd7
 800929e:	4b1c      	ldr	r3, [pc, #112]	; (8009310 <__pow5mult+0xac>)
 80092a0:	481c      	ldr	r0, [pc, #112]	; (8009314 <__pow5mult+0xb0>)
 80092a2:	0049      	lsls	r1, r1, #1
 80092a4:	f000 fae0 	bl	8009868 <__assert_func>
 80092a8:	6044      	str	r4, [r0, #4]
 80092aa:	6084      	str	r4, [r0, #8]
 80092ac:	6004      	str	r4, [r0, #0]
 80092ae:	60c4      	str	r4, [r0, #12]
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	689c      	ldr	r4, [r3, #8]
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	2c00      	cmp	r4, #0
 80092b8:	d108      	bne.n	80092cc <__pow5mult+0x68>
 80092ba:	0038      	movs	r0, r7
 80092bc:	4916      	ldr	r1, [pc, #88]	; (8009318 <__pow5mult+0xb4>)
 80092be:	f7ff ff0b 	bl	80090d8 <__i2b>
 80092c2:	9b01      	ldr	r3, [sp, #4]
 80092c4:	0004      	movs	r4, r0
 80092c6:	6098      	str	r0, [r3, #8]
 80092c8:	2300      	movs	r3, #0
 80092ca:	6003      	str	r3, [r0, #0]
 80092cc:	2301      	movs	r3, #1
 80092ce:	421d      	tst	r5, r3
 80092d0:	d00a      	beq.n	80092e8 <__pow5mult+0x84>
 80092d2:	0031      	movs	r1, r6
 80092d4:	0022      	movs	r2, r4
 80092d6:	0038      	movs	r0, r7
 80092d8:	f7ff ff14 	bl	8009104 <__multiply>
 80092dc:	0031      	movs	r1, r6
 80092de:	9001      	str	r0, [sp, #4]
 80092e0:	0038      	movs	r0, r7
 80092e2:	f7ff fe49 	bl	8008f78 <_Bfree>
 80092e6:	9e01      	ldr	r6, [sp, #4]
 80092e8:	106d      	asrs	r5, r5, #1
 80092ea:	d00c      	beq.n	8009306 <__pow5mult+0xa2>
 80092ec:	6820      	ldr	r0, [r4, #0]
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d107      	bne.n	8009302 <__pow5mult+0x9e>
 80092f2:	0022      	movs	r2, r4
 80092f4:	0021      	movs	r1, r4
 80092f6:	0038      	movs	r0, r7
 80092f8:	f7ff ff04 	bl	8009104 <__multiply>
 80092fc:	2300      	movs	r3, #0
 80092fe:	6020      	str	r0, [r4, #0]
 8009300:	6003      	str	r3, [r0, #0]
 8009302:	0004      	movs	r4, r0
 8009304:	e7e2      	b.n	80092cc <__pow5mult+0x68>
 8009306:	0030      	movs	r0, r6
 8009308:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800930a:	46c0      	nop			; (mov r8, r8)
 800930c:	0800a818 	.word	0x0800a818
 8009310:	0800a645 	.word	0x0800a645
 8009314:	0800a6c8 	.word	0x0800a6c8
 8009318:	00000271 	.word	0x00000271

0800931c <__lshift>:
 800931c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800931e:	000c      	movs	r4, r1
 8009320:	0017      	movs	r7, r2
 8009322:	6923      	ldr	r3, [r4, #16]
 8009324:	1155      	asrs	r5, r2, #5
 8009326:	b087      	sub	sp, #28
 8009328:	18eb      	adds	r3, r5, r3
 800932a:	9302      	str	r3, [sp, #8]
 800932c:	3301      	adds	r3, #1
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	6849      	ldr	r1, [r1, #4]
 8009332:	68a3      	ldr	r3, [r4, #8]
 8009334:	9004      	str	r0, [sp, #16]
 8009336:	9a01      	ldr	r2, [sp, #4]
 8009338:	4293      	cmp	r3, r2
 800933a:	db10      	blt.n	800935e <__lshift+0x42>
 800933c:	9804      	ldr	r0, [sp, #16]
 800933e:	f7ff fdd7 	bl	8008ef0 <_Balloc>
 8009342:	2300      	movs	r3, #0
 8009344:	0002      	movs	r2, r0
 8009346:	0006      	movs	r6, r0
 8009348:	0019      	movs	r1, r3
 800934a:	3214      	adds	r2, #20
 800934c:	4298      	cmp	r0, r3
 800934e:	d10c      	bne.n	800936a <__lshift+0x4e>
 8009350:	21da      	movs	r1, #218	; 0xda
 8009352:	0002      	movs	r2, r0
 8009354:	4b26      	ldr	r3, [pc, #152]	; (80093f0 <__lshift+0xd4>)
 8009356:	4827      	ldr	r0, [pc, #156]	; (80093f4 <__lshift+0xd8>)
 8009358:	31ff      	adds	r1, #255	; 0xff
 800935a:	f000 fa85 	bl	8009868 <__assert_func>
 800935e:	3101      	adds	r1, #1
 8009360:	005b      	lsls	r3, r3, #1
 8009362:	e7e8      	b.n	8009336 <__lshift+0x1a>
 8009364:	0098      	lsls	r0, r3, #2
 8009366:	5011      	str	r1, [r2, r0]
 8009368:	3301      	adds	r3, #1
 800936a:	42ab      	cmp	r3, r5
 800936c:	dbfa      	blt.n	8009364 <__lshift+0x48>
 800936e:	43eb      	mvns	r3, r5
 8009370:	17db      	asrs	r3, r3, #31
 8009372:	401d      	ands	r5, r3
 8009374:	211f      	movs	r1, #31
 8009376:	0023      	movs	r3, r4
 8009378:	0038      	movs	r0, r7
 800937a:	00ad      	lsls	r5, r5, #2
 800937c:	1955      	adds	r5, r2, r5
 800937e:	6922      	ldr	r2, [r4, #16]
 8009380:	3314      	adds	r3, #20
 8009382:	0092      	lsls	r2, r2, #2
 8009384:	4008      	ands	r0, r1
 8009386:	4684      	mov	ip, r0
 8009388:	189a      	adds	r2, r3, r2
 800938a:	420f      	tst	r7, r1
 800938c:	d02a      	beq.n	80093e4 <__lshift+0xc8>
 800938e:	3101      	adds	r1, #1
 8009390:	1a09      	subs	r1, r1, r0
 8009392:	9105      	str	r1, [sp, #20]
 8009394:	2100      	movs	r1, #0
 8009396:	9503      	str	r5, [sp, #12]
 8009398:	4667      	mov	r7, ip
 800939a:	6818      	ldr	r0, [r3, #0]
 800939c:	40b8      	lsls	r0, r7
 800939e:	4301      	orrs	r1, r0
 80093a0:	9803      	ldr	r0, [sp, #12]
 80093a2:	c002      	stmia	r0!, {r1}
 80093a4:	cb02      	ldmia	r3!, {r1}
 80093a6:	9003      	str	r0, [sp, #12]
 80093a8:	9805      	ldr	r0, [sp, #20]
 80093aa:	40c1      	lsrs	r1, r0
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d8f3      	bhi.n	8009398 <__lshift+0x7c>
 80093b0:	0020      	movs	r0, r4
 80093b2:	3015      	adds	r0, #21
 80093b4:	2304      	movs	r3, #4
 80093b6:	4282      	cmp	r2, r0
 80093b8:	d304      	bcc.n	80093c4 <__lshift+0xa8>
 80093ba:	1b13      	subs	r3, r2, r4
 80093bc:	3b15      	subs	r3, #21
 80093be:	089b      	lsrs	r3, r3, #2
 80093c0:	3301      	adds	r3, #1
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	50e9      	str	r1, [r5, r3]
 80093c6:	2900      	cmp	r1, #0
 80093c8:	d002      	beq.n	80093d0 <__lshift+0xb4>
 80093ca:	9b02      	ldr	r3, [sp, #8]
 80093cc:	3302      	adds	r3, #2
 80093ce:	9301      	str	r3, [sp, #4]
 80093d0:	9b01      	ldr	r3, [sp, #4]
 80093d2:	9804      	ldr	r0, [sp, #16]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	0021      	movs	r1, r4
 80093d8:	6133      	str	r3, [r6, #16]
 80093da:	f7ff fdcd 	bl	8008f78 <_Bfree>
 80093de:	0030      	movs	r0, r6
 80093e0:	b007      	add	sp, #28
 80093e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e4:	cb02      	ldmia	r3!, {r1}
 80093e6:	c502      	stmia	r5!, {r1}
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d8fb      	bhi.n	80093e4 <__lshift+0xc8>
 80093ec:	e7f0      	b.n	80093d0 <__lshift+0xb4>
 80093ee:	46c0      	nop			; (mov r8, r8)
 80093f0:	0800a6b7 	.word	0x0800a6b7
 80093f4:	0800a6c8 	.word	0x0800a6c8

080093f8 <__mcmp>:
 80093f8:	6902      	ldr	r2, [r0, #16]
 80093fa:	690b      	ldr	r3, [r1, #16]
 80093fc:	b530      	push	{r4, r5, lr}
 80093fe:	0004      	movs	r4, r0
 8009400:	1ad0      	subs	r0, r2, r3
 8009402:	429a      	cmp	r2, r3
 8009404:	d10d      	bne.n	8009422 <__mcmp+0x2a>
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	3414      	adds	r4, #20
 800940a:	3114      	adds	r1, #20
 800940c:	18e2      	adds	r2, r4, r3
 800940e:	18c9      	adds	r1, r1, r3
 8009410:	3a04      	subs	r2, #4
 8009412:	3904      	subs	r1, #4
 8009414:	6815      	ldr	r5, [r2, #0]
 8009416:	680b      	ldr	r3, [r1, #0]
 8009418:	429d      	cmp	r5, r3
 800941a:	d003      	beq.n	8009424 <__mcmp+0x2c>
 800941c:	2001      	movs	r0, #1
 800941e:	429d      	cmp	r5, r3
 8009420:	d303      	bcc.n	800942a <__mcmp+0x32>
 8009422:	bd30      	pop	{r4, r5, pc}
 8009424:	4294      	cmp	r4, r2
 8009426:	d3f3      	bcc.n	8009410 <__mcmp+0x18>
 8009428:	e7fb      	b.n	8009422 <__mcmp+0x2a>
 800942a:	4240      	negs	r0, r0
 800942c:	e7f9      	b.n	8009422 <__mcmp+0x2a>
	...

08009430 <__mdiff>:
 8009430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009432:	000e      	movs	r6, r1
 8009434:	0007      	movs	r7, r0
 8009436:	0011      	movs	r1, r2
 8009438:	0030      	movs	r0, r6
 800943a:	b087      	sub	sp, #28
 800943c:	0014      	movs	r4, r2
 800943e:	f7ff ffdb 	bl	80093f8 <__mcmp>
 8009442:	1e05      	subs	r5, r0, #0
 8009444:	d110      	bne.n	8009468 <__mdiff+0x38>
 8009446:	0001      	movs	r1, r0
 8009448:	0038      	movs	r0, r7
 800944a:	f7ff fd51 	bl	8008ef0 <_Balloc>
 800944e:	1e02      	subs	r2, r0, #0
 8009450:	d104      	bne.n	800945c <__mdiff+0x2c>
 8009452:	4b40      	ldr	r3, [pc, #256]	; (8009554 <__mdiff+0x124>)
 8009454:	4940      	ldr	r1, [pc, #256]	; (8009558 <__mdiff+0x128>)
 8009456:	4841      	ldr	r0, [pc, #260]	; (800955c <__mdiff+0x12c>)
 8009458:	f000 fa06 	bl	8009868 <__assert_func>
 800945c:	2301      	movs	r3, #1
 800945e:	6145      	str	r5, [r0, #20]
 8009460:	6103      	str	r3, [r0, #16]
 8009462:	0010      	movs	r0, r2
 8009464:	b007      	add	sp, #28
 8009466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009468:	2301      	movs	r3, #1
 800946a:	9301      	str	r3, [sp, #4]
 800946c:	2800      	cmp	r0, #0
 800946e:	db04      	blt.n	800947a <__mdiff+0x4a>
 8009470:	0023      	movs	r3, r4
 8009472:	0034      	movs	r4, r6
 8009474:	001e      	movs	r6, r3
 8009476:	2300      	movs	r3, #0
 8009478:	9301      	str	r3, [sp, #4]
 800947a:	0038      	movs	r0, r7
 800947c:	6861      	ldr	r1, [r4, #4]
 800947e:	f7ff fd37 	bl	8008ef0 <_Balloc>
 8009482:	1e02      	subs	r2, r0, #0
 8009484:	d103      	bne.n	800948e <__mdiff+0x5e>
 8009486:	2190      	movs	r1, #144	; 0x90
 8009488:	4b32      	ldr	r3, [pc, #200]	; (8009554 <__mdiff+0x124>)
 800948a:	0089      	lsls	r1, r1, #2
 800948c:	e7e3      	b.n	8009456 <__mdiff+0x26>
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	2700      	movs	r7, #0
 8009492:	60c3      	str	r3, [r0, #12]
 8009494:	6920      	ldr	r0, [r4, #16]
 8009496:	3414      	adds	r4, #20
 8009498:	9401      	str	r4, [sp, #4]
 800949a:	9b01      	ldr	r3, [sp, #4]
 800949c:	0084      	lsls	r4, r0, #2
 800949e:	191b      	adds	r3, r3, r4
 80094a0:	0034      	movs	r4, r6
 80094a2:	9302      	str	r3, [sp, #8]
 80094a4:	6933      	ldr	r3, [r6, #16]
 80094a6:	3414      	adds	r4, #20
 80094a8:	0099      	lsls	r1, r3, #2
 80094aa:	1863      	adds	r3, r4, r1
 80094ac:	9303      	str	r3, [sp, #12]
 80094ae:	0013      	movs	r3, r2
 80094b0:	3314      	adds	r3, #20
 80094b2:	469c      	mov	ip, r3
 80094b4:	9305      	str	r3, [sp, #20]
 80094b6:	9b01      	ldr	r3, [sp, #4]
 80094b8:	9304      	str	r3, [sp, #16]
 80094ba:	9b04      	ldr	r3, [sp, #16]
 80094bc:	cc02      	ldmia	r4!, {r1}
 80094be:	cb20      	ldmia	r3!, {r5}
 80094c0:	9304      	str	r3, [sp, #16]
 80094c2:	b2ab      	uxth	r3, r5
 80094c4:	19df      	adds	r7, r3, r7
 80094c6:	b28b      	uxth	r3, r1
 80094c8:	1afb      	subs	r3, r7, r3
 80094ca:	0c09      	lsrs	r1, r1, #16
 80094cc:	0c2d      	lsrs	r5, r5, #16
 80094ce:	1a6d      	subs	r5, r5, r1
 80094d0:	1419      	asrs	r1, r3, #16
 80094d2:	186d      	adds	r5, r5, r1
 80094d4:	4661      	mov	r1, ip
 80094d6:	142f      	asrs	r7, r5, #16
 80094d8:	b29b      	uxth	r3, r3
 80094da:	042d      	lsls	r5, r5, #16
 80094dc:	432b      	orrs	r3, r5
 80094de:	c108      	stmia	r1!, {r3}
 80094e0:	9b03      	ldr	r3, [sp, #12]
 80094e2:	468c      	mov	ip, r1
 80094e4:	42a3      	cmp	r3, r4
 80094e6:	d8e8      	bhi.n	80094ba <__mdiff+0x8a>
 80094e8:	0031      	movs	r1, r6
 80094ea:	9c03      	ldr	r4, [sp, #12]
 80094ec:	3115      	adds	r1, #21
 80094ee:	2304      	movs	r3, #4
 80094f0:	428c      	cmp	r4, r1
 80094f2:	d304      	bcc.n	80094fe <__mdiff+0xce>
 80094f4:	1ba3      	subs	r3, r4, r6
 80094f6:	3b15      	subs	r3, #21
 80094f8:	089b      	lsrs	r3, r3, #2
 80094fa:	3301      	adds	r3, #1
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	9901      	ldr	r1, [sp, #4]
 8009500:	18cc      	adds	r4, r1, r3
 8009502:	9905      	ldr	r1, [sp, #20]
 8009504:	0026      	movs	r6, r4
 8009506:	18cb      	adds	r3, r1, r3
 8009508:	469c      	mov	ip, r3
 800950a:	9902      	ldr	r1, [sp, #8]
 800950c:	428e      	cmp	r6, r1
 800950e:	d310      	bcc.n	8009532 <__mdiff+0x102>
 8009510:	9e02      	ldr	r6, [sp, #8]
 8009512:	1ee1      	subs	r1, r4, #3
 8009514:	2500      	movs	r5, #0
 8009516:	428e      	cmp	r6, r1
 8009518:	d304      	bcc.n	8009524 <__mdiff+0xf4>
 800951a:	0031      	movs	r1, r6
 800951c:	3103      	adds	r1, #3
 800951e:	1b0c      	subs	r4, r1, r4
 8009520:	08a4      	lsrs	r4, r4, #2
 8009522:	00a5      	lsls	r5, r4, #2
 8009524:	195b      	adds	r3, r3, r5
 8009526:	3b04      	subs	r3, #4
 8009528:	6819      	ldr	r1, [r3, #0]
 800952a:	2900      	cmp	r1, #0
 800952c:	d00f      	beq.n	800954e <__mdiff+0x11e>
 800952e:	6110      	str	r0, [r2, #16]
 8009530:	e797      	b.n	8009462 <__mdiff+0x32>
 8009532:	ce02      	ldmia	r6!, {r1}
 8009534:	b28d      	uxth	r5, r1
 8009536:	19ed      	adds	r5, r5, r7
 8009538:	0c0f      	lsrs	r7, r1, #16
 800953a:	1429      	asrs	r1, r5, #16
 800953c:	1879      	adds	r1, r7, r1
 800953e:	140f      	asrs	r7, r1, #16
 8009540:	b2ad      	uxth	r5, r5
 8009542:	0409      	lsls	r1, r1, #16
 8009544:	430d      	orrs	r5, r1
 8009546:	4661      	mov	r1, ip
 8009548:	c120      	stmia	r1!, {r5}
 800954a:	468c      	mov	ip, r1
 800954c:	e7dd      	b.n	800950a <__mdiff+0xda>
 800954e:	3801      	subs	r0, #1
 8009550:	e7e9      	b.n	8009526 <__mdiff+0xf6>
 8009552:	46c0      	nop			; (mov r8, r8)
 8009554:	0800a6b7 	.word	0x0800a6b7
 8009558:	00000232 	.word	0x00000232
 800955c:	0800a6c8 	.word	0x0800a6c8

08009560 <__d2b>:
 8009560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009562:	2101      	movs	r1, #1
 8009564:	0014      	movs	r4, r2
 8009566:	001e      	movs	r6, r3
 8009568:	9f08      	ldr	r7, [sp, #32]
 800956a:	f7ff fcc1 	bl	8008ef0 <_Balloc>
 800956e:	1e05      	subs	r5, r0, #0
 8009570:	d105      	bne.n	800957e <__d2b+0x1e>
 8009572:	0002      	movs	r2, r0
 8009574:	4b26      	ldr	r3, [pc, #152]	; (8009610 <__d2b+0xb0>)
 8009576:	4927      	ldr	r1, [pc, #156]	; (8009614 <__d2b+0xb4>)
 8009578:	4827      	ldr	r0, [pc, #156]	; (8009618 <__d2b+0xb8>)
 800957a:	f000 f975 	bl	8009868 <__assert_func>
 800957e:	0333      	lsls	r3, r6, #12
 8009580:	0076      	lsls	r6, r6, #1
 8009582:	0b1b      	lsrs	r3, r3, #12
 8009584:	0d76      	lsrs	r6, r6, #21
 8009586:	d124      	bne.n	80095d2 <__d2b+0x72>
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	2c00      	cmp	r4, #0
 800958c:	d027      	beq.n	80095de <__d2b+0x7e>
 800958e:	4668      	mov	r0, sp
 8009590:	9400      	str	r4, [sp, #0]
 8009592:	f7ff fd73 	bl	800907c <__lo0bits>
 8009596:	9c00      	ldr	r4, [sp, #0]
 8009598:	2800      	cmp	r0, #0
 800959a:	d01e      	beq.n	80095da <__d2b+0x7a>
 800959c:	9b01      	ldr	r3, [sp, #4]
 800959e:	2120      	movs	r1, #32
 80095a0:	001a      	movs	r2, r3
 80095a2:	1a09      	subs	r1, r1, r0
 80095a4:	408a      	lsls	r2, r1
 80095a6:	40c3      	lsrs	r3, r0
 80095a8:	4322      	orrs	r2, r4
 80095aa:	616a      	str	r2, [r5, #20]
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	9c01      	ldr	r4, [sp, #4]
 80095b0:	61ac      	str	r4, [r5, #24]
 80095b2:	1e63      	subs	r3, r4, #1
 80095b4:	419c      	sbcs	r4, r3
 80095b6:	3401      	adds	r4, #1
 80095b8:	612c      	str	r4, [r5, #16]
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	d018      	beq.n	80095f0 <__d2b+0x90>
 80095be:	4b17      	ldr	r3, [pc, #92]	; (800961c <__d2b+0xbc>)
 80095c0:	18f6      	adds	r6, r6, r3
 80095c2:	2335      	movs	r3, #53	; 0x35
 80095c4:	1836      	adds	r6, r6, r0
 80095c6:	1a18      	subs	r0, r3, r0
 80095c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ca:	603e      	str	r6, [r7, #0]
 80095cc:	6018      	str	r0, [r3, #0]
 80095ce:	0028      	movs	r0, r5
 80095d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095d2:	2280      	movs	r2, #128	; 0x80
 80095d4:	0352      	lsls	r2, r2, #13
 80095d6:	4313      	orrs	r3, r2
 80095d8:	e7d6      	b.n	8009588 <__d2b+0x28>
 80095da:	616c      	str	r4, [r5, #20]
 80095dc:	e7e7      	b.n	80095ae <__d2b+0x4e>
 80095de:	a801      	add	r0, sp, #4
 80095e0:	f7ff fd4c 	bl	800907c <__lo0bits>
 80095e4:	2401      	movs	r4, #1
 80095e6:	9b01      	ldr	r3, [sp, #4]
 80095e8:	612c      	str	r4, [r5, #16]
 80095ea:	616b      	str	r3, [r5, #20]
 80095ec:	3020      	adds	r0, #32
 80095ee:	e7e4      	b.n	80095ba <__d2b+0x5a>
 80095f0:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <__d2b+0xc0>)
 80095f2:	18c0      	adds	r0, r0, r3
 80095f4:	4b0b      	ldr	r3, [pc, #44]	; (8009624 <__d2b+0xc4>)
 80095f6:	6038      	str	r0, [r7, #0]
 80095f8:	18e3      	adds	r3, r4, r3
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	18eb      	adds	r3, r5, r3
 80095fe:	6958      	ldr	r0, [r3, #20]
 8009600:	f7ff fd22 	bl	8009048 <__hi0bits>
 8009604:	0164      	lsls	r4, r4, #5
 8009606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009608:	1a24      	subs	r4, r4, r0
 800960a:	601c      	str	r4, [r3, #0]
 800960c:	e7df      	b.n	80095ce <__d2b+0x6e>
 800960e:	46c0      	nop			; (mov r8, r8)
 8009610:	0800a6b7 	.word	0x0800a6b7
 8009614:	0000030a 	.word	0x0000030a
 8009618:	0800a6c8 	.word	0x0800a6c8
 800961c:	fffffbcd 	.word	0xfffffbcd
 8009620:	fffffbce 	.word	0xfffffbce
 8009624:	3fffffff 	.word	0x3fffffff

08009628 <_calloc_r>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	0c13      	lsrs	r3, r2, #16
 800962c:	0c0d      	lsrs	r5, r1, #16
 800962e:	d11e      	bne.n	800966e <_calloc_r+0x46>
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10c      	bne.n	800964e <_calloc_r+0x26>
 8009634:	b289      	uxth	r1, r1
 8009636:	b294      	uxth	r4, r2
 8009638:	434c      	muls	r4, r1
 800963a:	0021      	movs	r1, r4
 800963c:	f000 f88c 	bl	8009758 <_malloc_r>
 8009640:	1e05      	subs	r5, r0, #0
 8009642:	d01b      	beq.n	800967c <_calloc_r+0x54>
 8009644:	0022      	movs	r2, r4
 8009646:	2100      	movs	r1, #0
 8009648:	f7fe f914 	bl	8007874 <memset>
 800964c:	e016      	b.n	800967c <_calloc_r+0x54>
 800964e:	1c1d      	adds	r5, r3, #0
 8009650:	1c0b      	adds	r3, r1, #0
 8009652:	b292      	uxth	r2, r2
 8009654:	b289      	uxth	r1, r1
 8009656:	b29c      	uxth	r4, r3
 8009658:	4351      	muls	r1, r2
 800965a:	b2ab      	uxth	r3, r5
 800965c:	4363      	muls	r3, r4
 800965e:	0c0c      	lsrs	r4, r1, #16
 8009660:	191c      	adds	r4, r3, r4
 8009662:	0c22      	lsrs	r2, r4, #16
 8009664:	d107      	bne.n	8009676 <_calloc_r+0x4e>
 8009666:	0424      	lsls	r4, r4, #16
 8009668:	b289      	uxth	r1, r1
 800966a:	430c      	orrs	r4, r1
 800966c:	e7e5      	b.n	800963a <_calloc_r+0x12>
 800966e:	2b00      	cmp	r3, #0
 8009670:	d101      	bne.n	8009676 <_calloc_r+0x4e>
 8009672:	1c13      	adds	r3, r2, #0
 8009674:	e7ed      	b.n	8009652 <_calloc_r+0x2a>
 8009676:	230c      	movs	r3, #12
 8009678:	2500      	movs	r5, #0
 800967a:	6003      	str	r3, [r0, #0]
 800967c:	0028      	movs	r0, r5
 800967e:	bd70      	pop	{r4, r5, r6, pc}

08009680 <_free_r>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	0005      	movs	r5, r0
 8009684:	2900      	cmp	r1, #0
 8009686:	d010      	beq.n	80096aa <_free_r+0x2a>
 8009688:	1f0c      	subs	r4, r1, #4
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	da00      	bge.n	8009692 <_free_r+0x12>
 8009690:	18e4      	adds	r4, r4, r3
 8009692:	0028      	movs	r0, r5
 8009694:	f000 f928 	bl	80098e8 <__malloc_lock>
 8009698:	4a1d      	ldr	r2, [pc, #116]	; (8009710 <_free_r+0x90>)
 800969a:	6813      	ldr	r3, [r2, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d105      	bne.n	80096ac <_free_r+0x2c>
 80096a0:	6063      	str	r3, [r4, #4]
 80096a2:	6014      	str	r4, [r2, #0]
 80096a4:	0028      	movs	r0, r5
 80096a6:	f000 f927 	bl	80098f8 <__malloc_unlock>
 80096aa:	bd70      	pop	{r4, r5, r6, pc}
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	d908      	bls.n	80096c2 <_free_r+0x42>
 80096b0:	6821      	ldr	r1, [r4, #0]
 80096b2:	1860      	adds	r0, r4, r1
 80096b4:	4283      	cmp	r3, r0
 80096b6:	d1f3      	bne.n	80096a0 <_free_r+0x20>
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	1841      	adds	r1, r0, r1
 80096be:	6021      	str	r1, [r4, #0]
 80096c0:	e7ee      	b.n	80096a0 <_free_r+0x20>
 80096c2:	001a      	movs	r2, r3
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <_free_r+0x4e>
 80096ca:	42a3      	cmp	r3, r4
 80096cc:	d9f9      	bls.n	80096c2 <_free_r+0x42>
 80096ce:	6811      	ldr	r1, [r2, #0]
 80096d0:	1850      	adds	r0, r2, r1
 80096d2:	42a0      	cmp	r0, r4
 80096d4:	d10b      	bne.n	80096ee <_free_r+0x6e>
 80096d6:	6820      	ldr	r0, [r4, #0]
 80096d8:	1809      	adds	r1, r1, r0
 80096da:	1850      	adds	r0, r2, r1
 80096dc:	6011      	str	r1, [r2, #0]
 80096de:	4283      	cmp	r3, r0
 80096e0:	d1e0      	bne.n	80096a4 <_free_r+0x24>
 80096e2:	6818      	ldr	r0, [r3, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	1841      	adds	r1, r0, r1
 80096e8:	6011      	str	r1, [r2, #0]
 80096ea:	6053      	str	r3, [r2, #4]
 80096ec:	e7da      	b.n	80096a4 <_free_r+0x24>
 80096ee:	42a0      	cmp	r0, r4
 80096f0:	d902      	bls.n	80096f8 <_free_r+0x78>
 80096f2:	230c      	movs	r3, #12
 80096f4:	602b      	str	r3, [r5, #0]
 80096f6:	e7d5      	b.n	80096a4 <_free_r+0x24>
 80096f8:	6821      	ldr	r1, [r4, #0]
 80096fa:	1860      	adds	r0, r4, r1
 80096fc:	4283      	cmp	r3, r0
 80096fe:	d103      	bne.n	8009708 <_free_r+0x88>
 8009700:	6818      	ldr	r0, [r3, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	1841      	adds	r1, r0, r1
 8009706:	6021      	str	r1, [r4, #0]
 8009708:	6063      	str	r3, [r4, #4]
 800970a:	6054      	str	r4, [r2, #4]
 800970c:	e7ca      	b.n	80096a4 <_free_r+0x24>
 800970e:	46c0      	nop			; (mov r8, r8)
 8009710:	20004e94 	.word	0x20004e94

08009714 <sbrk_aligned>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	4e0f      	ldr	r6, [pc, #60]	; (8009754 <sbrk_aligned+0x40>)
 8009718:	000d      	movs	r5, r1
 800971a:	6831      	ldr	r1, [r6, #0]
 800971c:	0004      	movs	r4, r0
 800971e:	2900      	cmp	r1, #0
 8009720:	d102      	bne.n	8009728 <sbrk_aligned+0x14>
 8009722:	f000 f88f 	bl	8009844 <_sbrk_r>
 8009726:	6030      	str	r0, [r6, #0]
 8009728:	0029      	movs	r1, r5
 800972a:	0020      	movs	r0, r4
 800972c:	f000 f88a 	bl	8009844 <_sbrk_r>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d00a      	beq.n	800974a <sbrk_aligned+0x36>
 8009734:	2303      	movs	r3, #3
 8009736:	1cc5      	adds	r5, r0, #3
 8009738:	439d      	bics	r5, r3
 800973a:	42a8      	cmp	r0, r5
 800973c:	d007      	beq.n	800974e <sbrk_aligned+0x3a>
 800973e:	1a29      	subs	r1, r5, r0
 8009740:	0020      	movs	r0, r4
 8009742:	f000 f87f 	bl	8009844 <_sbrk_r>
 8009746:	1c43      	adds	r3, r0, #1
 8009748:	d101      	bne.n	800974e <sbrk_aligned+0x3a>
 800974a:	2501      	movs	r5, #1
 800974c:	426d      	negs	r5, r5
 800974e:	0028      	movs	r0, r5
 8009750:	bd70      	pop	{r4, r5, r6, pc}
 8009752:	46c0      	nop			; (mov r8, r8)
 8009754:	20004e98 	.word	0x20004e98

08009758 <_malloc_r>:
 8009758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800975a:	2203      	movs	r2, #3
 800975c:	1ccb      	adds	r3, r1, #3
 800975e:	4393      	bics	r3, r2
 8009760:	3308      	adds	r3, #8
 8009762:	0006      	movs	r6, r0
 8009764:	001f      	movs	r7, r3
 8009766:	2b0c      	cmp	r3, #12
 8009768:	d232      	bcs.n	80097d0 <_malloc_r+0x78>
 800976a:	270c      	movs	r7, #12
 800976c:	42b9      	cmp	r1, r7
 800976e:	d831      	bhi.n	80097d4 <_malloc_r+0x7c>
 8009770:	0030      	movs	r0, r6
 8009772:	f000 f8b9 	bl	80098e8 <__malloc_lock>
 8009776:	4d32      	ldr	r5, [pc, #200]	; (8009840 <_malloc_r+0xe8>)
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	001c      	movs	r4, r3
 800977c:	2c00      	cmp	r4, #0
 800977e:	d12e      	bne.n	80097de <_malloc_r+0x86>
 8009780:	0039      	movs	r1, r7
 8009782:	0030      	movs	r0, r6
 8009784:	f7ff ffc6 	bl	8009714 <sbrk_aligned>
 8009788:	0004      	movs	r4, r0
 800978a:	1c43      	adds	r3, r0, #1
 800978c:	d11e      	bne.n	80097cc <_malloc_r+0x74>
 800978e:	682c      	ldr	r4, [r5, #0]
 8009790:	0025      	movs	r5, r4
 8009792:	2d00      	cmp	r5, #0
 8009794:	d14a      	bne.n	800982c <_malloc_r+0xd4>
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	0029      	movs	r1, r5
 800979a:	18e3      	adds	r3, r4, r3
 800979c:	0030      	movs	r0, r6
 800979e:	9301      	str	r3, [sp, #4]
 80097a0:	f000 f850 	bl	8009844 <_sbrk_r>
 80097a4:	9b01      	ldr	r3, [sp, #4]
 80097a6:	4283      	cmp	r3, r0
 80097a8:	d143      	bne.n	8009832 <_malloc_r+0xda>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	3703      	adds	r7, #3
 80097ae:	1aff      	subs	r7, r7, r3
 80097b0:	2303      	movs	r3, #3
 80097b2:	439f      	bics	r7, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	2f0c      	cmp	r7, #12
 80097b8:	d200      	bcs.n	80097bc <_malloc_r+0x64>
 80097ba:	270c      	movs	r7, #12
 80097bc:	0039      	movs	r1, r7
 80097be:	0030      	movs	r0, r6
 80097c0:	f7ff ffa8 	bl	8009714 <sbrk_aligned>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d034      	beq.n	8009832 <_malloc_r+0xda>
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	19df      	adds	r7, r3, r7
 80097cc:	6027      	str	r7, [r4, #0]
 80097ce:	e013      	b.n	80097f8 <_malloc_r+0xa0>
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	dacb      	bge.n	800976c <_malloc_r+0x14>
 80097d4:	230c      	movs	r3, #12
 80097d6:	2500      	movs	r5, #0
 80097d8:	6033      	str	r3, [r6, #0]
 80097da:	0028      	movs	r0, r5
 80097dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097de:	6822      	ldr	r2, [r4, #0]
 80097e0:	1bd1      	subs	r1, r2, r7
 80097e2:	d420      	bmi.n	8009826 <_malloc_r+0xce>
 80097e4:	290b      	cmp	r1, #11
 80097e6:	d917      	bls.n	8009818 <_malloc_r+0xc0>
 80097e8:	19e2      	adds	r2, r4, r7
 80097ea:	6027      	str	r7, [r4, #0]
 80097ec:	42a3      	cmp	r3, r4
 80097ee:	d111      	bne.n	8009814 <_malloc_r+0xbc>
 80097f0:	602a      	str	r2, [r5, #0]
 80097f2:	6863      	ldr	r3, [r4, #4]
 80097f4:	6011      	str	r1, [r2, #0]
 80097f6:	6053      	str	r3, [r2, #4]
 80097f8:	0030      	movs	r0, r6
 80097fa:	0025      	movs	r5, r4
 80097fc:	f000 f87c 	bl	80098f8 <__malloc_unlock>
 8009800:	2207      	movs	r2, #7
 8009802:	350b      	adds	r5, #11
 8009804:	1d23      	adds	r3, r4, #4
 8009806:	4395      	bics	r5, r2
 8009808:	1aea      	subs	r2, r5, r3
 800980a:	429d      	cmp	r5, r3
 800980c:	d0e5      	beq.n	80097da <_malloc_r+0x82>
 800980e:	1b5b      	subs	r3, r3, r5
 8009810:	50a3      	str	r3, [r4, r2]
 8009812:	e7e2      	b.n	80097da <_malloc_r+0x82>
 8009814:	605a      	str	r2, [r3, #4]
 8009816:	e7ec      	b.n	80097f2 <_malloc_r+0x9a>
 8009818:	6862      	ldr	r2, [r4, #4]
 800981a:	42a3      	cmp	r3, r4
 800981c:	d101      	bne.n	8009822 <_malloc_r+0xca>
 800981e:	602a      	str	r2, [r5, #0]
 8009820:	e7ea      	b.n	80097f8 <_malloc_r+0xa0>
 8009822:	605a      	str	r2, [r3, #4]
 8009824:	e7e8      	b.n	80097f8 <_malloc_r+0xa0>
 8009826:	0023      	movs	r3, r4
 8009828:	6864      	ldr	r4, [r4, #4]
 800982a:	e7a7      	b.n	800977c <_malloc_r+0x24>
 800982c:	002c      	movs	r4, r5
 800982e:	686d      	ldr	r5, [r5, #4]
 8009830:	e7af      	b.n	8009792 <_malloc_r+0x3a>
 8009832:	230c      	movs	r3, #12
 8009834:	0030      	movs	r0, r6
 8009836:	6033      	str	r3, [r6, #0]
 8009838:	f000 f85e 	bl	80098f8 <__malloc_unlock>
 800983c:	e7cd      	b.n	80097da <_malloc_r+0x82>
 800983e:	46c0      	nop			; (mov r8, r8)
 8009840:	20004e94 	.word	0x20004e94

08009844 <_sbrk_r>:
 8009844:	2300      	movs	r3, #0
 8009846:	b570      	push	{r4, r5, r6, lr}
 8009848:	4d06      	ldr	r5, [pc, #24]	; (8009864 <_sbrk_r+0x20>)
 800984a:	0004      	movs	r4, r0
 800984c:	0008      	movs	r0, r1
 800984e:	602b      	str	r3, [r5, #0]
 8009850:	f7fa fa68 	bl	8003d24 <_sbrk>
 8009854:	1c43      	adds	r3, r0, #1
 8009856:	d103      	bne.n	8009860 <_sbrk_r+0x1c>
 8009858:	682b      	ldr	r3, [r5, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d000      	beq.n	8009860 <_sbrk_r+0x1c>
 800985e:	6023      	str	r3, [r4, #0]
 8009860:	bd70      	pop	{r4, r5, r6, pc}
 8009862:	46c0      	nop			; (mov r8, r8)
 8009864:	20004e9c 	.word	0x20004e9c

08009868 <__assert_func>:
 8009868:	b530      	push	{r4, r5, lr}
 800986a:	0014      	movs	r4, r2
 800986c:	001a      	movs	r2, r3
 800986e:	4b09      	ldr	r3, [pc, #36]	; (8009894 <__assert_func+0x2c>)
 8009870:	0005      	movs	r5, r0
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	b085      	sub	sp, #20
 8009876:	68d8      	ldr	r0, [r3, #12]
 8009878:	4b07      	ldr	r3, [pc, #28]	; (8009898 <__assert_func+0x30>)
 800987a:	2c00      	cmp	r4, #0
 800987c:	d101      	bne.n	8009882 <__assert_func+0x1a>
 800987e:	4b07      	ldr	r3, [pc, #28]	; (800989c <__assert_func+0x34>)
 8009880:	001c      	movs	r4, r3
 8009882:	9301      	str	r3, [sp, #4]
 8009884:	9100      	str	r1, [sp, #0]
 8009886:	002b      	movs	r3, r5
 8009888:	4905      	ldr	r1, [pc, #20]	; (80098a0 <__assert_func+0x38>)
 800988a:	9402      	str	r4, [sp, #8]
 800988c:	f000 f80a 	bl	80098a4 <fiprintf>
 8009890:	f000 fa78 	bl	8009d84 <abort>
 8009894:	2000000c 	.word	0x2000000c
 8009898:	0800a824 	.word	0x0800a824
 800989c:	0800a85f 	.word	0x0800a85f
 80098a0:	0800a831 	.word	0x0800a831

080098a4 <fiprintf>:
 80098a4:	b40e      	push	{r1, r2, r3}
 80098a6:	b503      	push	{r0, r1, lr}
 80098a8:	0001      	movs	r1, r0
 80098aa:	ab03      	add	r3, sp, #12
 80098ac:	4804      	ldr	r0, [pc, #16]	; (80098c0 <fiprintf+0x1c>)
 80098ae:	cb04      	ldmia	r3!, {r2}
 80098b0:	6800      	ldr	r0, [r0, #0]
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	f000 f850 	bl	8009958 <_vfiprintf_r>
 80098b8:	b002      	add	sp, #8
 80098ba:	bc08      	pop	{r3}
 80098bc:	b003      	add	sp, #12
 80098be:	4718      	bx	r3
 80098c0:	2000000c 	.word	0x2000000c

080098c4 <__ascii_mbtowc>:
 80098c4:	b082      	sub	sp, #8
 80098c6:	2900      	cmp	r1, #0
 80098c8:	d100      	bne.n	80098cc <__ascii_mbtowc+0x8>
 80098ca:	a901      	add	r1, sp, #4
 80098cc:	1e10      	subs	r0, r2, #0
 80098ce:	d006      	beq.n	80098de <__ascii_mbtowc+0x1a>
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d006      	beq.n	80098e2 <__ascii_mbtowc+0x1e>
 80098d4:	7813      	ldrb	r3, [r2, #0]
 80098d6:	600b      	str	r3, [r1, #0]
 80098d8:	7810      	ldrb	r0, [r2, #0]
 80098da:	1e43      	subs	r3, r0, #1
 80098dc:	4198      	sbcs	r0, r3
 80098de:	b002      	add	sp, #8
 80098e0:	4770      	bx	lr
 80098e2:	2002      	movs	r0, #2
 80098e4:	4240      	negs	r0, r0
 80098e6:	e7fa      	b.n	80098de <__ascii_mbtowc+0x1a>

080098e8 <__malloc_lock>:
 80098e8:	b510      	push	{r4, lr}
 80098ea:	4802      	ldr	r0, [pc, #8]	; (80098f4 <__malloc_lock+0xc>)
 80098ec:	f000 fc21 	bl	800a132 <__retarget_lock_acquire_recursive>
 80098f0:	bd10      	pop	{r4, pc}
 80098f2:	46c0      	nop			; (mov r8, r8)
 80098f4:	20004ea0 	.word	0x20004ea0

080098f8 <__malloc_unlock>:
 80098f8:	b510      	push	{r4, lr}
 80098fa:	4802      	ldr	r0, [pc, #8]	; (8009904 <__malloc_unlock+0xc>)
 80098fc:	f000 fc1a 	bl	800a134 <__retarget_lock_release_recursive>
 8009900:	bd10      	pop	{r4, pc}
 8009902:	46c0      	nop			; (mov r8, r8)
 8009904:	20004ea0 	.word	0x20004ea0

08009908 <__sfputc_r>:
 8009908:	6893      	ldr	r3, [r2, #8]
 800990a:	b510      	push	{r4, lr}
 800990c:	3b01      	subs	r3, #1
 800990e:	6093      	str	r3, [r2, #8]
 8009910:	2b00      	cmp	r3, #0
 8009912:	da04      	bge.n	800991e <__sfputc_r+0x16>
 8009914:	6994      	ldr	r4, [r2, #24]
 8009916:	42a3      	cmp	r3, r4
 8009918:	db07      	blt.n	800992a <__sfputc_r+0x22>
 800991a:	290a      	cmp	r1, #10
 800991c:	d005      	beq.n	800992a <__sfputc_r+0x22>
 800991e:	6813      	ldr	r3, [r2, #0]
 8009920:	1c58      	adds	r0, r3, #1
 8009922:	6010      	str	r0, [r2, #0]
 8009924:	7019      	strb	r1, [r3, #0]
 8009926:	0008      	movs	r0, r1
 8009928:	bd10      	pop	{r4, pc}
 800992a:	f000 f94f 	bl	8009bcc <__swbuf_r>
 800992e:	0001      	movs	r1, r0
 8009930:	e7f9      	b.n	8009926 <__sfputc_r+0x1e>

08009932 <__sfputs_r>:
 8009932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009934:	0006      	movs	r6, r0
 8009936:	000f      	movs	r7, r1
 8009938:	0014      	movs	r4, r2
 800993a:	18d5      	adds	r5, r2, r3
 800993c:	42ac      	cmp	r4, r5
 800993e:	d101      	bne.n	8009944 <__sfputs_r+0x12>
 8009940:	2000      	movs	r0, #0
 8009942:	e007      	b.n	8009954 <__sfputs_r+0x22>
 8009944:	7821      	ldrb	r1, [r4, #0]
 8009946:	003a      	movs	r2, r7
 8009948:	0030      	movs	r0, r6
 800994a:	f7ff ffdd 	bl	8009908 <__sfputc_r>
 800994e:	3401      	adds	r4, #1
 8009950:	1c43      	adds	r3, r0, #1
 8009952:	d1f3      	bne.n	800993c <__sfputs_r+0xa>
 8009954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009958 <_vfiprintf_r>:
 8009958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800995a:	b0a1      	sub	sp, #132	; 0x84
 800995c:	0006      	movs	r6, r0
 800995e:	000c      	movs	r4, r1
 8009960:	001f      	movs	r7, r3
 8009962:	9203      	str	r2, [sp, #12]
 8009964:	2800      	cmp	r0, #0
 8009966:	d004      	beq.n	8009972 <_vfiprintf_r+0x1a>
 8009968:	6983      	ldr	r3, [r0, #24]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <_vfiprintf_r+0x1a>
 800996e:	f000 fb3f 	bl	8009ff0 <__sinit>
 8009972:	4b8e      	ldr	r3, [pc, #568]	; (8009bac <_vfiprintf_r+0x254>)
 8009974:	429c      	cmp	r4, r3
 8009976:	d11c      	bne.n	80099b2 <_vfiprintf_r+0x5a>
 8009978:	6874      	ldr	r4, [r6, #4]
 800997a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800997c:	07db      	lsls	r3, r3, #31
 800997e:	d405      	bmi.n	800998c <_vfiprintf_r+0x34>
 8009980:	89a3      	ldrh	r3, [r4, #12]
 8009982:	059b      	lsls	r3, r3, #22
 8009984:	d402      	bmi.n	800998c <_vfiprintf_r+0x34>
 8009986:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009988:	f000 fbd3 	bl	800a132 <__retarget_lock_acquire_recursive>
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	071b      	lsls	r3, r3, #28
 8009990:	d502      	bpl.n	8009998 <_vfiprintf_r+0x40>
 8009992:	6923      	ldr	r3, [r4, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d11d      	bne.n	80099d4 <_vfiprintf_r+0x7c>
 8009998:	0021      	movs	r1, r4
 800999a:	0030      	movs	r0, r6
 800999c:	f000 f97a 	bl	8009c94 <__swsetup_r>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d017      	beq.n	80099d4 <_vfiprintf_r+0x7c>
 80099a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099a6:	07db      	lsls	r3, r3, #31
 80099a8:	d50d      	bpl.n	80099c6 <_vfiprintf_r+0x6e>
 80099aa:	2001      	movs	r0, #1
 80099ac:	4240      	negs	r0, r0
 80099ae:	b021      	add	sp, #132	; 0x84
 80099b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099b2:	4b7f      	ldr	r3, [pc, #508]	; (8009bb0 <_vfiprintf_r+0x258>)
 80099b4:	429c      	cmp	r4, r3
 80099b6:	d101      	bne.n	80099bc <_vfiprintf_r+0x64>
 80099b8:	68b4      	ldr	r4, [r6, #8]
 80099ba:	e7de      	b.n	800997a <_vfiprintf_r+0x22>
 80099bc:	4b7d      	ldr	r3, [pc, #500]	; (8009bb4 <_vfiprintf_r+0x25c>)
 80099be:	429c      	cmp	r4, r3
 80099c0:	d1db      	bne.n	800997a <_vfiprintf_r+0x22>
 80099c2:	68f4      	ldr	r4, [r6, #12]
 80099c4:	e7d9      	b.n	800997a <_vfiprintf_r+0x22>
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	059b      	lsls	r3, r3, #22
 80099ca:	d4ee      	bmi.n	80099aa <_vfiprintf_r+0x52>
 80099cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ce:	f000 fbb1 	bl	800a134 <__retarget_lock_release_recursive>
 80099d2:	e7ea      	b.n	80099aa <_vfiprintf_r+0x52>
 80099d4:	2300      	movs	r3, #0
 80099d6:	ad08      	add	r5, sp, #32
 80099d8:	616b      	str	r3, [r5, #20]
 80099da:	3320      	adds	r3, #32
 80099dc:	766b      	strb	r3, [r5, #25]
 80099de:	3310      	adds	r3, #16
 80099e0:	76ab      	strb	r3, [r5, #26]
 80099e2:	9707      	str	r7, [sp, #28]
 80099e4:	9f03      	ldr	r7, [sp, #12]
 80099e6:	783b      	ldrb	r3, [r7, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <_vfiprintf_r+0x98>
 80099ec:	2b25      	cmp	r3, #37	; 0x25
 80099ee:	d14e      	bne.n	8009a8e <_vfiprintf_r+0x136>
 80099f0:	9b03      	ldr	r3, [sp, #12]
 80099f2:	1afb      	subs	r3, r7, r3
 80099f4:	9305      	str	r3, [sp, #20]
 80099f6:	9b03      	ldr	r3, [sp, #12]
 80099f8:	429f      	cmp	r7, r3
 80099fa:	d00d      	beq.n	8009a18 <_vfiprintf_r+0xc0>
 80099fc:	9b05      	ldr	r3, [sp, #20]
 80099fe:	0021      	movs	r1, r4
 8009a00:	0030      	movs	r0, r6
 8009a02:	9a03      	ldr	r2, [sp, #12]
 8009a04:	f7ff ff95 	bl	8009932 <__sfputs_r>
 8009a08:	1c43      	adds	r3, r0, #1
 8009a0a:	d100      	bne.n	8009a0e <_vfiprintf_r+0xb6>
 8009a0c:	e0b5      	b.n	8009b7a <_vfiprintf_r+0x222>
 8009a0e:	696a      	ldr	r2, [r5, #20]
 8009a10:	9b05      	ldr	r3, [sp, #20]
 8009a12:	4694      	mov	ip, r2
 8009a14:	4463      	add	r3, ip
 8009a16:	616b      	str	r3, [r5, #20]
 8009a18:	783b      	ldrb	r3, [r7, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d100      	bne.n	8009a20 <_vfiprintf_r+0xc8>
 8009a1e:	e0ac      	b.n	8009b7a <_vfiprintf_r+0x222>
 8009a20:	2201      	movs	r2, #1
 8009a22:	1c7b      	adds	r3, r7, #1
 8009a24:	9303      	str	r3, [sp, #12]
 8009a26:	2300      	movs	r3, #0
 8009a28:	4252      	negs	r2, r2
 8009a2a:	606a      	str	r2, [r5, #4]
 8009a2c:	a904      	add	r1, sp, #16
 8009a2e:	3254      	adds	r2, #84	; 0x54
 8009a30:	1852      	adds	r2, r2, r1
 8009a32:	602b      	str	r3, [r5, #0]
 8009a34:	60eb      	str	r3, [r5, #12]
 8009a36:	60ab      	str	r3, [r5, #8]
 8009a38:	7013      	strb	r3, [r2, #0]
 8009a3a:	65ab      	str	r3, [r5, #88]	; 0x58
 8009a3c:	9b03      	ldr	r3, [sp, #12]
 8009a3e:	2205      	movs	r2, #5
 8009a40:	7819      	ldrb	r1, [r3, #0]
 8009a42:	485d      	ldr	r0, [pc, #372]	; (8009bb8 <_vfiprintf_r+0x260>)
 8009a44:	f7ff fa40 	bl	8008ec8 <memchr>
 8009a48:	9b03      	ldr	r3, [sp, #12]
 8009a4a:	1c5f      	adds	r7, r3, #1
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d120      	bne.n	8009a92 <_vfiprintf_r+0x13a>
 8009a50:	682a      	ldr	r2, [r5, #0]
 8009a52:	06d3      	lsls	r3, r2, #27
 8009a54:	d504      	bpl.n	8009a60 <_vfiprintf_r+0x108>
 8009a56:	2353      	movs	r3, #83	; 0x53
 8009a58:	a904      	add	r1, sp, #16
 8009a5a:	185b      	adds	r3, r3, r1
 8009a5c:	2120      	movs	r1, #32
 8009a5e:	7019      	strb	r1, [r3, #0]
 8009a60:	0713      	lsls	r3, r2, #28
 8009a62:	d504      	bpl.n	8009a6e <_vfiprintf_r+0x116>
 8009a64:	2353      	movs	r3, #83	; 0x53
 8009a66:	a904      	add	r1, sp, #16
 8009a68:	185b      	adds	r3, r3, r1
 8009a6a:	212b      	movs	r1, #43	; 0x2b
 8009a6c:	7019      	strb	r1, [r3, #0]
 8009a6e:	9b03      	ldr	r3, [sp, #12]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2b2a      	cmp	r3, #42	; 0x2a
 8009a74:	d016      	beq.n	8009aa4 <_vfiprintf_r+0x14c>
 8009a76:	2100      	movs	r1, #0
 8009a78:	68eb      	ldr	r3, [r5, #12]
 8009a7a:	9f03      	ldr	r7, [sp, #12]
 8009a7c:	783a      	ldrb	r2, [r7, #0]
 8009a7e:	1c78      	adds	r0, r7, #1
 8009a80:	3a30      	subs	r2, #48	; 0x30
 8009a82:	4684      	mov	ip, r0
 8009a84:	2a09      	cmp	r2, #9
 8009a86:	d94f      	bls.n	8009b28 <_vfiprintf_r+0x1d0>
 8009a88:	2900      	cmp	r1, #0
 8009a8a:	d111      	bne.n	8009ab0 <_vfiprintf_r+0x158>
 8009a8c:	e017      	b.n	8009abe <_vfiprintf_r+0x166>
 8009a8e:	3701      	adds	r7, #1
 8009a90:	e7a9      	b.n	80099e6 <_vfiprintf_r+0x8e>
 8009a92:	4b49      	ldr	r3, [pc, #292]	; (8009bb8 <_vfiprintf_r+0x260>)
 8009a94:	682a      	ldr	r2, [r5, #0]
 8009a96:	1ac0      	subs	r0, r0, r3
 8009a98:	2301      	movs	r3, #1
 8009a9a:	4083      	lsls	r3, r0
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	602b      	str	r3, [r5, #0]
 8009aa0:	9703      	str	r7, [sp, #12]
 8009aa2:	e7cb      	b.n	8009a3c <_vfiprintf_r+0xe4>
 8009aa4:	9b07      	ldr	r3, [sp, #28]
 8009aa6:	1d19      	adds	r1, r3, #4
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	9107      	str	r1, [sp, #28]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	db01      	blt.n	8009ab4 <_vfiprintf_r+0x15c>
 8009ab0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ab2:	e004      	b.n	8009abe <_vfiprintf_r+0x166>
 8009ab4:	425b      	negs	r3, r3
 8009ab6:	60eb      	str	r3, [r5, #12]
 8009ab8:	2302      	movs	r3, #2
 8009aba:	4313      	orrs	r3, r2
 8009abc:	602b      	str	r3, [r5, #0]
 8009abe:	783b      	ldrb	r3, [r7, #0]
 8009ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ac2:	d10a      	bne.n	8009ada <_vfiprintf_r+0x182>
 8009ac4:	787b      	ldrb	r3, [r7, #1]
 8009ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ac8:	d137      	bne.n	8009b3a <_vfiprintf_r+0x1e2>
 8009aca:	9b07      	ldr	r3, [sp, #28]
 8009acc:	3702      	adds	r7, #2
 8009ace:	1d1a      	adds	r2, r3, #4
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	9207      	str	r2, [sp, #28]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	db2d      	blt.n	8009b34 <_vfiprintf_r+0x1dc>
 8009ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8009ada:	2203      	movs	r2, #3
 8009adc:	7839      	ldrb	r1, [r7, #0]
 8009ade:	4837      	ldr	r0, [pc, #220]	; (8009bbc <_vfiprintf_r+0x264>)
 8009ae0:	f7ff f9f2 	bl	8008ec8 <memchr>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d007      	beq.n	8009af8 <_vfiprintf_r+0x1a0>
 8009ae8:	4b34      	ldr	r3, [pc, #208]	; (8009bbc <_vfiprintf_r+0x264>)
 8009aea:	682a      	ldr	r2, [r5, #0]
 8009aec:	1ac0      	subs	r0, r0, r3
 8009aee:	2340      	movs	r3, #64	; 0x40
 8009af0:	4083      	lsls	r3, r0
 8009af2:	4313      	orrs	r3, r2
 8009af4:	3701      	adds	r7, #1
 8009af6:	602b      	str	r3, [r5, #0]
 8009af8:	7839      	ldrb	r1, [r7, #0]
 8009afa:	1c7b      	adds	r3, r7, #1
 8009afc:	2206      	movs	r2, #6
 8009afe:	4830      	ldr	r0, [pc, #192]	; (8009bc0 <_vfiprintf_r+0x268>)
 8009b00:	9303      	str	r3, [sp, #12]
 8009b02:	7629      	strb	r1, [r5, #24]
 8009b04:	f7ff f9e0 	bl	8008ec8 <memchr>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d045      	beq.n	8009b98 <_vfiprintf_r+0x240>
 8009b0c:	4b2d      	ldr	r3, [pc, #180]	; (8009bc4 <_vfiprintf_r+0x26c>)
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d127      	bne.n	8009b62 <_vfiprintf_r+0x20a>
 8009b12:	2207      	movs	r2, #7
 8009b14:	9b07      	ldr	r3, [sp, #28]
 8009b16:	3307      	adds	r3, #7
 8009b18:	4393      	bics	r3, r2
 8009b1a:	3308      	adds	r3, #8
 8009b1c:	9307      	str	r3, [sp, #28]
 8009b1e:	696b      	ldr	r3, [r5, #20]
 8009b20:	9a04      	ldr	r2, [sp, #16]
 8009b22:	189b      	adds	r3, r3, r2
 8009b24:	616b      	str	r3, [r5, #20]
 8009b26:	e75d      	b.n	80099e4 <_vfiprintf_r+0x8c>
 8009b28:	210a      	movs	r1, #10
 8009b2a:	434b      	muls	r3, r1
 8009b2c:	4667      	mov	r7, ip
 8009b2e:	189b      	adds	r3, r3, r2
 8009b30:	3909      	subs	r1, #9
 8009b32:	e7a3      	b.n	8009a7c <_vfiprintf_r+0x124>
 8009b34:	2301      	movs	r3, #1
 8009b36:	425b      	negs	r3, r3
 8009b38:	e7ce      	b.n	8009ad8 <_vfiprintf_r+0x180>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	001a      	movs	r2, r3
 8009b3e:	3701      	adds	r7, #1
 8009b40:	606b      	str	r3, [r5, #4]
 8009b42:	7839      	ldrb	r1, [r7, #0]
 8009b44:	1c78      	adds	r0, r7, #1
 8009b46:	3930      	subs	r1, #48	; 0x30
 8009b48:	4684      	mov	ip, r0
 8009b4a:	2909      	cmp	r1, #9
 8009b4c:	d903      	bls.n	8009b56 <_vfiprintf_r+0x1fe>
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d0c3      	beq.n	8009ada <_vfiprintf_r+0x182>
 8009b52:	9209      	str	r2, [sp, #36]	; 0x24
 8009b54:	e7c1      	b.n	8009ada <_vfiprintf_r+0x182>
 8009b56:	230a      	movs	r3, #10
 8009b58:	435a      	muls	r2, r3
 8009b5a:	4667      	mov	r7, ip
 8009b5c:	1852      	adds	r2, r2, r1
 8009b5e:	3b09      	subs	r3, #9
 8009b60:	e7ef      	b.n	8009b42 <_vfiprintf_r+0x1ea>
 8009b62:	ab07      	add	r3, sp, #28
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	0022      	movs	r2, r4
 8009b68:	0029      	movs	r1, r5
 8009b6a:	0030      	movs	r0, r6
 8009b6c:	4b16      	ldr	r3, [pc, #88]	; (8009bc8 <_vfiprintf_r+0x270>)
 8009b6e:	f7fd ff33 	bl	80079d8 <_printf_float>
 8009b72:	9004      	str	r0, [sp, #16]
 8009b74:	9b04      	ldr	r3, [sp, #16]
 8009b76:	3301      	adds	r3, #1
 8009b78:	d1d1      	bne.n	8009b1e <_vfiprintf_r+0x1c6>
 8009b7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b7c:	07db      	lsls	r3, r3, #31
 8009b7e:	d405      	bmi.n	8009b8c <_vfiprintf_r+0x234>
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	059b      	lsls	r3, r3, #22
 8009b84:	d402      	bmi.n	8009b8c <_vfiprintf_r+0x234>
 8009b86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b88:	f000 fad4 	bl	800a134 <__retarget_lock_release_recursive>
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	065b      	lsls	r3, r3, #25
 8009b90:	d500      	bpl.n	8009b94 <_vfiprintf_r+0x23c>
 8009b92:	e70a      	b.n	80099aa <_vfiprintf_r+0x52>
 8009b94:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b96:	e70a      	b.n	80099ae <_vfiprintf_r+0x56>
 8009b98:	ab07      	add	r3, sp, #28
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	0022      	movs	r2, r4
 8009b9e:	0029      	movs	r1, r5
 8009ba0:	0030      	movs	r0, r6
 8009ba2:	4b09      	ldr	r3, [pc, #36]	; (8009bc8 <_vfiprintf_r+0x270>)
 8009ba4:	f7fe f9ca 	bl	8007f3c <_printf_i>
 8009ba8:	e7e3      	b.n	8009b72 <_vfiprintf_r+0x21a>
 8009baa:	46c0      	nop			; (mov r8, r8)
 8009bac:	0800a99c 	.word	0x0800a99c
 8009bb0:	0800a9bc 	.word	0x0800a9bc
 8009bb4:	0800a97c 	.word	0x0800a97c
 8009bb8:	0800a86a 	.word	0x0800a86a
 8009bbc:	0800a870 	.word	0x0800a870
 8009bc0:	0800a874 	.word	0x0800a874
 8009bc4:	080079d9 	.word	0x080079d9
 8009bc8:	08009933 	.word	0x08009933

08009bcc <__swbuf_r>:
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	0005      	movs	r5, r0
 8009bd0:	000e      	movs	r6, r1
 8009bd2:	0014      	movs	r4, r2
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	d004      	beq.n	8009be2 <__swbuf_r+0x16>
 8009bd8:	6983      	ldr	r3, [r0, #24]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <__swbuf_r+0x16>
 8009bde:	f000 fa07 	bl	8009ff0 <__sinit>
 8009be2:	4b22      	ldr	r3, [pc, #136]	; (8009c6c <__swbuf_r+0xa0>)
 8009be4:	429c      	cmp	r4, r3
 8009be6:	d12e      	bne.n	8009c46 <__swbuf_r+0x7a>
 8009be8:	686c      	ldr	r4, [r5, #4]
 8009bea:	69a3      	ldr	r3, [r4, #24]
 8009bec:	60a3      	str	r3, [r4, #8]
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	071b      	lsls	r3, r3, #28
 8009bf2:	d532      	bpl.n	8009c5a <__swbuf_r+0x8e>
 8009bf4:	6923      	ldr	r3, [r4, #16]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d02f      	beq.n	8009c5a <__swbuf_r+0x8e>
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	6922      	ldr	r2, [r4, #16]
 8009bfe:	b2f7      	uxtb	r7, r6
 8009c00:	1a98      	subs	r0, r3, r2
 8009c02:	6963      	ldr	r3, [r4, #20]
 8009c04:	b2f6      	uxtb	r6, r6
 8009c06:	4283      	cmp	r3, r0
 8009c08:	dc05      	bgt.n	8009c16 <__swbuf_r+0x4a>
 8009c0a:	0021      	movs	r1, r4
 8009c0c:	0028      	movs	r0, r5
 8009c0e:	f000 f94d 	bl	8009eac <_fflush_r>
 8009c12:	2800      	cmp	r0, #0
 8009c14:	d127      	bne.n	8009c66 <__swbuf_r+0x9a>
 8009c16:	68a3      	ldr	r3, [r4, #8]
 8009c18:	3001      	adds	r0, #1
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	60a3      	str	r3, [r4, #8]
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	1c5a      	adds	r2, r3, #1
 8009c22:	6022      	str	r2, [r4, #0]
 8009c24:	701f      	strb	r7, [r3, #0]
 8009c26:	6963      	ldr	r3, [r4, #20]
 8009c28:	4283      	cmp	r3, r0
 8009c2a:	d004      	beq.n	8009c36 <__swbuf_r+0x6a>
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	07db      	lsls	r3, r3, #31
 8009c30:	d507      	bpl.n	8009c42 <__swbuf_r+0x76>
 8009c32:	2e0a      	cmp	r6, #10
 8009c34:	d105      	bne.n	8009c42 <__swbuf_r+0x76>
 8009c36:	0021      	movs	r1, r4
 8009c38:	0028      	movs	r0, r5
 8009c3a:	f000 f937 	bl	8009eac <_fflush_r>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d111      	bne.n	8009c66 <__swbuf_r+0x9a>
 8009c42:	0030      	movs	r0, r6
 8009c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c46:	4b0a      	ldr	r3, [pc, #40]	; (8009c70 <__swbuf_r+0xa4>)
 8009c48:	429c      	cmp	r4, r3
 8009c4a:	d101      	bne.n	8009c50 <__swbuf_r+0x84>
 8009c4c:	68ac      	ldr	r4, [r5, #8]
 8009c4e:	e7cc      	b.n	8009bea <__swbuf_r+0x1e>
 8009c50:	4b08      	ldr	r3, [pc, #32]	; (8009c74 <__swbuf_r+0xa8>)
 8009c52:	429c      	cmp	r4, r3
 8009c54:	d1c9      	bne.n	8009bea <__swbuf_r+0x1e>
 8009c56:	68ec      	ldr	r4, [r5, #12]
 8009c58:	e7c7      	b.n	8009bea <__swbuf_r+0x1e>
 8009c5a:	0021      	movs	r1, r4
 8009c5c:	0028      	movs	r0, r5
 8009c5e:	f000 f819 	bl	8009c94 <__swsetup_r>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d0c9      	beq.n	8009bfa <__swbuf_r+0x2e>
 8009c66:	2601      	movs	r6, #1
 8009c68:	4276      	negs	r6, r6
 8009c6a:	e7ea      	b.n	8009c42 <__swbuf_r+0x76>
 8009c6c:	0800a99c 	.word	0x0800a99c
 8009c70:	0800a9bc 	.word	0x0800a9bc
 8009c74:	0800a97c 	.word	0x0800a97c

08009c78 <__ascii_wctomb>:
 8009c78:	0003      	movs	r3, r0
 8009c7a:	1e08      	subs	r0, r1, #0
 8009c7c:	d005      	beq.n	8009c8a <__ascii_wctomb+0x12>
 8009c7e:	2aff      	cmp	r2, #255	; 0xff
 8009c80:	d904      	bls.n	8009c8c <__ascii_wctomb+0x14>
 8009c82:	228a      	movs	r2, #138	; 0x8a
 8009c84:	2001      	movs	r0, #1
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	4240      	negs	r0, r0
 8009c8a:	4770      	bx	lr
 8009c8c:	2001      	movs	r0, #1
 8009c8e:	700a      	strb	r2, [r1, #0]
 8009c90:	e7fb      	b.n	8009c8a <__ascii_wctomb+0x12>
	...

08009c94 <__swsetup_r>:
 8009c94:	4b37      	ldr	r3, [pc, #220]	; (8009d74 <__swsetup_r+0xe0>)
 8009c96:	b570      	push	{r4, r5, r6, lr}
 8009c98:	681d      	ldr	r5, [r3, #0]
 8009c9a:	0006      	movs	r6, r0
 8009c9c:	000c      	movs	r4, r1
 8009c9e:	2d00      	cmp	r5, #0
 8009ca0:	d005      	beq.n	8009cae <__swsetup_r+0x1a>
 8009ca2:	69ab      	ldr	r3, [r5, #24]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d102      	bne.n	8009cae <__swsetup_r+0x1a>
 8009ca8:	0028      	movs	r0, r5
 8009caa:	f000 f9a1 	bl	8009ff0 <__sinit>
 8009cae:	4b32      	ldr	r3, [pc, #200]	; (8009d78 <__swsetup_r+0xe4>)
 8009cb0:	429c      	cmp	r4, r3
 8009cb2:	d10f      	bne.n	8009cd4 <__swsetup_r+0x40>
 8009cb4:	686c      	ldr	r4, [r5, #4]
 8009cb6:	230c      	movs	r3, #12
 8009cb8:	5ee2      	ldrsh	r2, [r4, r3]
 8009cba:	b293      	uxth	r3, r2
 8009cbc:	0711      	lsls	r1, r2, #28
 8009cbe:	d42d      	bmi.n	8009d1c <__swsetup_r+0x88>
 8009cc0:	06d9      	lsls	r1, r3, #27
 8009cc2:	d411      	bmi.n	8009ce8 <__swsetup_r+0x54>
 8009cc4:	2309      	movs	r3, #9
 8009cc6:	2001      	movs	r0, #1
 8009cc8:	6033      	str	r3, [r6, #0]
 8009cca:	3337      	adds	r3, #55	; 0x37
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	81a3      	strh	r3, [r4, #12]
 8009cd0:	4240      	negs	r0, r0
 8009cd2:	bd70      	pop	{r4, r5, r6, pc}
 8009cd4:	4b29      	ldr	r3, [pc, #164]	; (8009d7c <__swsetup_r+0xe8>)
 8009cd6:	429c      	cmp	r4, r3
 8009cd8:	d101      	bne.n	8009cde <__swsetup_r+0x4a>
 8009cda:	68ac      	ldr	r4, [r5, #8]
 8009cdc:	e7eb      	b.n	8009cb6 <__swsetup_r+0x22>
 8009cde:	4b28      	ldr	r3, [pc, #160]	; (8009d80 <__swsetup_r+0xec>)
 8009ce0:	429c      	cmp	r4, r3
 8009ce2:	d1e8      	bne.n	8009cb6 <__swsetup_r+0x22>
 8009ce4:	68ec      	ldr	r4, [r5, #12]
 8009ce6:	e7e6      	b.n	8009cb6 <__swsetup_r+0x22>
 8009ce8:	075b      	lsls	r3, r3, #29
 8009cea:	d513      	bpl.n	8009d14 <__swsetup_r+0x80>
 8009cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cee:	2900      	cmp	r1, #0
 8009cf0:	d008      	beq.n	8009d04 <__swsetup_r+0x70>
 8009cf2:	0023      	movs	r3, r4
 8009cf4:	3344      	adds	r3, #68	; 0x44
 8009cf6:	4299      	cmp	r1, r3
 8009cf8:	d002      	beq.n	8009d00 <__swsetup_r+0x6c>
 8009cfa:	0030      	movs	r0, r6
 8009cfc:	f7ff fcc0 	bl	8009680 <_free_r>
 8009d00:	2300      	movs	r3, #0
 8009d02:	6363      	str	r3, [r4, #52]	; 0x34
 8009d04:	2224      	movs	r2, #36	; 0x24
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	4393      	bics	r3, r2
 8009d0a:	81a3      	strh	r3, [r4, #12]
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	6063      	str	r3, [r4, #4]
 8009d10:	6923      	ldr	r3, [r4, #16]
 8009d12:	6023      	str	r3, [r4, #0]
 8009d14:	2308      	movs	r3, #8
 8009d16:	89a2      	ldrh	r2, [r4, #12]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	81a3      	strh	r3, [r4, #12]
 8009d1c:	6923      	ldr	r3, [r4, #16]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10b      	bne.n	8009d3a <__swsetup_r+0xa6>
 8009d22:	21a0      	movs	r1, #160	; 0xa0
 8009d24:	2280      	movs	r2, #128	; 0x80
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	0089      	lsls	r1, r1, #2
 8009d2a:	0092      	lsls	r2, r2, #2
 8009d2c:	400b      	ands	r3, r1
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d003      	beq.n	8009d3a <__swsetup_r+0xa6>
 8009d32:	0021      	movs	r1, r4
 8009d34:	0030      	movs	r0, r6
 8009d36:	f000 fa27 	bl	800a188 <__smakebuf_r>
 8009d3a:	220c      	movs	r2, #12
 8009d3c:	5ea3      	ldrsh	r3, [r4, r2]
 8009d3e:	2001      	movs	r0, #1
 8009d40:	001a      	movs	r2, r3
 8009d42:	b299      	uxth	r1, r3
 8009d44:	4002      	ands	r2, r0
 8009d46:	4203      	tst	r3, r0
 8009d48:	d00f      	beq.n	8009d6a <__swsetup_r+0xd6>
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	60a2      	str	r2, [r4, #8]
 8009d4e:	6962      	ldr	r2, [r4, #20]
 8009d50:	4252      	negs	r2, r2
 8009d52:	61a2      	str	r2, [r4, #24]
 8009d54:	2000      	movs	r0, #0
 8009d56:	6922      	ldr	r2, [r4, #16]
 8009d58:	4282      	cmp	r2, r0
 8009d5a:	d1ba      	bne.n	8009cd2 <__swsetup_r+0x3e>
 8009d5c:	060a      	lsls	r2, r1, #24
 8009d5e:	d5b8      	bpl.n	8009cd2 <__swsetup_r+0x3e>
 8009d60:	2240      	movs	r2, #64	; 0x40
 8009d62:	4313      	orrs	r3, r2
 8009d64:	81a3      	strh	r3, [r4, #12]
 8009d66:	3801      	subs	r0, #1
 8009d68:	e7b3      	b.n	8009cd2 <__swsetup_r+0x3e>
 8009d6a:	0788      	lsls	r0, r1, #30
 8009d6c:	d400      	bmi.n	8009d70 <__swsetup_r+0xdc>
 8009d6e:	6962      	ldr	r2, [r4, #20]
 8009d70:	60a2      	str	r2, [r4, #8]
 8009d72:	e7ef      	b.n	8009d54 <__swsetup_r+0xc0>
 8009d74:	2000000c 	.word	0x2000000c
 8009d78:	0800a99c 	.word	0x0800a99c
 8009d7c:	0800a9bc 	.word	0x0800a9bc
 8009d80:	0800a97c 	.word	0x0800a97c

08009d84 <abort>:
 8009d84:	2006      	movs	r0, #6
 8009d86:	b510      	push	{r4, lr}
 8009d88:	f000 fa6c 	bl	800a264 <raise>
 8009d8c:	2001      	movs	r0, #1
 8009d8e:	f7f9 ff57 	bl	8003c40 <_exit>
	...

08009d94 <__sflush_r>:
 8009d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d96:	898b      	ldrh	r3, [r1, #12]
 8009d98:	0005      	movs	r5, r0
 8009d9a:	000c      	movs	r4, r1
 8009d9c:	071a      	lsls	r2, r3, #28
 8009d9e:	d45f      	bmi.n	8009e60 <__sflush_r+0xcc>
 8009da0:	684a      	ldr	r2, [r1, #4]
 8009da2:	2a00      	cmp	r2, #0
 8009da4:	dc04      	bgt.n	8009db0 <__sflush_r+0x1c>
 8009da6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009da8:	2a00      	cmp	r2, #0
 8009daa:	dc01      	bgt.n	8009db0 <__sflush_r+0x1c>
 8009dac:	2000      	movs	r0, #0
 8009dae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009db0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009db2:	2f00      	cmp	r7, #0
 8009db4:	d0fa      	beq.n	8009dac <__sflush_r+0x18>
 8009db6:	2200      	movs	r2, #0
 8009db8:	2180      	movs	r1, #128	; 0x80
 8009dba:	682e      	ldr	r6, [r5, #0]
 8009dbc:	602a      	str	r2, [r5, #0]
 8009dbe:	001a      	movs	r2, r3
 8009dc0:	0149      	lsls	r1, r1, #5
 8009dc2:	400a      	ands	r2, r1
 8009dc4:	420b      	tst	r3, r1
 8009dc6:	d034      	beq.n	8009e32 <__sflush_r+0x9e>
 8009dc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	075b      	lsls	r3, r3, #29
 8009dce:	d506      	bpl.n	8009dde <__sflush_r+0x4a>
 8009dd0:	6863      	ldr	r3, [r4, #4]
 8009dd2:	1ac0      	subs	r0, r0, r3
 8009dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <__sflush_r+0x4a>
 8009dda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ddc:	1ac0      	subs	r0, r0, r3
 8009dde:	0002      	movs	r2, r0
 8009de0:	6a21      	ldr	r1, [r4, #32]
 8009de2:	2300      	movs	r3, #0
 8009de4:	0028      	movs	r0, r5
 8009de6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009de8:	47b8      	blx	r7
 8009dea:	89a1      	ldrh	r1, [r4, #12]
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d106      	bne.n	8009dfe <__sflush_r+0x6a>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	2b1d      	cmp	r3, #29
 8009df4:	d831      	bhi.n	8009e5a <__sflush_r+0xc6>
 8009df6:	4a2c      	ldr	r2, [pc, #176]	; (8009ea8 <__sflush_r+0x114>)
 8009df8:	40da      	lsrs	r2, r3
 8009dfa:	07d3      	lsls	r3, r2, #31
 8009dfc:	d52d      	bpl.n	8009e5a <__sflush_r+0xc6>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	6063      	str	r3, [r4, #4]
 8009e02:	6923      	ldr	r3, [r4, #16]
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	04cb      	lsls	r3, r1, #19
 8009e08:	d505      	bpl.n	8009e16 <__sflush_r+0x82>
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	d102      	bne.n	8009e14 <__sflush_r+0x80>
 8009e0e:	682b      	ldr	r3, [r5, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d100      	bne.n	8009e16 <__sflush_r+0x82>
 8009e14:	6560      	str	r0, [r4, #84]	; 0x54
 8009e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e18:	602e      	str	r6, [r5, #0]
 8009e1a:	2900      	cmp	r1, #0
 8009e1c:	d0c6      	beq.n	8009dac <__sflush_r+0x18>
 8009e1e:	0023      	movs	r3, r4
 8009e20:	3344      	adds	r3, #68	; 0x44
 8009e22:	4299      	cmp	r1, r3
 8009e24:	d002      	beq.n	8009e2c <__sflush_r+0x98>
 8009e26:	0028      	movs	r0, r5
 8009e28:	f7ff fc2a 	bl	8009680 <_free_r>
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	6360      	str	r0, [r4, #52]	; 0x34
 8009e30:	e7bd      	b.n	8009dae <__sflush_r+0x1a>
 8009e32:	2301      	movs	r3, #1
 8009e34:	0028      	movs	r0, r5
 8009e36:	6a21      	ldr	r1, [r4, #32]
 8009e38:	47b8      	blx	r7
 8009e3a:	1c43      	adds	r3, r0, #1
 8009e3c:	d1c5      	bne.n	8009dca <__sflush_r+0x36>
 8009e3e:	682b      	ldr	r3, [r5, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d0c2      	beq.n	8009dca <__sflush_r+0x36>
 8009e44:	2b1d      	cmp	r3, #29
 8009e46:	d001      	beq.n	8009e4c <__sflush_r+0xb8>
 8009e48:	2b16      	cmp	r3, #22
 8009e4a:	d101      	bne.n	8009e50 <__sflush_r+0xbc>
 8009e4c:	602e      	str	r6, [r5, #0]
 8009e4e:	e7ad      	b.n	8009dac <__sflush_r+0x18>
 8009e50:	2340      	movs	r3, #64	; 0x40
 8009e52:	89a2      	ldrh	r2, [r4, #12]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	81a3      	strh	r3, [r4, #12]
 8009e58:	e7a9      	b.n	8009dae <__sflush_r+0x1a>
 8009e5a:	2340      	movs	r3, #64	; 0x40
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	e7fa      	b.n	8009e56 <__sflush_r+0xc2>
 8009e60:	690f      	ldr	r7, [r1, #16]
 8009e62:	2f00      	cmp	r7, #0
 8009e64:	d0a2      	beq.n	8009dac <__sflush_r+0x18>
 8009e66:	680a      	ldr	r2, [r1, #0]
 8009e68:	600f      	str	r7, [r1, #0]
 8009e6a:	1bd2      	subs	r2, r2, r7
 8009e6c:	9201      	str	r2, [sp, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	079b      	lsls	r3, r3, #30
 8009e72:	d100      	bne.n	8009e76 <__sflush_r+0xe2>
 8009e74:	694a      	ldr	r2, [r1, #20]
 8009e76:	60a2      	str	r2, [r4, #8]
 8009e78:	9b01      	ldr	r3, [sp, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	dc00      	bgt.n	8009e80 <__sflush_r+0xec>
 8009e7e:	e795      	b.n	8009dac <__sflush_r+0x18>
 8009e80:	003a      	movs	r2, r7
 8009e82:	0028      	movs	r0, r5
 8009e84:	9b01      	ldr	r3, [sp, #4]
 8009e86:	6a21      	ldr	r1, [r4, #32]
 8009e88:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e8a:	47b0      	blx	r6
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	dc06      	bgt.n	8009e9e <__sflush_r+0x10a>
 8009e90:	2340      	movs	r3, #64	; 0x40
 8009e92:	2001      	movs	r0, #1
 8009e94:	89a2      	ldrh	r2, [r4, #12]
 8009e96:	4240      	negs	r0, r0
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	e787      	b.n	8009dae <__sflush_r+0x1a>
 8009e9e:	9b01      	ldr	r3, [sp, #4]
 8009ea0:	183f      	adds	r7, r7, r0
 8009ea2:	1a1b      	subs	r3, r3, r0
 8009ea4:	9301      	str	r3, [sp, #4]
 8009ea6:	e7e7      	b.n	8009e78 <__sflush_r+0xe4>
 8009ea8:	20400001 	.word	0x20400001

08009eac <_fflush_r>:
 8009eac:	690b      	ldr	r3, [r1, #16]
 8009eae:	b570      	push	{r4, r5, r6, lr}
 8009eb0:	0005      	movs	r5, r0
 8009eb2:	000c      	movs	r4, r1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <_fflush_r+0x12>
 8009eb8:	2500      	movs	r5, #0
 8009eba:	0028      	movs	r0, r5
 8009ebc:	bd70      	pop	{r4, r5, r6, pc}
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d004      	beq.n	8009ecc <_fflush_r+0x20>
 8009ec2:	6983      	ldr	r3, [r0, #24]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <_fflush_r+0x20>
 8009ec8:	f000 f892 	bl	8009ff0 <__sinit>
 8009ecc:	4b14      	ldr	r3, [pc, #80]	; (8009f20 <_fflush_r+0x74>)
 8009ece:	429c      	cmp	r4, r3
 8009ed0:	d11b      	bne.n	8009f0a <_fflush_r+0x5e>
 8009ed2:	686c      	ldr	r4, [r5, #4]
 8009ed4:	220c      	movs	r2, #12
 8009ed6:	5ea3      	ldrsh	r3, [r4, r2]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d0ed      	beq.n	8009eb8 <_fflush_r+0xc>
 8009edc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ede:	07d2      	lsls	r2, r2, #31
 8009ee0:	d404      	bmi.n	8009eec <_fflush_r+0x40>
 8009ee2:	059b      	lsls	r3, r3, #22
 8009ee4:	d402      	bmi.n	8009eec <_fflush_r+0x40>
 8009ee6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ee8:	f000 f923 	bl	800a132 <__retarget_lock_acquire_recursive>
 8009eec:	0028      	movs	r0, r5
 8009eee:	0021      	movs	r1, r4
 8009ef0:	f7ff ff50 	bl	8009d94 <__sflush_r>
 8009ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ef6:	0005      	movs	r5, r0
 8009ef8:	07db      	lsls	r3, r3, #31
 8009efa:	d4de      	bmi.n	8009eba <_fflush_r+0xe>
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	059b      	lsls	r3, r3, #22
 8009f00:	d4db      	bmi.n	8009eba <_fflush_r+0xe>
 8009f02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f04:	f000 f916 	bl	800a134 <__retarget_lock_release_recursive>
 8009f08:	e7d7      	b.n	8009eba <_fflush_r+0xe>
 8009f0a:	4b06      	ldr	r3, [pc, #24]	; (8009f24 <_fflush_r+0x78>)
 8009f0c:	429c      	cmp	r4, r3
 8009f0e:	d101      	bne.n	8009f14 <_fflush_r+0x68>
 8009f10:	68ac      	ldr	r4, [r5, #8]
 8009f12:	e7df      	b.n	8009ed4 <_fflush_r+0x28>
 8009f14:	4b04      	ldr	r3, [pc, #16]	; (8009f28 <_fflush_r+0x7c>)
 8009f16:	429c      	cmp	r4, r3
 8009f18:	d1dc      	bne.n	8009ed4 <_fflush_r+0x28>
 8009f1a:	68ec      	ldr	r4, [r5, #12]
 8009f1c:	e7da      	b.n	8009ed4 <_fflush_r+0x28>
 8009f1e:	46c0      	nop			; (mov r8, r8)
 8009f20:	0800a99c 	.word	0x0800a99c
 8009f24:	0800a9bc 	.word	0x0800a9bc
 8009f28:	0800a97c 	.word	0x0800a97c

08009f2c <std>:
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	b510      	push	{r4, lr}
 8009f30:	0004      	movs	r4, r0
 8009f32:	6003      	str	r3, [r0, #0]
 8009f34:	6043      	str	r3, [r0, #4]
 8009f36:	6083      	str	r3, [r0, #8]
 8009f38:	8181      	strh	r1, [r0, #12]
 8009f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8009f3c:	0019      	movs	r1, r3
 8009f3e:	81c2      	strh	r2, [r0, #14]
 8009f40:	6103      	str	r3, [r0, #16]
 8009f42:	6143      	str	r3, [r0, #20]
 8009f44:	6183      	str	r3, [r0, #24]
 8009f46:	2208      	movs	r2, #8
 8009f48:	305c      	adds	r0, #92	; 0x5c
 8009f4a:	f7fd fc93 	bl	8007874 <memset>
 8009f4e:	4b05      	ldr	r3, [pc, #20]	; (8009f64 <std+0x38>)
 8009f50:	6224      	str	r4, [r4, #32]
 8009f52:	6263      	str	r3, [r4, #36]	; 0x24
 8009f54:	4b04      	ldr	r3, [pc, #16]	; (8009f68 <std+0x3c>)
 8009f56:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f58:	4b04      	ldr	r3, [pc, #16]	; (8009f6c <std+0x40>)
 8009f5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f5c:	4b04      	ldr	r3, [pc, #16]	; (8009f70 <std+0x44>)
 8009f5e:	6323      	str	r3, [r4, #48]	; 0x30
 8009f60:	bd10      	pop	{r4, pc}
 8009f62:	46c0      	nop			; (mov r8, r8)
 8009f64:	0800a2a5 	.word	0x0800a2a5
 8009f68:	0800a2cd 	.word	0x0800a2cd
 8009f6c:	0800a305 	.word	0x0800a305
 8009f70:	0800a331 	.word	0x0800a331

08009f74 <_cleanup_r>:
 8009f74:	b510      	push	{r4, lr}
 8009f76:	4902      	ldr	r1, [pc, #8]	; (8009f80 <_cleanup_r+0xc>)
 8009f78:	f000 f8ba 	bl	800a0f0 <_fwalk_reent>
 8009f7c:	bd10      	pop	{r4, pc}
 8009f7e:	46c0      	nop			; (mov r8, r8)
 8009f80:	08009ead 	.word	0x08009ead

08009f84 <__sfmoreglue>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	2568      	movs	r5, #104	; 0x68
 8009f88:	1e4a      	subs	r2, r1, #1
 8009f8a:	4355      	muls	r5, r2
 8009f8c:	000e      	movs	r6, r1
 8009f8e:	0029      	movs	r1, r5
 8009f90:	3174      	adds	r1, #116	; 0x74
 8009f92:	f7ff fbe1 	bl	8009758 <_malloc_r>
 8009f96:	1e04      	subs	r4, r0, #0
 8009f98:	d008      	beq.n	8009fac <__sfmoreglue+0x28>
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	002a      	movs	r2, r5
 8009f9e:	6001      	str	r1, [r0, #0]
 8009fa0:	6046      	str	r6, [r0, #4]
 8009fa2:	300c      	adds	r0, #12
 8009fa4:	60a0      	str	r0, [r4, #8]
 8009fa6:	3268      	adds	r2, #104	; 0x68
 8009fa8:	f7fd fc64 	bl	8007874 <memset>
 8009fac:	0020      	movs	r0, r4
 8009fae:	bd70      	pop	{r4, r5, r6, pc}

08009fb0 <__sfp_lock_acquire>:
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	4802      	ldr	r0, [pc, #8]	; (8009fbc <__sfp_lock_acquire+0xc>)
 8009fb4:	f000 f8bd 	bl	800a132 <__retarget_lock_acquire_recursive>
 8009fb8:	bd10      	pop	{r4, pc}
 8009fba:	46c0      	nop			; (mov r8, r8)
 8009fbc:	20004ea1 	.word	0x20004ea1

08009fc0 <__sfp_lock_release>:
 8009fc0:	b510      	push	{r4, lr}
 8009fc2:	4802      	ldr	r0, [pc, #8]	; (8009fcc <__sfp_lock_release+0xc>)
 8009fc4:	f000 f8b6 	bl	800a134 <__retarget_lock_release_recursive>
 8009fc8:	bd10      	pop	{r4, pc}
 8009fca:	46c0      	nop			; (mov r8, r8)
 8009fcc:	20004ea1 	.word	0x20004ea1

08009fd0 <__sinit_lock_acquire>:
 8009fd0:	b510      	push	{r4, lr}
 8009fd2:	4802      	ldr	r0, [pc, #8]	; (8009fdc <__sinit_lock_acquire+0xc>)
 8009fd4:	f000 f8ad 	bl	800a132 <__retarget_lock_acquire_recursive>
 8009fd8:	bd10      	pop	{r4, pc}
 8009fda:	46c0      	nop			; (mov r8, r8)
 8009fdc:	20004ea2 	.word	0x20004ea2

08009fe0 <__sinit_lock_release>:
 8009fe0:	b510      	push	{r4, lr}
 8009fe2:	4802      	ldr	r0, [pc, #8]	; (8009fec <__sinit_lock_release+0xc>)
 8009fe4:	f000 f8a6 	bl	800a134 <__retarget_lock_release_recursive>
 8009fe8:	bd10      	pop	{r4, pc}
 8009fea:	46c0      	nop			; (mov r8, r8)
 8009fec:	20004ea2 	.word	0x20004ea2

08009ff0 <__sinit>:
 8009ff0:	b513      	push	{r0, r1, r4, lr}
 8009ff2:	0004      	movs	r4, r0
 8009ff4:	f7ff ffec 	bl	8009fd0 <__sinit_lock_acquire>
 8009ff8:	69a3      	ldr	r3, [r4, #24]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d002      	beq.n	800a004 <__sinit+0x14>
 8009ffe:	f7ff ffef 	bl	8009fe0 <__sinit_lock_release>
 800a002:	bd13      	pop	{r0, r1, r4, pc}
 800a004:	64a3      	str	r3, [r4, #72]	; 0x48
 800a006:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a008:	6523      	str	r3, [r4, #80]	; 0x50
 800a00a:	4b13      	ldr	r3, [pc, #76]	; (800a058 <__sinit+0x68>)
 800a00c:	4a13      	ldr	r2, [pc, #76]	; (800a05c <__sinit+0x6c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	62a2      	str	r2, [r4, #40]	; 0x28
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	42a3      	cmp	r3, r4
 800a016:	d101      	bne.n	800a01c <__sinit+0x2c>
 800a018:	2301      	movs	r3, #1
 800a01a:	61a3      	str	r3, [r4, #24]
 800a01c:	0020      	movs	r0, r4
 800a01e:	f000 f81f 	bl	800a060 <__sfp>
 800a022:	6060      	str	r0, [r4, #4]
 800a024:	0020      	movs	r0, r4
 800a026:	f000 f81b 	bl	800a060 <__sfp>
 800a02a:	60a0      	str	r0, [r4, #8]
 800a02c:	0020      	movs	r0, r4
 800a02e:	f000 f817 	bl	800a060 <__sfp>
 800a032:	2200      	movs	r2, #0
 800a034:	2104      	movs	r1, #4
 800a036:	60e0      	str	r0, [r4, #12]
 800a038:	6860      	ldr	r0, [r4, #4]
 800a03a:	f7ff ff77 	bl	8009f2c <std>
 800a03e:	2201      	movs	r2, #1
 800a040:	2109      	movs	r1, #9
 800a042:	68a0      	ldr	r0, [r4, #8]
 800a044:	f7ff ff72 	bl	8009f2c <std>
 800a048:	2202      	movs	r2, #2
 800a04a:	2112      	movs	r1, #18
 800a04c:	68e0      	ldr	r0, [r4, #12]
 800a04e:	f7ff ff6d 	bl	8009f2c <std>
 800a052:	2301      	movs	r3, #1
 800a054:	61a3      	str	r3, [r4, #24]
 800a056:	e7d2      	b.n	8009ffe <__sinit+0xe>
 800a058:	0800a600 	.word	0x0800a600
 800a05c:	08009f75 	.word	0x08009f75

0800a060 <__sfp>:
 800a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a062:	0007      	movs	r7, r0
 800a064:	f7ff ffa4 	bl	8009fb0 <__sfp_lock_acquire>
 800a068:	4b1f      	ldr	r3, [pc, #124]	; (800a0e8 <__sfp+0x88>)
 800a06a:	681e      	ldr	r6, [r3, #0]
 800a06c:	69b3      	ldr	r3, [r6, #24]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d102      	bne.n	800a078 <__sfp+0x18>
 800a072:	0030      	movs	r0, r6
 800a074:	f7ff ffbc 	bl	8009ff0 <__sinit>
 800a078:	3648      	adds	r6, #72	; 0x48
 800a07a:	68b4      	ldr	r4, [r6, #8]
 800a07c:	6873      	ldr	r3, [r6, #4]
 800a07e:	3b01      	subs	r3, #1
 800a080:	d504      	bpl.n	800a08c <__sfp+0x2c>
 800a082:	6833      	ldr	r3, [r6, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d022      	beq.n	800a0ce <__sfp+0x6e>
 800a088:	6836      	ldr	r6, [r6, #0]
 800a08a:	e7f6      	b.n	800a07a <__sfp+0x1a>
 800a08c:	220c      	movs	r2, #12
 800a08e:	5ea5      	ldrsh	r5, [r4, r2]
 800a090:	2d00      	cmp	r5, #0
 800a092:	d11a      	bne.n	800a0ca <__sfp+0x6a>
 800a094:	0020      	movs	r0, r4
 800a096:	4b15      	ldr	r3, [pc, #84]	; (800a0ec <__sfp+0x8c>)
 800a098:	3058      	adds	r0, #88	; 0x58
 800a09a:	60e3      	str	r3, [r4, #12]
 800a09c:	6665      	str	r5, [r4, #100]	; 0x64
 800a09e:	f000 f847 	bl	800a130 <__retarget_lock_init_recursive>
 800a0a2:	f7ff ff8d 	bl	8009fc0 <__sfp_lock_release>
 800a0a6:	0020      	movs	r0, r4
 800a0a8:	2208      	movs	r2, #8
 800a0aa:	0029      	movs	r1, r5
 800a0ac:	6025      	str	r5, [r4, #0]
 800a0ae:	60a5      	str	r5, [r4, #8]
 800a0b0:	6065      	str	r5, [r4, #4]
 800a0b2:	6125      	str	r5, [r4, #16]
 800a0b4:	6165      	str	r5, [r4, #20]
 800a0b6:	61a5      	str	r5, [r4, #24]
 800a0b8:	305c      	adds	r0, #92	; 0x5c
 800a0ba:	f7fd fbdb 	bl	8007874 <memset>
 800a0be:	6365      	str	r5, [r4, #52]	; 0x34
 800a0c0:	63a5      	str	r5, [r4, #56]	; 0x38
 800a0c2:	64a5      	str	r5, [r4, #72]	; 0x48
 800a0c4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a0c6:	0020      	movs	r0, r4
 800a0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ca:	3468      	adds	r4, #104	; 0x68
 800a0cc:	e7d7      	b.n	800a07e <__sfp+0x1e>
 800a0ce:	2104      	movs	r1, #4
 800a0d0:	0038      	movs	r0, r7
 800a0d2:	f7ff ff57 	bl	8009f84 <__sfmoreglue>
 800a0d6:	1e04      	subs	r4, r0, #0
 800a0d8:	6030      	str	r0, [r6, #0]
 800a0da:	d1d5      	bne.n	800a088 <__sfp+0x28>
 800a0dc:	f7ff ff70 	bl	8009fc0 <__sfp_lock_release>
 800a0e0:	230c      	movs	r3, #12
 800a0e2:	603b      	str	r3, [r7, #0]
 800a0e4:	e7ef      	b.n	800a0c6 <__sfp+0x66>
 800a0e6:	46c0      	nop			; (mov r8, r8)
 800a0e8:	0800a600 	.word	0x0800a600
 800a0ec:	ffff0001 	.word	0xffff0001

0800a0f0 <_fwalk_reent>:
 800a0f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0f2:	0004      	movs	r4, r0
 800a0f4:	0006      	movs	r6, r0
 800a0f6:	2700      	movs	r7, #0
 800a0f8:	9101      	str	r1, [sp, #4]
 800a0fa:	3448      	adds	r4, #72	; 0x48
 800a0fc:	6863      	ldr	r3, [r4, #4]
 800a0fe:	68a5      	ldr	r5, [r4, #8]
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	9b00      	ldr	r3, [sp, #0]
 800a104:	3b01      	subs	r3, #1
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	d504      	bpl.n	800a114 <_fwalk_reent+0x24>
 800a10a:	6824      	ldr	r4, [r4, #0]
 800a10c:	2c00      	cmp	r4, #0
 800a10e:	d1f5      	bne.n	800a0fc <_fwalk_reent+0xc>
 800a110:	0038      	movs	r0, r7
 800a112:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a114:	89ab      	ldrh	r3, [r5, #12]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d908      	bls.n	800a12c <_fwalk_reent+0x3c>
 800a11a:	220e      	movs	r2, #14
 800a11c:	5eab      	ldrsh	r3, [r5, r2]
 800a11e:	3301      	adds	r3, #1
 800a120:	d004      	beq.n	800a12c <_fwalk_reent+0x3c>
 800a122:	0029      	movs	r1, r5
 800a124:	0030      	movs	r0, r6
 800a126:	9b01      	ldr	r3, [sp, #4]
 800a128:	4798      	blx	r3
 800a12a:	4307      	orrs	r7, r0
 800a12c:	3568      	adds	r5, #104	; 0x68
 800a12e:	e7e8      	b.n	800a102 <_fwalk_reent+0x12>

0800a130 <__retarget_lock_init_recursive>:
 800a130:	4770      	bx	lr

0800a132 <__retarget_lock_acquire_recursive>:
 800a132:	4770      	bx	lr

0800a134 <__retarget_lock_release_recursive>:
 800a134:	4770      	bx	lr
	...

0800a138 <__swhatbuf_r>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	000e      	movs	r6, r1
 800a13c:	001d      	movs	r5, r3
 800a13e:	230e      	movs	r3, #14
 800a140:	5ec9      	ldrsh	r1, [r1, r3]
 800a142:	0014      	movs	r4, r2
 800a144:	b096      	sub	sp, #88	; 0x58
 800a146:	2900      	cmp	r1, #0
 800a148:	da08      	bge.n	800a15c <__swhatbuf_r+0x24>
 800a14a:	220c      	movs	r2, #12
 800a14c:	5eb3      	ldrsh	r3, [r6, r2]
 800a14e:	2200      	movs	r2, #0
 800a150:	602a      	str	r2, [r5, #0]
 800a152:	061b      	lsls	r3, r3, #24
 800a154:	d411      	bmi.n	800a17a <__swhatbuf_r+0x42>
 800a156:	2380      	movs	r3, #128	; 0x80
 800a158:	00db      	lsls	r3, r3, #3
 800a15a:	e00f      	b.n	800a17c <__swhatbuf_r+0x44>
 800a15c:	466a      	mov	r2, sp
 800a15e:	f000 f913 	bl	800a388 <_fstat_r>
 800a162:	2800      	cmp	r0, #0
 800a164:	dbf1      	blt.n	800a14a <__swhatbuf_r+0x12>
 800a166:	23f0      	movs	r3, #240	; 0xf0
 800a168:	9901      	ldr	r1, [sp, #4]
 800a16a:	021b      	lsls	r3, r3, #8
 800a16c:	4019      	ands	r1, r3
 800a16e:	4b05      	ldr	r3, [pc, #20]	; (800a184 <__swhatbuf_r+0x4c>)
 800a170:	18c9      	adds	r1, r1, r3
 800a172:	424b      	negs	r3, r1
 800a174:	4159      	adcs	r1, r3
 800a176:	6029      	str	r1, [r5, #0]
 800a178:	e7ed      	b.n	800a156 <__swhatbuf_r+0x1e>
 800a17a:	2340      	movs	r3, #64	; 0x40
 800a17c:	2000      	movs	r0, #0
 800a17e:	6023      	str	r3, [r4, #0]
 800a180:	b016      	add	sp, #88	; 0x58
 800a182:	bd70      	pop	{r4, r5, r6, pc}
 800a184:	ffffe000 	.word	0xffffe000

0800a188 <__smakebuf_r>:
 800a188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a18a:	2602      	movs	r6, #2
 800a18c:	898b      	ldrh	r3, [r1, #12]
 800a18e:	0005      	movs	r5, r0
 800a190:	000c      	movs	r4, r1
 800a192:	4233      	tst	r3, r6
 800a194:	d006      	beq.n	800a1a4 <__smakebuf_r+0x1c>
 800a196:	0023      	movs	r3, r4
 800a198:	3347      	adds	r3, #71	; 0x47
 800a19a:	6023      	str	r3, [r4, #0]
 800a19c:	6123      	str	r3, [r4, #16]
 800a19e:	2301      	movs	r3, #1
 800a1a0:	6163      	str	r3, [r4, #20]
 800a1a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a1a4:	466a      	mov	r2, sp
 800a1a6:	ab01      	add	r3, sp, #4
 800a1a8:	f7ff ffc6 	bl	800a138 <__swhatbuf_r>
 800a1ac:	9900      	ldr	r1, [sp, #0]
 800a1ae:	0007      	movs	r7, r0
 800a1b0:	0028      	movs	r0, r5
 800a1b2:	f7ff fad1 	bl	8009758 <_malloc_r>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d108      	bne.n	800a1cc <__smakebuf_r+0x44>
 800a1ba:	220c      	movs	r2, #12
 800a1bc:	5ea3      	ldrsh	r3, [r4, r2]
 800a1be:	059a      	lsls	r2, r3, #22
 800a1c0:	d4ef      	bmi.n	800a1a2 <__smakebuf_r+0x1a>
 800a1c2:	2203      	movs	r2, #3
 800a1c4:	4393      	bics	r3, r2
 800a1c6:	431e      	orrs	r6, r3
 800a1c8:	81a6      	strh	r6, [r4, #12]
 800a1ca:	e7e4      	b.n	800a196 <__smakebuf_r+0xe>
 800a1cc:	4b0f      	ldr	r3, [pc, #60]	; (800a20c <__smakebuf_r+0x84>)
 800a1ce:	62ab      	str	r3, [r5, #40]	; 0x28
 800a1d0:	2380      	movs	r3, #128	; 0x80
 800a1d2:	89a2      	ldrh	r2, [r4, #12]
 800a1d4:	6020      	str	r0, [r4, #0]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	81a3      	strh	r3, [r4, #12]
 800a1da:	9b00      	ldr	r3, [sp, #0]
 800a1dc:	6120      	str	r0, [r4, #16]
 800a1de:	6163      	str	r3, [r4, #20]
 800a1e0:	9b01      	ldr	r3, [sp, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00d      	beq.n	800a202 <__smakebuf_r+0x7a>
 800a1e6:	0028      	movs	r0, r5
 800a1e8:	230e      	movs	r3, #14
 800a1ea:	5ee1      	ldrsh	r1, [r4, r3]
 800a1ec:	f000 f8de 	bl	800a3ac <_isatty_r>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d006      	beq.n	800a202 <__smakebuf_r+0x7a>
 800a1f4:	2203      	movs	r2, #3
 800a1f6:	89a3      	ldrh	r3, [r4, #12]
 800a1f8:	4393      	bics	r3, r2
 800a1fa:	001a      	movs	r2, r3
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	4313      	orrs	r3, r2
 800a200:	81a3      	strh	r3, [r4, #12]
 800a202:	89a0      	ldrh	r0, [r4, #12]
 800a204:	4307      	orrs	r7, r0
 800a206:	81a7      	strh	r7, [r4, #12]
 800a208:	e7cb      	b.n	800a1a2 <__smakebuf_r+0x1a>
 800a20a:	46c0      	nop			; (mov r8, r8)
 800a20c:	08009f75 	.word	0x08009f75

0800a210 <_raise_r>:
 800a210:	b570      	push	{r4, r5, r6, lr}
 800a212:	0004      	movs	r4, r0
 800a214:	000d      	movs	r5, r1
 800a216:	291f      	cmp	r1, #31
 800a218:	d904      	bls.n	800a224 <_raise_r+0x14>
 800a21a:	2316      	movs	r3, #22
 800a21c:	6003      	str	r3, [r0, #0]
 800a21e:	2001      	movs	r0, #1
 800a220:	4240      	negs	r0, r0
 800a222:	bd70      	pop	{r4, r5, r6, pc}
 800a224:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a226:	2b00      	cmp	r3, #0
 800a228:	d004      	beq.n	800a234 <_raise_r+0x24>
 800a22a:	008a      	lsls	r2, r1, #2
 800a22c:	189b      	adds	r3, r3, r2
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	2a00      	cmp	r2, #0
 800a232:	d108      	bne.n	800a246 <_raise_r+0x36>
 800a234:	0020      	movs	r0, r4
 800a236:	f000 f831 	bl	800a29c <_getpid_r>
 800a23a:	002a      	movs	r2, r5
 800a23c:	0001      	movs	r1, r0
 800a23e:	0020      	movs	r0, r4
 800a240:	f000 f81a 	bl	800a278 <_kill_r>
 800a244:	e7ed      	b.n	800a222 <_raise_r+0x12>
 800a246:	2000      	movs	r0, #0
 800a248:	2a01      	cmp	r2, #1
 800a24a:	d0ea      	beq.n	800a222 <_raise_r+0x12>
 800a24c:	1c51      	adds	r1, r2, #1
 800a24e:	d103      	bne.n	800a258 <_raise_r+0x48>
 800a250:	2316      	movs	r3, #22
 800a252:	3001      	adds	r0, #1
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	e7e4      	b.n	800a222 <_raise_r+0x12>
 800a258:	2400      	movs	r4, #0
 800a25a:	0028      	movs	r0, r5
 800a25c:	601c      	str	r4, [r3, #0]
 800a25e:	4790      	blx	r2
 800a260:	0020      	movs	r0, r4
 800a262:	e7de      	b.n	800a222 <_raise_r+0x12>

0800a264 <raise>:
 800a264:	b510      	push	{r4, lr}
 800a266:	4b03      	ldr	r3, [pc, #12]	; (800a274 <raise+0x10>)
 800a268:	0001      	movs	r1, r0
 800a26a:	6818      	ldr	r0, [r3, #0]
 800a26c:	f7ff ffd0 	bl	800a210 <_raise_r>
 800a270:	bd10      	pop	{r4, pc}
 800a272:	46c0      	nop			; (mov r8, r8)
 800a274:	2000000c 	.word	0x2000000c

0800a278 <_kill_r>:
 800a278:	2300      	movs	r3, #0
 800a27a:	b570      	push	{r4, r5, r6, lr}
 800a27c:	4d06      	ldr	r5, [pc, #24]	; (800a298 <_kill_r+0x20>)
 800a27e:	0004      	movs	r4, r0
 800a280:	0008      	movs	r0, r1
 800a282:	0011      	movs	r1, r2
 800a284:	602b      	str	r3, [r5, #0]
 800a286:	f7f9 fccb 	bl	8003c20 <_kill>
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	d103      	bne.n	800a296 <_kill_r+0x1e>
 800a28e:	682b      	ldr	r3, [r5, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d000      	beq.n	800a296 <_kill_r+0x1e>
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	bd70      	pop	{r4, r5, r6, pc}
 800a298:	20004e9c 	.word	0x20004e9c

0800a29c <_getpid_r>:
 800a29c:	b510      	push	{r4, lr}
 800a29e:	f7f9 fcb9 	bl	8003c14 <_getpid>
 800a2a2:	bd10      	pop	{r4, pc}

0800a2a4 <__sread>:
 800a2a4:	b570      	push	{r4, r5, r6, lr}
 800a2a6:	000c      	movs	r4, r1
 800a2a8:	250e      	movs	r5, #14
 800a2aa:	5f49      	ldrsh	r1, [r1, r5]
 800a2ac:	f000 f8a4 	bl	800a3f8 <_read_r>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	db03      	blt.n	800a2bc <__sread+0x18>
 800a2b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a2b6:	181b      	adds	r3, r3, r0
 800a2b8:	6563      	str	r3, [r4, #84]	; 0x54
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
 800a2bc:	89a3      	ldrh	r3, [r4, #12]
 800a2be:	4a02      	ldr	r2, [pc, #8]	; (800a2c8 <__sread+0x24>)
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	81a3      	strh	r3, [r4, #12]
 800a2c4:	e7f9      	b.n	800a2ba <__sread+0x16>
 800a2c6:	46c0      	nop			; (mov r8, r8)
 800a2c8:	ffffefff 	.word	0xffffefff

0800a2cc <__swrite>:
 800a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ce:	001f      	movs	r7, r3
 800a2d0:	898b      	ldrh	r3, [r1, #12]
 800a2d2:	0005      	movs	r5, r0
 800a2d4:	000c      	movs	r4, r1
 800a2d6:	0016      	movs	r6, r2
 800a2d8:	05db      	lsls	r3, r3, #23
 800a2da:	d505      	bpl.n	800a2e8 <__swrite+0x1c>
 800a2dc:	230e      	movs	r3, #14
 800a2de:	5ec9      	ldrsh	r1, [r1, r3]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	2302      	movs	r3, #2
 800a2e4:	f000 f874 	bl	800a3d0 <_lseek_r>
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	4a05      	ldr	r2, [pc, #20]	; (800a300 <__swrite+0x34>)
 800a2ec:	0028      	movs	r0, r5
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	81a3      	strh	r3, [r4, #12]
 800a2f2:	0032      	movs	r2, r6
 800a2f4:	230e      	movs	r3, #14
 800a2f6:	5ee1      	ldrsh	r1, [r4, r3]
 800a2f8:	003b      	movs	r3, r7
 800a2fa:	f000 f81f 	bl	800a33c <_write_r>
 800a2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a300:	ffffefff 	.word	0xffffefff

0800a304 <__sseek>:
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	000c      	movs	r4, r1
 800a308:	250e      	movs	r5, #14
 800a30a:	5f49      	ldrsh	r1, [r1, r5]
 800a30c:	f000 f860 	bl	800a3d0 <_lseek_r>
 800a310:	89a3      	ldrh	r3, [r4, #12]
 800a312:	1c42      	adds	r2, r0, #1
 800a314:	d103      	bne.n	800a31e <__sseek+0x1a>
 800a316:	4a05      	ldr	r2, [pc, #20]	; (800a32c <__sseek+0x28>)
 800a318:	4013      	ands	r3, r2
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	bd70      	pop	{r4, r5, r6, pc}
 800a31e:	2280      	movs	r2, #128	; 0x80
 800a320:	0152      	lsls	r2, r2, #5
 800a322:	4313      	orrs	r3, r2
 800a324:	81a3      	strh	r3, [r4, #12]
 800a326:	6560      	str	r0, [r4, #84]	; 0x54
 800a328:	e7f8      	b.n	800a31c <__sseek+0x18>
 800a32a:	46c0      	nop			; (mov r8, r8)
 800a32c:	ffffefff 	.word	0xffffefff

0800a330 <__sclose>:
 800a330:	b510      	push	{r4, lr}
 800a332:	230e      	movs	r3, #14
 800a334:	5ec9      	ldrsh	r1, [r1, r3]
 800a336:	f000 f815 	bl	800a364 <_close_r>
 800a33a:	bd10      	pop	{r4, pc}

0800a33c <_write_r>:
 800a33c:	b570      	push	{r4, r5, r6, lr}
 800a33e:	0004      	movs	r4, r0
 800a340:	0008      	movs	r0, r1
 800a342:	0011      	movs	r1, r2
 800a344:	001a      	movs	r2, r3
 800a346:	2300      	movs	r3, #0
 800a348:	4d05      	ldr	r5, [pc, #20]	; (800a360 <_write_r+0x24>)
 800a34a:	602b      	str	r3, [r5, #0]
 800a34c:	f7f9 fca1 	bl	8003c92 <_write>
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	d103      	bne.n	800a35c <_write_r+0x20>
 800a354:	682b      	ldr	r3, [r5, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d000      	beq.n	800a35c <_write_r+0x20>
 800a35a:	6023      	str	r3, [r4, #0]
 800a35c:	bd70      	pop	{r4, r5, r6, pc}
 800a35e:	46c0      	nop			; (mov r8, r8)
 800a360:	20004e9c 	.word	0x20004e9c

0800a364 <_close_r>:
 800a364:	2300      	movs	r3, #0
 800a366:	b570      	push	{r4, r5, r6, lr}
 800a368:	4d06      	ldr	r5, [pc, #24]	; (800a384 <_close_r+0x20>)
 800a36a:	0004      	movs	r4, r0
 800a36c:	0008      	movs	r0, r1
 800a36e:	602b      	str	r3, [r5, #0]
 800a370:	f7f9 fcab 	bl	8003cca <_close>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d103      	bne.n	800a380 <_close_r+0x1c>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d000      	beq.n	800a380 <_close_r+0x1c>
 800a37e:	6023      	str	r3, [r4, #0]
 800a380:	bd70      	pop	{r4, r5, r6, pc}
 800a382:	46c0      	nop			; (mov r8, r8)
 800a384:	20004e9c 	.word	0x20004e9c

0800a388 <_fstat_r>:
 800a388:	2300      	movs	r3, #0
 800a38a:	b570      	push	{r4, r5, r6, lr}
 800a38c:	4d06      	ldr	r5, [pc, #24]	; (800a3a8 <_fstat_r+0x20>)
 800a38e:	0004      	movs	r4, r0
 800a390:	0008      	movs	r0, r1
 800a392:	0011      	movs	r1, r2
 800a394:	602b      	str	r3, [r5, #0]
 800a396:	f7f9 fca2 	bl	8003cde <_fstat>
 800a39a:	1c43      	adds	r3, r0, #1
 800a39c:	d103      	bne.n	800a3a6 <_fstat_r+0x1e>
 800a39e:	682b      	ldr	r3, [r5, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d000      	beq.n	800a3a6 <_fstat_r+0x1e>
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	bd70      	pop	{r4, r5, r6, pc}
 800a3a8:	20004e9c 	.word	0x20004e9c

0800a3ac <_isatty_r>:
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	b570      	push	{r4, r5, r6, lr}
 800a3b0:	4d06      	ldr	r5, [pc, #24]	; (800a3cc <_isatty_r+0x20>)
 800a3b2:	0004      	movs	r4, r0
 800a3b4:	0008      	movs	r0, r1
 800a3b6:	602b      	str	r3, [r5, #0]
 800a3b8:	f7f9 fc9f 	bl	8003cfa <_isatty>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d103      	bne.n	800a3c8 <_isatty_r+0x1c>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d000      	beq.n	800a3c8 <_isatty_r+0x1c>
 800a3c6:	6023      	str	r3, [r4, #0]
 800a3c8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ca:	46c0      	nop			; (mov r8, r8)
 800a3cc:	20004e9c 	.word	0x20004e9c

0800a3d0 <_lseek_r>:
 800a3d0:	b570      	push	{r4, r5, r6, lr}
 800a3d2:	0004      	movs	r4, r0
 800a3d4:	0008      	movs	r0, r1
 800a3d6:	0011      	movs	r1, r2
 800a3d8:	001a      	movs	r2, r3
 800a3da:	2300      	movs	r3, #0
 800a3dc:	4d05      	ldr	r5, [pc, #20]	; (800a3f4 <_lseek_r+0x24>)
 800a3de:	602b      	str	r3, [r5, #0]
 800a3e0:	f7f9 fc94 	bl	8003d0c <_lseek>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	d103      	bne.n	800a3f0 <_lseek_r+0x20>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d000      	beq.n	800a3f0 <_lseek_r+0x20>
 800a3ee:	6023      	str	r3, [r4, #0]
 800a3f0:	bd70      	pop	{r4, r5, r6, pc}
 800a3f2:	46c0      	nop			; (mov r8, r8)
 800a3f4:	20004e9c 	.word	0x20004e9c

0800a3f8 <_read_r>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	0004      	movs	r4, r0
 800a3fc:	0008      	movs	r0, r1
 800a3fe:	0011      	movs	r1, r2
 800a400:	001a      	movs	r2, r3
 800a402:	2300      	movs	r3, #0
 800a404:	4d05      	ldr	r5, [pc, #20]	; (800a41c <_read_r+0x24>)
 800a406:	602b      	str	r3, [r5, #0]
 800a408:	f7f9 fc26 	bl	8003c58 <_read>
 800a40c:	1c43      	adds	r3, r0, #1
 800a40e:	d103      	bne.n	800a418 <_read_r+0x20>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d000      	beq.n	800a418 <_read_r+0x20>
 800a416:	6023      	str	r3, [r4, #0]
 800a418:	bd70      	pop	{r4, r5, r6, pc}
 800a41a:	46c0      	nop			; (mov r8, r8)
 800a41c:	20004e9c 	.word	0x20004e9c

0800a420 <_init>:
 800a420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a422:	46c0      	nop			; (mov r8, r8)
 800a424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a426:	bc08      	pop	{r3}
 800a428:	469e      	mov	lr, r3
 800a42a:	4770      	bx	lr

0800a42c <_fini>:
 800a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42e:	46c0      	nop			; (mov r8, r8)
 800a430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a432:	bc08      	pop	{r3}
 800a434:	469e      	mov	lr, r3
 800a436:	4770      	bx	lr
