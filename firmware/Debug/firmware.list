
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004544  08004544  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004544  08004544  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004544  08004544  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004544  08004544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800454c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000070  080045bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080045bc  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012255  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023bf  00000000  00000000  000322ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  000346b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00035630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176bd  00000000  00000000  000364d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012093  00000000  00000000  0004db95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000984df  00000000  00000000  0005fc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c3c  00000000  00000000  000f8158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004468 	.word	0x08004468

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08004468 	.word	0x08004468

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000416:	f000 fbb7 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041a:	f000 f823 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041e:	f000 f95d 	bl	80006dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000422:	f000 f867 	bl	80004f4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000426:	f000 f90b 	bl	8000640 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800042a:	f000 f8cd 	bl	80005c8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  init_1ms_counter();
 800042e:	f000 f9b9 	bl	80007a4 <init_1ms_counter>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (elapsed_1ms()) {
 8000432:	f000 f9cb 	bl	80007cc <elapsed_1ms>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d0fb      	beq.n	8000432 <main+0x22>
		  reset_1ms_counter();
 800043a:	f000 f9dd 	bl	80007f8 <reset_1ms_counter>

		  // DEBUG: Toggle pin to ensure loop is being entered at the correct frequency
		  HAL_GPIO_TogglePin(DEBUG_GPIO_Port, DEBUG_Pin);
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	00da      	lsls	r2, r3, #3
 8000442:	23a0      	movs	r3, #160	; 0xa0
 8000444:	05db      	lsls	r3, r3, #23
 8000446:	0011      	movs	r1, r2
 8000448:	0018      	movs	r0, r3
 800044a:	f001 fcac 	bl	8001da6 <HAL_GPIO_TogglePin>

		  data = input();
 800044e:	1dbc      	adds	r4, r7, #6
 8000450:	f000 f9e2 	bl	8000818 <input>
 8000454:	0003      	movs	r3, r0
 8000456:	8023      	strh	r3, [r4, #0]
		  output(data);
 8000458:	1dbb      	adds	r3, r7, #6
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	0018      	movs	r0, r3
 800045e:	f000 f9f3 	bl	8000848 <output>
	  if (elapsed_1ms()) {
 8000462:	e7e6      	b.n	8000432 <main+0x22>

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b093      	sub	sp, #76	; 0x4c
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	2414      	movs	r4, #20
 800046c:	193b      	adds	r3, r7, r4
 800046e:	0018      	movs	r0, r3
 8000470:	2334      	movs	r3, #52	; 0x34
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f003 fb85 	bl	8003b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	0018      	movs	r0, r3
 800047e:	2310      	movs	r3, #16
 8000480:	001a      	movs	r2, r3
 8000482:	2100      	movs	r1, #0
 8000484:	f003 fb7e 	bl	8003b84 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	0018      	movs	r0, r3
 800048e:	f001 fca5 	bl	8001ddc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2202      	movs	r2, #2
 8000496:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	0052      	lsls	r2, r2, #1
 800049e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	2240      	movs	r2, #64	; 0x40
 80004aa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2200      	movs	r2, #0
 80004b0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fcdd 	bl	8001e74 <HAL_RCC_OscConfig>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004be:	f000 f9e5 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2207      	movs	r2, #7
 80004c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2100      	movs	r1, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 ffd8 	bl	8002494 <HAL_RCC_ClockConfig>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004e8:	f000 f9d0 	bl	800088c <Error_Handler>
  }
}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b013      	add	sp, #76	; 0x4c
 80004f2:	bd90      	pop	{r4, r7, pc}

080004f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	0018      	movs	r0, r3
 80004fe:	230c      	movs	r3, #12
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f003 fb3e 	bl	8003b84 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000508:	4b2d      	ldr	r3, [pc, #180]	; (80005c0 <MX_ADC1_Init+0xcc>)
 800050a:	4a2e      	ldr	r2, [pc, #184]	; (80005c4 <MX_ADC1_Init+0xd0>)
 800050c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800050e:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <MX_ADC1_Init+0xcc>)
 8000510:	2280      	movs	r2, #128	; 0x80
 8000512:	05d2      	lsls	r2, r2, #23
 8000514:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000516:	4b2a      	ldr	r3, [pc, #168]	; (80005c0 <MX_ADC1_Init+0xcc>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800051c:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <MX_ADC1_Init+0xcc>)
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000522:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <MX_ADC1_Init+0xcc>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <MX_ADC1_Init+0xcc>)
 800052a:	2204      	movs	r2, #4
 800052c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800052e:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_ADC1_Init+0xcc>)
 8000530:	2200      	movs	r2, #0
 8000532:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000534:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <MX_ADC1_Init+0xcc>)
 8000536:	2200      	movs	r2, #0
 8000538:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_ADC1_Init+0xcc>)
 800053c:	2200      	movs	r2, #0
 800053e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <MX_ADC1_Init+0xcc>)
 8000542:	2201      	movs	r2, #1
 8000544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_ADC1_Init+0xcc>)
 8000548:	2220      	movs	r2, #32
 800054a:	2100      	movs	r1, #0
 800054c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <MX_ADC1_Init+0xcc>)
 8000550:	2200      	movs	r2, #0
 8000552:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000554:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <MX_ADC1_Init+0xcc>)
 8000556:	2200      	movs	r2, #0
 8000558:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <MX_ADC1_Init+0xcc>)
 800055c:	222c      	movs	r2, #44	; 0x2c
 800055e:	2100      	movs	r1, #0
 8000560:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <MX_ADC1_Init+0xcc>)
 8000564:	2200      	movs	r2, #0
 8000566:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_ADC1_Init+0xcc>)
 800056a:	2200      	movs	r2, #0
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_ADC1_Init+0xcc>)
 8000570:	2200      	movs	r2, #0
 8000572:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_ADC1_Init+0xcc>)
 8000576:	223c      	movs	r2, #60	; 0x3c
 8000578:	2100      	movs	r1, #0
 800057a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_ADC1_Init+0xcc>)
 800057e:	2200      	movs	r2, #0
 8000580:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_ADC1_Init+0xcc>)
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fcbb 	bl	8000f00 <HAL_ADC_Init>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800058e:	f000 f97d 	bl	800088c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a4:	1d3a      	adds	r2, r7, #4
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_ADC1_Init+0xcc>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 ff3e 	bl	800142c <HAL_ADC_ConfigChannel>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80005b4:	f000 f96a 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b004      	add	sp, #16
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000008c 	.word	0x2000008c
 80005c4:	40012400 	.word	0x40012400

080005c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	0018      	movs	r0, r3
 80005d2:	230c      	movs	r3, #12
 80005d4:	001a      	movs	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	f003 fad4 	bl	8003b84 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_TIM6_Init+0x6c>)
 80005de:	4a16      	ldr	r2, [pc, #88]	; (8000638 <MX_TIM6_Init+0x70>)
 80005e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_TIM6_Init+0x6c>)
 80005e4:	220f      	movs	r2, #15
 80005e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_TIM6_Init+0x6c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_TIM6_Init+0x6c>)
 80005f0:	4a12      	ldr	r2, [pc, #72]	; (800063c <MX_TIM6_Init+0x74>)
 80005f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_TIM6_Init+0x6c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_TIM6_Init+0x6c>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f002 fa27 	bl	8002a50 <HAL_TIM_Base_Init>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000606:	f000 f941 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000616:	1d3a      	adds	r2, r7, #4
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_TIM6_Init+0x6c>)
 800061a:	0011      	movs	r1, r2
 800061c:	0018      	movs	r0, r3
 800061e:	f002 fc8d 	bl	8002f3c <HAL_TIMEx_MasterConfigSynchronization>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000626:	f000 f931 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b004      	add	sp, #16
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	200000f0 	.word	0x200000f0
 8000638:	40001000 	.word	0x40001000
 800063c:	0000ffff 	.word	0x0000ffff

08000640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000646:	4a24      	ldr	r2, [pc, #144]	; (80006d8 <MX_USART2_UART_Init+0x98>)
 8000648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 800064c:	22e1      	movs	r2, #225	; 0xe1
 800064e:	0252      	lsls	r2, r2, #9
 8000650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000684:	2200      	movs	r2, #0
 8000686:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 800068a:	0018      	movs	r0, r3
 800068c:	f002 fcd6 	bl	800303c <HAL_UART_Init>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000694:	f000 f8fa 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 800069a:	2100      	movs	r1, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f003 f967 	bl	8003970 <HAL_UARTEx_SetTxFifoThreshold>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006a6:	f000 f8f1 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	0018      	movs	r0, r3
 80006b0:	f003 f99e 	bl	80039f0 <HAL_UARTEx_SetRxFifoThreshold>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006b8:	f000 f8e8 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f003 f91c 	bl	80038fc <HAL_UARTEx_DisableFifoMode>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006c8:	f000 f8e0 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	2000013c 	.word	0x2000013c
 80006d8:	40004400 	.word	0x40004400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	240c      	movs	r4, #12
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	0018      	movs	r0, r3
 80006e8:	2314      	movs	r3, #20
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f003 fa49 	bl	8003b84 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b2a      	ldr	r3, [pc, #168]	; (800079c <MX_GPIO_Init+0xc0>)
 80006f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006f6:	4b29      	ldr	r3, [pc, #164]	; (800079c <MX_GPIO_Init+0xc0>)
 80006f8:	2104      	movs	r1, #4
 80006fa:	430a      	orrs	r2, r1
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
 80006fe:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_GPIO_Init+0xc0>)
 8000700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000702:	2204      	movs	r2, #4
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_GPIO_Init+0xc0>)
 800070c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_GPIO_Init+0xc0>)
 8000710:	2120      	movs	r1, #32
 8000712:	430a      	orrs	r2, r1
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_GPIO_Init+0xc0>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800071a:	2220      	movs	r2, #32
 800071c:	4013      	ands	r3, r2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_GPIO_Init+0xc0>)
 8000724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_GPIO_Init+0xc0>)
 8000728:	2101      	movs	r1, #1
 800072a:	430a      	orrs	r2, r1
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_GPIO_Init+0xc0>)
 8000730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000732:	2201      	movs	r2, #1
 8000734:	4013      	ands	r3, r2
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|DEBUG_Pin, GPIO_PIN_SET);
 800073a:	2384      	movs	r3, #132	; 0x84
 800073c:	00d9      	lsls	r1, r3, #3
 800073e:	23a0      	movs	r3, #160	; 0xa0
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	2201      	movs	r2, #1
 8000744:	0018      	movs	r0, r3
 8000746:	f001 fb11 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PUSHBUTTON_Pin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	0192      	lsls	r2, r2, #6
 8000750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 800075e:	193b      	adds	r3, r7, r4
 8000760:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <MX_GPIO_Init+0xc4>)
 8000762:	0019      	movs	r1, r3
 8000764:	0010      	movs	r0, r2
 8000766:	f001 f99d 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DEBUG_Pin;
 800076a:	0021      	movs	r1, r4
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2284      	movs	r2, #132	; 0x84
 8000770:	00d2      	lsls	r2, r2, #3
 8000772:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2201      	movs	r2, #1
 8000778:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	187a      	adds	r2, r7, r1
 8000788:	23a0      	movs	r3, #160	; 0xa0
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	0011      	movs	r1, r2
 800078e:	0018      	movs	r0, r3
 8000790:	f001 f988 	bl	8001aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b009      	add	sp, #36	; 0x24
 800079a:	bd90      	pop	{r4, r7, pc}
 800079c:	40021000 	.word	0x40021000
 80007a0:	50000800 	.word	0x50000800

080007a4 <init_1ms_counter>:

/* USER CODE BEGIN 4 */

void init_1ms_counter(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

	// Start the timer being used for the 1 ms counter
	HAL_TIM_Base_Start(MHZ_TIMER);
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <init_1ms_counter+0x20>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 f9a8 	bl	8002b00 <HAL_TIM_Base_Start>

	// Set the counter
	counter_1ms = __HAL_TIM_GET_COUNTER(MHZ_TIMER);
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <init_1ms_counter+0x20>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <init_1ms_counter+0x24>)
 80007ba:	801a      	strh	r2, [r3, #0]
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	200000f0 	.word	0x200000f0
 80007c8:	200001d0 	.word	0x200001d0

080007cc <elapsed_1ms>:

bool elapsed_1ms(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(MHZ_TIMER) - counter_1ms >= 1000 ? true : false;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <elapsed_1ms+0x24>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d6:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <elapsed_1ms+0x28>)
 80007d8:	8812      	ldrh	r2, [r2, #0]
 80007da:	1a99      	subs	r1, r3, r2
 80007dc:	23fa      	movs	r3, #250	; 0xfa
 80007de:	009a      	lsls	r2, r3, #2
 80007e0:	2300      	movs	r3, #0
 80007e2:	4291      	cmp	r1, r2
 80007e4:	415b      	adcs	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
}
 80007e8:	0018      	movs	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	200000f0 	.word	0x200000f0
 80007f4:	200001d0 	.word	0x200001d0

080007f8 <reset_1ms_counter>:

void reset_1ms_counter(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	counter_1ms = __HAL_TIM_GET_COUNTER(MHZ_TIMER);
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <reset_1ms_counter+0x18>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <reset_1ms_counter+0x1c>)
 8000806:	801a      	strh	r2, [r3, #0]
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	200000f0 	.word	0x200000f0
 8000814:	200001d0 	.word	0x200001d0

08000818 <input>:

dataType input(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(ECG_ADC);
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <input+0x2c>)
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fd16 	bl	8001250 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ECG_ADC, HAL_MAX_DELAY);
 8000824:	2301      	movs	r3, #1
 8000826:	425a      	negs	r2, r3
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <input+0x2c>)
 800082a:	0011      	movs	r1, r2
 800082c:	0018      	movs	r0, r3
 800082e:	f000 fd5d 	bl	80012ec <HAL_ADC_PollForConversion>

	return (dataType) HAL_ADC_GetValue(ECG_ADC);
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <input+0x2c>)
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fded 	bl	8001414 <HAL_ADC_GetValue>
 800083a:	0003      	movs	r3, r0
 800083c:	b29b      	uxth	r3, r3
}
 800083e:	0018      	movs	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000008c 	.word	0x2000008c

08000848 <output>:

void output(dataType data) {
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b087      	sub	sp, #28
 800084c:	af00      	add	r7, sp, #0
 800084e:	0002      	movs	r2, r0
 8000850:	1dbb      	adds	r3, r7, #6
 8000852:	801a      	strh	r2, [r3, #0]
	char msg[10];

	sprintf(msg, "%hu\r\n", data);
 8000854:	1dbb      	adds	r3, r7, #6
 8000856:	881a      	ldrh	r2, [r3, #0]
 8000858:	490a      	ldr	r1, [pc, #40]	; (8000884 <output+0x3c>)
 800085a:	240c      	movs	r4, #12
 800085c:	193b      	adds	r3, r7, r4
 800085e:	0018      	movs	r0, r3
 8000860:	f003 f998 	bl	8003b94 <siprintf>
	HAL_UART_Transmit(SIG_UART, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000864:	193b      	adds	r3, r7, r4
 8000866:	0018      	movs	r0, r3
 8000868:	f7ff fc4a 	bl	8000100 <strlen>
 800086c:	0003      	movs	r3, r0
 800086e:	b29a      	uxth	r2, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	1939      	adds	r1, r7, r4
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <output+0x40>)
 8000878:	f002 fc36 	bl	80030e8 <HAL_UART_Transmit>
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b007      	add	sp, #28
 8000882:	bd90      	pop	{r4, r7, pc}
 8000884:	08004480 	.word	0x08004480
 8000888:	2000013c 	.word	0x2000013c

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_MspInit+0x44>)
 80008a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <HAL_MspInit+0x44>)
 80008a4:	2101      	movs	r1, #1
 80008a6:	430a      	orrs	r2, r1
 80008a8:	641a      	str	r2, [r3, #64]	; 0x40
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_MspInit+0x44>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	2201      	movs	r2, #1
 80008b0:	4013      	ands	r3, r2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x44>)
 80008b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_MspInit+0x44>)
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	0549      	lsls	r1, r1, #21
 80008c0:	430a      	orrs	r2, r1
 80008c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_MspInit+0x44>)
 80008c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	055b      	lsls	r3, r3, #21
 80008cc:	4013      	ands	r3, r2
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b08b      	sub	sp, #44	; 0x2c
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	2414      	movs	r4, #20
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	0018      	movs	r0, r3
 80008ee:	2314      	movs	r3, #20
 80008f0:	001a      	movs	r2, r3
 80008f2:	2100      	movs	r1, #0
 80008f4:	f003 f946 	bl	8003b84 <memset>
  if(hadc->Instance==ADC1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a18      	ldr	r2, [pc, #96]	; (8000960 <HAL_ADC_MspInit+0x80>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d129      	bne.n	8000956 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_ADC_MspInit+0x84>)
 8000904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <HAL_ADC_MspInit+0x84>)
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	0349      	lsls	r1, r1, #13
 800090c:	430a      	orrs	r2, r1
 800090e:	641a      	str	r2, [r3, #64]	; 0x40
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <HAL_ADC_MspInit+0x84>)
 8000912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	035b      	lsls	r3, r3, #13
 8000918:	4013      	ands	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_ADC_MspInit+0x84>)
 8000920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <HAL_ADC_MspInit+0x84>)
 8000924:	2101      	movs	r1, #1
 8000926:	430a      	orrs	r2, r1
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_ADC_MspInit+0x84>)
 800092c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800092e:	2201      	movs	r2, #1
 8000930:	4013      	ands	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2201      	movs	r2, #1
 800093a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	2203      	movs	r2, #3
 8000940:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	193b      	adds	r3, r7, r4
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	193a      	adds	r2, r7, r4
 800094a:	23a0      	movs	r3, #160	; 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f001 f8a7 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b00b      	add	sp, #44	; 0x2c
 800095c:	bd90      	pop	{r4, r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40012400 	.word	0x40012400
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <HAL_TIM_Base_MspInit+0x44>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d113      	bne.n	80009a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_TIM_Base_MspInit+0x48>)
 800097c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_TIM_Base_MspInit+0x48>)
 8000980:	2110      	movs	r1, #16
 8000982:	430a      	orrs	r2, r1
 8000984:	63da      	str	r2, [r3, #60]	; 0x3c
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_TIM_Base_MspInit+0x48>)
 8000988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800098a:	2210      	movs	r2, #16
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2011      	movs	r0, #17
 8000998:	f001 f852 	bl	8001a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800099c:	2011      	movs	r0, #17
 800099e:	f001 f864 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b004      	add	sp, #16
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40001000 	.word	0x40001000
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b091      	sub	sp, #68	; 0x44
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	232c      	movs	r3, #44	; 0x2c
 80009be:	18fb      	adds	r3, r7, r3
 80009c0:	0018      	movs	r0, r3
 80009c2:	2314      	movs	r3, #20
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f003 f8dc 	bl	8003b84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009cc:	2410      	movs	r4, #16
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	0018      	movs	r0, r3
 80009d2:	231c      	movs	r3, #28
 80009d4:	001a      	movs	r2, r3
 80009d6:	2100      	movs	r1, #0
 80009d8:	f003 f8d4 	bl	8003b84 <memset>
  if(huart->Instance==USART2)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a22      	ldr	r2, [pc, #136]	; (8000a6c <HAL_UART_MspInit+0xb8>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d13e      	bne.n	8000a64 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2202      	movs	r2, #2
 80009ea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	0018      	movs	r0, r3
 80009f6:	f001 fef7 	bl	80027e8 <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009fe:	f7ff ff45 	bl	800088c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <HAL_UART_MspInit+0xbc>)
 8000a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <HAL_UART_MspInit+0xbc>)
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	0289      	lsls	r1, r1, #10
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <HAL_UART_MspInit+0xbc>)
 8000a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	029b      	lsls	r3, r3, #10
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <HAL_UART_MspInit+0xbc>)
 8000a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <HAL_UART_MspInit+0xbc>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	430a      	orrs	r2, r1
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_UART_MspInit+0xbc>)
 8000a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a36:	212c      	movs	r1, #44	; 0x2c
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2202      	movs	r2, #2
 8000a42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2201      	movs	r2, #1
 8000a54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	187a      	adds	r2, r7, r1
 8000a58:	23a0      	movs	r3, #160	; 0xa0
 8000a5a:	05db      	lsls	r3, r3, #23
 8000a5c:	0011      	movs	r1, r2
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 f820 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b011      	add	sp, #68	; 0x44
 8000a6a:	bd90      	pop	{r4, r7, pc}
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	40021000 	.word	0x40021000

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a98:	f000 f8e0 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <TIM6_IRQHandler+0x14>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f002 f876 	bl	8002b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	200000f0 	.word	0x200000f0

08000abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac4:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <_sbrk+0x5c>)
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <_sbrk+0x60>)
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d102      	bne.n	8000ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <_sbrk+0x64>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <_sbrk+0x68>)
 8000adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	18d3      	adds	r3, r2, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d207      	bcs.n	8000afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aec:	f003 f820 	bl	8003b30 <__errno>
 8000af0:	0003      	movs	r3, r0
 8000af2:	220c      	movs	r2, #12
 8000af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	425b      	negs	r3, r3
 8000afa:	e009      	b.n	8000b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	18d2      	adds	r2, r2, r3
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <_sbrk+0x64>)
 8000b0c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b006      	add	sp, #24
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20009000 	.word	0x20009000
 8000b1c:	00000400 	.word	0x00000400
 8000b20:	200001d4 	.word	0x200001d4
 8000b24:	200001f0 	.word	0x200001f0

08000b28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b38:	f7ff fff6 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	; (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	; (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b62:	f002 ffeb 	bl	8003b3c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b66:	f7ff fc53 	bl	8000410 <main>

08000b6a <LoopForever>:

LoopForever:
  b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   r0, =_estack
 8000b6c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b78:	0800454c 	.word	0x0800454c
  ldr r2, =_sbss
 8000b7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b80:	200001ec 	.word	0x200001ec

08000b84 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_Init+0x3c>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_Init+0x3c>)
 8000b9a:	2180      	movs	r1, #128	; 0x80
 8000b9c:	0049      	lsls	r1, r1, #1
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 f810 	bl	8000bc8 <HAL_InitTick>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d003      	beq.n	8000bb4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	e001      	b.n	8000bb8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fe70 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40022000 	.word	0x40022000

08000bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <HAL_InitTick+0x88>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d02b      	beq.n	8000c38 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_InitTick+0x8c>)
 8000be2:	681c      	ldr	r4, [r3, #0]
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <HAL_InitTick+0x88>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	0019      	movs	r1, r3
 8000bea:	23fa      	movs	r3, #250	; 0xfa
 8000bec:	0098      	lsls	r0, r3, #2
 8000bee:	f7ff fa99 	bl	8000124 <__udivsi3>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	0020      	movs	r0, r4
 8000bf8:	f7ff fa94 	bl	8000124 <__udivsi3>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 ff43 	bl	8001a8a <HAL_SYSTICK_Config>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d112      	bne.n	8000c2e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d80a      	bhi.n	8000c24 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	2301      	movs	r3, #1
 8000c12:	425b      	negs	r3, r3
 8000c14:	2200      	movs	r2, #0
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 ff12 	bl	8001a40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_InitTick+0x90>)
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	e00d      	b.n	8000c40 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c24:	230f      	movs	r3, #15
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	e008      	b.n	8000c40 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c2e:	230f      	movs	r3, #15
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e003      	b.n	8000c40 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c38:	230f      	movs	r3, #15
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c40:	230f      	movs	r3, #15
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b005      	add	sp, #20
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x1c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	001a      	movs	r2, r3
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_IncTick+0x20>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	18d2      	adds	r2, r2, r3
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <HAL_IncTick+0x20>)
 8000c6e:	601a      	str	r2, [r3, #0]
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	200001d8 	.word	0x200001d8

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b02      	ldr	r3, [pc, #8]	; (8000c90 <HAL_GetTick+0x10>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	0018      	movs	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	200001d8 	.word	0x200001d8

08000c94 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	601a      	str	r2, [r3, #0]
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	fe3fffff 	.word	0xfe3fffff

08000cbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	23e0      	movs	r3, #224	; 0xe0
 8000cca:	045b      	lsls	r3, r3, #17
 8000ccc:	4013      	ands	r3, r2
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	2104      	movs	r1, #4
 8000cea:	400a      	ands	r2, r1
 8000cec:	2107      	movs	r1, #7
 8000cee:	4091      	lsls	r1, r2
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	43d2      	mvns	r2, r2
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	4099      	lsls	r1, r3
 8000d00:	000b      	movs	r3, r1
 8000d02:	431a      	orrs	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b004      	add	sp, #16
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	2104      	movs	r1, #4
 8000d22:	400a      	ands	r2, r1
 8000d24:	2107      	movs	r1, #7
 8000d26:	4091      	lsls	r1, r2
 8000d28:	000a      	movs	r2, r1
 8000d2a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2104      	movs	r1, #4
 8000d30:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d32:	40da      	lsrs	r2, r3
 8000d34:	0013      	movs	r3, r2
}
 8000d36:	0018      	movs	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	23c0      	movs	r3, #192	; 0xc0
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d101      	bne.n	8000d56 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b002      	add	sp, #8
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	211f      	movs	r1, #31
 8000d74:	400a      	ands	r2, r1
 8000d76:	210f      	movs	r1, #15
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	000a      	movs	r2, r1
 8000d7c:	43d2      	mvns	r2, r2
 8000d7e:	401a      	ands	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	0e9b      	lsrs	r3, r3, #26
 8000d84:	210f      	movs	r1, #15
 8000d86:	4019      	ands	r1, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	201f      	movs	r0, #31
 8000d8c:	4003      	ands	r3, r0
 8000d8e:	4099      	lsls	r1, r3
 8000d90:	000b      	movs	r3, r1
 8000d92:	431a      	orrs	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b004      	add	sp, #16
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	035b      	lsls	r3, r3, #13
 8000db2:	0b5b      	lsrs	r3, r3, #13
 8000db4:	431a      	orrs	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	0352      	lsls	r2, r2, #13
 8000dd4:	0b52      	lsrs	r2, r2, #13
 8000dd6:	43d2      	mvns	r2, r2
 8000dd8:	401a      	ands	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	0212      	lsls	r2, r2, #8
 8000dfc:	43d2      	mvns	r2, r2
 8000dfe:	401a      	ands	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	400b      	ands	r3, r1
 8000e08:	4904      	ldr	r1, [pc, #16]	; (8000e1c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e0a:	400b      	ands	r3, r1
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b004      	add	sp, #16
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	07ffff00 	.word	0x07ffff00

08000e20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	0552      	lsls	r2, r2, #21
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	6fffffe8 	.word	0x6fffffe8

08000e48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	055b      	lsls	r3, r3, #21
 8000e58:	401a      	ands	r2, r3
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	055b      	lsls	r3, r3, #21
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d101      	bne.n	8000e66 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000e62:	2301      	movs	r3, #1
 8000e64:	e000      	b.n	8000e68 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b002      	add	sp, #8
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <LL_ADC_Enable+0x20>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2201      	movs	r2, #1
 8000e82:	431a      	orrs	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	7fffffe8 	.word	0x7fffffe8

08000e94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d101      	bne.n	8000eac <LL_ADC_IsEnabled+0x18>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <LL_ADC_IsEnabled+0x1a>
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	0018      	movs	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b002      	add	sp, #8
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <LL_ADC_REG_StartConversion+0x20>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	2204      	movs	r2, #4
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	7fffffe8 	.word	0x7fffffe8

08000edc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2204      	movs	r2, #4
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d101      	bne.n	8000ef4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e000      	b.n	8000ef6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f08:	231f      	movs	r3, #31
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e17f      	b.n	8001226 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10a      	bne.n	8000f44 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	0018      	movs	r0, r3
 8000f32:	f7ff fcd5 	bl	80008e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2254      	movs	r2, #84	; 0x54
 8000f40:	2100      	movs	r1, #0
 8000f42:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f7ff ff7d 	bl	8000e48 <LL_ADC_IsInternalRegulatorEnabled>
 8000f4e:	1e03      	subs	r3, r0, #0
 8000f50:	d115      	bne.n	8000f7e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	0018      	movs	r0, r3
 8000f58:	f7ff ff62 	bl	8000e20 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f5c:	4bb4      	ldr	r3, [pc, #720]	; (8001230 <HAL_ADC_Init+0x330>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	49b4      	ldr	r1, [pc, #720]	; (8001234 <HAL_ADC_Init+0x334>)
 8000f62:	0018      	movs	r0, r3
 8000f64:	f7ff f8de 	bl	8000124 <__udivsi3>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f70:	e002      	b.n	8000f78 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f9      	bne.n	8000f72 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	0018      	movs	r0, r3
 8000f84:	f7ff ff60 	bl	8000e48 <LL_ADC_IsInternalRegulatorEnabled>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d10f      	bne.n	8000fac <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	2210      	movs	r2, #16
 8000f92:	431a      	orrs	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000fa4:	231f      	movs	r3, #31
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff ff93 	bl	8000edc <LL_ADC_REG_IsConversionOngoing>
 8000fb6:	0003      	movs	r3, r0
 8000fb8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d000      	beq.n	8000fc6 <HAL_ADC_Init+0xc6>
 8000fc4:	e122      	b.n	800120c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d000      	beq.n	8000fce <HAL_ADC_Init+0xce>
 8000fcc:	e11e      	b.n	800120c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	4a99      	ldr	r2, [pc, #612]	; (8001238 <HAL_ADC_Init+0x338>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff ff56 	bl	8000e94 <LL_ADC_IsEnabled>
 8000fe8:	1e03      	subs	r3, r0, #0
 8000fea:	d000      	beq.n	8000fee <HAL_ADC_Init+0xee>
 8000fec:	e0ad      	b.n	800114a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7e1b      	ldrb	r3, [r3, #24]
 8000ff6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000ff8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7e5b      	ldrb	r3, [r3, #25]
 8000ffe:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001000:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7e9b      	ldrb	r3, [r3, #26]
 8001006:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001008:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <HAL_ADC_Init+0x118>
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	015b      	lsls	r3, r3, #5
 8001016:	e000      	b.n	800101a <HAL_ADC_Init+0x11a>
 8001018:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800101a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001020:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	2b00      	cmp	r3, #0
 8001028:	da04      	bge.n	8001034 <HAL_ADC_Init+0x134>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	085b      	lsrs	r3, r3, #1
 8001032:	e001      	b.n	8001038 <HAL_ADC_Init+0x138>
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001038:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	212c      	movs	r1, #44	; 0x2c
 800103e:	5c5b      	ldrb	r3, [r3, r1]
 8001040:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001042:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2220      	movs	r2, #32
 800104e:	5c9b      	ldrb	r3, [r3, r2]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d115      	bne.n	8001080 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7e9b      	ldrb	r3, [r3, #26]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d105      	bne.n	8001068 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	0252      	lsls	r2, r2, #9
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	e00b      	b.n	8001080 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	2220      	movs	r2, #32
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001078:	2201      	movs	r2, #1
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00a      	beq.n	800109e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800108c:	23e0      	movs	r3, #224	; 0xe0
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001096:	4313      	orrs	r3, r2
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	4a65      	ldr	r2, [pc, #404]	; (800123c <HAL_ADC_Init+0x33c>)
 80010a6:	4013      	ands	r3, r2
 80010a8:	0019      	movs	r1, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	0f9b      	lsrs	r3, r3, #30
 80010ba:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010c0:	4313      	orrs	r3, r2
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	223c      	movs	r2, #60	; 0x3c
 80010cc:	5c9b      	ldrb	r3, [r3, r2]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d111      	bne.n	80010f6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	0f9b      	lsrs	r3, r3, #30
 80010d8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010de:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80010e4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80010ea:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	2201      	movs	r2, #1
 80010f2:	4313      	orrs	r3, r2
 80010f4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	4a50      	ldr	r2, [pc, #320]	; (8001240 <HAL_ADC_Init+0x340>)
 80010fe:	4013      	ands	r3, r2
 8001100:	0019      	movs	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	430a      	orrs	r2, r1
 800110a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	23c0      	movs	r3, #192	; 0xc0
 8001112:	061b      	lsls	r3, r3, #24
 8001114:	429a      	cmp	r2, r3
 8001116:	d018      	beq.n	800114a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	05db      	lsls	r3, r3, #23
 8001120:	429a      	cmp	r2, r3
 8001122:	d012      	beq.n	800114a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	061b      	lsls	r3, r3, #24
 800112c:	429a      	cmp	r2, r3
 800112e:	d00c      	beq.n	800114a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001130:	4b44      	ldr	r3, [pc, #272]	; (8001244 <HAL_ADC_Init+0x344>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a44      	ldr	r2, [pc, #272]	; (8001248 <HAL_ADC_Init+0x348>)
 8001136:	4013      	ands	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	23f0      	movs	r3, #240	; 0xf0
 8001140:	039b      	lsls	r3, r3, #14
 8001142:	401a      	ands	r2, r3
 8001144:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <HAL_ADC_Init+0x344>)
 8001146:	430a      	orrs	r2, r1
 8001148:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	001a      	movs	r2, r3
 8001154:	2100      	movs	r1, #0
 8001156:	f7ff fdbe 	bl	8000cd6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001162:	493a      	ldr	r1, [pc, #232]	; (800124c <HAL_ADC_Init+0x34c>)
 8001164:	001a      	movs	r2, r3
 8001166:	f7ff fdb6 	bl	8000cd6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d109      	bne.n	8001186 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2110      	movs	r1, #16
 800117e:	4249      	negs	r1, r1
 8001180:	430a      	orrs	r2, r1
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
 8001184:	e018      	b.n	80011b8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	039b      	lsls	r3, r3, #14
 800118e:	429a      	cmp	r2, r3
 8001190:	d112      	bne.n	80011b8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	3b01      	subs	r3, #1
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	221c      	movs	r2, #28
 80011a2:	4013      	ands	r3, r2
 80011a4:	2210      	movs	r2, #16
 80011a6:	4252      	negs	r2, r2
 80011a8:	409a      	lsls	r2, r3
 80011aa:	0011      	movs	r1, r2
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2100      	movs	r1, #0
 80011be:	0018      	movs	r0, r3
 80011c0:	f7ff fda6 	bl	8000d10 <LL_ADC_GetSamplingTimeCommonChannels>
 80011c4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d10b      	bne.n	80011e6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d8:	2203      	movs	r2, #3
 80011da:	4393      	bics	r3, r2
 80011dc:	2201      	movs	r2, #1
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011e4:	e01c      	b.n	8001220 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	2212      	movs	r2, #18
 80011ec:	4393      	bics	r3, r2
 80011ee:	2210      	movs	r2, #16
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fa:	2201      	movs	r2, #1
 80011fc:	431a      	orrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001202:	231f      	movs	r3, #31
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800120a:	e009      	b.n	8001220 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001210:	2210      	movs	r2, #16
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001218:	231f      	movs	r3, #31
 800121a:	18fb      	adds	r3, r7, r3
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001220:	231f      	movs	r3, #31
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	781b      	ldrb	r3, [r3, #0]
}
 8001226:	0018      	movs	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	b008      	add	sp, #32
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	20000000 	.word	0x20000000
 8001234:	00030d40 	.word	0x00030d40
 8001238:	fffffefd 	.word	0xfffffefd
 800123c:	fffe0201 	.word	0xfffe0201
 8001240:	1ffffc02 	.word	0x1ffffc02
 8001244:	40012708 	.word	0x40012708
 8001248:	ffc3ffff 	.word	0xffc3ffff
 800124c:	07ffff04 	.word	0x07ffff04

08001250 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff fe3d 	bl	8000edc <LL_ADC_REG_IsConversionOngoing>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d135      	bne.n	80012d2 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2254      	movs	r2, #84	; 0x54
 800126a:	5c9b      	ldrb	r3, [r3, r2]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d101      	bne.n	8001274 <HAL_ADC_Start+0x24>
 8001270:	2302      	movs	r3, #2
 8001272:	e035      	b.n	80012e0 <HAL_ADC_Start+0x90>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2254      	movs	r2, #84	; 0x54
 8001278:	2101      	movs	r1, #1
 800127a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800127c:	250f      	movs	r5, #15
 800127e:	197c      	adds	r4, r7, r5
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	0018      	movs	r0, r3
 8001284:	f000 faaa 	bl	80017dc <ADC_Enable>
 8001288:	0003      	movs	r3, r0
 800128a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800128c:	197b      	adds	r3, r7, r5
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d119      	bne.n	80012c8 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001298:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <HAL_ADC_Start+0x98>)
 800129a:	4013      	ands	r3, r2
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	0052      	lsls	r2, r2, #1
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	221c      	movs	r2, #28
 80012b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2254      	movs	r2, #84	; 0x54
 80012b8:	2100      	movs	r1, #0
 80012ba:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7ff fdf9 	bl	8000eb8 <LL_ADC_REG_StartConversion>
 80012c6:	e008      	b.n	80012da <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2254      	movs	r2, #84	; 0x54
 80012cc:	2100      	movs	r1, #0
 80012ce:	5499      	strb	r1, [r3, r2]
 80012d0:	e003      	b.n	80012da <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012d2:	230f      	movs	r3, #15
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	2202      	movs	r2, #2
 80012d8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80012da:	230f      	movs	r3, #15
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	781b      	ldrb	r3, [r3, #0]
}
 80012e0:	0018      	movs	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b004      	add	sp, #16
 80012e6:	bdb0      	pop	{r4, r5, r7, pc}
 80012e8:	fffff0fe 	.word	0xfffff0fe

080012ec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d102      	bne.n	8001304 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80012fe:	2308      	movs	r3, #8
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	e00f      	b.n	8001324 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2201      	movs	r2, #1
 800130c:	4013      	ands	r3, r2
 800130e:	d007      	beq.n	8001320 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001314:	2220      	movs	r2, #32
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e072      	b.n	8001406 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001320:	2304      	movs	r3, #4
 8001322:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001324:	f7ff fcac 	bl	8000c80 <HAL_GetTick>
 8001328:	0003      	movs	r3, r0
 800132a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800132c:	e01f      	b.n	800136e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	d01c      	beq.n	800136e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001334:	f7ff fca4 	bl	8000c80 <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d302      	bcc.n	800134a <HAL_ADC_PollForConversion+0x5e>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d111      	bne.n	800136e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	4013      	ands	r3, r2
 8001354:	d10b      	bne.n	800136e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	2204      	movs	r2, #4
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2254      	movs	r2, #84	; 0x54
 8001366:	2100      	movs	r1, #0
 8001368:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e04b      	b.n	8001406 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	4013      	ands	r3, r2
 8001378:	d0d9      	beq.n	800132e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff fcd6 	bl	8000d3e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d02e      	beq.n	80013f4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7e9b      	ldrb	r3, [r3, #26]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d12a      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2208      	movs	r2, #8
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d123      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff fd93 	bl	8000edc <LL_ADC_REG_IsConversionOngoing>
 80013b6:	1e03      	subs	r3, r0, #0
 80013b8:	d110      	bne.n	80013dc <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	210c      	movs	r1, #12
 80013c6:	438a      	bics	r2, r1
 80013c8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_ADC_PollForConversion+0x124>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	2201      	movs	r2, #1
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	659a      	str	r2, [r3, #88]	; 0x58
 80013da:	e00b      	b.n	80013f4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	2220      	movs	r2, #32
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	2201      	movs	r2, #1
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7e1b      	ldrb	r3, [r3, #24]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d103      	bne.n	8001404 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	220c      	movs	r2, #12
 8001402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	0018      	movs	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	b004      	add	sp, #16
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	fffffefe 	.word	0xfffffefe

08001414 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b002      	add	sp, #8
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001436:	2317      	movs	r3, #23
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2254      	movs	r2, #84	; 0x54
 8001446:	5c9b      	ldrb	r3, [r3, r2]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x24>
 800144c:	2302      	movs	r3, #2
 800144e:	e1c0      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x3a6>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2254      	movs	r2, #84	; 0x54
 8001454:	2101      	movs	r1, #1
 8001456:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff fd3d 	bl	8000edc <LL_ADC_REG_IsConversionOngoing>
 8001462:	1e03      	subs	r3, r0, #0
 8001464:	d000      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x3c>
 8001466:	e1a3      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d100      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x46>
 8001470:	e143      	b.n	80016fa <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691a      	ldr	r2, [r3, #16]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	061b      	lsls	r3, r3, #24
 800147a:	429a      	cmp	r2, r3
 800147c:	d004      	beq.n	8001488 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001482:	4ac1      	ldr	r2, [pc, #772]	; (8001788 <HAL_ADC_ConfigChannel+0x35c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d108      	bne.n	800149a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0019      	movs	r1, r3
 8001492:	0010      	movs	r0, r2
 8001494:	f7ff fc84 	bl	8000da0 <LL_ADC_REG_SetSequencerChAdd>
 8001498:	e0c9      	b.n	800162e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	211f      	movs	r1, #31
 80014a4:	400b      	ands	r3, r1
 80014a6:	210f      	movs	r1, #15
 80014a8:	4099      	lsls	r1, r3
 80014aa:	000b      	movs	r3, r1
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4013      	ands	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	035b      	lsls	r3, r3, #13
 80014b8:	0b5b      	lsrs	r3, r3, #13
 80014ba:	d105      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x9c>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0e9b      	lsrs	r3, r3, #26
 80014c2:	221f      	movs	r2, #31
 80014c4:	4013      	ands	r3, r2
 80014c6:	e098      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2201      	movs	r2, #1
 80014ce:	4013      	ands	r3, r2
 80014d0:	d000      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0xa8>
 80014d2:	e091      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x1cc>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2202      	movs	r2, #2
 80014da:	4013      	ands	r3, r2
 80014dc:	d000      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0xb4>
 80014de:	e089      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x1c8>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2204      	movs	r2, #4
 80014e6:	4013      	ands	r3, r2
 80014e8:	d000      	beq.n	80014ec <HAL_ADC_ConfigChannel+0xc0>
 80014ea:	e081      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x1c4>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2208      	movs	r2, #8
 80014f2:	4013      	ands	r3, r2
 80014f4:	d000      	beq.n	80014f8 <HAL_ADC_ConfigChannel+0xcc>
 80014f6:	e079      	b.n	80015ec <HAL_ADC_ConfigChannel+0x1c0>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2210      	movs	r2, #16
 80014fe:	4013      	ands	r3, r2
 8001500:	d000      	beq.n	8001504 <HAL_ADC_ConfigChannel+0xd8>
 8001502:	e071      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x1bc>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2220      	movs	r2, #32
 800150a:	4013      	ands	r3, r2
 800150c:	d000      	beq.n	8001510 <HAL_ADC_ConfigChannel+0xe4>
 800150e:	e069      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x1b8>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2240      	movs	r2, #64	; 0x40
 8001516:	4013      	ands	r3, r2
 8001518:	d000      	beq.n	800151c <HAL_ADC_ConfigChannel+0xf0>
 800151a:	e061      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x1b4>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	4013      	ands	r3, r2
 8001524:	d000      	beq.n	8001528 <HAL_ADC_ConfigChannel+0xfc>
 8001526:	e059      	b.n	80015dc <HAL_ADC_ConfigChannel+0x1b0>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4013      	ands	r3, r2
 8001532:	d151      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1ac>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d149      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1a8>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4013      	ands	r3, r2
 800154a:	d141      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x1a4>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	4013      	ands	r3, r2
 8001556:	d139      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x1a0>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	015b      	lsls	r3, r3, #5
 8001560:	4013      	ands	r3, r2
 8001562:	d131      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x19c>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	019b      	lsls	r3, r3, #6
 800156c:	4013      	ands	r3, r2
 800156e:	d129      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x198>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	01db      	lsls	r3, r3, #7
 8001578:	4013      	ands	r3, r2
 800157a:	d121      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x194>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	4013      	ands	r3, r2
 8001586:	d119      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x190>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	025b      	lsls	r3, r3, #9
 8001590:	4013      	ands	r3, r2
 8001592:	d111      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x18c>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	029b      	lsls	r3, r3, #10
 800159c:	4013      	ands	r3, r2
 800159e:	d109      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x188>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	02db      	lsls	r3, r3, #11
 80015a8:	4013      	ands	r3, r2
 80015aa:	d001      	beq.n	80015b0 <HAL_ADC_ConfigChannel+0x184>
 80015ac:	2312      	movs	r3, #18
 80015ae:	e024      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015b0:	2300      	movs	r3, #0
 80015b2:	e022      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015b4:	2311      	movs	r3, #17
 80015b6:	e020      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015b8:	2310      	movs	r3, #16
 80015ba:	e01e      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015bc:	230f      	movs	r3, #15
 80015be:	e01c      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015c0:	230e      	movs	r3, #14
 80015c2:	e01a      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015c4:	230d      	movs	r3, #13
 80015c6:	e018      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015c8:	230c      	movs	r3, #12
 80015ca:	e016      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015cc:	230b      	movs	r3, #11
 80015ce:	e014      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015d0:	230a      	movs	r3, #10
 80015d2:	e012      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015d4:	2309      	movs	r3, #9
 80015d6:	e010      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015d8:	2308      	movs	r3, #8
 80015da:	e00e      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015dc:	2307      	movs	r3, #7
 80015de:	e00c      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015e0:	2306      	movs	r3, #6
 80015e2:	e00a      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015e4:	2305      	movs	r3, #5
 80015e6:	e008      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015e8:	2304      	movs	r3, #4
 80015ea:	e006      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015ec:	2303      	movs	r3, #3
 80015ee:	e004      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e002      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1ce>
 80015f8:	2300      	movs	r3, #0
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	6852      	ldr	r2, [r2, #4]
 80015fe:	201f      	movs	r0, #31
 8001600:	4002      	ands	r2, r0
 8001602:	4093      	lsls	r3, r2
 8001604:	000a      	movs	r2, r1
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	429a      	cmp	r2, r3
 800161a:	d808      	bhi.n	800162e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	001a      	movs	r2, r3
 800162a:	f7ff fb99 	bl	8000d60 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	001a      	movs	r2, r3
 800163c:	f7ff fbd4 	bl	8000de8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db00      	blt.n	800164a <HAL_ADC_ConfigChannel+0x21e>
 8001648:	e0bc      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800164a:	4b50      	ldr	r3, [pc, #320]	; (800178c <HAL_ADC_ConfigChannel+0x360>)
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff fb35 	bl	8000cbc <LL_ADC_GetCommonPathInternalCh>
 8001652:	0003      	movs	r3, r0
 8001654:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a4d      	ldr	r2, [pc, #308]	; (8001790 <HAL_ADC_ConfigChannel+0x364>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d122      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	041b      	lsls	r3, r3, #16
 8001666:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001668:	d11d      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	2280      	movs	r2, #128	; 0x80
 800166e:	0412      	lsls	r2, r2, #16
 8001670:	4313      	orrs	r3, r2
 8001672:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_ADC_ConfigChannel+0x360>)
 8001674:	0019      	movs	r1, r3
 8001676:	0010      	movs	r0, r2
 8001678:	f7ff fb0c 	bl	8000c94 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800167c:	4b45      	ldr	r3, [pc, #276]	; (8001794 <HAL_ADC_ConfigChannel+0x368>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4945      	ldr	r1, [pc, #276]	; (8001798 <HAL_ADC_ConfigChannel+0x36c>)
 8001682:	0018      	movs	r0, r3
 8001684:	f7fe fd4e 	bl	8000124 <__udivsi3>
 8001688:	0003      	movs	r3, r0
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	0013      	movs	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	189b      	adds	r3, r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001696:	e002      	b.n	800169e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3b01      	subs	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f9      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016a4:	e08e      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a3c      	ldr	r2, [pc, #240]	; (800179c <HAL_ADC_ConfigChannel+0x370>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d10e      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	045b      	lsls	r3, r3, #17
 80016b6:	4013      	ands	r3, r2
 80016b8:	d109      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	0452      	lsls	r2, r2, #17
 80016c0:	4313      	orrs	r3, r2
 80016c2:	4a32      	ldr	r2, [pc, #200]	; (800178c <HAL_ADC_ConfigChannel+0x360>)
 80016c4:	0019      	movs	r1, r3
 80016c6:	0010      	movs	r0, r2
 80016c8:	f7ff fae4 	bl	8000c94 <LL_ADC_SetCommonPathInternalCh>
 80016cc:	e07a      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a33      	ldr	r2, [pc, #204]	; (80017a0 <HAL_ADC_ConfigChannel+0x374>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d000      	beq.n	80016da <HAL_ADC_ConfigChannel+0x2ae>
 80016d8:	e074      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	03db      	lsls	r3, r3, #15
 80016e0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016e2:	d000      	beq.n	80016e6 <HAL_ADC_ConfigChannel+0x2ba>
 80016e4:	e06e      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	03d2      	lsls	r2, r2, #15
 80016ec:	4313      	orrs	r3, r2
 80016ee:	4a27      	ldr	r2, [pc, #156]	; (800178c <HAL_ADC_ConfigChannel+0x360>)
 80016f0:	0019      	movs	r1, r3
 80016f2:	0010      	movs	r0, r2
 80016f4:	f7ff face 	bl	8000c94 <LL_ADC_SetCommonPathInternalCh>
 80016f8:	e064      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691a      	ldr	r2, [r3, #16]
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	061b      	lsls	r3, r3, #24
 8001702:	429a      	cmp	r2, r3
 8001704:	d004      	beq.n	8001710 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800170a:	4a1f      	ldr	r2, [pc, #124]	; (8001788 <HAL_ADC_ConfigChannel+0x35c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d107      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0019      	movs	r1, r3
 800171a:	0010      	movs	r0, r2
 800171c:	f7ff fb51 	bl	8000dc2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	da4d      	bge.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001728:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_ADC_ConfigChannel+0x360>)
 800172a:	0018      	movs	r0, r3
 800172c:	f7ff fac6 	bl	8000cbc <LL_ADC_GetCommonPathInternalCh>
 8001730:	0003      	movs	r3, r0
 8001732:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a15      	ldr	r2, [pc, #84]	; (8001790 <HAL_ADC_ConfigChannel+0x364>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d108      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <HAL_ADC_ConfigChannel+0x378>)
 8001742:	4013      	ands	r3, r2
 8001744:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_ADC_ConfigChannel+0x360>)
 8001746:	0019      	movs	r1, r3
 8001748:	0010      	movs	r0, r2
 800174a:	f7ff faa3 	bl	8000c94 <LL_ADC_SetCommonPathInternalCh>
 800174e:	e039      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a11      	ldr	r2, [pc, #68]	; (800179c <HAL_ADC_ConfigChannel+0x370>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d108      	bne.n	800176c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <HAL_ADC_ConfigChannel+0x37c>)
 800175e:	4013      	ands	r3, r2
 8001760:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_ADC_ConfigChannel+0x360>)
 8001762:	0019      	movs	r1, r3
 8001764:	0010      	movs	r0, r2
 8001766:	f7ff fa95 	bl	8000c94 <LL_ADC_SetCommonPathInternalCh>
 800176a:	e02b      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <HAL_ADC_ConfigChannel+0x374>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d126      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <HAL_ADC_ConfigChannel+0x380>)
 800177a:	4013      	ands	r3, r2
 800177c:	4a03      	ldr	r2, [pc, #12]	; (800178c <HAL_ADC_ConfigChannel+0x360>)
 800177e:	0019      	movs	r1, r3
 8001780:	0010      	movs	r0, r2
 8001782:	f7ff fa87 	bl	8000c94 <LL_ADC_SetCommonPathInternalCh>
 8001786:	e01d      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x398>
 8001788:	80000004 	.word	0x80000004
 800178c:	40012708 	.word	0x40012708
 8001790:	b0001000 	.word	0xb0001000
 8001794:	20000000 	.word	0x20000000
 8001798:	00030d40 	.word	0x00030d40
 800179c:	b8004000 	.word	0xb8004000
 80017a0:	b4002000 	.word	0xb4002000
 80017a4:	ff7fffff 	.word	0xff7fffff
 80017a8:	feffffff 	.word	0xfeffffff
 80017ac:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b4:	2220      	movs	r2, #32
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017bc:	2317      	movs	r3, #23
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2254      	movs	r2, #84	; 0x54
 80017c8:	2100      	movs	r1, #0
 80017ca:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80017cc:	2317      	movs	r3, #23
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	781b      	ldrb	r3, [r3, #0]
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b006      	add	sp, #24
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)

080017dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7ff fb51 	bl	8000e94 <LL_ADC_IsEnabled>
 80017f2:	1e03      	subs	r3, r0, #0
 80017f4:	d000      	beq.n	80017f8 <ADC_Enable+0x1c>
 80017f6:	e069      	b.n	80018cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4a36      	ldr	r2, [pc, #216]	; (80018d8 <ADC_Enable+0xfc>)
 8001800:	4013      	ands	r3, r2
 8001802:	d00d      	beq.n	8001820 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	2210      	movs	r2, #16
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	2201      	movs	r2, #1
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e056      	b.n	80018ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff fb23 	bl	8000e70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800182a:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <ADC_Enable+0x100>)
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff fa45 	bl	8000cbc <LL_ADC_GetCommonPathInternalCh>
 8001832:	0002      	movs	r2, r0
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	4013      	ands	r3, r2
 800183a:	d00f      	beq.n	800185c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <ADC_Enable+0x104>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4928      	ldr	r1, [pc, #160]	; (80018e4 <ADC_Enable+0x108>)
 8001842:	0018      	movs	r0, r3
 8001844:	f7fe fc6e 	bl	8000124 <__udivsi3>
 8001848:	0003      	movs	r3, r0
 800184a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800184c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800184e:	e002      	b.n	8001856 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	3b01      	subs	r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f9      	bne.n	8001850 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7e5b      	ldrb	r3, [r3, #25]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d033      	beq.n	80018cc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001864:	f7ff fa0c 	bl	8000c80 <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800186c:	e027      	b.n	80018be <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	0018      	movs	r0, r3
 8001874:	f7ff fb0e 	bl	8000e94 <LL_ADC_IsEnabled>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d104      	bne.n	8001886 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff faf5 	bl	8000e70 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001886:	f7ff f9fb 	bl	8000c80 <HAL_GetTick>
 800188a:	0002      	movs	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d914      	bls.n	80018be <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2201      	movs	r2, #1
 800189c:	4013      	ands	r3, r2
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d00d      	beq.n	80018be <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	2210      	movs	r2, #16
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b2:	2201      	movs	r2, #1
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e007      	b.n	80018ce <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2201      	movs	r2, #1
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d1d0      	bne.n	800186e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	0018      	movs	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b004      	add	sp, #16
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	80000017 	.word	0x80000017
 80018dc:	40012708 	.word	0x40012708
 80018e0:	20000000 	.word	0x20000000
 80018e4:	00030d40 	.word	0x00030d40

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	0002      	movs	r2, r0
 80018f0:	1dfb      	adds	r3, r7, #7
 80018f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	1dfb      	adds	r3, r7, #7
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b7f      	cmp	r3, #127	; 0x7f
 80018fa:	d809      	bhi.n	8001910 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fc:	1dfb      	adds	r3, r7, #7
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	001a      	movs	r2, r3
 8001902:	231f      	movs	r3, #31
 8001904:	401a      	ands	r2, r3
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_EnableIRQ+0x30>)
 8001908:	2101      	movs	r1, #1
 800190a:	4091      	lsls	r1, r2
 800190c:	000a      	movs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b002      	add	sp, #8
 8001916:	bd80      	pop	{r7, pc}
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	0002      	movs	r2, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800192a:	1dfb      	adds	r3, r7, #7
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b7f      	cmp	r3, #127	; 0x7f
 8001930:	d828      	bhi.n	8001984 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001932:	4a2f      	ldr	r2, [pc, #188]	; (80019f0 <__NVIC_SetPriority+0xd4>)
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b25b      	sxtb	r3, r3
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	33c0      	adds	r3, #192	; 0xc0
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	589b      	ldr	r3, [r3, r2]
 8001942:	1dfa      	adds	r2, r7, #7
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	0011      	movs	r1, r2
 8001948:	2203      	movs	r2, #3
 800194a:	400a      	ands	r2, r1
 800194c:	00d2      	lsls	r2, r2, #3
 800194e:	21ff      	movs	r1, #255	; 0xff
 8001950:	4091      	lsls	r1, r2
 8001952:	000a      	movs	r2, r1
 8001954:	43d2      	mvns	r2, r2
 8001956:	401a      	ands	r2, r3
 8001958:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	22ff      	movs	r2, #255	; 0xff
 8001960:	401a      	ands	r2, r3
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	0018      	movs	r0, r3
 8001968:	2303      	movs	r3, #3
 800196a:	4003      	ands	r3, r0
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001970:	481f      	ldr	r0, [pc, #124]	; (80019f0 <__NVIC_SetPriority+0xd4>)
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b25b      	sxtb	r3, r3
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	430a      	orrs	r2, r1
 800197c:	33c0      	adds	r3, #192	; 0xc0
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001982:	e031      	b.n	80019e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001984:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <__NVIC_SetPriority+0xd8>)
 8001986:	1dfb      	adds	r3, r7, #7
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	0019      	movs	r1, r3
 800198c:	230f      	movs	r3, #15
 800198e:	400b      	ands	r3, r1
 8001990:	3b08      	subs	r3, #8
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3306      	adds	r3, #6
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	18d3      	adds	r3, r2, r3
 800199a:	3304      	adds	r3, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	1dfa      	adds	r2, r7, #7
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	0011      	movs	r1, r2
 80019a4:	2203      	movs	r2, #3
 80019a6:	400a      	ands	r2, r1
 80019a8:	00d2      	lsls	r2, r2, #3
 80019aa:	21ff      	movs	r1, #255	; 0xff
 80019ac:	4091      	lsls	r1, r2
 80019ae:	000a      	movs	r2, r1
 80019b0:	43d2      	mvns	r2, r2
 80019b2:	401a      	ands	r2, r3
 80019b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	019b      	lsls	r3, r3, #6
 80019ba:	22ff      	movs	r2, #255	; 0xff
 80019bc:	401a      	ands	r2, r3
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	0018      	movs	r0, r3
 80019c4:	2303      	movs	r3, #3
 80019c6:	4003      	ands	r3, r0
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019cc:	4809      	ldr	r0, [pc, #36]	; (80019f4 <__NVIC_SetPriority+0xd8>)
 80019ce:	1dfb      	adds	r3, r7, #7
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	001c      	movs	r4, r3
 80019d4:	230f      	movs	r3, #15
 80019d6:	4023      	ands	r3, r4
 80019d8:	3b08      	subs	r3, #8
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	430a      	orrs	r2, r1
 80019de:	3306      	adds	r3, #6
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	18c3      	adds	r3, r0, r3
 80019e4:	3304      	adds	r3, #4
 80019e6:	601a      	str	r2, [r3, #0]
}
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b003      	add	sp, #12
 80019ee:	bd90      	pop	{r4, r7, pc}
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	1e5a      	subs	r2, r3, #1
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	045b      	lsls	r3, r3, #17
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d301      	bcc.n	8001a10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e010      	b.n	8001a32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <SysTick_Config+0x44>)
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	3a01      	subs	r2, #1
 8001a16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a18:	2301      	movs	r3, #1
 8001a1a:	425b      	negs	r3, r3
 8001a1c:	2103      	movs	r1, #3
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f7ff ff7c 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <SysTick_Config+0x44>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SysTick_Config+0x44>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	1c02      	adds	r2, r0, #0
 8001a50:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff ff5d 	bl	800191c <__NVIC_SetPriority>
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b004      	add	sp, #16
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	0002      	movs	r2, r0
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a76:	1dfb      	adds	r3, r7, #7
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff ff33 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b002      	add	sp, #8
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7ff ffaf 	bl	80019f8 <SysTick_Config>
 8001a9a:	0003      	movs	r3, r0
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab2:	e147      	b.n	8001d44 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4091      	lsls	r1, r2
 8001abe:	000a      	movs	r2, r1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d100      	bne.n	8001acc <HAL_GPIO_Init+0x28>
 8001aca:	e138      	b.n	8001d3e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d005      	beq.n	8001ae4 <HAL_GPIO_Init+0x40>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2203      	movs	r2, #3
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d130      	bne.n	8001b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	409a      	lsls	r2, r3
 8001af2:	0013      	movs	r3, r2
 8001af4:	43da      	mvns	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	409a      	lsls	r2, r3
 8001b06:	0013      	movs	r3, r2
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	0013      	movs	r3, r2
 8001b22:	43da      	mvns	r2, r3
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	2201      	movs	r2, #1
 8001b32:	401a      	ands	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	409a      	lsls	r2, r3
 8001b38:	0013      	movs	r3, r2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d017      	beq.n	8001b82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	0013      	movs	r3, r2
 8001b62:	43da      	mvns	r2, r3
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	409a      	lsls	r2, r3
 8001b74:	0013      	movs	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2203      	movs	r2, #3
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d123      	bne.n	8001bd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	08da      	lsrs	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3208      	adds	r2, #8
 8001b96:	0092      	lsls	r2, r2, #2
 8001b98:	58d3      	ldr	r3, [r2, r3]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	0013      	movs	r3, r2
 8001baa:	43da      	mvns	r2, r3
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2107      	movs	r1, #7
 8001bba:	400b      	ands	r3, r1
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	0013      	movs	r3, r2
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	08da      	lsrs	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3208      	adds	r2, #8
 8001bd0:	0092      	lsls	r2, r2, #2
 8001bd2:	6939      	ldr	r1, [r7, #16]
 8001bd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	409a      	lsls	r2, r3
 8001be4:	0013      	movs	r3, r2
 8001be6:	43da      	mvns	r2, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	0013      	movs	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	23c0      	movs	r3, #192	; 0xc0
 8001c10:	029b      	lsls	r3, r3, #10
 8001c12:	4013      	ands	r3, r2
 8001c14:	d100      	bne.n	8001c18 <HAL_GPIO_Init+0x174>
 8001c16:	e092      	b.n	8001d3e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001c18:	4a50      	ldr	r2, [pc, #320]	; (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3318      	adds	r3, #24
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	589b      	ldr	r3, [r3, r2]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2203      	movs	r2, #3
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	220f      	movs	r2, #15
 8001c30:	409a      	lsls	r2, r3
 8001c32:	0013      	movs	r3, r2
 8001c34:	43da      	mvns	r2, r3
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	23a0      	movs	r3, #160	; 0xa0
 8001c40:	05db      	lsls	r3, r3, #23
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0x1ca>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a45      	ldr	r2, [pc, #276]	; (8001d60 <HAL_GPIO_Init+0x2bc>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00d      	beq.n	8001c6a <HAL_GPIO_Init+0x1c6>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a44      	ldr	r2, [pc, #272]	; (8001d64 <HAL_GPIO_Init+0x2c0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d007      	beq.n	8001c66 <HAL_GPIO_Init+0x1c2>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a43      	ldr	r2, [pc, #268]	; (8001d68 <HAL_GPIO_Init+0x2c4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_GPIO_Init+0x1be>
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x1cc>
 8001c62:	2305      	movs	r3, #5
 8001c64:	e004      	b.n	8001c70 <HAL_GPIO_Init+0x1cc>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e002      	b.n	8001c70 <HAL_GPIO_Init+0x1cc>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_GPIO_Init+0x1cc>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	2103      	movs	r1, #3
 8001c74:	400a      	ands	r2, r1
 8001c76:	00d2      	lsls	r2, r2, #3
 8001c78:	4093      	lsls	r3, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c80:	4936      	ldr	r1, [pc, #216]	; (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3318      	adds	r3, #24
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c8e:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43da      	mvns	r2, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	035b      	lsls	r3, r3, #13
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001cb8:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43da      	mvns	r2, r3
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	039b      	lsls	r3, r3, #14
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ce2:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001ce4:	2384      	movs	r3, #132	; 0x84
 8001ce6:	58d3      	ldr	r3, [r2, r3]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	43da      	mvns	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	029b      	lsls	r3, r3, #10
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d08:	4914      	ldr	r1, [pc, #80]	; (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001d0a:	2284      	movs	r2, #132	; 0x84
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001d10:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001d12:	2380      	movs	r3, #128	; 0x80
 8001d14:	58d3      	ldr	r3, [r2, r3]
 8001d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	025b      	lsls	r3, r3, #9
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d36:	4909      	ldr	r1, [pc, #36]	; (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001d38:	2280      	movs	r2, #128	; 0x80
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	40da      	lsrs	r2, r3
 8001d4c:	1e13      	subs	r3, r2, #0
 8001d4e:	d000      	beq.n	8001d52 <HAL_GPIO_Init+0x2ae>
 8001d50:	e6b0      	b.n	8001ab4 <HAL_GPIO_Init+0x10>
  }
}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b006      	add	sp, #24
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021800 	.word	0x40021800
 8001d60:	50000400 	.word	0x50000400
 8001d64:	50000800 	.word	0x50000800
 8001d68:	50000c00 	.word	0x50000c00

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	0008      	movs	r0, r1
 8001d76:	0011      	movs	r1, r2
 8001d78:	1cbb      	adds	r3, r7, #2
 8001d7a:	1c02      	adds	r2, r0, #0
 8001d7c:	801a      	strh	r2, [r3, #0]
 8001d7e:	1c7b      	adds	r3, r7, #1
 8001d80:	1c0a      	adds	r2, r1, #0
 8001d82:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d84:	1c7b      	adds	r3, r7, #1
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d004      	beq.n	8001d96 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d8c:	1cbb      	adds	r3, r7, #2
 8001d8e:	881a      	ldrh	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d94:	e003      	b.n	8001d9e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d96:	1cbb      	adds	r3, r7, #2
 8001d98:	881a      	ldrh	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b002      	add	sp, #8
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	000a      	movs	r2, r1
 8001db0:	1cbb      	adds	r3, r7, #2
 8001db2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dba:	1cbb      	adds	r3, r7, #2
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	041a      	lsls	r2, r3, #16
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	1cb9      	adds	r1, r7, #2
 8001dca:	8809      	ldrh	r1, [r1, #0]
 8001dcc:	400b      	ands	r3, r1
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
}
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b004      	add	sp, #16
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d11f      	bne.n	8001e40 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	0013      	movs	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	189b      	adds	r3, r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4912      	ldr	r1, [pc, #72]	; (8001e58 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f7fe f988 	bl	8000124 <__udivsi3>
 8001e14:	0003      	movs	r3, r0
 8001e16:	3301      	adds	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e1a:	e008      	b.n	8001e2e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	e001      	b.n	8001e2e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e009      	b.n	8001e42 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	401a      	ands	r2, r3
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d0ed      	beq.n	8001e1c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b004      	add	sp, #16
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	fffff9ff 	.word	0xfffff9ff
 8001e54:	20000000 	.word	0x20000000
 8001e58:	000f4240 	.word	0x000f4240

08001e5c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	23e0      	movs	r3, #224	; 0xe0
 8001e66:	01db      	lsls	r3, r3, #7
 8001e68:	4013      	ands	r3, r2
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e2f3      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d100      	bne.n	8001e92 <HAL_RCC_OscConfig+0x1e>
 8001e90:	e07c      	b.n	8001f8c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e92:	4bc3      	ldr	r3, [pc, #780]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2238      	movs	r2, #56	; 0x38
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e9c:	4bc0      	ldr	r3, [pc, #768]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d102      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3e>
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d002      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	4bb9      	ldr	r3, [pc, #740]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	029b      	lsls	r3, r3, #10
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d062      	beq.n	8001f8a <HAL_RCC_OscConfig+0x116>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d15e      	bne.n	8001f8a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e2ce      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	025b      	lsls	r3, r3, #9
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_OscConfig+0x78>
 8001edc:	4bb0      	ldr	r3, [pc, #704]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4baf      	ldr	r3, [pc, #700]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	0249      	lsls	r1, r1, #9
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e020      	b.n	8001f2e <HAL_RCC_OscConfig+0xba>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	23a0      	movs	r3, #160	; 0xa0
 8001ef2:	02db      	lsls	r3, r3, #11
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d10e      	bne.n	8001f16 <HAL_RCC_OscConfig+0xa2>
 8001ef8:	4ba9      	ldr	r3, [pc, #676]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4ba8      	ldr	r3, [pc, #672]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	02c9      	lsls	r1, r1, #11
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	4ba6      	ldr	r3, [pc, #664]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4ba5      	ldr	r3, [pc, #660]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	0249      	lsls	r1, r1, #9
 8001f10:	430a      	orrs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e00b      	b.n	8001f2e <HAL_RCC_OscConfig+0xba>
 8001f16:	4ba2      	ldr	r3, [pc, #648]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4ba1      	ldr	r3, [pc, #644]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001f1c:	49a1      	ldr	r1, [pc, #644]	; (80021a4 <HAL_RCC_OscConfig+0x330>)
 8001f1e:	400a      	ands	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	4b9f      	ldr	r3, [pc, #636]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4b9e      	ldr	r3, [pc, #632]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001f28:	499f      	ldr	r1, [pc, #636]	; (80021a8 <HAL_RCC_OscConfig+0x334>)
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d014      	beq.n	8001f60 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f36:	f7fe fea3 	bl	8000c80 <HAL_GetTick>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7fe fe9e 	bl	8000c80 <HAL_GetTick>
 8001f44:	0002      	movs	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e28d      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f52:	4b93      	ldr	r3, [pc, #588]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	029b      	lsls	r3, r3, #10
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xcc>
 8001f5e:	e015      	b.n	8001f8c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7fe fe8e 	bl	8000c80 <HAL_GetTick>
 8001f64:	0003      	movs	r3, r0
 8001f66:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6a:	f7fe fe89 	bl	8000c80 <HAL_GetTick>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b64      	cmp	r3, #100	; 0x64
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e278      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7c:	4b88      	ldr	r3, [pc, #544]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	029b      	lsls	r3, r3, #10
 8001f84:	4013      	ands	r3, r2
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0xf6>
 8001f88:	e000      	b.n	8001f8c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2202      	movs	r2, #2
 8001f92:	4013      	ands	r3, r2
 8001f94:	d100      	bne.n	8001f98 <HAL_RCC_OscConfig+0x124>
 8001f96:	e099      	b.n	80020cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f98:	4b81      	ldr	r3, [pc, #516]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2238      	movs	r2, #56	; 0x38
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa2:	4b7f      	ldr	r3, [pc, #508]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	d102      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x144>
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d002      	beq.n	8001fbe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d135      	bne.n	800202a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fbe:	4b78      	ldr	r3, [pc, #480]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x162>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e24b      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b72      	ldr	r3, [pc, #456]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4a74      	ldr	r2, [pc, #464]	; (80021ac <HAL_RCC_OscConfig+0x338>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	021a      	lsls	r2, r3, #8
 8001fe6:	4b6e      	ldr	r3, [pc, #440]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d112      	bne.n	8002018 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ff2:	4b6b      	ldr	r3, [pc, #428]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a6e      	ldr	r2, [pc, #440]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	4b67      	ldr	r3, [pc, #412]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8002002:	430a      	orrs	r2, r1
 8002004:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002006:	4b66      	ldr	r3, [pc, #408]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0adb      	lsrs	r3, r3, #11
 800200c:	2207      	movs	r2, #7
 800200e:	4013      	ands	r3, r2
 8002010:	4a68      	ldr	r2, [pc, #416]	; (80021b4 <HAL_RCC_OscConfig+0x340>)
 8002012:	40da      	lsrs	r2, r3
 8002014:	4b68      	ldr	r3, [pc, #416]	; (80021b8 <HAL_RCC_OscConfig+0x344>)
 8002016:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002018:	4b68      	ldr	r3, [pc, #416]	; (80021bc <HAL_RCC_OscConfig+0x348>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0018      	movs	r0, r3
 800201e:	f7fe fdd3 	bl	8000bc8 <HAL_InitTick>
 8002022:	1e03      	subs	r3, r0, #0
 8002024:	d051      	beq.n	80020ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e221      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d030      	beq.n	8002094 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002032:	4b5b      	ldr	r3, [pc, #364]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a5e      	ldr	r2, [pc, #376]	; (80021b0 <HAL_RCC_OscConfig+0x33c>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	4b57      	ldr	r3, [pc, #348]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002046:	4b56      	ldr	r3, [pc, #344]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b55      	ldr	r3, [pc, #340]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 800204c:	2180      	movs	r1, #128	; 0x80
 800204e:	0049      	lsls	r1, r1, #1
 8002050:	430a      	orrs	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7fe fe14 	bl	8000c80 <HAL_GetTick>
 8002058:	0003      	movs	r3, r0
 800205a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205e:	f7fe fe0f 	bl	8000c80 <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1fe      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002070:	4b4b      	ldr	r3, [pc, #300]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4013      	ands	r3, r2
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207c:	4b48      	ldr	r3, [pc, #288]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a4a      	ldr	r2, [pc, #296]	; (80021ac <HAL_RCC_OscConfig+0x338>)
 8002082:	4013      	ands	r3, r2
 8002084:	0019      	movs	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	021a      	lsls	r2, r3, #8
 800208c:	4b44      	ldr	r3, [pc, #272]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	e01b      	b.n	80020cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002094:	4b42      	ldr	r3, [pc, #264]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 800209a:	4949      	ldr	r1, [pc, #292]	; (80021c0 <HAL_RCC_OscConfig+0x34c>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7fe fdee 	bl	8000c80 <HAL_GetTick>
 80020a4:	0003      	movs	r3, r0
 80020a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020aa:	f7fe fde9 	bl	8000c80 <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e1d8      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020bc:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4013      	ands	r3, r2
 80020c6:	d1f0      	bne.n	80020aa <HAL_RCC_OscConfig+0x236>
 80020c8:	e000      	b.n	80020cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2208      	movs	r2, #8
 80020d2:	4013      	ands	r3, r2
 80020d4:	d047      	beq.n	8002166 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020d6:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2238      	movs	r2, #56	; 0x38
 80020dc:	4013      	ands	r3, r2
 80020de:	2b18      	cmp	r3, #24
 80020e0:	d10a      	bne.n	80020f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 80020e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e6:	2202      	movs	r2, #2
 80020e8:	4013      	ands	r3, r2
 80020ea:	d03c      	beq.n	8002166 <HAL_RCC_OscConfig+0x2f2>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d138      	bne.n	8002166 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e1ba      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d019      	beq.n	8002134 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8002102:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002104:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8002106:	2101      	movs	r1, #1
 8002108:	430a      	orrs	r2, r1
 800210a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe fdb8 	bl	8000c80 <HAL_GetTick>
 8002110:	0003      	movs	r3, r0
 8002112:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002116:	f7fe fdb3 	bl	8000c80 <HAL_GetTick>
 800211a:	0002      	movs	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e1a2      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 800212a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212c:	2202      	movs	r2, #2
 800212e:	4013      	ands	r3, r2
 8002130:	d0f1      	beq.n	8002116 <HAL_RCC_OscConfig+0x2a2>
 8002132:	e018      	b.n	8002166 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8002136:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 800213a:	2101      	movs	r1, #1
 800213c:	438a      	bics	r2, r1
 800213e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe fd9e 	bl	8000c80 <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214a:	f7fe fd99 	bl	8000c80 <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e188      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 800215e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002160:	2202      	movs	r2, #2
 8002162:	4013      	ands	r3, r2
 8002164:	d1f1      	bne.n	800214a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2204      	movs	r2, #4
 800216c:	4013      	ands	r3, r2
 800216e:	d100      	bne.n	8002172 <HAL_RCC_OscConfig+0x2fe>
 8002170:	e0c6      	b.n	8002300 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	231f      	movs	r3, #31
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2238      	movs	r2, #56	; 0x38
 8002180:	4013      	ands	r3, r2
 8002182:	2b20      	cmp	r3, #32
 8002184:	d11e      	bne.n	80021c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_RCC_OscConfig+0x32c>)
 8002188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d100      	bne.n	8002192 <HAL_RCC_OscConfig+0x31e>
 8002190:	e0b6      	b.n	8002300 <HAL_RCC_OscConfig+0x48c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d000      	beq.n	800219c <HAL_RCC_OscConfig+0x328>
 800219a:	e0b1      	b.n	8002300 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e166      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
 80021a0:	40021000 	.word	0x40021000
 80021a4:	fffeffff 	.word	0xfffeffff
 80021a8:	fffbffff 	.word	0xfffbffff
 80021ac:	ffff80ff 	.word	0xffff80ff
 80021b0:	ffffc7ff 	.word	0xffffc7ff
 80021b4:	00f42400 	.word	0x00f42400
 80021b8:	20000000 	.word	0x20000000
 80021bc:	20000004 	.word	0x20000004
 80021c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021c4:	4bac      	ldr	r3, [pc, #688]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 80021c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	055b      	lsls	r3, r3, #21
 80021cc:	4013      	ands	r3, r2
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_OscConfig+0x360>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x362>
 80021d4:	2300      	movs	r3, #0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d011      	beq.n	80021fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	4ba7      	ldr	r3, [pc, #668]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 80021dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021de:	4ba6      	ldr	r3, [pc, #664]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	0549      	lsls	r1, r1, #21
 80021e4:	430a      	orrs	r2, r1
 80021e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80021e8:	4ba3      	ldr	r3, [pc, #652]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 80021ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	055b      	lsls	r3, r3, #21
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80021f6:	231f      	movs	r3, #31
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fe:	4b9f      	ldr	r3, [pc, #636]	; (800247c <HAL_RCC_OscConfig+0x608>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4013      	ands	r3, r2
 8002208:	d11a      	bne.n	8002240 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800220a:	4b9c      	ldr	r3, [pc, #624]	; (800247c <HAL_RCC_OscConfig+0x608>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4b9b      	ldr	r3, [pc, #620]	; (800247c <HAL_RCC_OscConfig+0x608>)
 8002210:	2180      	movs	r1, #128	; 0x80
 8002212:	0049      	lsls	r1, r1, #1
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002218:	f7fe fd32 	bl	8000c80 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002222:	f7fe fd2d 	bl	8000c80 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e11c      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002234:	4b91      	ldr	r3, [pc, #580]	; (800247c <HAL_RCC_OscConfig+0x608>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4013      	ands	r3, r2
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d106      	bne.n	8002256 <HAL_RCC_OscConfig+0x3e2>
 8002248:	4b8b      	ldr	r3, [pc, #556]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 800224a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800224c:	4b8a      	ldr	r3, [pc, #552]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 800224e:	2101      	movs	r1, #1
 8002250:	430a      	orrs	r2, r1
 8002252:	65da      	str	r2, [r3, #92]	; 0x5c
 8002254:	e01c      	b.n	8002290 <HAL_RCC_OscConfig+0x41c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b05      	cmp	r3, #5
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x404>
 800225e:	4b86      	ldr	r3, [pc, #536]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 8002260:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002262:	4b85      	ldr	r3, [pc, #532]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 8002264:	2104      	movs	r1, #4
 8002266:	430a      	orrs	r2, r1
 8002268:	65da      	str	r2, [r3, #92]	; 0x5c
 800226a:	4b83      	ldr	r3, [pc, #524]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 800226c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800226e:	4b82      	ldr	r3, [pc, #520]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 8002270:	2101      	movs	r1, #1
 8002272:	430a      	orrs	r2, r1
 8002274:	65da      	str	r2, [r3, #92]	; 0x5c
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0x41c>
 8002278:	4b7f      	ldr	r3, [pc, #508]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 800227a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800227c:	4b7e      	ldr	r3, [pc, #504]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 800227e:	2101      	movs	r1, #1
 8002280:	438a      	bics	r2, r1
 8002282:	65da      	str	r2, [r3, #92]	; 0x5c
 8002284:	4b7c      	ldr	r3, [pc, #496]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 8002286:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002288:	4b7b      	ldr	r3, [pc, #492]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 800228a:	2104      	movs	r1, #4
 800228c:	438a      	bics	r2, r1
 800228e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d014      	beq.n	80022c2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7fe fcf2 	bl	8000c80 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a0:	e009      	b.n	80022b6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe fced 	bl	8000c80 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	4a74      	ldr	r2, [pc, #464]	; (8002480 <HAL_RCC_OscConfig+0x60c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e0db      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b6:	4b70      	ldr	r3, [pc, #448]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	2202      	movs	r2, #2
 80022bc:	4013      	ands	r3, r2
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x42e>
 80022c0:	e013      	b.n	80022ea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7fe fcdd 	bl	8000c80 <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ca:	e009      	b.n	80022e0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f7fe fcd8 	bl	8000c80 <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	4a6a      	ldr	r2, [pc, #424]	; (8002480 <HAL_RCC_OscConfig+0x60c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e0c6      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022e0:	4b65      	ldr	r3, [pc, #404]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 80022e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e4:	2202      	movs	r2, #2
 80022e6:	4013      	ands	r3, r2
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022ea:	231f      	movs	r3, #31
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d105      	bne.n	8002300 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022f4:	4b60      	ldr	r3, [pc, #384]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 80022f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022f8:	4b5f      	ldr	r3, [pc, #380]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 80022fa:	4962      	ldr	r1, [pc, #392]	; (8002484 <HAL_RCC_OscConfig+0x610>)
 80022fc:	400a      	ands	r2, r1
 80022fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d100      	bne.n	800230a <HAL_RCC_OscConfig+0x496>
 8002308:	e0b0      	b.n	800246c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800230a:	4b5b      	ldr	r3, [pc, #364]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2238      	movs	r2, #56	; 0x38
 8002310:	4013      	ands	r3, r2
 8002312:	2b10      	cmp	r3, #16
 8002314:	d100      	bne.n	8002318 <HAL_RCC_OscConfig+0x4a4>
 8002316:	e078      	b.n	800240a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d153      	bne.n	80023c8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002320:	4b55      	ldr	r3, [pc, #340]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b54      	ldr	r3, [pc, #336]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 8002326:	4958      	ldr	r1, [pc, #352]	; (8002488 <HAL_RCC_OscConfig+0x614>)
 8002328:	400a      	ands	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe fca8 	bl	8000c80 <HAL_GetTick>
 8002330:	0003      	movs	r3, r0
 8002332:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002336:	f7fe fca3 	bl	8000c80 <HAL_GetTick>
 800233a:	0002      	movs	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e092      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002348:	4b4b      	ldr	r3, [pc, #300]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	049b      	lsls	r3, r3, #18
 8002350:	4013      	ands	r3, r2
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002354:	4b48      	ldr	r3, [pc, #288]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a4c      	ldr	r2, [pc, #304]	; (800248c <HAL_RCC_OscConfig+0x618>)
 800235a:	4013      	ands	r3, r2
 800235c:	0019      	movs	r1, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1a      	ldr	r2, [r3, #32]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	431a      	orrs	r2, r3
 800237c:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 800237e:	430a      	orrs	r2, r1
 8002380:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b3c      	ldr	r3, [pc, #240]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	0449      	lsls	r1, r1, #17
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002390:	4b39      	ldr	r3, [pc, #228]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	4b38      	ldr	r3, [pc, #224]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 8002396:	2180      	movs	r1, #128	; 0x80
 8002398:	0549      	lsls	r1, r1, #21
 800239a:	430a      	orrs	r2, r1
 800239c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7fe fc6f 	bl	8000c80 <HAL_GetTick>
 80023a2:	0003      	movs	r3, r0
 80023a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a8:	f7fe fc6a 	bl	8000c80 <HAL_GetTick>
 80023ac:	0002      	movs	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e059      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	049b      	lsls	r3, r3, #18
 80023c2:	4013      	ands	r3, r2
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x534>
 80023c6:	e051      	b.n	800246c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b2a      	ldr	r3, [pc, #168]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 80023ce:	492e      	ldr	r1, [pc, #184]	; (8002488 <HAL_RCC_OscConfig+0x614>)
 80023d0:	400a      	ands	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7fe fc54 	bl	8000c80 <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fc4f 	bl	8000c80 <HAL_GetTick>
 80023e2:	0002      	movs	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e03e      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f0:	4b21      	ldr	r3, [pc, #132]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	049b      	lsls	r3, r3, #18
 80023f8:	4013      	ands	r3, r2
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80023fc:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 8002402:	4923      	ldr	r1, [pc, #140]	; (8002490 <HAL_RCC_OscConfig+0x61c>)
 8002404:	400a      	ands	r2, r1
 8002406:	60da      	str	r2, [r3, #12]
 8002408:	e030      	b.n	800246c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e02b      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002416:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_RCC_OscConfig+0x604>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2203      	movs	r2, #3
 8002420:	401a      	ands	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	429a      	cmp	r2, r3
 8002428:	d11e      	bne.n	8002468 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2270      	movs	r2, #112	; 0x70
 800242e:	401a      	ands	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002434:	429a      	cmp	r2, r3
 8002436:	d117      	bne.n	8002468 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	23fe      	movs	r3, #254	; 0xfe
 800243c:	01db      	lsls	r3, r3, #7
 800243e:	401a      	ands	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d10e      	bne.n	8002468 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	23f8      	movs	r3, #248	; 0xf8
 800244e:	039b      	lsls	r3, r3, #14
 8002450:	401a      	ands	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d106      	bne.n	8002468 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	0f5b      	lsrs	r3, r3, #29
 800245e:	075a      	lsls	r2, r3, #29
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b008      	add	sp, #32
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	40021000 	.word	0x40021000
 800247c:	40007000 	.word	0x40007000
 8002480:	00001388 	.word	0x00001388
 8002484:	efffffff 	.word	0xefffffff
 8002488:	feffffff 	.word	0xfeffffff
 800248c:	1fc1808c 	.word	0x1fc1808c
 8002490:	effefffc 	.word	0xeffefffc

08002494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0e9      	b.n	800267c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a8:	4b76      	ldr	r3, [pc, #472]	; (8002684 <HAL_RCC_ClockConfig+0x1f0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2207      	movs	r2, #7
 80024ae:	4013      	ands	r3, r2
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d91e      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b73      	ldr	r3, [pc, #460]	; (8002684 <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2207      	movs	r2, #7
 80024bc:	4393      	bics	r3, r2
 80024be:	0019      	movs	r1, r3
 80024c0:	4b70      	ldr	r3, [pc, #448]	; (8002684 <HAL_RCC_ClockConfig+0x1f0>)
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024c8:	f7fe fbda 	bl	8000c80 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024d0:	e009      	b.n	80024e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d2:	f7fe fbd5 	bl	8000c80 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	4a6a      	ldr	r2, [pc, #424]	; (8002688 <HAL_RCC_ClockConfig+0x1f4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e0ca      	b.n	800267c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024e6:	4b67      	ldr	r3, [pc, #412]	; (8002684 <HAL_RCC_ClockConfig+0x1f0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2207      	movs	r2, #7
 80024ec:	4013      	ands	r3, r2
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d1ee      	bne.n	80024d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2202      	movs	r2, #2
 80024fa:	4013      	ands	r3, r2
 80024fc:	d015      	beq.n	800252a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2204      	movs	r2, #4
 8002504:	4013      	ands	r3, r2
 8002506:	d006      	beq.n	8002516 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002508:	4b60      	ldr	r3, [pc, #384]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	4b5f      	ldr	r3, [pc, #380]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 800250e:	21e0      	movs	r1, #224	; 0xe0
 8002510:	01c9      	lsls	r1, r1, #7
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002516:	4b5d      	ldr	r3, [pc, #372]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4a5d      	ldr	r2, [pc, #372]	; (8002690 <HAL_RCC_ClockConfig+0x1fc>)
 800251c:	4013      	ands	r3, r2
 800251e:	0019      	movs	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 8002526:	430a      	orrs	r2, r1
 8002528:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2201      	movs	r2, #1
 8002530:	4013      	ands	r3, r2
 8002532:	d057      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	029b      	lsls	r3, r3, #10
 8002544:	4013      	ands	r3, r2
 8002546:	d12b      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e097      	b.n	800267c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d107      	bne.n	8002564 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002554:	4b4d      	ldr	r3, [pc, #308]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	049b      	lsls	r3, r3, #18
 800255c:	4013      	ands	r3, r2
 800255e:	d11f      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e08b      	b.n	800267c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d107      	bne.n	800257c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256c:	4b47      	ldr	r3, [pc, #284]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4013      	ands	r3, r2
 8002576:	d113      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e07f      	b.n	800267c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d106      	bne.n	8002592 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002584:	4b41      	ldr	r3, [pc, #260]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 8002586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002588:	2202      	movs	r2, #2
 800258a:	4013      	ands	r3, r2
 800258c:	d108      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e074      	b.n	800267c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002592:	4b3e      	ldr	r3, [pc, #248]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 8002594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002596:	2202      	movs	r2, #2
 8002598:	4013      	ands	r3, r2
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e06d      	b.n	800267c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025a0:	4b3a      	ldr	r3, [pc, #232]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2207      	movs	r2, #7
 80025a6:	4393      	bics	r3, r2
 80025a8:	0019      	movs	r1, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	4b37      	ldr	r3, [pc, #220]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 80025b0:	430a      	orrs	r2, r1
 80025b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b4:	f7fe fb64 	bl	8000c80 <HAL_GetTick>
 80025b8:	0003      	movs	r3, r0
 80025ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025bc:	e009      	b.n	80025d2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025be:	f7fe fb5f 	bl	8000c80 <HAL_GetTick>
 80025c2:	0002      	movs	r2, r0
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <HAL_RCC_ClockConfig+0x1f4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e054      	b.n	800267c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b2e      	ldr	r3, [pc, #184]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2238      	movs	r2, #56	; 0x38
 80025d8:	401a      	ands	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1ec      	bne.n	80025be <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <HAL_RCC_ClockConfig+0x1f0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2207      	movs	r2, #7
 80025ea:	4013      	ands	r3, r2
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d21e      	bcs.n	8002630 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_RCC_ClockConfig+0x1f0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2207      	movs	r2, #7
 80025f8:	4393      	bics	r3, r2
 80025fa:	0019      	movs	r1, r3
 80025fc:	4b21      	ldr	r3, [pc, #132]	; (8002684 <HAL_RCC_ClockConfig+0x1f0>)
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002604:	f7fe fb3c 	bl	8000c80 <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800260c:	e009      	b.n	8002622 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260e:	f7fe fb37 	bl	8000c80 <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <HAL_RCC_ClockConfig+0x1f4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e02c      	b.n	800267c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002622:	4b18      	ldr	r3, [pc, #96]	; (8002684 <HAL_RCC_ClockConfig+0x1f0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2207      	movs	r2, #7
 8002628:	4013      	ands	r3, r2
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d1ee      	bne.n	800260e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2204      	movs	r2, #4
 8002636:	4013      	ands	r3, r2
 8002638:	d009      	beq.n	800264e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	4a15      	ldr	r2, [pc, #84]	; (8002694 <HAL_RCC_ClockConfig+0x200>)
 8002640:	4013      	ands	r3, r2
 8002642:	0019      	movs	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800264e:	f000 f829 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 8002652:	0001      	movs	r1, r0
 8002654:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_RCC_ClockConfig+0x1f8>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	220f      	movs	r2, #15
 800265c:	401a      	ands	r2, r3
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <HAL_RCC_ClockConfig+0x204>)
 8002660:	0092      	lsls	r2, r2, #2
 8002662:	58d3      	ldr	r3, [r2, r3]
 8002664:	221f      	movs	r2, #31
 8002666:	4013      	ands	r3, r2
 8002668:	000a      	movs	r2, r1
 800266a:	40da      	lsrs	r2, r3
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_ClockConfig+0x208>)
 800266e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_ClockConfig+0x20c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0018      	movs	r0, r3
 8002676:	f7fe faa7 	bl	8000bc8 <HAL_InitTick>
 800267a:	0003      	movs	r3, r0
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b004      	add	sp, #16
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40022000 	.word	0x40022000
 8002688:	00001388 	.word	0x00001388
 800268c:	40021000 	.word	0x40021000
 8002690:	fffff0ff 	.word	0xfffff0ff
 8002694:	ffff8fff 	.word	0xffff8fff
 8002698:	08004488 	.word	0x08004488
 800269c:	20000000 	.word	0x20000000
 80026a0:	20000004 	.word	0x20000004

080026a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026aa:	4b3c      	ldr	r3, [pc, #240]	; (800279c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2238      	movs	r2, #56	; 0x38
 80026b0:	4013      	ands	r3, r2
 80026b2:	d10f      	bne.n	80026d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80026b4:	4b39      	ldr	r3, [pc, #228]	; (800279c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	0adb      	lsrs	r3, r3, #11
 80026ba:	2207      	movs	r2, #7
 80026bc:	4013      	ands	r3, r2
 80026be:	2201      	movs	r2, #1
 80026c0:	409a      	lsls	r2, r3
 80026c2:	0013      	movs	r3, r2
 80026c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80026c6:	6839      	ldr	r1, [r7, #0]
 80026c8:	4835      	ldr	r0, [pc, #212]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026ca:	f7fd fd2b 	bl	8000124 <__udivsi3>
 80026ce:	0003      	movs	r3, r0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	e05d      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d4:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2238      	movs	r2, #56	; 0x38
 80026da:	4013      	ands	r3, r2
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d102      	bne.n	80026e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026e0:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x100>)
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	e054      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e6:	4b2d      	ldr	r3, [pc, #180]	; (800279c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2238      	movs	r2, #56	; 0x38
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d138      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2203      	movs	r2, #3
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026fc:	4b27      	ldr	r3, [pc, #156]	; (800279c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	2207      	movs	r2, #7
 8002704:	4013      	ands	r3, r2
 8002706:	3301      	adds	r3, #1
 8002708:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d10d      	bne.n	800272c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	4824      	ldr	r0, [pc, #144]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002714:	f7fd fd06 	bl	8000124 <__udivsi3>
 8002718:	0003      	movs	r3, r0
 800271a:	0019      	movs	r1, r3
 800271c:	4b1f      	ldr	r3, [pc, #124]	; (800279c <HAL_RCC_GetSysClockFreq+0xf8>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	227f      	movs	r2, #127	; 0x7f
 8002724:	4013      	ands	r3, r2
 8002726:	434b      	muls	r3, r1
 8002728:	617b      	str	r3, [r7, #20]
        break;
 800272a:	e00d      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	481c      	ldr	r0, [pc, #112]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002730:	f7fd fcf8 	bl	8000124 <__udivsi3>
 8002734:	0003      	movs	r3, r0
 8002736:	0019      	movs	r1, r3
 8002738:	4b18      	ldr	r3, [pc, #96]	; (800279c <HAL_RCC_GetSysClockFreq+0xf8>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	227f      	movs	r2, #127	; 0x7f
 8002740:	4013      	ands	r3, r2
 8002742:	434b      	muls	r3, r1
 8002744:	617b      	str	r3, [r7, #20]
        break;
 8002746:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_RCC_GetSysClockFreq+0xf8>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0f5b      	lsrs	r3, r3, #29
 800274e:	2207      	movs	r2, #7
 8002750:	4013      	ands	r3, r2
 8002752:	3301      	adds	r3, #1
 8002754:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	6978      	ldr	r0, [r7, #20]
 800275a:	f7fd fce3 	bl	8000124 <__udivsi3>
 800275e:	0003      	movs	r3, r0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	e015      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2238      	movs	r2, #56	; 0x38
 800276a:	4013      	ands	r3, r2
 800276c:	2b20      	cmp	r3, #32
 800276e:	d103      	bne.n	8002778 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	e00b      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_RCC_GetSysClockFreq+0xf8>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2238      	movs	r2, #56	; 0x38
 800277e:	4013      	ands	r3, r2
 8002780:	2b18      	cmp	r3, #24
 8002782:	d103      	bne.n	800278c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002784:	23fa      	movs	r3, #250	; 0xfa
 8002786:	01db      	lsls	r3, r3, #7
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	e001      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002790:	693b      	ldr	r3, [r7, #16]
}
 8002792:	0018      	movs	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	b006      	add	sp, #24
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	40021000 	.word	0x40021000
 80027a0:	00f42400 	.word	0x00f42400
 80027a4:	007a1200 	.word	0x007a1200

080027a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ac:	4b02      	ldr	r3, [pc, #8]	; (80027b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	20000000 	.word	0x20000000

080027bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027bc:	b5b0      	push	{r4, r5, r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80027c0:	f7ff fff2 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027c4:	0004      	movs	r4, r0
 80027c6:	f7ff fb49 	bl	8001e5c <LL_RCC_GetAPB1Prescaler>
 80027ca:	0003      	movs	r3, r0
 80027cc:	0b1a      	lsrs	r2, r3, #12
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	58d3      	ldr	r3, [r2, r3]
 80027d4:	221f      	movs	r2, #31
 80027d6:	4013      	ands	r3, r2
 80027d8:	40dc      	lsrs	r4, r3
 80027da:	0023      	movs	r3, r4
}
 80027dc:	0018      	movs	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	bdb0      	pop	{r4, r5, r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	080044c8 	.word	0x080044c8

080027e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80027f0:	2313      	movs	r3, #19
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027f8:	2312      	movs	r3, #18
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	029b      	lsls	r3, r3, #10
 8002808:	4013      	ands	r3, r2
 800280a:	d100      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800280c:	e0a3      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800280e:	2011      	movs	r0, #17
 8002810:	183b      	adds	r3, r7, r0
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002816:	4b86      	ldr	r3, [pc, #536]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	055b      	lsls	r3, r3, #21
 800281e:	4013      	ands	r3, r2
 8002820:	d110      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	4b83      	ldr	r3, [pc, #524]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002826:	4b82      	ldr	r3, [pc, #520]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	0549      	lsls	r1, r1, #21
 800282c:	430a      	orrs	r2, r1
 800282e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002830:	4b7f      	ldr	r3, [pc, #508]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	055b      	lsls	r3, r3, #21
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283e:	183b      	adds	r3, r7, r0
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002844:	4b7b      	ldr	r3, [pc, #492]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b7a      	ldr	r3, [pc, #488]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800284a:	2180      	movs	r1, #128	; 0x80
 800284c:	0049      	lsls	r1, r1, #1
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002852:	f7fe fa15 	bl	8000c80 <HAL_GetTick>
 8002856:	0003      	movs	r3, r0
 8002858:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800285a:	e00b      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285c:	f7fe fa10 	bl	8000c80 <HAL_GetTick>
 8002860:	0002      	movs	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d904      	bls.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800286a:	2313      	movs	r3, #19
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2203      	movs	r2, #3
 8002870:	701a      	strb	r2, [r3, #0]
        break;
 8002872:	e005      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002874:	4b6f      	ldr	r3, [pc, #444]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4013      	ands	r3, r2
 800287e:	d0ed      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002880:	2313      	movs	r3, #19
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d154      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800288a:	4b69      	ldr	r3, [pc, #420]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800288c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800288e:	23c0      	movs	r3, #192	; 0xc0
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4013      	ands	r3, r2
 8002894:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d019      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d014      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028a6:	4b62      	ldr	r3, [pc, #392]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	4a63      	ldr	r2, [pc, #396]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028b0:	4b5f      	ldr	r3, [pc, #380]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028b4:	4b5e      	ldr	r3, [pc, #376]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028b6:	2180      	movs	r1, #128	; 0x80
 80028b8:	0249      	lsls	r1, r1, #9
 80028ba:	430a      	orrs	r2, r1
 80028bc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028be:	4b5c      	ldr	r3, [pc, #368]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028c2:	4b5b      	ldr	r3, [pc, #364]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028c4:	495d      	ldr	r1, [pc, #372]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80028c6:	400a      	ands	r2, r1
 80028c8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028ca:	4b59      	ldr	r3, [pc, #356]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2201      	movs	r2, #1
 80028d4:	4013      	ands	r3, r2
 80028d6:	d016      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe f9d2 	bl	8000c80 <HAL_GetTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e0:	e00c      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7fe f9cd 	bl	8000c80 <HAL_GetTick>
 80028e6:	0002      	movs	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	4a54      	ldr	r2, [pc, #336]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d904      	bls.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80028f2:	2313      	movs	r3, #19
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	2203      	movs	r2, #3
 80028f8:	701a      	strb	r2, [r3, #0]
            break;
 80028fa:	e004      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fc:	4b4c      	ldr	r3, [pc, #304]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	2202      	movs	r2, #2
 8002902:	4013      	ands	r3, r2
 8002904:	d0ed      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002906:	2313      	movs	r3, #19
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002910:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002914:	4a48      	ldr	r2, [pc, #288]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002916:	4013      	ands	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	4b44      	ldr	r3, [pc, #272]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002920:	430a      	orrs	r2, r1
 8002922:	65da      	str	r2, [r3, #92]	; 0x5c
 8002924:	e00c      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002926:	2312      	movs	r3, #18
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	2213      	movs	r2, #19
 800292c:	18ba      	adds	r2, r7, r2
 800292e:	7812      	ldrb	r2, [r2, #0]
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e005      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002934:	2312      	movs	r3, #18
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	2213      	movs	r2, #19
 800293a:	18ba      	adds	r2, r7, r2
 800293c:	7812      	ldrb	r2, [r2, #0]
 800293e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002940:	2311      	movs	r3, #17
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d105      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294a:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800294c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800294e:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002950:	493c      	ldr	r1, [pc, #240]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002952:	400a      	ands	r2, r1
 8002954:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2201      	movs	r2, #1
 800295c:	4013      	ands	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002960:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	2203      	movs	r2, #3
 8002966:	4393      	bics	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	4b30      	ldr	r3, [pc, #192]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002970:	430a      	orrs	r2, r1
 8002972:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2202      	movs	r2, #2
 800297a:	4013      	ands	r3, r2
 800297c:	d009      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800297e:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	220c      	movs	r2, #12
 8002984:	4393      	bics	r3, r2
 8002986:	0019      	movs	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800298e:	430a      	orrs	r2, r1
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2220      	movs	r2, #32
 8002998:	4013      	ands	r3, r2
 800299a:	d009      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800299c:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029ac:	430a      	orrs	r2, r1
 80029ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	01db      	lsls	r3, r3, #7
 80029b8:	4013      	ands	r3, r2
 80029ba:	d015      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	0899      	lsrs	r1, r3, #2
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029ca:	430a      	orrs	r2, r1
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	05db      	lsls	r3, r3, #23
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d106      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029e0:	2180      	movs	r1, #128	; 0x80
 80029e2:	0249      	lsls	r1, r1, #9
 80029e4:	430a      	orrs	r2, r1
 80029e6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	4013      	ands	r3, r2
 80029f2:	d016      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	0019      	movs	r1, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a04:	430a      	orrs	r2, r1
 8002a06:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	01db      	lsls	r3, r3, #7
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d106      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	0249      	lsls	r1, r1, #9
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a22:	2312      	movs	r3, #18
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	781b      	ldrb	r3, [r3, #0]
}
 8002a28:	0018      	movs	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b006      	add	sp, #24
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40007000 	.word	0x40007000
 8002a38:	fffffcff 	.word	0xfffffcff
 8002a3c:	fffeffff 	.word	0xfffeffff
 8002a40:	00001388 	.word	0x00001388
 8002a44:	efffffff 	.word	0xefffffff
 8002a48:	ffffcfff 	.word	0xffffcfff
 8002a4c:	ffff3fff 	.word	0xffff3fff

08002a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e04a      	b.n	8002af8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	223d      	movs	r2, #61	; 0x3d
 8002a66:	5c9b      	ldrb	r3, [r3, r2]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d107      	bne.n	8002a7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	223c      	movs	r2, #60	; 0x3c
 8002a72:	2100      	movs	r1, #0
 8002a74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7fd ff75 	bl	8000968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	223d      	movs	r2, #61	; 0x3d
 8002a82:	2102      	movs	r1, #2
 8002a84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	0019      	movs	r1, r3
 8002a90:	0010      	movs	r0, r2
 8002a92:	f000 f9dd 	bl	8002e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2248      	movs	r2, #72	; 0x48
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	223e      	movs	r2, #62	; 0x3e
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	5499      	strb	r1, [r3, r2]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	223f      	movs	r2, #63	; 0x3f
 8002aaa:	2101      	movs	r1, #1
 8002aac:	5499      	strb	r1, [r3, r2]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2240      	movs	r2, #64	; 0x40
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2241      	movs	r2, #65	; 0x41
 8002aba:	2101      	movs	r1, #1
 8002abc:	5499      	strb	r1, [r3, r2]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2242      	movs	r2, #66	; 0x42
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	5499      	strb	r1, [r3, r2]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2243      	movs	r2, #67	; 0x43
 8002aca:	2101      	movs	r1, #1
 8002acc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2244      	movs	r2, #68	; 0x44
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2245      	movs	r2, #69	; 0x45
 8002ada:	2101      	movs	r1, #1
 8002adc:	5499      	strb	r1, [r3, r2]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2246      	movs	r2, #70	; 0x46
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	5499      	strb	r1, [r3, r2]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2247      	movs	r2, #71	; 0x47
 8002aea:	2101      	movs	r1, #1
 8002aec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	223d      	movs	r2, #61	; 0x3d
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b002      	add	sp, #8
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	223d      	movs	r2, #61	; 0x3d
 8002b0c:	5c9b      	ldrb	r3, [r3, r2]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d001      	beq.n	8002b18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e034      	b.n	8002b82 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	223d      	movs	r2, #61	; 0x3d
 8002b1c:	2102      	movs	r1, #2
 8002b1e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <HAL_TIM_Base_Start+0x8c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d009      	beq.n	8002b3e <HAL_TIM_Base_Start+0x3e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a18      	ldr	r2, [pc, #96]	; (8002b90 <HAL_TIM_Base_Start+0x90>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d004      	beq.n	8002b3e <HAL_TIM_Base_Start+0x3e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a16      	ldr	r2, [pc, #88]	; (8002b94 <HAL_TIM_Base_Start+0x94>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d116      	bne.n	8002b6c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <HAL_TIM_Base_Start+0x98>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b06      	cmp	r3, #6
 8002b4e:	d016      	beq.n	8002b7e <HAL_TIM_Base_Start+0x7e>
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	025b      	lsls	r3, r3, #9
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d011      	beq.n	8002b7e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2101      	movs	r1, #1
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6a:	e008      	b.n	8002b7e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2101      	movs	r1, #1
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e000      	b.n	8002b80 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b004      	add	sp, #16
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	40012c00 	.word	0x40012c00
 8002b90:	40000400 	.word	0x40000400
 8002b94:	40014000 	.word	0x40014000
 8002b98:	00010007 	.word	0x00010007

08002b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2202      	movs	r2, #2
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d124      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d11d      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	4252      	negs	r2, r2
 8002bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d004      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	0018      	movs	r0, r3
 8002be0:	f000 f91e 	bl	8002e20 <HAL_TIM_IC_CaptureCallback>
 8002be4:	e007      	b.n	8002bf6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 f911 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f000 f91d 	bl	8002e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2204      	movs	r2, #4
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d125      	bne.n	8002c56 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2204      	movs	r2, #4
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d11e      	bne.n	8002c56 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2205      	movs	r2, #5
 8002c1e:	4252      	negs	r2, r2
 8002c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2202      	movs	r2, #2
 8002c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	23c0      	movs	r3, #192	; 0xc0
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4013      	ands	r3, r2
 8002c34:	d004      	beq.n	8002c40 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 f8f1 	bl	8002e20 <HAL_TIM_IC_CaptureCallback>
 8002c3e:	e007      	b.n	8002c50 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 f8e4 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f000 f8f0 	bl	8002e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d124      	bne.n	8002cae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d11d      	bne.n	8002cae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2209      	movs	r2, #9
 8002c78:	4252      	negs	r2, r2
 8002c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	2203      	movs	r2, #3
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d004      	beq.n	8002c98 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f000 f8c5 	bl	8002e20 <HAL_TIM_IC_CaptureCallback>
 8002c96:	e007      	b.n	8002ca8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 f8b8 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 f8c4 	bl	8002e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d125      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d11e      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2211      	movs	r2, #17
 8002cd0:	4252      	negs	r2, r2
 8002cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69da      	ldr	r2, [r3, #28]
 8002ce0:	23c0      	movs	r3, #192	; 0xc0
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d004      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f000 f898 	bl	8002e20 <HAL_TIM_IC_CaptureCallback>
 8002cf0:	e007      	b.n	8002d02 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 f88b 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 f897 	bl	8002e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d10f      	bne.n	8002d36 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d108      	bne.n	8002d36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	4252      	negs	r2, r2
 8002d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f000 f865 	bl	8002e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2280      	movs	r2, #128	; 0x80
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d10f      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b80      	cmp	r3, #128	; 0x80
 8002d50:	d108      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2281      	movs	r2, #129	; 0x81
 8002d58:	4252      	negs	r2, r2
 8002d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f000 f95c 	bl	800301c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	2380      	movs	r3, #128	; 0x80
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	401a      	ands	r2, r3
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d10e      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2280      	movs	r2, #128	; 0x80
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b80      	cmp	r3, #128	; 0x80
 8002d84:	d107      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_TIM_IRQHandler+0x260>)
 8002d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	0018      	movs	r0, r3
 8002d92:	f000 f94b 	bl	800302c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2240      	movs	r2, #64	; 0x40
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d10f      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2240      	movs	r2, #64	; 0x40
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d108      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2241      	movs	r2, #65	; 0x41
 8002db8:	4252      	negs	r2, r2
 8002dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 f83e 	bl	8002e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d10f      	bne.n	8002df2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d108      	bne.n	8002df2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2221      	movs	r2, #33	; 0x21
 8002de6:	4252      	negs	r2, r2
 8002de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 f90d 	bl	800300c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b002      	add	sp, #8
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	fffffeff 	.word	0xfffffeff

08002e00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b002      	add	sp, #8
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b002      	add	sp, #8
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b002      	add	sp, #8
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a2f      	ldr	r2, [pc, #188]	; (8002f20 <TIM_Base_SetConfig+0xd0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d003      	beq.n	8002e70 <TIM_Base_SetConfig+0x20>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a2e      	ldr	r2, [pc, #184]	; (8002f24 <TIM_Base_SetConfig+0xd4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d108      	bne.n	8002e82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2270      	movs	r2, #112	; 0x70
 8002e74:	4393      	bics	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <TIM_Base_SetConfig+0xd0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d013      	beq.n	8002eb2 <TIM_Base_SetConfig+0x62>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a25      	ldr	r2, [pc, #148]	; (8002f24 <TIM_Base_SetConfig+0xd4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00f      	beq.n	8002eb2 <TIM_Base_SetConfig+0x62>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a24      	ldr	r2, [pc, #144]	; (8002f28 <TIM_Base_SetConfig+0xd8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00b      	beq.n	8002eb2 <TIM_Base_SetConfig+0x62>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a23      	ldr	r2, [pc, #140]	; (8002f2c <TIM_Base_SetConfig+0xdc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d007      	beq.n	8002eb2 <TIM_Base_SetConfig+0x62>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <TIM_Base_SetConfig+0xe0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d003      	beq.n	8002eb2 <TIM_Base_SetConfig+0x62>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <TIM_Base_SetConfig+0xe4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d108      	bne.n	8002ec4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4a20      	ldr	r2, [pc, #128]	; (8002f38 <TIM_Base_SetConfig+0xe8>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2280      	movs	r2, #128	; 0x80
 8002ec8:	4393      	bics	r3, r2
 8002eca:	001a      	movs	r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a0c      	ldr	r2, [pc, #48]	; (8002f20 <TIM_Base_SetConfig+0xd0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00b      	beq.n	8002f0a <TIM_Base_SetConfig+0xba>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a0d      	ldr	r2, [pc, #52]	; (8002f2c <TIM_Base_SetConfig+0xdc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d007      	beq.n	8002f0a <TIM_Base_SetConfig+0xba>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a0c      	ldr	r2, [pc, #48]	; (8002f30 <TIM_Base_SetConfig+0xe0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d003      	beq.n	8002f0a <TIM_Base_SetConfig+0xba>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <TIM_Base_SetConfig+0xe4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d103      	bne.n	8002f12 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	615a      	str	r2, [r3, #20]
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b004      	add	sp, #16
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40002000 	.word	0x40002000
 8002f2c:	40014000 	.word	0x40014000
 8002f30:	40014400 	.word	0x40014400
 8002f34:	40014800 	.word	0x40014800
 8002f38:	fffffcff 	.word	0xfffffcff

08002f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	223c      	movs	r2, #60	; 0x3c
 8002f4a:	5c9b      	ldrb	r3, [r3, r2]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e04f      	b.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	223c      	movs	r2, #60	; 0x3c
 8002f58:	2101      	movs	r1, #1
 8002f5a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	223d      	movs	r2, #61	; 0x3d
 8002f60:	2102      	movs	r1, #2
 8002f62:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a20      	ldr	r2, [pc, #128]	; (8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d108      	bne.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4a1f      	ldr	r2, [pc, #124]	; (8003000 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2270      	movs	r2, #112	; 0x70
 8002f94:	4393      	bics	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d009      	beq.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a12      	ldr	r2, [pc, #72]	; (8003004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d004      	beq.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a11      	ldr	r2, [pc, #68]	; (8003008 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2280      	movs	r2, #128	; 0x80
 8002fcc:	4393      	bics	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	223d      	movs	r2, #61	; 0x3d
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	223c      	movs	r2, #60	; 0x3c
 8002fee:	2100      	movs	r1, #0
 8002ff0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b004      	add	sp, #16
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	ff0fffff 	.word	0xff0fffff
 8003004:	40000400 	.word	0x40000400
 8003008:	40014000 	.word	0x40014000

0800300c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003024:	46c0      	nop			; (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b002      	add	sp, #8
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003034:	46c0      	nop			; (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e046      	b.n	80030dc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2288      	movs	r2, #136	; 0x88
 8003052:	589b      	ldr	r3, [r3, r2]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2284      	movs	r2, #132	; 0x84
 800305c:	2100      	movs	r1, #0
 800305e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	0018      	movs	r0, r3
 8003064:	f7fd fca6 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2288      	movs	r2, #136	; 0x88
 800306c:	2124      	movs	r1, #36	; 0x24
 800306e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2101      	movs	r1, #1
 800307c:	438a      	bics	r2, r1
 800307e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	0018      	movs	r0, r3
 8003084:	f000 f8cc 	bl	8003220 <UART_SetConfig>
 8003088:	0003      	movs	r3, r0
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e024      	b.n	80030dc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	0018      	movs	r0, r3
 800309e:	f000 fa63 	bl	8003568 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	490d      	ldr	r1, [pc, #52]	; (80030e4 <HAL_UART_Init+0xa8>)
 80030ae:	400a      	ands	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	212a      	movs	r1, #42	; 0x2a
 80030be:	438a      	bics	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2101      	movs	r1, #1
 80030ce:	430a      	orrs	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	0018      	movs	r0, r3
 80030d6:	f000 fafb 	bl	80036d0 <UART_CheckIdleState>
 80030da:	0003      	movs	r3, r0
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	ffffb7ff 	.word	0xffffb7ff

080030e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	1dbb      	adds	r3, r7, #6
 80030f6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2288      	movs	r2, #136	; 0x88
 80030fc:	589b      	ldr	r3, [r3, r2]
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d000      	beq.n	8003104 <HAL_UART_Transmit+0x1c>
 8003102:	e088      	b.n	8003216 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_UART_Transmit+0x2a>
 800310a:	1dbb      	adds	r3, r7, #6
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e080      	b.n	8003218 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	015b      	lsls	r3, r3, #5
 800311e:	429a      	cmp	r2, r3
 8003120:	d109      	bne.n	8003136 <HAL_UART_Transmit+0x4e>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2201      	movs	r2, #1
 800312e:	4013      	ands	r3, r2
 8003130:	d001      	beq.n	8003136 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e070      	b.n	8003218 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2290      	movs	r2, #144	; 0x90
 800313a:	2100      	movs	r1, #0
 800313c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2288      	movs	r2, #136	; 0x88
 8003142:	2121      	movs	r1, #33	; 0x21
 8003144:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003146:	f7fd fd9b 	bl	8000c80 <HAL_GetTick>
 800314a:	0003      	movs	r3, r0
 800314c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1dba      	adds	r2, r7, #6
 8003152:	2154      	movs	r1, #84	; 0x54
 8003154:	8812      	ldrh	r2, [r2, #0]
 8003156:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1dba      	adds	r2, r7, #6
 800315c:	2156      	movs	r1, #86	; 0x56
 800315e:	8812      	ldrh	r2, [r2, #0]
 8003160:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	015b      	lsls	r3, r3, #5
 800316a:	429a      	cmp	r2, r3
 800316c:	d108      	bne.n	8003180 <HAL_UART_Transmit+0x98>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d104      	bne.n	8003180 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	e003      	b.n	8003188 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003184:	2300      	movs	r3, #0
 8003186:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003188:	e02c      	b.n	80031e4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	0013      	movs	r3, r2
 8003194:	2200      	movs	r2, #0
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	f000 fae8 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d001      	beq.n	80031a4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e039      	b.n	8003218 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10b      	bne.n	80031c2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	001a      	movs	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	05d2      	lsls	r2, r2, #23
 80031b6:	0dd2      	lsrs	r2, r2, #23
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	3302      	adds	r3, #2
 80031be:	61bb      	str	r3, [r7, #24]
 80031c0:	e007      	b.n	80031d2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	781a      	ldrb	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	3301      	adds	r3, #1
 80031d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2256      	movs	r2, #86	; 0x56
 80031d6:	5a9b      	ldrh	r3, [r3, r2]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b299      	uxth	r1, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2256      	movs	r2, #86	; 0x56
 80031e2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2256      	movs	r2, #86	; 0x56
 80031e8:	5a9b      	ldrh	r3, [r3, r2]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1cc      	bne.n	800318a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	0013      	movs	r3, r2
 80031fa:	2200      	movs	r2, #0
 80031fc:	2140      	movs	r1, #64	; 0x40
 80031fe:	f000 fab5 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 8003202:	1e03      	subs	r3, r0, #0
 8003204:	d001      	beq.n	800320a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e006      	b.n	8003218 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2288      	movs	r2, #136	; 0x88
 800320e:	2120      	movs	r1, #32
 8003210:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e000      	b.n	8003218 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003216:	2302      	movs	r3, #2
  }
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b008      	add	sp, #32
 800321e:	bd80      	pop	{r7, pc}

08003220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003228:	231a      	movs	r3, #26
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	4313      	orrs	r3, r2
 8003246:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4abc      	ldr	r2, [pc, #752]	; (8003540 <UART_SetConfig+0x320>)
 8003250:	4013      	ands	r3, r2
 8003252:	0019      	movs	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4ab7      	ldr	r2, [pc, #732]	; (8003544 <UART_SetConfig+0x324>)
 8003266:	4013      	ands	r3, r2
 8003268:	0019      	movs	r1, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	4313      	orrs	r3, r2
 8003284:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4aae      	ldr	r2, [pc, #696]	; (8003548 <UART_SetConfig+0x328>)
 800328e:	4013      	ands	r3, r2
 8003290:	0019      	movs	r1, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	430a      	orrs	r2, r1
 800329a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	220f      	movs	r2, #15
 80032a4:	4393      	bics	r3, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4aa4      	ldr	r2, [pc, #656]	; (800354c <UART_SetConfig+0x32c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d127      	bne.n	800330e <UART_SetConfig+0xee>
 80032be:	4ba4      	ldr	r3, [pc, #656]	; (8003550 <UART_SetConfig+0x330>)
 80032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c2:	2203      	movs	r2, #3
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d017      	beq.n	80032fa <UART_SetConfig+0xda>
 80032ca:	d81b      	bhi.n	8003304 <UART_SetConfig+0xe4>
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d00a      	beq.n	80032e6 <UART_SetConfig+0xc6>
 80032d0:	d818      	bhi.n	8003304 <UART_SetConfig+0xe4>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <UART_SetConfig+0xbc>
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d00a      	beq.n	80032f0 <UART_SetConfig+0xd0>
 80032da:	e013      	b.n	8003304 <UART_SetConfig+0xe4>
 80032dc:	231b      	movs	r3, #27
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e058      	b.n	8003398 <UART_SetConfig+0x178>
 80032e6:	231b      	movs	r3, #27
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	2202      	movs	r2, #2
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e053      	b.n	8003398 <UART_SetConfig+0x178>
 80032f0:	231b      	movs	r3, #27
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	2204      	movs	r2, #4
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	e04e      	b.n	8003398 <UART_SetConfig+0x178>
 80032fa:	231b      	movs	r3, #27
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	2208      	movs	r2, #8
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e049      	b.n	8003398 <UART_SetConfig+0x178>
 8003304:	231b      	movs	r3, #27
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	2210      	movs	r2, #16
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e044      	b.n	8003398 <UART_SetConfig+0x178>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a90      	ldr	r2, [pc, #576]	; (8003554 <UART_SetConfig+0x334>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d127      	bne.n	8003368 <UART_SetConfig+0x148>
 8003318:	4b8d      	ldr	r3, [pc, #564]	; (8003550 <UART_SetConfig+0x330>)
 800331a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331c:	220c      	movs	r2, #12
 800331e:	4013      	ands	r3, r2
 8003320:	2b0c      	cmp	r3, #12
 8003322:	d017      	beq.n	8003354 <UART_SetConfig+0x134>
 8003324:	d81b      	bhi.n	800335e <UART_SetConfig+0x13e>
 8003326:	2b08      	cmp	r3, #8
 8003328:	d00a      	beq.n	8003340 <UART_SetConfig+0x120>
 800332a:	d818      	bhi.n	800335e <UART_SetConfig+0x13e>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <UART_SetConfig+0x116>
 8003330:	2b04      	cmp	r3, #4
 8003332:	d00a      	beq.n	800334a <UART_SetConfig+0x12a>
 8003334:	e013      	b.n	800335e <UART_SetConfig+0x13e>
 8003336:	231b      	movs	r3, #27
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	e02b      	b.n	8003398 <UART_SetConfig+0x178>
 8003340:	231b      	movs	r3, #27
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	2202      	movs	r2, #2
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e026      	b.n	8003398 <UART_SetConfig+0x178>
 800334a:	231b      	movs	r3, #27
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	2204      	movs	r2, #4
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e021      	b.n	8003398 <UART_SetConfig+0x178>
 8003354:	231b      	movs	r3, #27
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	2208      	movs	r2, #8
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	e01c      	b.n	8003398 <UART_SetConfig+0x178>
 800335e:	231b      	movs	r3, #27
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	2210      	movs	r2, #16
 8003364:	701a      	strb	r2, [r3, #0]
 8003366:	e017      	b.n	8003398 <UART_SetConfig+0x178>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a7a      	ldr	r2, [pc, #488]	; (8003558 <UART_SetConfig+0x338>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d104      	bne.n	800337c <UART_SetConfig+0x15c>
 8003372:	231b      	movs	r3, #27
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	e00d      	b.n	8003398 <UART_SetConfig+0x178>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a76      	ldr	r2, [pc, #472]	; (800355c <UART_SetConfig+0x33c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d104      	bne.n	8003390 <UART_SetConfig+0x170>
 8003386:	231b      	movs	r3, #27
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e003      	b.n	8003398 <UART_SetConfig+0x178>
 8003390:	231b      	movs	r3, #27
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2210      	movs	r2, #16
 8003396:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d000      	beq.n	80033a6 <UART_SetConfig+0x186>
 80033a4:	e065      	b.n	8003472 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80033a6:	231b      	movs	r3, #27
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d015      	beq.n	80033dc <UART_SetConfig+0x1bc>
 80033b0:	dc18      	bgt.n	80033e4 <UART_SetConfig+0x1c4>
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d00d      	beq.n	80033d2 <UART_SetConfig+0x1b2>
 80033b6:	dc15      	bgt.n	80033e4 <UART_SetConfig+0x1c4>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <UART_SetConfig+0x1a2>
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d005      	beq.n	80033cc <UART_SetConfig+0x1ac>
 80033c0:	e010      	b.n	80033e4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c2:	f7ff f9fb 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 80033c6:	0003      	movs	r3, r0
 80033c8:	617b      	str	r3, [r7, #20]
        break;
 80033ca:	e012      	b.n	80033f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033cc:	4b64      	ldr	r3, [pc, #400]	; (8003560 <UART_SetConfig+0x340>)
 80033ce:	617b      	str	r3, [r7, #20]
        break;
 80033d0:	e00f      	b.n	80033f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d2:	f7ff f967 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 80033d6:	0003      	movs	r3, r0
 80033d8:	617b      	str	r3, [r7, #20]
        break;
 80033da:	e00a      	b.n	80033f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	617b      	str	r3, [r7, #20]
        break;
 80033e2:	e006      	b.n	80033f2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033e8:	231a      	movs	r3, #26
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
        break;
 80033f0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d100      	bne.n	80033fa <UART_SetConfig+0x1da>
 80033f8:	e08d      	b.n	8003516 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033fe:	4b59      	ldr	r3, [pc, #356]	; (8003564 <UART_SetConfig+0x344>)
 8003400:	0052      	lsls	r2, r2, #1
 8003402:	5ad3      	ldrh	r3, [r2, r3]
 8003404:	0019      	movs	r1, r3
 8003406:	6978      	ldr	r0, [r7, #20]
 8003408:	f7fc fe8c 	bl	8000124 <__udivsi3>
 800340c:	0003      	movs	r3, r0
 800340e:	005a      	lsls	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	18d2      	adds	r2, r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	0019      	movs	r1, r3
 800341e:	0010      	movs	r0, r2
 8003420:	f7fc fe80 	bl	8000124 <__udivsi3>
 8003424:	0003      	movs	r3, r0
 8003426:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	d91c      	bls.n	8003468 <UART_SetConfig+0x248>
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	025b      	lsls	r3, r3, #9
 8003434:	429a      	cmp	r2, r3
 8003436:	d217      	bcs.n	8003468 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	b29a      	uxth	r2, r3
 800343c:	200e      	movs	r0, #14
 800343e:	183b      	adds	r3, r7, r0
 8003440:	210f      	movs	r1, #15
 8003442:	438a      	bics	r2, r1
 8003444:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	b29b      	uxth	r3, r3
 800344c:	2207      	movs	r2, #7
 800344e:	4013      	ands	r3, r2
 8003450:	b299      	uxth	r1, r3
 8003452:	183b      	adds	r3, r7, r0
 8003454:	183a      	adds	r2, r7, r0
 8003456:	8812      	ldrh	r2, [r2, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	183a      	adds	r2, r7, r0
 8003462:	8812      	ldrh	r2, [r2, #0]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	e056      	b.n	8003516 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003468:	231a      	movs	r3, #26
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	2201      	movs	r2, #1
 800346e:	701a      	strb	r2, [r3, #0]
 8003470:	e051      	b.n	8003516 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003472:	231b      	movs	r3, #27
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d015      	beq.n	80034a8 <UART_SetConfig+0x288>
 800347c:	dc18      	bgt.n	80034b0 <UART_SetConfig+0x290>
 800347e:	2b04      	cmp	r3, #4
 8003480:	d00d      	beq.n	800349e <UART_SetConfig+0x27e>
 8003482:	dc15      	bgt.n	80034b0 <UART_SetConfig+0x290>
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <UART_SetConfig+0x26e>
 8003488:	2b02      	cmp	r3, #2
 800348a:	d005      	beq.n	8003498 <UART_SetConfig+0x278>
 800348c:	e010      	b.n	80034b0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800348e:	f7ff f995 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 8003492:	0003      	movs	r3, r0
 8003494:	617b      	str	r3, [r7, #20]
        break;
 8003496:	e012      	b.n	80034be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003498:	4b31      	ldr	r3, [pc, #196]	; (8003560 <UART_SetConfig+0x340>)
 800349a:	617b      	str	r3, [r7, #20]
        break;
 800349c:	e00f      	b.n	80034be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349e:	f7ff f901 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 80034a2:	0003      	movs	r3, r0
 80034a4:	617b      	str	r3, [r7, #20]
        break;
 80034a6:	e00a      	b.n	80034be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	617b      	str	r3, [r7, #20]
        break;
 80034ae:	e006      	b.n	80034be <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80034b4:	231a      	movs	r3, #26
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	2201      	movs	r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
        break;
 80034bc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d028      	beq.n	8003516 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034c8:	4b26      	ldr	r3, [pc, #152]	; (8003564 <UART_SetConfig+0x344>)
 80034ca:	0052      	lsls	r2, r2, #1
 80034cc:	5ad3      	ldrh	r3, [r2, r3]
 80034ce:	0019      	movs	r1, r3
 80034d0:	6978      	ldr	r0, [r7, #20]
 80034d2:	f7fc fe27 	bl	8000124 <__udivsi3>
 80034d6:	0003      	movs	r3, r0
 80034d8:	001a      	movs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	085b      	lsrs	r3, r3, #1
 80034e0:	18d2      	adds	r2, r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	0019      	movs	r1, r3
 80034e8:	0010      	movs	r0, r2
 80034ea:	f7fc fe1b 	bl	8000124 <__udivsi3>
 80034ee:	0003      	movs	r3, r0
 80034f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b0f      	cmp	r3, #15
 80034f6:	d90a      	bls.n	800350e <UART_SetConfig+0x2ee>
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	025b      	lsls	r3, r3, #9
 80034fe:	429a      	cmp	r2, r3
 8003500:	d205      	bcs.n	800350e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	b29a      	uxth	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	e003      	b.n	8003516 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800350e:	231a      	movs	r3, #26
 8003510:	18fb      	adds	r3, r7, r3
 8003512:	2201      	movs	r2, #1
 8003514:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	226a      	movs	r2, #106	; 0x6a
 800351a:	2101      	movs	r1, #1
 800351c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2268      	movs	r2, #104	; 0x68
 8003522:	2101      	movs	r1, #1
 8003524:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003532:	231a      	movs	r3, #26
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	781b      	ldrb	r3, [r3, #0]
}
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	b008      	add	sp, #32
 800353e:	bd80      	pop	{r7, pc}
 8003540:	cfff69f3 	.word	0xcfff69f3
 8003544:	ffffcfff 	.word	0xffffcfff
 8003548:	11fff4ff 	.word	0x11fff4ff
 800354c:	40013800 	.word	0x40013800
 8003550:	40021000 	.word	0x40021000
 8003554:	40004400 	.word	0x40004400
 8003558:	40004800 	.word	0x40004800
 800355c:	40004c00 	.word	0x40004c00
 8003560:	00f42400 	.word	0x00f42400
 8003564:	080044e8 	.word	0x080044e8

08003568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	2201      	movs	r2, #1
 8003576:	4013      	ands	r3, r2
 8003578:	d00b      	beq.n	8003592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a4a      	ldr	r2, [pc, #296]	; (80036ac <UART_AdvFeatureConfig+0x144>)
 8003582:	4013      	ands	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	2202      	movs	r2, #2
 8003598:	4013      	ands	r3, r2
 800359a:	d00b      	beq.n	80035b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4a43      	ldr	r2, [pc, #268]	; (80036b0 <UART_AdvFeatureConfig+0x148>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	0019      	movs	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	2204      	movs	r2, #4
 80035ba:	4013      	ands	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4a3b      	ldr	r2, [pc, #236]	; (80036b4 <UART_AdvFeatureConfig+0x14c>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	2208      	movs	r2, #8
 80035dc:	4013      	ands	r3, r2
 80035de:	d00b      	beq.n	80035f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4a34      	ldr	r2, [pc, #208]	; (80036b8 <UART_AdvFeatureConfig+0x150>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	0019      	movs	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	2210      	movs	r2, #16
 80035fe:	4013      	ands	r3, r2
 8003600:	d00b      	beq.n	800361a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	4a2c      	ldr	r2, [pc, #176]	; (80036bc <UART_AdvFeatureConfig+0x154>)
 800360a:	4013      	ands	r3, r2
 800360c:	0019      	movs	r1, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	2220      	movs	r2, #32
 8003620:	4013      	ands	r3, r2
 8003622:	d00b      	beq.n	800363c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	4a25      	ldr	r2, [pc, #148]	; (80036c0 <UART_AdvFeatureConfig+0x158>)
 800362c:	4013      	ands	r3, r2
 800362e:	0019      	movs	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	2240      	movs	r2, #64	; 0x40
 8003642:	4013      	ands	r3, r2
 8003644:	d01d      	beq.n	8003682 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4a1d      	ldr	r2, [pc, #116]	; (80036c4 <UART_AdvFeatureConfig+0x15c>)
 800364e:	4013      	ands	r3, r2
 8003650:	0019      	movs	r1, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	035b      	lsls	r3, r3, #13
 8003666:	429a      	cmp	r2, r3
 8003668:	d10b      	bne.n	8003682 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <UART_AdvFeatureConfig+0x160>)
 8003672:	4013      	ands	r3, r2
 8003674:	0019      	movs	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	2280      	movs	r2, #128	; 0x80
 8003688:	4013      	ands	r3, r2
 800368a:	d00b      	beq.n	80036a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4a0e      	ldr	r2, [pc, #56]	; (80036cc <UART_AdvFeatureConfig+0x164>)
 8003694:	4013      	ands	r3, r2
 8003696:	0019      	movs	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
  }
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b002      	add	sp, #8
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	fffdffff 	.word	0xfffdffff
 80036b0:	fffeffff 	.word	0xfffeffff
 80036b4:	fffbffff 	.word	0xfffbffff
 80036b8:	ffff7fff 	.word	0xffff7fff
 80036bc:	ffffefff 	.word	0xffffefff
 80036c0:	ffffdfff 	.word	0xffffdfff
 80036c4:	ffefffff 	.word	0xffefffff
 80036c8:	ff9fffff 	.word	0xff9fffff
 80036cc:	fff7ffff 	.word	0xfff7ffff

080036d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2290      	movs	r2, #144	; 0x90
 80036dc:	2100      	movs	r1, #0
 80036de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036e0:	f7fd face 	bl	8000c80 <HAL_GetTick>
 80036e4:	0003      	movs	r3, r0
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2208      	movs	r2, #8
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d10c      	bne.n	8003710 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	0391      	lsls	r1, r2, #14
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <UART_CheckIdleState+0x98>)
 8003700:	9200      	str	r2, [sp, #0]
 8003702:	2200      	movs	r2, #0
 8003704:	f000 f832 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 8003708:	1e03      	subs	r3, r0, #0
 800370a:	d001      	beq.n	8003710 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e026      	b.n	800375e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2204      	movs	r2, #4
 8003718:	4013      	ands	r3, r2
 800371a:	2b04      	cmp	r3, #4
 800371c:	d10c      	bne.n	8003738 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2280      	movs	r2, #128	; 0x80
 8003722:	03d1      	lsls	r1, r2, #15
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4a10      	ldr	r2, [pc, #64]	; (8003768 <UART_CheckIdleState+0x98>)
 8003728:	9200      	str	r2, [sp, #0]
 800372a:	2200      	movs	r2, #0
 800372c:	f000 f81e 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 8003730:	1e03      	subs	r3, r0, #0
 8003732:	d001      	beq.n	8003738 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e012      	b.n	800375e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2288      	movs	r2, #136	; 0x88
 800373c:	2120      	movs	r1, #32
 800373e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	228c      	movs	r2, #140	; 0x8c
 8003744:	2120      	movs	r1, #32
 8003746:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2284      	movs	r2, #132	; 0x84
 8003758:	2100      	movs	r1, #0
 800375a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	0018      	movs	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	b004      	add	sp, #16
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	01ffffff 	.word	0x01ffffff

0800376c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b094      	sub	sp, #80	; 0x50
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	1dfb      	adds	r3, r7, #7
 800377a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377c:	e0a7      	b.n	80038ce <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003780:	3301      	adds	r3, #1
 8003782:	d100      	bne.n	8003786 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003784:	e0a3      	b.n	80038ce <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7fd fa7b 	bl	8000c80 <HAL_GetTick>
 800378a:	0002      	movs	r2, r0
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <UART_WaitOnFlagUntilTimeout+0x30>
 8003796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003798:	2b00      	cmp	r3, #0
 800379a:	d13f      	bne.n	800381c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800379c:	f3ef 8310 	mrs	r3, PRIMASK
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80037a4:	647b      	str	r3, [r7, #68]	; 0x44
 80037a6:	2301      	movs	r3, #1
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ac:	f383 8810 	msr	PRIMASK, r3
}
 80037b0:	46c0      	nop			; (mov r8, r8)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	494e      	ldr	r1, [pc, #312]	; (80038f8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80037be:	400a      	ands	r2, r1
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	f383 8810 	msr	PRIMASK, r3
}
 80037cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ce:	f3ef 8310 	mrs	r3, PRIMASK
 80037d2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80037d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d6:	643b      	str	r3, [r7, #64]	; 0x40
 80037d8:	2301      	movs	r3, #1
 80037da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037de:	f383 8810 	msr	PRIMASK, r3
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2101      	movs	r1, #1
 80037f0:	438a      	bics	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fa:	f383 8810 	msr	PRIMASK, r3
}
 80037fe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2288      	movs	r2, #136	; 0x88
 8003804:	2120      	movs	r1, #32
 8003806:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	228c      	movs	r2, #140	; 0x8c
 800380c:	2120      	movs	r1, #32
 800380e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2284      	movs	r2, #132	; 0x84
 8003814:	2100      	movs	r1, #0
 8003816:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e069      	b.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2204      	movs	r2, #4
 8003824:	4013      	ands	r3, r2
 8003826:	d052      	beq.n	80038ce <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	2380      	movs	r3, #128	; 0x80
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	401a      	ands	r2, r3
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	429a      	cmp	r2, r3
 800383a:	d148      	bne.n	80038ce <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2280      	movs	r2, #128	; 0x80
 8003842:	0112      	lsls	r2, r2, #4
 8003844:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003846:	f3ef 8310 	mrs	r3, PRIMASK
 800384a:	613b      	str	r3, [r7, #16]
  return(result);
 800384c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800384e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003850:	2301      	movs	r3, #1
 8003852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f383 8810 	msr	PRIMASK, r3
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4924      	ldr	r1, [pc, #144]	; (80038f8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003868:	400a      	ands	r2, r1
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800386e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f383 8810 	msr	PRIMASK, r3
}
 8003876:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003878:	f3ef 8310 	mrs	r3, PRIMASK
 800387c:	61fb      	str	r3, [r7, #28]
  return(result);
 800387e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003880:	64bb      	str	r3, [r7, #72]	; 0x48
 8003882:	2301      	movs	r3, #1
 8003884:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	f383 8810 	msr	PRIMASK, r3
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2101      	movs	r1, #1
 800389a:	438a      	bics	r2, r1
 800389c:	609a      	str	r2, [r3, #8]
 800389e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	f383 8810 	msr	PRIMASK, r3
}
 80038a8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2288      	movs	r2, #136	; 0x88
 80038ae:	2120      	movs	r1, #32
 80038b0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	228c      	movs	r2, #140	; 0x8c
 80038b6:	2120      	movs	r1, #32
 80038b8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2290      	movs	r2, #144	; 0x90
 80038be:	2120      	movs	r1, #32
 80038c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2284      	movs	r2, #132	; 0x84
 80038c6:	2100      	movs	r1, #0
 80038c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e010      	b.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	4013      	ands	r3, r2
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	425a      	negs	r2, r3
 80038de:	4153      	adcs	r3, r2
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	001a      	movs	r2, r3
 80038e4:	1dfb      	adds	r3, r7, #7
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d100      	bne.n	80038ee <UART_WaitOnFlagUntilTimeout+0x182>
 80038ec:	e747      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b014      	add	sp, #80	; 0x50
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	fffffe5f 	.word	0xfffffe5f

080038fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2284      	movs	r2, #132	; 0x84
 8003908:	5c9b      	ldrb	r3, [r3, r2]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_UARTEx_DisableFifoMode+0x16>
 800390e:	2302      	movs	r3, #2
 8003910:	e027      	b.n	8003962 <HAL_UARTEx_DisableFifoMode+0x66>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2284      	movs	r2, #132	; 0x84
 8003916:	2101      	movs	r1, #1
 8003918:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2288      	movs	r2, #136	; 0x88
 800391e:	2124      	movs	r1, #36	; 0x24
 8003920:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2101      	movs	r1, #1
 8003936:	438a      	bics	r2, r1
 8003938:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4a0b      	ldr	r2, [pc, #44]	; (800396c <HAL_UARTEx_DisableFifoMode+0x70>)
 800393e:	4013      	ands	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2288      	movs	r2, #136	; 0x88
 8003954:	2120      	movs	r1, #32
 8003956:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2284      	movs	r2, #132	; 0x84
 800395c:	2100      	movs	r1, #0
 800395e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	0018      	movs	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	b004      	add	sp, #16
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	dfffffff 	.word	0xdfffffff

08003970 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2284      	movs	r2, #132	; 0x84
 800397e:	5c9b      	ldrb	r3, [r3, r2]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003984:	2302      	movs	r3, #2
 8003986:	e02e      	b.n	80039e6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2284      	movs	r2, #132	; 0x84
 800398c:	2101      	movs	r1, #1
 800398e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2288      	movs	r2, #136	; 0x88
 8003994:	2124      	movs	r1, #36	; 0x24
 8003996:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2101      	movs	r1, #1
 80039ac:	438a      	bics	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	08d9      	lsrs	r1, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 f854 	bl	8003a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2288      	movs	r2, #136	; 0x88
 80039d8:	2120      	movs	r1, #32
 80039da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2284      	movs	r2, #132	; 0x84
 80039e0:	2100      	movs	r1, #0
 80039e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	0018      	movs	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b004      	add	sp, #16
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2284      	movs	r2, #132	; 0x84
 80039fe:	5c9b      	ldrb	r3, [r3, r2]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e02f      	b.n	8003a68 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2284      	movs	r2, #132	; 0x84
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2288      	movs	r2, #136	; 0x88
 8003a14:	2124      	movs	r1, #36	; 0x24
 8003a16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	438a      	bics	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f000 f813 	bl	8003a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2288      	movs	r2, #136	; 0x88
 8003a5a:	2120      	movs	r1, #32
 8003a5c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2284      	movs	r2, #132	; 0x84
 8003a62:	2100      	movs	r1, #0
 8003a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b004      	add	sp, #16
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	f1ffffff 	.word	0xf1ffffff

08003a74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d108      	bne.n	8003a96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	226a      	movs	r2, #106	; 0x6a
 8003a88:	2101      	movs	r1, #1
 8003a8a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2268      	movs	r2, #104	; 0x68
 8003a90:	2101      	movs	r1, #1
 8003a92:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a94:	e043      	b.n	8003b1e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a96:	260f      	movs	r6, #15
 8003a98:	19bb      	adds	r3, r7, r6
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a9e:	200e      	movs	r0, #14
 8003aa0:	183b      	adds	r3, r7, r0
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	0e5b      	lsrs	r3, r3, #25
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	240d      	movs	r4, #13
 8003ab2:	193b      	adds	r3, r7, r4
 8003ab4:	2107      	movs	r1, #7
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	0f5b      	lsrs	r3, r3, #29
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	250c      	movs	r5, #12
 8003ac6:	197b      	adds	r3, r7, r5
 8003ac8:	2107      	movs	r1, #7
 8003aca:	400a      	ands	r2, r1
 8003acc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ace:	183b      	adds	r3, r7, r0
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	197a      	adds	r2, r7, r5
 8003ad4:	7812      	ldrb	r2, [r2, #0]
 8003ad6:	4914      	ldr	r1, [pc, #80]	; (8003b28 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ad8:	5c8a      	ldrb	r2, [r1, r2]
 8003ada:	435a      	muls	r2, r3
 8003adc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ade:	197b      	adds	r3, r7, r5
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <UARTEx_SetNbDataToProcess+0xb8>)
 8003ae4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	f7fc fba6 	bl	8000238 <__divsi3>
 8003aec:	0003      	movs	r3, r0
 8003aee:	b299      	uxth	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	226a      	movs	r2, #106	; 0x6a
 8003af4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003af6:	19bb      	adds	r3, r7, r6
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	193a      	adds	r2, r7, r4
 8003afc:	7812      	ldrb	r2, [r2, #0]
 8003afe:	490a      	ldr	r1, [pc, #40]	; (8003b28 <UARTEx_SetNbDataToProcess+0xb4>)
 8003b00:	5c8a      	ldrb	r2, [r1, r2]
 8003b02:	435a      	muls	r2, r3
 8003b04:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b06:	193b      	adds	r3, r7, r4
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	4a08      	ldr	r2, [pc, #32]	; (8003b2c <UARTEx_SetNbDataToProcess+0xb8>)
 8003b0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b0e:	0019      	movs	r1, r3
 8003b10:	f7fc fb92 	bl	8000238 <__divsi3>
 8003b14:	0003      	movs	r3, r0
 8003b16:	b299      	uxth	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2268      	movs	r2, #104	; 0x68
 8003b1c:	5299      	strh	r1, [r3, r2]
}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b005      	add	sp, #20
 8003b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	08004500 	.word	0x08004500
 8003b2c:	08004508 	.word	0x08004508

08003b30 <__errno>:
 8003b30:	4b01      	ldr	r3, [pc, #4]	; (8003b38 <__errno+0x8>)
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	4770      	bx	lr
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	2000000c 	.word	0x2000000c

08003b3c <__libc_init_array>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	2600      	movs	r6, #0
 8003b40:	4d0c      	ldr	r5, [pc, #48]	; (8003b74 <__libc_init_array+0x38>)
 8003b42:	4c0d      	ldr	r4, [pc, #52]	; (8003b78 <__libc_init_array+0x3c>)
 8003b44:	1b64      	subs	r4, r4, r5
 8003b46:	10a4      	asrs	r4, r4, #2
 8003b48:	42a6      	cmp	r6, r4
 8003b4a:	d109      	bne.n	8003b60 <__libc_init_array+0x24>
 8003b4c:	2600      	movs	r6, #0
 8003b4e:	f000 fc8b 	bl	8004468 <_init>
 8003b52:	4d0a      	ldr	r5, [pc, #40]	; (8003b7c <__libc_init_array+0x40>)
 8003b54:	4c0a      	ldr	r4, [pc, #40]	; (8003b80 <__libc_init_array+0x44>)
 8003b56:	1b64      	subs	r4, r4, r5
 8003b58:	10a4      	asrs	r4, r4, #2
 8003b5a:	42a6      	cmp	r6, r4
 8003b5c:	d105      	bne.n	8003b6a <__libc_init_array+0x2e>
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	00b3      	lsls	r3, r6, #2
 8003b62:	58eb      	ldr	r3, [r5, r3]
 8003b64:	4798      	blx	r3
 8003b66:	3601      	adds	r6, #1
 8003b68:	e7ee      	b.n	8003b48 <__libc_init_array+0xc>
 8003b6a:	00b3      	lsls	r3, r6, #2
 8003b6c:	58eb      	ldr	r3, [r5, r3]
 8003b6e:	4798      	blx	r3
 8003b70:	3601      	adds	r6, #1
 8003b72:	e7f2      	b.n	8003b5a <__libc_init_array+0x1e>
 8003b74:	08004544 	.word	0x08004544
 8003b78:	08004544 	.word	0x08004544
 8003b7c:	08004544 	.word	0x08004544
 8003b80:	08004548 	.word	0x08004548

08003b84 <memset>:
 8003b84:	0003      	movs	r3, r0
 8003b86:	1882      	adds	r2, r0, r2
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d100      	bne.n	8003b8e <memset+0xa>
 8003b8c:	4770      	bx	lr
 8003b8e:	7019      	strb	r1, [r3, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	e7f9      	b.n	8003b88 <memset+0x4>

08003b94 <siprintf>:
 8003b94:	b40e      	push	{r1, r2, r3}
 8003b96:	b500      	push	{lr}
 8003b98:	490b      	ldr	r1, [pc, #44]	; (8003bc8 <siprintf+0x34>)
 8003b9a:	b09c      	sub	sp, #112	; 0x70
 8003b9c:	ab1d      	add	r3, sp, #116	; 0x74
 8003b9e:	9002      	str	r0, [sp, #8]
 8003ba0:	9006      	str	r0, [sp, #24]
 8003ba2:	9107      	str	r1, [sp, #28]
 8003ba4:	9104      	str	r1, [sp, #16]
 8003ba6:	4809      	ldr	r0, [pc, #36]	; (8003bcc <siprintf+0x38>)
 8003ba8:	4909      	ldr	r1, [pc, #36]	; (8003bd0 <siprintf+0x3c>)
 8003baa:	cb04      	ldmia	r3!, {r2}
 8003bac:	9105      	str	r1, [sp, #20]
 8003bae:	6800      	ldr	r0, [r0, #0]
 8003bb0:	a902      	add	r1, sp, #8
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	f000 f870 	bl	8003c98 <_svfiprintf_r>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	9a02      	ldr	r2, [sp, #8]
 8003bbc:	7013      	strb	r3, [r2, #0]
 8003bbe:	b01c      	add	sp, #112	; 0x70
 8003bc0:	bc08      	pop	{r3}
 8003bc2:	b003      	add	sp, #12
 8003bc4:	4718      	bx	r3
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	7fffffff 	.word	0x7fffffff
 8003bcc:	2000000c 	.word	0x2000000c
 8003bd0:	ffff0208 	.word	0xffff0208

08003bd4 <__ssputs_r>:
 8003bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd6:	688e      	ldr	r6, [r1, #8]
 8003bd8:	b085      	sub	sp, #20
 8003bda:	0007      	movs	r7, r0
 8003bdc:	000c      	movs	r4, r1
 8003bde:	9203      	str	r2, [sp, #12]
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	429e      	cmp	r6, r3
 8003be4:	d83c      	bhi.n	8003c60 <__ssputs_r+0x8c>
 8003be6:	2390      	movs	r3, #144	; 0x90
 8003be8:	898a      	ldrh	r2, [r1, #12]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	421a      	tst	r2, r3
 8003bee:	d034      	beq.n	8003c5a <__ssputs_r+0x86>
 8003bf0:	6909      	ldr	r1, [r1, #16]
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	6960      	ldr	r0, [r4, #20]
 8003bf6:	1a5b      	subs	r3, r3, r1
 8003bf8:	9302      	str	r3, [sp, #8]
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	4343      	muls	r3, r0
 8003bfe:	0fdd      	lsrs	r5, r3, #31
 8003c00:	18ed      	adds	r5, r5, r3
 8003c02:	9b01      	ldr	r3, [sp, #4]
 8003c04:	9802      	ldr	r0, [sp, #8]
 8003c06:	3301      	adds	r3, #1
 8003c08:	181b      	adds	r3, r3, r0
 8003c0a:	106d      	asrs	r5, r5, #1
 8003c0c:	42ab      	cmp	r3, r5
 8003c0e:	d900      	bls.n	8003c12 <__ssputs_r+0x3e>
 8003c10:	001d      	movs	r5, r3
 8003c12:	0553      	lsls	r3, r2, #21
 8003c14:	d532      	bpl.n	8003c7c <__ssputs_r+0xa8>
 8003c16:	0029      	movs	r1, r5
 8003c18:	0038      	movs	r0, r7
 8003c1a:	f000 fb53 	bl	80042c4 <_malloc_r>
 8003c1e:	1e06      	subs	r6, r0, #0
 8003c20:	d109      	bne.n	8003c36 <__ssputs_r+0x62>
 8003c22:	230c      	movs	r3, #12
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	2340      	movs	r3, #64	; 0x40
 8003c28:	2001      	movs	r0, #1
 8003c2a:	89a2      	ldrh	r2, [r4, #12]
 8003c2c:	4240      	negs	r0, r0
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	81a3      	strh	r3, [r4, #12]
 8003c32:	b005      	add	sp, #20
 8003c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c36:	9a02      	ldr	r2, [sp, #8]
 8003c38:	6921      	ldr	r1, [r4, #16]
 8003c3a:	f000 faba 	bl	80041b2 <memcpy>
 8003c3e:	89a3      	ldrh	r3, [r4, #12]
 8003c40:	4a14      	ldr	r2, [pc, #80]	; (8003c94 <__ssputs_r+0xc0>)
 8003c42:	401a      	ands	r2, r3
 8003c44:	2380      	movs	r3, #128	; 0x80
 8003c46:	4313      	orrs	r3, r2
 8003c48:	81a3      	strh	r3, [r4, #12]
 8003c4a:	9b02      	ldr	r3, [sp, #8]
 8003c4c:	6126      	str	r6, [r4, #16]
 8003c4e:	18f6      	adds	r6, r6, r3
 8003c50:	6026      	str	r6, [r4, #0]
 8003c52:	6165      	str	r5, [r4, #20]
 8003c54:	9e01      	ldr	r6, [sp, #4]
 8003c56:	1aed      	subs	r5, r5, r3
 8003c58:	60a5      	str	r5, [r4, #8]
 8003c5a:	9b01      	ldr	r3, [sp, #4]
 8003c5c:	429e      	cmp	r6, r3
 8003c5e:	d900      	bls.n	8003c62 <__ssputs_r+0x8e>
 8003c60:	9e01      	ldr	r6, [sp, #4]
 8003c62:	0032      	movs	r2, r6
 8003c64:	9903      	ldr	r1, [sp, #12]
 8003c66:	6820      	ldr	r0, [r4, #0]
 8003c68:	f000 faac 	bl	80041c4 <memmove>
 8003c6c:	68a3      	ldr	r3, [r4, #8]
 8003c6e:	2000      	movs	r0, #0
 8003c70:	1b9b      	subs	r3, r3, r6
 8003c72:	60a3      	str	r3, [r4, #8]
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	199e      	adds	r6, r3, r6
 8003c78:	6026      	str	r6, [r4, #0]
 8003c7a:	e7da      	b.n	8003c32 <__ssputs_r+0x5e>
 8003c7c:	002a      	movs	r2, r5
 8003c7e:	0038      	movs	r0, r7
 8003c80:	f000 fb96 	bl	80043b0 <_realloc_r>
 8003c84:	1e06      	subs	r6, r0, #0
 8003c86:	d1e0      	bne.n	8003c4a <__ssputs_r+0x76>
 8003c88:	0038      	movs	r0, r7
 8003c8a:	6921      	ldr	r1, [r4, #16]
 8003c8c:	f000 faae 	bl	80041ec <_free_r>
 8003c90:	e7c7      	b.n	8003c22 <__ssputs_r+0x4e>
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	fffffb7f 	.word	0xfffffb7f

08003c98 <_svfiprintf_r>:
 8003c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9a:	b0a1      	sub	sp, #132	; 0x84
 8003c9c:	9003      	str	r0, [sp, #12]
 8003c9e:	001d      	movs	r5, r3
 8003ca0:	898b      	ldrh	r3, [r1, #12]
 8003ca2:	000f      	movs	r7, r1
 8003ca4:	0016      	movs	r6, r2
 8003ca6:	061b      	lsls	r3, r3, #24
 8003ca8:	d511      	bpl.n	8003cce <_svfiprintf_r+0x36>
 8003caa:	690b      	ldr	r3, [r1, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10e      	bne.n	8003cce <_svfiprintf_r+0x36>
 8003cb0:	2140      	movs	r1, #64	; 0x40
 8003cb2:	f000 fb07 	bl	80042c4 <_malloc_r>
 8003cb6:	6038      	str	r0, [r7, #0]
 8003cb8:	6138      	str	r0, [r7, #16]
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d105      	bne.n	8003cca <_svfiprintf_r+0x32>
 8003cbe:	230c      	movs	r3, #12
 8003cc0:	9a03      	ldr	r2, [sp, #12]
 8003cc2:	3801      	subs	r0, #1
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	b021      	add	sp, #132	; 0x84
 8003cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cca:	2340      	movs	r3, #64	; 0x40
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	ac08      	add	r4, sp, #32
 8003cd2:	6163      	str	r3, [r4, #20]
 8003cd4:	3320      	adds	r3, #32
 8003cd6:	7663      	strb	r3, [r4, #25]
 8003cd8:	3310      	adds	r3, #16
 8003cda:	76a3      	strb	r3, [r4, #26]
 8003cdc:	9507      	str	r5, [sp, #28]
 8003cde:	0035      	movs	r5, r6
 8003ce0:	782b      	ldrb	r3, [r5, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <_svfiprintf_r+0x52>
 8003ce6:	2b25      	cmp	r3, #37	; 0x25
 8003ce8:	d147      	bne.n	8003d7a <_svfiprintf_r+0xe2>
 8003cea:	1bab      	subs	r3, r5, r6
 8003cec:	9305      	str	r3, [sp, #20]
 8003cee:	42b5      	cmp	r5, r6
 8003cf0:	d00c      	beq.n	8003d0c <_svfiprintf_r+0x74>
 8003cf2:	0032      	movs	r2, r6
 8003cf4:	0039      	movs	r1, r7
 8003cf6:	9803      	ldr	r0, [sp, #12]
 8003cf8:	f7ff ff6c 	bl	8003bd4 <__ssputs_r>
 8003cfc:	1c43      	adds	r3, r0, #1
 8003cfe:	d100      	bne.n	8003d02 <_svfiprintf_r+0x6a>
 8003d00:	e0ae      	b.n	8003e60 <_svfiprintf_r+0x1c8>
 8003d02:	6962      	ldr	r2, [r4, #20]
 8003d04:	9b05      	ldr	r3, [sp, #20]
 8003d06:	4694      	mov	ip, r2
 8003d08:	4463      	add	r3, ip
 8003d0a:	6163      	str	r3, [r4, #20]
 8003d0c:	782b      	ldrb	r3, [r5, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d100      	bne.n	8003d14 <_svfiprintf_r+0x7c>
 8003d12:	e0a5      	b.n	8003e60 <_svfiprintf_r+0x1c8>
 8003d14:	2201      	movs	r2, #1
 8003d16:	2300      	movs	r3, #0
 8003d18:	4252      	negs	r2, r2
 8003d1a:	6062      	str	r2, [r4, #4]
 8003d1c:	a904      	add	r1, sp, #16
 8003d1e:	3254      	adds	r2, #84	; 0x54
 8003d20:	1852      	adds	r2, r2, r1
 8003d22:	1c6e      	adds	r6, r5, #1
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	60e3      	str	r3, [r4, #12]
 8003d28:	60a3      	str	r3, [r4, #8]
 8003d2a:	7013      	strb	r3, [r2, #0]
 8003d2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003d2e:	2205      	movs	r2, #5
 8003d30:	7831      	ldrb	r1, [r6, #0]
 8003d32:	4854      	ldr	r0, [pc, #336]	; (8003e84 <_svfiprintf_r+0x1ec>)
 8003d34:	f000 fa32 	bl	800419c <memchr>
 8003d38:	1c75      	adds	r5, r6, #1
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d11f      	bne.n	8003d7e <_svfiprintf_r+0xe6>
 8003d3e:	6822      	ldr	r2, [r4, #0]
 8003d40:	06d3      	lsls	r3, r2, #27
 8003d42:	d504      	bpl.n	8003d4e <_svfiprintf_r+0xb6>
 8003d44:	2353      	movs	r3, #83	; 0x53
 8003d46:	a904      	add	r1, sp, #16
 8003d48:	185b      	adds	r3, r3, r1
 8003d4a:	2120      	movs	r1, #32
 8003d4c:	7019      	strb	r1, [r3, #0]
 8003d4e:	0713      	lsls	r3, r2, #28
 8003d50:	d504      	bpl.n	8003d5c <_svfiprintf_r+0xc4>
 8003d52:	2353      	movs	r3, #83	; 0x53
 8003d54:	a904      	add	r1, sp, #16
 8003d56:	185b      	adds	r3, r3, r1
 8003d58:	212b      	movs	r1, #43	; 0x2b
 8003d5a:	7019      	strb	r1, [r3, #0]
 8003d5c:	7833      	ldrb	r3, [r6, #0]
 8003d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d60:	d016      	beq.n	8003d90 <_svfiprintf_r+0xf8>
 8003d62:	0035      	movs	r5, r6
 8003d64:	2100      	movs	r1, #0
 8003d66:	200a      	movs	r0, #10
 8003d68:	68e3      	ldr	r3, [r4, #12]
 8003d6a:	782a      	ldrb	r2, [r5, #0]
 8003d6c:	1c6e      	adds	r6, r5, #1
 8003d6e:	3a30      	subs	r2, #48	; 0x30
 8003d70:	2a09      	cmp	r2, #9
 8003d72:	d94e      	bls.n	8003e12 <_svfiprintf_r+0x17a>
 8003d74:	2900      	cmp	r1, #0
 8003d76:	d111      	bne.n	8003d9c <_svfiprintf_r+0x104>
 8003d78:	e017      	b.n	8003daa <_svfiprintf_r+0x112>
 8003d7a:	3501      	adds	r5, #1
 8003d7c:	e7b0      	b.n	8003ce0 <_svfiprintf_r+0x48>
 8003d7e:	4b41      	ldr	r3, [pc, #260]	; (8003e84 <_svfiprintf_r+0x1ec>)
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	1ac0      	subs	r0, r0, r3
 8003d84:	2301      	movs	r3, #1
 8003d86:	4083      	lsls	r3, r0
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	002e      	movs	r6, r5
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	e7ce      	b.n	8003d2e <_svfiprintf_r+0x96>
 8003d90:	9b07      	ldr	r3, [sp, #28]
 8003d92:	1d19      	adds	r1, r3, #4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	9107      	str	r1, [sp, #28]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	db01      	blt.n	8003da0 <_svfiprintf_r+0x108>
 8003d9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d9e:	e004      	b.n	8003daa <_svfiprintf_r+0x112>
 8003da0:	425b      	negs	r3, r3
 8003da2:	60e3      	str	r3, [r4, #12]
 8003da4:	2302      	movs	r3, #2
 8003da6:	4313      	orrs	r3, r2
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	782b      	ldrb	r3, [r5, #0]
 8003dac:	2b2e      	cmp	r3, #46	; 0x2e
 8003dae:	d10a      	bne.n	8003dc6 <_svfiprintf_r+0x12e>
 8003db0:	786b      	ldrb	r3, [r5, #1]
 8003db2:	2b2a      	cmp	r3, #42	; 0x2a
 8003db4:	d135      	bne.n	8003e22 <_svfiprintf_r+0x18a>
 8003db6:	9b07      	ldr	r3, [sp, #28]
 8003db8:	3502      	adds	r5, #2
 8003dba:	1d1a      	adds	r2, r3, #4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	9207      	str	r2, [sp, #28]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	db2b      	blt.n	8003e1c <_svfiprintf_r+0x184>
 8003dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8003dc6:	4e30      	ldr	r6, [pc, #192]	; (8003e88 <_svfiprintf_r+0x1f0>)
 8003dc8:	2203      	movs	r2, #3
 8003dca:	0030      	movs	r0, r6
 8003dcc:	7829      	ldrb	r1, [r5, #0]
 8003dce:	f000 f9e5 	bl	800419c <memchr>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	d006      	beq.n	8003de4 <_svfiprintf_r+0x14c>
 8003dd6:	2340      	movs	r3, #64	; 0x40
 8003dd8:	1b80      	subs	r0, r0, r6
 8003dda:	4083      	lsls	r3, r0
 8003ddc:	6822      	ldr	r2, [r4, #0]
 8003dde:	3501      	adds	r5, #1
 8003de0:	4313      	orrs	r3, r2
 8003de2:	6023      	str	r3, [r4, #0]
 8003de4:	7829      	ldrb	r1, [r5, #0]
 8003de6:	2206      	movs	r2, #6
 8003de8:	4828      	ldr	r0, [pc, #160]	; (8003e8c <_svfiprintf_r+0x1f4>)
 8003dea:	1c6e      	adds	r6, r5, #1
 8003dec:	7621      	strb	r1, [r4, #24]
 8003dee:	f000 f9d5 	bl	800419c <memchr>
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d03c      	beq.n	8003e70 <_svfiprintf_r+0x1d8>
 8003df6:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <_svfiprintf_r+0x1f8>)
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d125      	bne.n	8003e48 <_svfiprintf_r+0x1b0>
 8003dfc:	2207      	movs	r2, #7
 8003dfe:	9b07      	ldr	r3, [sp, #28]
 8003e00:	3307      	adds	r3, #7
 8003e02:	4393      	bics	r3, r2
 8003e04:	3308      	adds	r3, #8
 8003e06:	9307      	str	r3, [sp, #28]
 8003e08:	6963      	ldr	r3, [r4, #20]
 8003e0a:	9a04      	ldr	r2, [sp, #16]
 8003e0c:	189b      	adds	r3, r3, r2
 8003e0e:	6163      	str	r3, [r4, #20]
 8003e10:	e765      	b.n	8003cde <_svfiprintf_r+0x46>
 8003e12:	4343      	muls	r3, r0
 8003e14:	0035      	movs	r5, r6
 8003e16:	2101      	movs	r1, #1
 8003e18:	189b      	adds	r3, r3, r2
 8003e1a:	e7a6      	b.n	8003d6a <_svfiprintf_r+0xd2>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	425b      	negs	r3, r3
 8003e20:	e7d0      	b.n	8003dc4 <_svfiprintf_r+0x12c>
 8003e22:	2300      	movs	r3, #0
 8003e24:	200a      	movs	r0, #10
 8003e26:	001a      	movs	r2, r3
 8003e28:	3501      	adds	r5, #1
 8003e2a:	6063      	str	r3, [r4, #4]
 8003e2c:	7829      	ldrb	r1, [r5, #0]
 8003e2e:	1c6e      	adds	r6, r5, #1
 8003e30:	3930      	subs	r1, #48	; 0x30
 8003e32:	2909      	cmp	r1, #9
 8003e34:	d903      	bls.n	8003e3e <_svfiprintf_r+0x1a6>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0c5      	beq.n	8003dc6 <_svfiprintf_r+0x12e>
 8003e3a:	9209      	str	r2, [sp, #36]	; 0x24
 8003e3c:	e7c3      	b.n	8003dc6 <_svfiprintf_r+0x12e>
 8003e3e:	4342      	muls	r2, r0
 8003e40:	0035      	movs	r5, r6
 8003e42:	2301      	movs	r3, #1
 8003e44:	1852      	adds	r2, r2, r1
 8003e46:	e7f1      	b.n	8003e2c <_svfiprintf_r+0x194>
 8003e48:	ab07      	add	r3, sp, #28
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	003a      	movs	r2, r7
 8003e4e:	0021      	movs	r1, r4
 8003e50:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <_svfiprintf_r+0x1fc>)
 8003e52:	9803      	ldr	r0, [sp, #12]
 8003e54:	e000      	b.n	8003e58 <_svfiprintf_r+0x1c0>
 8003e56:	bf00      	nop
 8003e58:	9004      	str	r0, [sp, #16]
 8003e5a:	9b04      	ldr	r3, [sp, #16]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	d1d3      	bne.n	8003e08 <_svfiprintf_r+0x170>
 8003e60:	89bb      	ldrh	r3, [r7, #12]
 8003e62:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003e64:	065b      	lsls	r3, r3, #25
 8003e66:	d400      	bmi.n	8003e6a <_svfiprintf_r+0x1d2>
 8003e68:	e72d      	b.n	8003cc6 <_svfiprintf_r+0x2e>
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	4240      	negs	r0, r0
 8003e6e:	e72a      	b.n	8003cc6 <_svfiprintf_r+0x2e>
 8003e70:	ab07      	add	r3, sp, #28
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	003a      	movs	r2, r7
 8003e76:	0021      	movs	r1, r4
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <_svfiprintf_r+0x1fc>)
 8003e7a:	9803      	ldr	r0, [sp, #12]
 8003e7c:	f000 f87c 	bl	8003f78 <_printf_i>
 8003e80:	e7ea      	b.n	8003e58 <_svfiprintf_r+0x1c0>
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	08004510 	.word	0x08004510
 8003e88:	08004516 	.word	0x08004516
 8003e8c:	0800451a 	.word	0x0800451a
 8003e90:	00000000 	.word	0x00000000
 8003e94:	08003bd5 	.word	0x08003bd5

08003e98 <_printf_common>:
 8003e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e9a:	0015      	movs	r5, r2
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	688a      	ldr	r2, [r1, #8]
 8003ea0:	690b      	ldr	r3, [r1, #16]
 8003ea2:	000c      	movs	r4, r1
 8003ea4:	9000      	str	r0, [sp, #0]
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	da00      	bge.n	8003eac <_printf_common+0x14>
 8003eaa:	0013      	movs	r3, r2
 8003eac:	0022      	movs	r2, r4
 8003eae:	602b      	str	r3, [r5, #0]
 8003eb0:	3243      	adds	r2, #67	; 0x43
 8003eb2:	7812      	ldrb	r2, [r2, #0]
 8003eb4:	2a00      	cmp	r2, #0
 8003eb6:	d001      	beq.n	8003ebc <_printf_common+0x24>
 8003eb8:	3301      	adds	r3, #1
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	069b      	lsls	r3, r3, #26
 8003ec0:	d502      	bpl.n	8003ec8 <_printf_common+0x30>
 8003ec2:	682b      	ldr	r3, [r5, #0]
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	602b      	str	r3, [r5, #0]
 8003ec8:	6822      	ldr	r2, [r4, #0]
 8003eca:	2306      	movs	r3, #6
 8003ecc:	0017      	movs	r7, r2
 8003ece:	401f      	ands	r7, r3
 8003ed0:	421a      	tst	r2, r3
 8003ed2:	d027      	beq.n	8003f24 <_printf_common+0x8c>
 8003ed4:	0023      	movs	r3, r4
 8003ed6:	3343      	adds	r3, #67	; 0x43
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	1e5a      	subs	r2, r3, #1
 8003edc:	4193      	sbcs	r3, r2
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	0692      	lsls	r2, r2, #26
 8003ee2:	d430      	bmi.n	8003f46 <_printf_common+0xae>
 8003ee4:	0022      	movs	r2, r4
 8003ee6:	9901      	ldr	r1, [sp, #4]
 8003ee8:	9800      	ldr	r0, [sp, #0]
 8003eea:	9e08      	ldr	r6, [sp, #32]
 8003eec:	3243      	adds	r2, #67	; 0x43
 8003eee:	47b0      	blx	r6
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	d025      	beq.n	8003f40 <_printf_common+0xa8>
 8003ef4:	2306      	movs	r3, #6
 8003ef6:	6820      	ldr	r0, [r4, #0]
 8003ef8:	682a      	ldr	r2, [r5, #0]
 8003efa:	68e1      	ldr	r1, [r4, #12]
 8003efc:	2500      	movs	r5, #0
 8003efe:	4003      	ands	r3, r0
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d103      	bne.n	8003f0c <_printf_common+0x74>
 8003f04:	1a8d      	subs	r5, r1, r2
 8003f06:	43eb      	mvns	r3, r5
 8003f08:	17db      	asrs	r3, r3, #31
 8003f0a:	401d      	ands	r5, r3
 8003f0c:	68a3      	ldr	r3, [r4, #8]
 8003f0e:	6922      	ldr	r2, [r4, #16]
 8003f10:	4293      	cmp	r3, r2
 8003f12:	dd01      	ble.n	8003f18 <_printf_common+0x80>
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	18ed      	adds	r5, r5, r3
 8003f18:	2700      	movs	r7, #0
 8003f1a:	42bd      	cmp	r5, r7
 8003f1c:	d120      	bne.n	8003f60 <_printf_common+0xc8>
 8003f1e:	2000      	movs	r0, #0
 8003f20:	e010      	b.n	8003f44 <_printf_common+0xac>
 8003f22:	3701      	adds	r7, #1
 8003f24:	68e3      	ldr	r3, [r4, #12]
 8003f26:	682a      	ldr	r2, [r5, #0]
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	42bb      	cmp	r3, r7
 8003f2c:	ddd2      	ble.n	8003ed4 <_printf_common+0x3c>
 8003f2e:	0022      	movs	r2, r4
 8003f30:	2301      	movs	r3, #1
 8003f32:	9901      	ldr	r1, [sp, #4]
 8003f34:	9800      	ldr	r0, [sp, #0]
 8003f36:	9e08      	ldr	r6, [sp, #32]
 8003f38:	3219      	adds	r2, #25
 8003f3a:	47b0      	blx	r6
 8003f3c:	1c43      	adds	r3, r0, #1
 8003f3e:	d1f0      	bne.n	8003f22 <_printf_common+0x8a>
 8003f40:	2001      	movs	r0, #1
 8003f42:	4240      	negs	r0, r0
 8003f44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f46:	2030      	movs	r0, #48	; 0x30
 8003f48:	18e1      	adds	r1, r4, r3
 8003f4a:	3143      	adds	r1, #67	; 0x43
 8003f4c:	7008      	strb	r0, [r1, #0]
 8003f4e:	0021      	movs	r1, r4
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	3145      	adds	r1, #69	; 0x45
 8003f54:	7809      	ldrb	r1, [r1, #0]
 8003f56:	18a2      	adds	r2, r4, r2
 8003f58:	3243      	adds	r2, #67	; 0x43
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	7011      	strb	r1, [r2, #0]
 8003f5e:	e7c1      	b.n	8003ee4 <_printf_common+0x4c>
 8003f60:	0022      	movs	r2, r4
 8003f62:	2301      	movs	r3, #1
 8003f64:	9901      	ldr	r1, [sp, #4]
 8003f66:	9800      	ldr	r0, [sp, #0]
 8003f68:	9e08      	ldr	r6, [sp, #32]
 8003f6a:	321a      	adds	r2, #26
 8003f6c:	47b0      	blx	r6
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	d0e6      	beq.n	8003f40 <_printf_common+0xa8>
 8003f72:	3701      	adds	r7, #1
 8003f74:	e7d1      	b.n	8003f1a <_printf_common+0x82>
	...

08003f78 <_printf_i>:
 8003f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f7a:	b08b      	sub	sp, #44	; 0x2c
 8003f7c:	9206      	str	r2, [sp, #24]
 8003f7e:	000a      	movs	r2, r1
 8003f80:	3243      	adds	r2, #67	; 0x43
 8003f82:	9307      	str	r3, [sp, #28]
 8003f84:	9005      	str	r0, [sp, #20]
 8003f86:	9204      	str	r2, [sp, #16]
 8003f88:	7e0a      	ldrb	r2, [r1, #24]
 8003f8a:	000c      	movs	r4, r1
 8003f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f8e:	2a78      	cmp	r2, #120	; 0x78
 8003f90:	d807      	bhi.n	8003fa2 <_printf_i+0x2a>
 8003f92:	2a62      	cmp	r2, #98	; 0x62
 8003f94:	d809      	bhi.n	8003faa <_printf_i+0x32>
 8003f96:	2a00      	cmp	r2, #0
 8003f98:	d100      	bne.n	8003f9c <_printf_i+0x24>
 8003f9a:	e0c1      	b.n	8004120 <_printf_i+0x1a8>
 8003f9c:	2a58      	cmp	r2, #88	; 0x58
 8003f9e:	d100      	bne.n	8003fa2 <_printf_i+0x2a>
 8003fa0:	e08c      	b.n	80040bc <_printf_i+0x144>
 8003fa2:	0026      	movs	r6, r4
 8003fa4:	3642      	adds	r6, #66	; 0x42
 8003fa6:	7032      	strb	r2, [r6, #0]
 8003fa8:	e022      	b.n	8003ff0 <_printf_i+0x78>
 8003faa:	0010      	movs	r0, r2
 8003fac:	3863      	subs	r0, #99	; 0x63
 8003fae:	2815      	cmp	r0, #21
 8003fb0:	d8f7      	bhi.n	8003fa2 <_printf_i+0x2a>
 8003fb2:	f7fc f8ad 	bl	8000110 <__gnu_thumb1_case_shi>
 8003fb6:	0016      	.short	0x0016
 8003fb8:	fff6001f 	.word	0xfff6001f
 8003fbc:	fff6fff6 	.word	0xfff6fff6
 8003fc0:	001ffff6 	.word	0x001ffff6
 8003fc4:	fff6fff6 	.word	0xfff6fff6
 8003fc8:	fff6fff6 	.word	0xfff6fff6
 8003fcc:	003600a8 	.word	0x003600a8
 8003fd0:	fff6009a 	.word	0xfff6009a
 8003fd4:	00b9fff6 	.word	0x00b9fff6
 8003fd8:	0036fff6 	.word	0x0036fff6
 8003fdc:	fff6fff6 	.word	0xfff6fff6
 8003fe0:	009e      	.short	0x009e
 8003fe2:	0026      	movs	r6, r4
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	3642      	adds	r6, #66	; 0x42
 8003fe8:	1d11      	adds	r1, r2, #4
 8003fea:	6019      	str	r1, [r3, #0]
 8003fec:	6813      	ldr	r3, [r2, #0]
 8003fee:	7033      	strb	r3, [r6, #0]
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0a7      	b.n	8004144 <_printf_i+0x1cc>
 8003ff4:	6808      	ldr	r0, [r1, #0]
 8003ff6:	6819      	ldr	r1, [r3, #0]
 8003ff8:	1d0a      	adds	r2, r1, #4
 8003ffa:	0605      	lsls	r5, r0, #24
 8003ffc:	d50b      	bpl.n	8004016 <_printf_i+0x9e>
 8003ffe:	680d      	ldr	r5, [r1, #0]
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	2d00      	cmp	r5, #0
 8004004:	da03      	bge.n	800400e <_printf_i+0x96>
 8004006:	232d      	movs	r3, #45	; 0x2d
 8004008:	9a04      	ldr	r2, [sp, #16]
 800400a:	426d      	negs	r5, r5
 800400c:	7013      	strb	r3, [r2, #0]
 800400e:	4b61      	ldr	r3, [pc, #388]	; (8004194 <_printf_i+0x21c>)
 8004010:	270a      	movs	r7, #10
 8004012:	9303      	str	r3, [sp, #12]
 8004014:	e01b      	b.n	800404e <_printf_i+0xd6>
 8004016:	680d      	ldr	r5, [r1, #0]
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	0641      	lsls	r1, r0, #25
 800401c:	d5f1      	bpl.n	8004002 <_printf_i+0x8a>
 800401e:	b22d      	sxth	r5, r5
 8004020:	e7ef      	b.n	8004002 <_printf_i+0x8a>
 8004022:	680d      	ldr	r5, [r1, #0]
 8004024:	6819      	ldr	r1, [r3, #0]
 8004026:	1d08      	adds	r0, r1, #4
 8004028:	6018      	str	r0, [r3, #0]
 800402a:	062e      	lsls	r6, r5, #24
 800402c:	d501      	bpl.n	8004032 <_printf_i+0xba>
 800402e:	680d      	ldr	r5, [r1, #0]
 8004030:	e003      	b.n	800403a <_printf_i+0xc2>
 8004032:	066d      	lsls	r5, r5, #25
 8004034:	d5fb      	bpl.n	800402e <_printf_i+0xb6>
 8004036:	680d      	ldr	r5, [r1, #0]
 8004038:	b2ad      	uxth	r5, r5
 800403a:	4b56      	ldr	r3, [pc, #344]	; (8004194 <_printf_i+0x21c>)
 800403c:	2708      	movs	r7, #8
 800403e:	9303      	str	r3, [sp, #12]
 8004040:	2a6f      	cmp	r2, #111	; 0x6f
 8004042:	d000      	beq.n	8004046 <_printf_i+0xce>
 8004044:	3702      	adds	r7, #2
 8004046:	0023      	movs	r3, r4
 8004048:	2200      	movs	r2, #0
 800404a:	3343      	adds	r3, #67	; 0x43
 800404c:	701a      	strb	r2, [r3, #0]
 800404e:	6863      	ldr	r3, [r4, #4]
 8004050:	60a3      	str	r3, [r4, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	db03      	blt.n	800405e <_printf_i+0xe6>
 8004056:	2204      	movs	r2, #4
 8004058:	6821      	ldr	r1, [r4, #0]
 800405a:	4391      	bics	r1, r2
 800405c:	6021      	str	r1, [r4, #0]
 800405e:	2d00      	cmp	r5, #0
 8004060:	d102      	bne.n	8004068 <_printf_i+0xf0>
 8004062:	9e04      	ldr	r6, [sp, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00c      	beq.n	8004082 <_printf_i+0x10a>
 8004068:	9e04      	ldr	r6, [sp, #16]
 800406a:	0028      	movs	r0, r5
 800406c:	0039      	movs	r1, r7
 800406e:	f7fc f8df 	bl	8000230 <__aeabi_uidivmod>
 8004072:	9b03      	ldr	r3, [sp, #12]
 8004074:	3e01      	subs	r6, #1
 8004076:	5c5b      	ldrb	r3, [r3, r1]
 8004078:	7033      	strb	r3, [r6, #0]
 800407a:	002b      	movs	r3, r5
 800407c:	0005      	movs	r5, r0
 800407e:	429f      	cmp	r7, r3
 8004080:	d9f3      	bls.n	800406a <_printf_i+0xf2>
 8004082:	2f08      	cmp	r7, #8
 8004084:	d109      	bne.n	800409a <_printf_i+0x122>
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	07db      	lsls	r3, r3, #31
 800408a:	d506      	bpl.n	800409a <_printf_i+0x122>
 800408c:	6863      	ldr	r3, [r4, #4]
 800408e:	6922      	ldr	r2, [r4, #16]
 8004090:	4293      	cmp	r3, r2
 8004092:	dc02      	bgt.n	800409a <_printf_i+0x122>
 8004094:	2330      	movs	r3, #48	; 0x30
 8004096:	3e01      	subs	r6, #1
 8004098:	7033      	strb	r3, [r6, #0]
 800409a:	9b04      	ldr	r3, [sp, #16]
 800409c:	1b9b      	subs	r3, r3, r6
 800409e:	6123      	str	r3, [r4, #16]
 80040a0:	9b07      	ldr	r3, [sp, #28]
 80040a2:	0021      	movs	r1, r4
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	9805      	ldr	r0, [sp, #20]
 80040a8:	9b06      	ldr	r3, [sp, #24]
 80040aa:	aa09      	add	r2, sp, #36	; 0x24
 80040ac:	f7ff fef4 	bl	8003e98 <_printf_common>
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	d14c      	bne.n	800414e <_printf_i+0x1d6>
 80040b4:	2001      	movs	r0, #1
 80040b6:	4240      	negs	r0, r0
 80040b8:	b00b      	add	sp, #44	; 0x2c
 80040ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040bc:	3145      	adds	r1, #69	; 0x45
 80040be:	700a      	strb	r2, [r1, #0]
 80040c0:	4a34      	ldr	r2, [pc, #208]	; (8004194 <_printf_i+0x21c>)
 80040c2:	9203      	str	r2, [sp, #12]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	6821      	ldr	r1, [r4, #0]
 80040c8:	ca20      	ldmia	r2!, {r5}
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	0608      	lsls	r0, r1, #24
 80040ce:	d516      	bpl.n	80040fe <_printf_i+0x186>
 80040d0:	07cb      	lsls	r3, r1, #31
 80040d2:	d502      	bpl.n	80040da <_printf_i+0x162>
 80040d4:	2320      	movs	r3, #32
 80040d6:	4319      	orrs	r1, r3
 80040d8:	6021      	str	r1, [r4, #0]
 80040da:	2710      	movs	r7, #16
 80040dc:	2d00      	cmp	r5, #0
 80040de:	d1b2      	bne.n	8004046 <_printf_i+0xce>
 80040e0:	2320      	movs	r3, #32
 80040e2:	6822      	ldr	r2, [r4, #0]
 80040e4:	439a      	bics	r2, r3
 80040e6:	6022      	str	r2, [r4, #0]
 80040e8:	e7ad      	b.n	8004046 <_printf_i+0xce>
 80040ea:	2220      	movs	r2, #32
 80040ec:	6809      	ldr	r1, [r1, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	6022      	str	r2, [r4, #0]
 80040f2:	0022      	movs	r2, r4
 80040f4:	2178      	movs	r1, #120	; 0x78
 80040f6:	3245      	adds	r2, #69	; 0x45
 80040f8:	7011      	strb	r1, [r2, #0]
 80040fa:	4a27      	ldr	r2, [pc, #156]	; (8004198 <_printf_i+0x220>)
 80040fc:	e7e1      	b.n	80040c2 <_printf_i+0x14a>
 80040fe:	0648      	lsls	r0, r1, #25
 8004100:	d5e6      	bpl.n	80040d0 <_printf_i+0x158>
 8004102:	b2ad      	uxth	r5, r5
 8004104:	e7e4      	b.n	80040d0 <_printf_i+0x158>
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	680d      	ldr	r5, [r1, #0]
 800410a:	1d10      	adds	r0, r2, #4
 800410c:	6949      	ldr	r1, [r1, #20]
 800410e:	6018      	str	r0, [r3, #0]
 8004110:	6813      	ldr	r3, [r2, #0]
 8004112:	062e      	lsls	r6, r5, #24
 8004114:	d501      	bpl.n	800411a <_printf_i+0x1a2>
 8004116:	6019      	str	r1, [r3, #0]
 8004118:	e002      	b.n	8004120 <_printf_i+0x1a8>
 800411a:	066d      	lsls	r5, r5, #25
 800411c:	d5fb      	bpl.n	8004116 <_printf_i+0x19e>
 800411e:	8019      	strh	r1, [r3, #0]
 8004120:	2300      	movs	r3, #0
 8004122:	9e04      	ldr	r6, [sp, #16]
 8004124:	6123      	str	r3, [r4, #16]
 8004126:	e7bb      	b.n	80040a0 <_printf_i+0x128>
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	1d11      	adds	r1, r2, #4
 800412c:	6019      	str	r1, [r3, #0]
 800412e:	6816      	ldr	r6, [r2, #0]
 8004130:	2100      	movs	r1, #0
 8004132:	0030      	movs	r0, r6
 8004134:	6862      	ldr	r2, [r4, #4]
 8004136:	f000 f831 	bl	800419c <memchr>
 800413a:	2800      	cmp	r0, #0
 800413c:	d001      	beq.n	8004142 <_printf_i+0x1ca>
 800413e:	1b80      	subs	r0, r0, r6
 8004140:	6060      	str	r0, [r4, #4]
 8004142:	6863      	ldr	r3, [r4, #4]
 8004144:	6123      	str	r3, [r4, #16]
 8004146:	2300      	movs	r3, #0
 8004148:	9a04      	ldr	r2, [sp, #16]
 800414a:	7013      	strb	r3, [r2, #0]
 800414c:	e7a8      	b.n	80040a0 <_printf_i+0x128>
 800414e:	6923      	ldr	r3, [r4, #16]
 8004150:	0032      	movs	r2, r6
 8004152:	9906      	ldr	r1, [sp, #24]
 8004154:	9805      	ldr	r0, [sp, #20]
 8004156:	9d07      	ldr	r5, [sp, #28]
 8004158:	47a8      	blx	r5
 800415a:	1c43      	adds	r3, r0, #1
 800415c:	d0aa      	beq.n	80040b4 <_printf_i+0x13c>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	079b      	lsls	r3, r3, #30
 8004162:	d415      	bmi.n	8004190 <_printf_i+0x218>
 8004164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004166:	68e0      	ldr	r0, [r4, #12]
 8004168:	4298      	cmp	r0, r3
 800416a:	daa5      	bge.n	80040b8 <_printf_i+0x140>
 800416c:	0018      	movs	r0, r3
 800416e:	e7a3      	b.n	80040b8 <_printf_i+0x140>
 8004170:	0022      	movs	r2, r4
 8004172:	2301      	movs	r3, #1
 8004174:	9906      	ldr	r1, [sp, #24]
 8004176:	9805      	ldr	r0, [sp, #20]
 8004178:	9e07      	ldr	r6, [sp, #28]
 800417a:	3219      	adds	r2, #25
 800417c:	47b0      	blx	r6
 800417e:	1c43      	adds	r3, r0, #1
 8004180:	d098      	beq.n	80040b4 <_printf_i+0x13c>
 8004182:	3501      	adds	r5, #1
 8004184:	68e3      	ldr	r3, [r4, #12]
 8004186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	42ab      	cmp	r3, r5
 800418c:	dcf0      	bgt.n	8004170 <_printf_i+0x1f8>
 800418e:	e7e9      	b.n	8004164 <_printf_i+0x1ec>
 8004190:	2500      	movs	r5, #0
 8004192:	e7f7      	b.n	8004184 <_printf_i+0x20c>
 8004194:	08004521 	.word	0x08004521
 8004198:	08004532 	.word	0x08004532

0800419c <memchr>:
 800419c:	b2c9      	uxtb	r1, r1
 800419e:	1882      	adds	r2, r0, r2
 80041a0:	4290      	cmp	r0, r2
 80041a2:	d101      	bne.n	80041a8 <memchr+0xc>
 80041a4:	2000      	movs	r0, #0
 80041a6:	4770      	bx	lr
 80041a8:	7803      	ldrb	r3, [r0, #0]
 80041aa:	428b      	cmp	r3, r1
 80041ac:	d0fb      	beq.n	80041a6 <memchr+0xa>
 80041ae:	3001      	adds	r0, #1
 80041b0:	e7f6      	b.n	80041a0 <memchr+0x4>

080041b2 <memcpy>:
 80041b2:	2300      	movs	r3, #0
 80041b4:	b510      	push	{r4, lr}
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d100      	bne.n	80041bc <memcpy+0xa>
 80041ba:	bd10      	pop	{r4, pc}
 80041bc:	5ccc      	ldrb	r4, [r1, r3]
 80041be:	54c4      	strb	r4, [r0, r3]
 80041c0:	3301      	adds	r3, #1
 80041c2:	e7f8      	b.n	80041b6 <memcpy+0x4>

080041c4 <memmove>:
 80041c4:	b510      	push	{r4, lr}
 80041c6:	4288      	cmp	r0, r1
 80041c8:	d902      	bls.n	80041d0 <memmove+0xc>
 80041ca:	188b      	adds	r3, r1, r2
 80041cc:	4298      	cmp	r0, r3
 80041ce:	d303      	bcc.n	80041d8 <memmove+0x14>
 80041d0:	2300      	movs	r3, #0
 80041d2:	e007      	b.n	80041e4 <memmove+0x20>
 80041d4:	5c8b      	ldrb	r3, [r1, r2]
 80041d6:	5483      	strb	r3, [r0, r2]
 80041d8:	3a01      	subs	r2, #1
 80041da:	d2fb      	bcs.n	80041d4 <memmove+0x10>
 80041dc:	bd10      	pop	{r4, pc}
 80041de:	5ccc      	ldrb	r4, [r1, r3]
 80041e0:	54c4      	strb	r4, [r0, r3]
 80041e2:	3301      	adds	r3, #1
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d1fa      	bne.n	80041de <memmove+0x1a>
 80041e8:	e7f8      	b.n	80041dc <memmove+0x18>
	...

080041ec <_free_r>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	0005      	movs	r5, r0
 80041f0:	2900      	cmp	r1, #0
 80041f2:	d010      	beq.n	8004216 <_free_r+0x2a>
 80041f4:	1f0c      	subs	r4, r1, #4
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	da00      	bge.n	80041fe <_free_r+0x12>
 80041fc:	18e4      	adds	r4, r4, r3
 80041fe:	0028      	movs	r0, r5
 8004200:	f000 f918 	bl	8004434 <__malloc_lock>
 8004204:	4a1d      	ldr	r2, [pc, #116]	; (800427c <_free_r+0x90>)
 8004206:	6813      	ldr	r3, [r2, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d105      	bne.n	8004218 <_free_r+0x2c>
 800420c:	6063      	str	r3, [r4, #4]
 800420e:	6014      	str	r4, [r2, #0]
 8004210:	0028      	movs	r0, r5
 8004212:	f000 f917 	bl	8004444 <__malloc_unlock>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	42a3      	cmp	r3, r4
 800421a:	d908      	bls.n	800422e <_free_r+0x42>
 800421c:	6821      	ldr	r1, [r4, #0]
 800421e:	1860      	adds	r0, r4, r1
 8004220:	4283      	cmp	r3, r0
 8004222:	d1f3      	bne.n	800420c <_free_r+0x20>
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	1841      	adds	r1, r0, r1
 800422a:	6021      	str	r1, [r4, #0]
 800422c:	e7ee      	b.n	800420c <_free_r+0x20>
 800422e:	001a      	movs	r2, r3
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <_free_r+0x4e>
 8004236:	42a3      	cmp	r3, r4
 8004238:	d9f9      	bls.n	800422e <_free_r+0x42>
 800423a:	6811      	ldr	r1, [r2, #0]
 800423c:	1850      	adds	r0, r2, r1
 800423e:	42a0      	cmp	r0, r4
 8004240:	d10b      	bne.n	800425a <_free_r+0x6e>
 8004242:	6820      	ldr	r0, [r4, #0]
 8004244:	1809      	adds	r1, r1, r0
 8004246:	1850      	adds	r0, r2, r1
 8004248:	6011      	str	r1, [r2, #0]
 800424a:	4283      	cmp	r3, r0
 800424c:	d1e0      	bne.n	8004210 <_free_r+0x24>
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	1841      	adds	r1, r0, r1
 8004254:	6011      	str	r1, [r2, #0]
 8004256:	6053      	str	r3, [r2, #4]
 8004258:	e7da      	b.n	8004210 <_free_r+0x24>
 800425a:	42a0      	cmp	r0, r4
 800425c:	d902      	bls.n	8004264 <_free_r+0x78>
 800425e:	230c      	movs	r3, #12
 8004260:	602b      	str	r3, [r5, #0]
 8004262:	e7d5      	b.n	8004210 <_free_r+0x24>
 8004264:	6821      	ldr	r1, [r4, #0]
 8004266:	1860      	adds	r0, r4, r1
 8004268:	4283      	cmp	r3, r0
 800426a:	d103      	bne.n	8004274 <_free_r+0x88>
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	1841      	adds	r1, r0, r1
 8004272:	6021      	str	r1, [r4, #0]
 8004274:	6063      	str	r3, [r4, #4]
 8004276:	6054      	str	r4, [r2, #4]
 8004278:	e7ca      	b.n	8004210 <_free_r+0x24>
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	200001dc 	.word	0x200001dc

08004280 <sbrk_aligned>:
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	4e0f      	ldr	r6, [pc, #60]	; (80042c0 <sbrk_aligned+0x40>)
 8004284:	000d      	movs	r5, r1
 8004286:	6831      	ldr	r1, [r6, #0]
 8004288:	0004      	movs	r4, r0
 800428a:	2900      	cmp	r1, #0
 800428c:	d102      	bne.n	8004294 <sbrk_aligned+0x14>
 800428e:	f000 f8bf 	bl	8004410 <_sbrk_r>
 8004292:	6030      	str	r0, [r6, #0]
 8004294:	0029      	movs	r1, r5
 8004296:	0020      	movs	r0, r4
 8004298:	f000 f8ba 	bl	8004410 <_sbrk_r>
 800429c:	1c43      	adds	r3, r0, #1
 800429e:	d00a      	beq.n	80042b6 <sbrk_aligned+0x36>
 80042a0:	2303      	movs	r3, #3
 80042a2:	1cc5      	adds	r5, r0, #3
 80042a4:	439d      	bics	r5, r3
 80042a6:	42a8      	cmp	r0, r5
 80042a8:	d007      	beq.n	80042ba <sbrk_aligned+0x3a>
 80042aa:	1a29      	subs	r1, r5, r0
 80042ac:	0020      	movs	r0, r4
 80042ae:	f000 f8af 	bl	8004410 <_sbrk_r>
 80042b2:	1c43      	adds	r3, r0, #1
 80042b4:	d101      	bne.n	80042ba <sbrk_aligned+0x3a>
 80042b6:	2501      	movs	r5, #1
 80042b8:	426d      	negs	r5, r5
 80042ba:	0028      	movs	r0, r5
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	200001e0 	.word	0x200001e0

080042c4 <_malloc_r>:
 80042c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042c6:	2203      	movs	r2, #3
 80042c8:	1ccb      	adds	r3, r1, #3
 80042ca:	4393      	bics	r3, r2
 80042cc:	3308      	adds	r3, #8
 80042ce:	0006      	movs	r6, r0
 80042d0:	001f      	movs	r7, r3
 80042d2:	2b0c      	cmp	r3, #12
 80042d4:	d232      	bcs.n	800433c <_malloc_r+0x78>
 80042d6:	270c      	movs	r7, #12
 80042d8:	42b9      	cmp	r1, r7
 80042da:	d831      	bhi.n	8004340 <_malloc_r+0x7c>
 80042dc:	0030      	movs	r0, r6
 80042de:	f000 f8a9 	bl	8004434 <__malloc_lock>
 80042e2:	4d32      	ldr	r5, [pc, #200]	; (80043ac <_malloc_r+0xe8>)
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	001c      	movs	r4, r3
 80042e8:	2c00      	cmp	r4, #0
 80042ea:	d12e      	bne.n	800434a <_malloc_r+0x86>
 80042ec:	0039      	movs	r1, r7
 80042ee:	0030      	movs	r0, r6
 80042f0:	f7ff ffc6 	bl	8004280 <sbrk_aligned>
 80042f4:	0004      	movs	r4, r0
 80042f6:	1c43      	adds	r3, r0, #1
 80042f8:	d11e      	bne.n	8004338 <_malloc_r+0x74>
 80042fa:	682c      	ldr	r4, [r5, #0]
 80042fc:	0025      	movs	r5, r4
 80042fe:	2d00      	cmp	r5, #0
 8004300:	d14a      	bne.n	8004398 <_malloc_r+0xd4>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	0029      	movs	r1, r5
 8004306:	18e3      	adds	r3, r4, r3
 8004308:	0030      	movs	r0, r6
 800430a:	9301      	str	r3, [sp, #4]
 800430c:	f000 f880 	bl	8004410 <_sbrk_r>
 8004310:	9b01      	ldr	r3, [sp, #4]
 8004312:	4283      	cmp	r3, r0
 8004314:	d143      	bne.n	800439e <_malloc_r+0xda>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	3703      	adds	r7, #3
 800431a:	1aff      	subs	r7, r7, r3
 800431c:	2303      	movs	r3, #3
 800431e:	439f      	bics	r7, r3
 8004320:	3708      	adds	r7, #8
 8004322:	2f0c      	cmp	r7, #12
 8004324:	d200      	bcs.n	8004328 <_malloc_r+0x64>
 8004326:	270c      	movs	r7, #12
 8004328:	0039      	movs	r1, r7
 800432a:	0030      	movs	r0, r6
 800432c:	f7ff ffa8 	bl	8004280 <sbrk_aligned>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d034      	beq.n	800439e <_malloc_r+0xda>
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	19df      	adds	r7, r3, r7
 8004338:	6027      	str	r7, [r4, #0]
 800433a:	e013      	b.n	8004364 <_malloc_r+0xa0>
 800433c:	2b00      	cmp	r3, #0
 800433e:	dacb      	bge.n	80042d8 <_malloc_r+0x14>
 8004340:	230c      	movs	r3, #12
 8004342:	2500      	movs	r5, #0
 8004344:	6033      	str	r3, [r6, #0]
 8004346:	0028      	movs	r0, r5
 8004348:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	1bd1      	subs	r1, r2, r7
 800434e:	d420      	bmi.n	8004392 <_malloc_r+0xce>
 8004350:	290b      	cmp	r1, #11
 8004352:	d917      	bls.n	8004384 <_malloc_r+0xc0>
 8004354:	19e2      	adds	r2, r4, r7
 8004356:	6027      	str	r7, [r4, #0]
 8004358:	42a3      	cmp	r3, r4
 800435a:	d111      	bne.n	8004380 <_malloc_r+0xbc>
 800435c:	602a      	str	r2, [r5, #0]
 800435e:	6863      	ldr	r3, [r4, #4]
 8004360:	6011      	str	r1, [r2, #0]
 8004362:	6053      	str	r3, [r2, #4]
 8004364:	0030      	movs	r0, r6
 8004366:	0025      	movs	r5, r4
 8004368:	f000 f86c 	bl	8004444 <__malloc_unlock>
 800436c:	2207      	movs	r2, #7
 800436e:	350b      	adds	r5, #11
 8004370:	1d23      	adds	r3, r4, #4
 8004372:	4395      	bics	r5, r2
 8004374:	1aea      	subs	r2, r5, r3
 8004376:	429d      	cmp	r5, r3
 8004378:	d0e5      	beq.n	8004346 <_malloc_r+0x82>
 800437a:	1b5b      	subs	r3, r3, r5
 800437c:	50a3      	str	r3, [r4, r2]
 800437e:	e7e2      	b.n	8004346 <_malloc_r+0x82>
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	e7ec      	b.n	800435e <_malloc_r+0x9a>
 8004384:	6862      	ldr	r2, [r4, #4]
 8004386:	42a3      	cmp	r3, r4
 8004388:	d101      	bne.n	800438e <_malloc_r+0xca>
 800438a:	602a      	str	r2, [r5, #0]
 800438c:	e7ea      	b.n	8004364 <_malloc_r+0xa0>
 800438e:	605a      	str	r2, [r3, #4]
 8004390:	e7e8      	b.n	8004364 <_malloc_r+0xa0>
 8004392:	0023      	movs	r3, r4
 8004394:	6864      	ldr	r4, [r4, #4]
 8004396:	e7a7      	b.n	80042e8 <_malloc_r+0x24>
 8004398:	002c      	movs	r4, r5
 800439a:	686d      	ldr	r5, [r5, #4]
 800439c:	e7af      	b.n	80042fe <_malloc_r+0x3a>
 800439e:	230c      	movs	r3, #12
 80043a0:	0030      	movs	r0, r6
 80043a2:	6033      	str	r3, [r6, #0]
 80043a4:	f000 f84e 	bl	8004444 <__malloc_unlock>
 80043a8:	e7cd      	b.n	8004346 <_malloc_r+0x82>
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	200001dc 	.word	0x200001dc

080043b0 <_realloc_r>:
 80043b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043b2:	0007      	movs	r7, r0
 80043b4:	000e      	movs	r6, r1
 80043b6:	0014      	movs	r4, r2
 80043b8:	2900      	cmp	r1, #0
 80043ba:	d105      	bne.n	80043c8 <_realloc_r+0x18>
 80043bc:	0011      	movs	r1, r2
 80043be:	f7ff ff81 	bl	80042c4 <_malloc_r>
 80043c2:	0005      	movs	r5, r0
 80043c4:	0028      	movs	r0, r5
 80043c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043c8:	2a00      	cmp	r2, #0
 80043ca:	d103      	bne.n	80043d4 <_realloc_r+0x24>
 80043cc:	f7ff ff0e 	bl	80041ec <_free_r>
 80043d0:	0025      	movs	r5, r4
 80043d2:	e7f7      	b.n	80043c4 <_realloc_r+0x14>
 80043d4:	f000 f83e 	bl	8004454 <_malloc_usable_size_r>
 80043d8:	9001      	str	r0, [sp, #4]
 80043da:	4284      	cmp	r4, r0
 80043dc:	d803      	bhi.n	80043e6 <_realloc_r+0x36>
 80043de:	0035      	movs	r5, r6
 80043e0:	0843      	lsrs	r3, r0, #1
 80043e2:	42a3      	cmp	r3, r4
 80043e4:	d3ee      	bcc.n	80043c4 <_realloc_r+0x14>
 80043e6:	0021      	movs	r1, r4
 80043e8:	0038      	movs	r0, r7
 80043ea:	f7ff ff6b 	bl	80042c4 <_malloc_r>
 80043ee:	1e05      	subs	r5, r0, #0
 80043f0:	d0e8      	beq.n	80043c4 <_realloc_r+0x14>
 80043f2:	9b01      	ldr	r3, [sp, #4]
 80043f4:	0022      	movs	r2, r4
 80043f6:	429c      	cmp	r4, r3
 80043f8:	d900      	bls.n	80043fc <_realloc_r+0x4c>
 80043fa:	001a      	movs	r2, r3
 80043fc:	0031      	movs	r1, r6
 80043fe:	0028      	movs	r0, r5
 8004400:	f7ff fed7 	bl	80041b2 <memcpy>
 8004404:	0031      	movs	r1, r6
 8004406:	0038      	movs	r0, r7
 8004408:	f7ff fef0 	bl	80041ec <_free_r>
 800440c:	e7da      	b.n	80043c4 <_realloc_r+0x14>
	...

08004410 <_sbrk_r>:
 8004410:	2300      	movs	r3, #0
 8004412:	b570      	push	{r4, r5, r6, lr}
 8004414:	4d06      	ldr	r5, [pc, #24]	; (8004430 <_sbrk_r+0x20>)
 8004416:	0004      	movs	r4, r0
 8004418:	0008      	movs	r0, r1
 800441a:	602b      	str	r3, [r5, #0]
 800441c:	f7fc fb4e 	bl	8000abc <_sbrk>
 8004420:	1c43      	adds	r3, r0, #1
 8004422:	d103      	bne.n	800442c <_sbrk_r+0x1c>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d000      	beq.n	800442c <_sbrk_r+0x1c>
 800442a:	6023      	str	r3, [r4, #0]
 800442c:	bd70      	pop	{r4, r5, r6, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	200001e4 	.word	0x200001e4

08004434 <__malloc_lock>:
 8004434:	b510      	push	{r4, lr}
 8004436:	4802      	ldr	r0, [pc, #8]	; (8004440 <__malloc_lock+0xc>)
 8004438:	f000 f814 	bl	8004464 <__retarget_lock_acquire_recursive>
 800443c:	bd10      	pop	{r4, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	200001e8 	.word	0x200001e8

08004444 <__malloc_unlock>:
 8004444:	b510      	push	{r4, lr}
 8004446:	4802      	ldr	r0, [pc, #8]	; (8004450 <__malloc_unlock+0xc>)
 8004448:	f000 f80d 	bl	8004466 <__retarget_lock_release_recursive>
 800444c:	bd10      	pop	{r4, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	200001e8 	.word	0x200001e8

08004454 <_malloc_usable_size_r>:
 8004454:	1f0b      	subs	r3, r1, #4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	1f18      	subs	r0, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	da01      	bge.n	8004462 <_malloc_usable_size_r+0xe>
 800445e:	580b      	ldr	r3, [r1, r0]
 8004460:	18c0      	adds	r0, r0, r3
 8004462:	4770      	bx	lr

08004464 <__retarget_lock_acquire_recursive>:
 8004464:	4770      	bx	lr

08004466 <__retarget_lock_release_recursive>:
 8004466:	4770      	bx	lr

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr
