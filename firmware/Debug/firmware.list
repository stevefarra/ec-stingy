
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005098  08005098  00015098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005118  08005118  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005118  08005118  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005118  08005118  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000005e4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000654  20000654  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000124d0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002293  00000000  00000000  00032570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  00034808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ea0  00000000  00000000  00035750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002194c  00000000  00000000  000365f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013040  00000000  00000000  00057f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc5c4  00000000  00000000  0006af7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137540  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004508  00000000  00000000  00137590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005080 	.word	0x08005080

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005080 	.word	0x08005080

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b5b0      	push	{r4, r5, r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af00      	add	r7, sp, #0
//	char msg[] =  "Long boat holystone pirate log driver hulk nipperkin cog. " \
//	                "Buccaneer me lass poop deck spyglass maroon jib spike. Come" \
//	                "about maroon skysail Corsair bilge water Arr long clothes " \
//	                "transom.\r\n";
	char msg[20];
	uint32_t acc = 0;
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028a:	f000 fc21 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028e:	f000 f857 	bl	8000340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000292:	f000 f9ad 	bl	80005f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000296:	f000 f985 	bl	80005a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800029a:	f000 f953 	bl	8000544 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800029e:	f000 f8a9 	bl	80003f4 <MX_ADC1_Init>
  MX_TIM6_Init();
 80002a2:	f000 f917 	bl	80004d4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
 80002a6:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <main+0xa0>)
 80002a8:	2100      	movs	r1, #0
 80002aa:	481e      	ldr	r0, [pc, #120]	; (8000324 <main+0xa4>)
 80002ac:	f001 fdfc 	bl	8001ea8 <HAL_DMA_RegisterCallback>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80002b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002b4:	491c      	ldr	r1, [pc, #112]	; (8000328 <main+0xa8>)
 80002b6:	481d      	ldr	r0, [pc, #116]	; (800032c <main+0xac>)
 80002b8:	f000 fe0c 	bl	8000ed4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 80002bc:	481c      	ldr	r0, [pc, #112]	; (8000330 <main+0xb0>)
 80002be:	f003 fbfd 	bl	8003abc <HAL_TIM_Base_Start_IT>
  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 80002c2:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <main+0xb0>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002c8:	837b      	strh	r3, [r7, #26]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (elapsed_360hz) {
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <main+0xb4>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d0fb      	beq.n	80002ca <main+0x4a>
		  elapsed_360hz = 0;
 80002d2:	4b18      	ldr	r3, [pc, #96]	; (8000334 <main+0xb4>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
		  sprintf(msg, "%lu\r\n", acc++);
 80002d8:	69fb      	ldr	r3, [r7, #28]
 80002da:	1c5a      	adds	r2, r3, #1
 80002dc:	61fa      	str	r2, [r7, #28]
 80002de:	1d38      	adds	r0, r7, #4
 80002e0:	461a      	mov	r2, r3
 80002e2:	4915      	ldr	r1, [pc, #84]	; (8000338 <main+0xb8>)
 80002e4:	f004 fa5e 	bl	80047a4 <siprintf>
		  huart2.Instance->CR3 |= USART_CR3_DMAT;
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <main+0xbc>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	689a      	ldr	r2, [r3, #8]
 80002ee:	4b13      	ldr	r3, [pc, #76]	; (800033c <main+0xbc>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80002f6:	609a      	str	r2, [r3, #8]
		  HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg, (uint32_t)&huart2.Instance->TDR, strlen(msg));
 80002f8:	1d3c      	adds	r4, r7, #4
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <main+0xbc>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	3328      	adds	r3, #40	; 0x28
 8000300:	461d      	mov	r5, r3
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ff63 	bl	80001d0 <strlen>
 800030a:	4603      	mov	r3, r0
 800030c:	462a      	mov	r2, r5
 800030e:	4621      	mov	r1, r4
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <main+0xa4>)
 8000312:	f001 fcc7 	bl	8001ca4 <HAL_DMA_Start_IT>
		  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <main+0xb0>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800031c:	837b      	strh	r3, [r7, #26]
	  if (elapsed_360hz) {
 800031e:	e7d4      	b.n	80002ca <main+0x4a>
 8000320:	08000695 	.word	0x08000695
 8000324:	200001f4 	.word	0x200001f4
 8000328:	2000023c 	.word	0x2000023c
 800032c:	2000008c 	.word	0x2000008c
 8000330:	20000120 	.word	0x20000120
 8000334:	20000238 	.word	0x20000238
 8000338:	080050a4 	.word	0x080050a4
 800033c:	2000016c 	.word	0x2000016c

08000340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b096      	sub	sp, #88	; 0x58
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800034a:	2228      	movs	r2, #40	; 0x28
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f004 fa20 	bl	8004794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000354:	f107 031c 	add.w	r3, r7, #28
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
 8000362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000364:	463b      	mov	r3, r7
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]
 8000372:	615a      	str	r2, [r3, #20]
 8000374:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000376:	2302      	movs	r3, #2
 8000378:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037a:	2301      	movs	r3, #1
 800037c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800037e:	2310      	movs	r3, #16
 8000380:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000382:	2302      	movs	r3, #2
 8000384:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000386:	2300      	movs	r3, #0
 8000388:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800038a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800038e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000390:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000394:	4618      	mov	r0, r3
 8000396:	f001 ff8f 	bl	80022b8 <HAL_RCC_OscConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80003a0:	f000 f9b6 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a4:	230f      	movs	r3, #15
 80003a6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a8:	2302      	movs	r3, #2
 80003aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ba:	f107 031c 	add.w	r3, r7, #28
 80003be:	2102      	movs	r1, #2
 80003c0:	4618      	mov	r0, r3
 80003c2:	f002 ffb7 	bl	8003334 <HAL_RCC_ClockConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003cc:	f000 f9a0 	bl	8000710 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80003d0:	2380      	movs	r3, #128	; 0x80
 80003d2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003d8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003da:	463b      	mov	r3, r7
 80003dc:	4618      	mov	r0, r3
 80003de:	f003 f9df 	bl	80037a0 <HAL_RCCEx_PeriphCLKConfig>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003e8:	f000 f992 	bl	8000710 <Error_Handler>
  }
}
 80003ec:	bf00      	nop
 80003ee:	3758      	adds	r7, #88	; 0x58
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08a      	sub	sp, #40	; 0x28
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003fa:	f107 031c 	add.w	r3, r7, #28
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
 8000414:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000416:	4b2e      	ldr	r3, [pc, #184]	; (80004d0 <MX_ADC1_Init+0xdc>)
 8000418:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800041c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800041e:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <MX_ADC1_Init+0xdc>)
 8000420:	2200      	movs	r2, #0
 8000422:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000424:	4b2a      	ldr	r3, [pc, #168]	; (80004d0 <MX_ADC1_Init+0xdc>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800042a:	4b29      	ldr	r3, [pc, #164]	; (80004d0 <MX_ADC1_Init+0xdc>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000430:	4b27      	ldr	r3, [pc, #156]	; (80004d0 <MX_ADC1_Init+0xdc>)
 8000432:	2201      	movs	r2, #1
 8000434:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000436:	4b26      	ldr	r3, [pc, #152]	; (80004d0 <MX_ADC1_Init+0xdc>)
 8000438:	2200      	movs	r2, #0
 800043a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800043e:	4b24      	ldr	r3, [pc, #144]	; (80004d0 <MX_ADC1_Init+0xdc>)
 8000440:	2200      	movs	r2, #0
 8000442:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000444:	4b22      	ldr	r3, [pc, #136]	; (80004d0 <MX_ADC1_Init+0xdc>)
 8000446:	2201      	movs	r2, #1
 8000448:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <MX_ADC1_Init+0xdc>)
 800044c:	2200      	movs	r2, #0
 800044e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000450:	4b1f      	ldr	r3, [pc, #124]	; (80004d0 <MX_ADC1_Init+0xdc>)
 8000452:	2201      	movs	r2, #1
 8000454:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000456:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <MX_ADC1_Init+0xdc>)
 8000458:	2201      	movs	r2, #1
 800045a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800045e:	4b1c      	ldr	r3, [pc, #112]	; (80004d0 <MX_ADC1_Init+0xdc>)
 8000460:	2204      	movs	r2, #4
 8000462:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000464:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <MX_ADC1_Init+0xdc>)
 8000466:	2200      	movs	r2, #0
 8000468:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800046a:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <MX_ADC1_Init+0xdc>)
 800046c:	2200      	movs	r2, #0
 800046e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000470:	4817      	ldr	r0, [pc, #92]	; (80004d0 <MX_ADC1_Init+0xdc>)
 8000472:	f000 fb9d 	bl	8000bb0 <HAL_ADC_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800047c:	f000 f948 	bl	8000710 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000484:	f107 031c 	add.w	r3, r7, #28
 8000488:	4619      	mov	r1, r3
 800048a:	4811      	ldr	r0, [pc, #68]	; (80004d0 <MX_ADC1_Init+0xdc>)
 800048c:	f001 f8bc 	bl	8001608 <HAL_ADCEx_MultiModeConfigChannel>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000496:	f000 f93b 	bl	8000710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800049a:	2301      	movs	r3, #1
 800049c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800049e:	2301      	movs	r3, #1
 80004a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4619      	mov	r1, r3
 80004b6:	4806      	ldr	r0, [pc, #24]	; (80004d0 <MX_ADC1_Init+0xdc>)
 80004b8:	f000 fde6 	bl	8001088 <HAL_ADC_ConfigChannel>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004c2:	f000 f925 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	3728      	adds	r7, #40	; 0x28
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	2000008c 	.word	0x2000008c

080004d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <MX_TIM6_Init+0x68>)
 80004e6:	4a16      	ldr	r2, [pc, #88]	; (8000540 <MX_TIM6_Init+0x6c>)
 80004e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 421;
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_TIM6_Init+0x68>)
 80004ec:	f240 12a5 	movw	r2, #421	; 0x1a5
 80004f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <MX_TIM6_Init+0x68>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 422;
 80004f8:	4b10      	ldr	r3, [pc, #64]	; (800053c <MX_TIM6_Init+0x68>)
 80004fa:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 80004fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_TIM6_Init+0x68>)
 8000502:	2200      	movs	r2, #0
 8000504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000506:	480d      	ldr	r0, [pc, #52]	; (800053c <MX_TIM6_Init+0x68>)
 8000508:	f003 fa80 	bl	8003a0c <HAL_TIM_Base_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000512:	f000 f8fd 	bl	8000710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4619      	mov	r1, r3
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <MX_TIM6_Init+0x68>)
 8000524:	f003 fce6 	bl	8003ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800052e:	f000 f8ef 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000120 	.word	0x20000120
 8000540:	40001000 	.word	0x40001000

08000544 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_USART2_UART_Init+0x58>)
 800054a:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <MX_USART2_UART_Init+0x5c>)
 800054c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_USART2_UART_Init+0x58>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_USART2_UART_Init+0x58>)
 800056a:	220c      	movs	r2, #12
 800056c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_USART2_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000588:	f003 fd40 	bl	800400c <HAL_UART_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000592:	f000 f8bd 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000016c 	.word	0x2000016c
 80005a0:	40004400 	.word	0x40004400

080005a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <MX_DMA_Init+0x48>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <MX_DMA_Init+0x48>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <MX_DMA_Init+0x48>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	200b      	movs	r0, #11
 80005c8:	f001 faef 	bl	8001baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005cc:	200b      	movs	r0, #11
 80005ce:	f001 fb08 	bl	8001be2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	2011      	movs	r0, #17
 80005d8:	f001 fae7 	bl	8001baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005dc:	2011      	movs	r0, #17
 80005de:	f001 fb00 	bl	8001be2 <HAL_NVIC_EnableIRQ>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <MX_GPIO_Init+0x9c>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a20      	ldr	r2, [pc, #128]	; (800068c <MX_GPIO_Init+0x9c>)
 800060c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_GPIO_Init+0x9c>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_GPIO_Init+0x9c>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a1a      	ldr	r2, [pc, #104]	; (800068c <MX_GPIO_Init+0x9c>)
 8000624:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_GPIO_Init+0x9c>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_GPIO_Init+0x9c>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a14      	ldr	r2, [pc, #80]	; (800068c <MX_GPIO_Init+0x9c>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_GPIO_Init+0x9c>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_GPIO_Init+0x9c>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a0e      	ldr	r2, [pc, #56]	; (800068c <MX_GPIO_Init+0x9c>)
 8000654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_GPIO_Init+0x9c>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800066c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_GPIO_Init+0xa0>)
 800067e:	f001 fca9 	bl	8001fd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	; 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000
 8000690:	48000800 	.word	0x48000800

08000694 <DMATransferComplete>:

/* USER CODE BEGIN 4 */
void DMATransferComplete(DMA_HandleTypeDef *hdma) {
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

  // Disable UART DMA mode
  huart2.Instance->CR3 &= ~USART_CR3_DMAT;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <DMATransferComplete+0x24>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <DMATransferComplete+0x24>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006aa:	609a      	str	r2, [r3, #8]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	2000016c 	.word	0x2000016c

080006bc <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  ;
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  ;
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a05      	ldr	r2, [pc, #20]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d102      	bne.n	80006fc <HAL_TIM_PeriodElapsedCallback+0x18>
		elapsed_360hz = 1;
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
	}
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	40001000 	.word	0x40001000
 800070c:	20000238 	.word	0x20000238

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_MspInit+0x44>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <HAL_MspInit+0x44>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6193      	str	r3, [r2, #24]
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_MspInit+0x44>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_MspInit+0x44>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <HAL_MspInit+0x44>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_MspInit+0x44>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000752:	2007      	movs	r0, #7
 8000754:	f001 fa1e 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000784:	d14c      	bne.n	8000820 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000786:	4b28      	ldr	r3, [pc, #160]	; (8000828 <HAL_ADC_MspInit+0xc4>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a27      	ldr	r2, [pc, #156]	; (8000828 <HAL_ADC_MspInit+0xc4>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <HAL_ADC_MspInit+0xc4>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b22      	ldr	r3, [pc, #136]	; (8000828 <HAL_ADC_MspInit+0xc4>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a21      	ldr	r2, [pc, #132]	; (8000828 <HAL_ADC_MspInit+0xc4>)
 80007a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a8:	6153      	str	r3, [r2, #20]
 80007aa:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <HAL_ADC_MspInit+0xc4>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b6:	2301      	movs	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ba:	2303      	movs	r3, #3
 80007bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f001 fc02 	bl	8001fd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <HAL_ADC_MspInit+0xc8>)
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <HAL_ADC_MspInit+0xcc>)
 80007d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_ADC_MspInit+0xc8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <HAL_ADC_MspInit+0xc8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_ADC_MspInit+0xc8>)
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <HAL_ADC_MspInit+0xc8>)
 80007ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <HAL_ADC_MspInit+0xc8>)
 80007f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_ADC_MspInit+0xc8>)
 80007fa:	2220      	movs	r2, #32
 80007fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <HAL_ADC_MspInit+0xc8>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <HAL_ADC_MspInit+0xc8>)
 8000806:	f001 fa06 	bl	8001c16 <HAL_DMA_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000810:	f7ff ff7e 	bl	8000710 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <HAL_ADC_MspInit+0xc8>)
 8000818:	639a      	str	r2, [r3, #56]	; 0x38
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_ADC_MspInit+0xc8>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	; 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40021000 	.word	0x40021000
 800082c:	200000dc 	.word	0x200000dc
 8000830:	40020008 	.word	0x40020008

08000834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_TIM_Base_MspInit+0x44>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d113      	bne.n	800086e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_TIM_Base_MspInit+0x48>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a0c      	ldr	r2, [pc, #48]	; (800087c <HAL_TIM_Base_MspInit+0x48>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_TIM_Base_MspInit+0x48>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	2036      	movs	r0, #54	; 0x36
 8000864:	f001 f9a1 	bl	8001baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000868:	2036      	movs	r0, #54	; 0x36
 800086a:	f001 f9ba 	bl	8001be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40001000 	.word	0x40001000
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a2b      	ldr	r2, [pc, #172]	; (800094c <HAL_UART_MspInit+0xcc>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d14f      	bne.n	8000942 <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <HAL_UART_MspInit+0xd0>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	4a2a      	ldr	r2, [pc, #168]	; (8000950 <HAL_UART_MspInit+0xd0>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	61d3      	str	r3, [r2, #28]
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <HAL_UART_MspInit+0xd0>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <HAL_UART_MspInit+0xd0>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a24      	ldr	r2, [pc, #144]	; (8000950 <HAL_UART_MspInit+0xd0>)
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <HAL_UART_MspInit+0xd0>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80008d2:	f248 0304 	movw	r3, #32772	; 0x8004
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e4:	2307      	movs	r3, #7
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f001 fb6f 	bl	8001fd4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <HAL_UART_MspInit+0xd4>)
 80008f8:	4a17      	ldr	r2, [pc, #92]	; (8000958 <HAL_UART_MspInit+0xd8>)
 80008fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_UART_MspInit+0xd4>)
 80008fe:	2210      	movs	r2, #16
 8000900:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_UART_MspInit+0xd4>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_UART_MspInit+0xd4>)
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_UART_MspInit+0xd4>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <HAL_UART_MspInit+0xd4>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_UART_MspInit+0xd4>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <HAL_UART_MspInit+0xd4>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000926:	480b      	ldr	r0, [pc, #44]	; (8000954 <HAL_UART_MspInit+0xd4>)
 8000928:	f001 f975 	bl	8001c16 <HAL_DMA_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000932:	f7ff feed 	bl	8000710 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_UART_MspInit+0xd4>)
 800093a:	671a      	str	r2, [r3, #112]	; 0x70
 800093c:	4a05      	ldr	r2, [pc, #20]	; (8000954 <HAL_UART_MspInit+0xd4>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3728      	adds	r7, #40	; 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40004400 	.word	0x40004400
 8000950:	40021000 	.word	0x40021000
 8000954:	200001f4 	.word	0x200001f4
 8000958:	40020080 	.word	0x40020080

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <NMI_Handler+0x4>

08000962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <MemManage_Handler+0x4>

0800096e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <UsageFault_Handler+0x4>

0800097a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f8d8 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <DMA1_Channel1_IRQHandler+0x10>)
 80009b6:	f001 f9d4 	bl	8001d62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000dc 	.word	0x200000dc

080009c4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <DMA1_Channel7_IRQHandler+0x10>)
 80009ca:	f001 f9ca 	bl	8001d62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200001f4 	.word	0x200001f4

080009d8 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <TIM6_DAC1_IRQHandler+0x10>)
 80009de:	f003 f8c9 	bl	8003b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000120 	.word	0x20000120

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f003 fe90 	bl	8004740 <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	220c      	movs	r2, #12
 8000a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20003000 	.word	0x20003000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	2000063c 	.word	0x2000063c
 8000a54:	20000658 	.word	0x20000658

08000a58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a80:	f7ff ffea 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <LoopForever+0xe>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <LoopForever+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f003 fe4f 	bl	800474c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aae:	f7ff fbe7 	bl	8000280 <main>

08000ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ab4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ac0:	08005120 	.word	0x08005120
  ldr r2, =_sbss
 8000ac4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ac8:	20000654 	.word	0x20000654

08000acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_2_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_Init+0x28>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_Init+0x28>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f001 f857 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 f808 	bl	8000afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aec:	f7ff fe16 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40022000 	.word	0x40022000

08000afc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0x54>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_InitTick+0x58>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 f86f 	bl	8001bfe <HAL_SYSTICK_Config>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00e      	b.n	8000b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d80a      	bhi.n	8000b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f001 f837 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <HAL_InitTick+0x5c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x20>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_IncTick+0x24>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000640 	.word	0x20000640

08000b84 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000640 	.word	0x20000640

08000b9c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b09a      	sub	sp, #104	; 0x68
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d101      	bne.n	8000bd0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e172      	b.n	8000eb6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d176      	bne.n	8000cd0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d152      	bne.n	8000c90 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff fdad 	bl	8000764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d13b      	bne.n	8000c90 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f000 fe85 	bl	8001928 <ADC_Disable>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	f003 0310 	and.w	r3, r3, #16
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d12f      	bne.n	8000c90 <HAL_ADC_Init+0xe0>
 8000c30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d12b      	bne.n	8000c90 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c40:	f023 0302 	bic.w	r3, r3, #2
 8000c44:	f043 0202 	orr.w	r2, r3, #2
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c5a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c6c:	4b94      	ldr	r3, [pc, #592]	; (8000ec0 <HAL_ADC_Init+0x310>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a94      	ldr	r2, [pc, #592]	; (8000ec4 <HAL_ADC_Init+0x314>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	0c9a      	lsrs	r2, r3, #18
 8000c78:	4613      	mov	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	4413      	add	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c82:	e002      	b.n	8000c8a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1f9      	bne.n	8000c84 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d007      	beq.n	8000cae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cac:	d110      	bne.n	8000cd0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f023 0312 	bic.w	r3, r3, #18
 8000cb6:	f043 0210 	orr.w	r2, r3, #16
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f043 0201 	orr.w	r2, r3, #1
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f040 80df 	bne.w	8000e9c <HAL_ADC_Init+0x2ec>
 8000cde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 80da 	bne.w	8000e9c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 80d2 	bne.w	8000e9c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d00:	f043 0202 	orr.w	r2, r3, #2
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d08:	4b6f      	ldr	r3, [pc, #444]	; (8000ec8 <HAL_ADC_Init+0x318>)
 8000d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d14:	d102      	bne.n	8000d1c <HAL_ADC_Init+0x16c>
 8000d16:	4b6d      	ldr	r3, [pc, #436]	; (8000ecc <HAL_ADC_Init+0x31c>)
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	e002      	b.n	8000d22 <HAL_ADC_Init+0x172>
 8000d1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d20:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d108      	bne.n	8000d42 <HAL_ADC_Init+0x192>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d101      	bne.n	8000d42 <HAL_ADC_Init+0x192>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <HAL_ADC_Init+0x194>
 8000d42:	2300      	movs	r3, #0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d11c      	bne.n	8000d82 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d48:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d010      	beq.n	8000d70 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d107      	bne.n	8000d6a <HAL_ADC_Init+0x1ba>
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d101      	bne.n	8000d6a <HAL_ADC_Init+0x1ba>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <HAL_ADC_Init+0x1bc>
 8000d6a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d108      	bne.n	8000d82 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d80:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7e5b      	ldrb	r3, [r3, #25]
 8000d86:	035b      	lsls	r3, r3, #13
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d8c:	2a01      	cmp	r2, #1
 8000d8e:	d002      	beq.n	8000d96 <HAL_ADC_Init+0x1e6>
 8000d90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d94:	e000      	b.n	8000d98 <HAL_ADC_Init+0x1e8>
 8000d96:	2200      	movs	r2, #0
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000da8:	4313      	orrs	r3, r2
 8000daa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d11b      	bne.n	8000dee <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7e5b      	ldrb	r3, [r3, #25]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d109      	bne.n	8000dd2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	045a      	lsls	r2, r3, #17
 8000dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dce:	663b      	str	r3, [r7, #96]	; 0x60
 8000dd0:	e00d      	b.n	8000dee <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000dda:	f043 0220 	orr.w	r2, r3, #32
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f043 0201 	orr.w	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d007      	beq.n	8000e06 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e02:	4313      	orrs	r3, r2
 8000e04:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d114      	bne.n	8000e3e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	6812      	ldr	r2, [r2, #0]
 8000e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e22:	f023 0302 	bic.w	r3, r3, #2
 8000e26:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	7e1b      	ldrb	r3, [r3, #24]
 8000e2c:	039a      	lsls	r2, r3, #14
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4313      	orrs	r3, r2
 8000e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <HAL_ADC_Init+0x320>)
 8000e46:	4013      	ands	r3, r2
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e4e:	430b      	orrs	r3, r1
 8000e50:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d10c      	bne.n	8000e74 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f023 010f 	bic.w	r1, r3, #15
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	1e5a      	subs	r2, r3, #1
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	631a      	str	r2, [r3, #48]	; 0x30
 8000e72:	e007      	b.n	8000e84 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 020f 	bic.w	r2, r2, #15
 8000e82:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f023 0303 	bic.w	r3, r3, #3
 8000e92:	f043 0201 	orr.w	r2, r3, #1
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	641a      	str	r2, [r3, #64]	; 0x40
 8000e9a:	e00a      	b.n	8000eb2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f023 0312 	bic.w	r3, r3, #18
 8000ea4:	f043 0210 	orr.w	r2, r3, #16
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000eac:	2301      	movs	r3, #1
 8000eae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000eb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3768      	adds	r7, #104	; 0x68
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	431bde83 	.word	0x431bde83
 8000ec8:	50000300 	.word	0x50000300
 8000ecc:	50000100 	.word	0x50000100
 8000ed0:	fff0c007 	.word	0xfff0c007

08000ed4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 80b9 	bne.w	8001066 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d101      	bne.n	8000f02 <HAL_ADC_Start_DMA+0x2e>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e0b4      	b.n	800106c <HAL_ADC_Start_DMA+0x198>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2201      	movs	r2, #1
 8000f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000f0a:	4b5a      	ldr	r3, [pc, #360]	; (8001074 <HAL_ADC_Start_DMA+0x1a0>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f003 031f 	and.w	r3, r3, #31
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f040 80a0 	bne.w	8001058 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f000 fca1 	bl	8001860 <ADC_Enable>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f040 8092 	bne.w	800104e <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f32:	f023 0301 	bic.w	r3, r3, #1
 8000f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f3e:	4b4d      	ldr	r3, [pc, #308]	; (8001074 <HAL_ADC_Start_DMA+0x1a0>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 031f 	and.w	r3, r3, #31
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d004      	beq.n	8000f54 <HAL_ADC_Start_DMA+0x80>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f52:	d115      	bne.n	8000f80 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d027      	beq.n	8000fbe <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f7e:	e01e      	b.n	8000fbe <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f94:	d004      	beq.n	8000fa0 <HAL_ADC_Start_DMA+0xcc>
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a37      	ldr	r2, [pc, #220]	; (8001078 <HAL_ADC_Start_DMA+0x1a4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d10e      	bne.n	8000fbe <HAL_ADC_Start_DMA+0xea>
 8000fa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d007      	beq.n	8000fbe <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fb6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fca:	d106      	bne.n	8000fda <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd0:	f023 0206 	bic.w	r2, r3, #6
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	645a      	str	r2, [r3, #68]	; 0x44
 8000fd8:	e002      	b.n	8000fe0 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fec:	4a23      	ldr	r2, [pc, #140]	; (800107c <HAL_ADC_Start_DMA+0x1a8>)
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff4:	4a22      	ldr	r2, [pc, #136]	; (8001080 <HAL_ADC_Start_DMA+0x1ac>)
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffc:	4a21      	ldr	r2, [pc, #132]	; (8001084 <HAL_ADC_Start_DMA+0x1b0>)
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	221c      	movs	r2, #28
 8001006:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0210 	orr.w	r2, r2, #16
 8001016:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0201 	orr.w	r2, r2, #1
 8001026:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3340      	adds	r3, #64	; 0x40
 8001032:	4619      	mov	r1, r3
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f000 fe34 	bl	8001ca4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0204 	orr.w	r2, r2, #4
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	e00d      	b.n	800106a <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001056:	e008      	b.n	800106a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001064:	e001      	b.n	800106a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001066:	2302      	movs	r3, #2
 8001068:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800106a:	7dfb      	ldrb	r3, [r7, #23]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	50000300 	.word	0x50000300
 8001078:	50000100 	.word	0x50000100
 800107c:	08001795 	.word	0x08001795
 8001080:	0800180f 	.word	0x0800180f
 8001084:	0800182b 	.word	0x0800182b

08001088 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001088:	b480      	push	{r7}
 800108a:	b09b      	sub	sp, #108	; 0x6c
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d101      	bne.n	80010aa <HAL_ADC_ConfigChannel+0x22>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e2a4      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x56c>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f040 8288 	bne.w	80015d2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d81c      	bhi.n	8001104 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	461a      	mov	r2, r3
 80010de:	231f      	movs	r3, #31
 80010e0:	4093      	lsls	r3, r2
 80010e2:	43db      	mvns	r3, r3
 80010e4:	4019      	ands	r1, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa00 f203 	lsl.w	r2, r0, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	430a      	orrs	r2, r1
 8001100:	631a      	str	r2, [r3, #48]	; 0x30
 8001102:	e063      	b.n	80011cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b09      	cmp	r3, #9
 800110a:	d81e      	bhi.n	800114a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	3b1e      	subs	r3, #30
 8001120:	221f      	movs	r2, #31
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	4019      	ands	r1, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	3b1e      	subs	r3, #30
 800113c:	fa00 f203 	lsl.w	r2, r0, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
 8001148:	e040      	b.n	80011cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b0e      	cmp	r3, #14
 8001150:	d81e      	bhi.n	8001190 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	3b3c      	subs	r3, #60	; 0x3c
 8001166:	221f      	movs	r2, #31
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	4019      	ands	r1, r3
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	3b3c      	subs	r3, #60	; 0x3c
 8001182:	fa00 f203 	lsl.w	r2, r0, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	639a      	str	r2, [r3, #56]	; 0x38
 800118e:	e01d      	b.n	80011cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	3b5a      	subs	r3, #90	; 0x5a
 80011a4:	221f      	movs	r2, #31
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	4019      	ands	r1, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	3b5a      	subs	r3, #90	; 0x5a
 80011c0:	fa00 f203 	lsl.w	r2, r0, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f040 80e5 	bne.w	80013a6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b09      	cmp	r3, #9
 80011e2:	d91c      	bls.n	800121e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6999      	ldr	r1, [r3, #24]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4613      	mov	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	3b1e      	subs	r3, #30
 80011f6:	2207      	movs	r2, #7
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4019      	ands	r1, r3
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	6898      	ldr	r0, [r3, #8]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	3b1e      	subs	r3, #30
 8001210:	fa00 f203 	lsl.w	r2, r0, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	619a      	str	r2, [r3, #24]
 800121c:	e019      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6959      	ldr	r1, [r3, #20]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	2207      	movs	r2, #7
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	4019      	ands	r1, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	6898      	ldr	r0, [r3, #8]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	fa00 f203 	lsl.w	r2, r0, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	08db      	lsrs	r3, r3, #3
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	3b01      	subs	r3, #1
 8001270:	2b03      	cmp	r3, #3
 8001272:	d84f      	bhi.n	8001314 <HAL_ADC_ConfigChannel+0x28c>
 8001274:	a201      	add	r2, pc, #4	; (adr r2, 800127c <HAL_ADC_ConfigChannel+0x1f4>)
 8001276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127a:	bf00      	nop
 800127c:	0800128d 	.word	0x0800128d
 8001280:	080012af 	.word	0x080012af
 8001284:	080012d1 	.word	0x080012d1
 8001288:	080012f3 	.word	0x080012f3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001292:	4b94      	ldr	r3, [pc, #592]	; (80014e4 <HAL_ADC_ConfigChannel+0x45c>)
 8001294:	4013      	ands	r3, r2
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	0691      	lsls	r1, r2, #26
 800129c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800129e:	430a      	orrs	r2, r1
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012aa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012ac:	e07e      	b.n	80013ac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012b4:	4b8b      	ldr	r3, [pc, #556]	; (80014e4 <HAL_ADC_ConfigChannel+0x45c>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	0691      	lsls	r1, r2, #26
 80012be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012c0:	430a      	orrs	r2, r1
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012cc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012ce:	e06d      	b.n	80013ac <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80012d6:	4b83      	ldr	r3, [pc, #524]	; (80014e4 <HAL_ADC_ConfigChannel+0x45c>)
 80012d8:	4013      	ands	r3, r2
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	0691      	lsls	r1, r2, #26
 80012e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012e2:	430a      	orrs	r2, r1
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012ee:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012f0:	e05c      	b.n	80013ac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012f8:	4b7a      	ldr	r3, [pc, #488]	; (80014e4 <HAL_ADC_ConfigChannel+0x45c>)
 80012fa:	4013      	ands	r3, r2
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	0691      	lsls	r1, r2, #26
 8001302:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001304:	430a      	orrs	r2, r1
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001310:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001312:	e04b      	b.n	80013ac <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	069b      	lsls	r3, r3, #26
 8001324:	429a      	cmp	r2, r3
 8001326:	d107      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001336:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800133e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	069b      	lsls	r3, r3, #26
 8001348:	429a      	cmp	r2, r3
 800134a:	d107      	bne.n	800135c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800135a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001362:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	069b      	lsls	r3, r3, #26
 800136c:	429a      	cmp	r2, r3
 800136e:	d107      	bne.n	8001380 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800137e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	069b      	lsls	r3, r3, #26
 8001390:	429a      	cmp	r2, r3
 8001392:	d10a      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013a2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80013a4:	e001      	b.n	80013aa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80013a6:	bf00      	nop
 80013a8:	e000      	b.n	80013ac <HAL_ADC_ConfigChannel+0x324>
      break;
 80013aa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d108      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x344>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x344>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <HAL_ADC_ConfigChannel+0x346>
 80013cc:	2300      	movs	r3, #0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f040 810a 	bne.w	80015e8 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d00f      	beq.n	80013fc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2201      	movs	r2, #1
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	400a      	ands	r2, r1
 80013f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80013fa:	e049      	b.n	8001490 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2201      	movs	r2, #1
 800140a:	409a      	lsls	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b09      	cmp	r3, #9
 800141c:	d91c      	bls.n	8001458 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6999      	ldr	r1, [r3, #24]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	3b1b      	subs	r3, #27
 8001430:	2207      	movs	r2, #7
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	4019      	ands	r1, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	6898      	ldr	r0, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	3b1b      	subs	r3, #27
 800144a:	fa00 f203 	lsl.w	r2, r0, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	619a      	str	r2, [r3, #24]
 8001456:	e01b      	b.n	8001490 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6959      	ldr	r1, [r3, #20]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	2207      	movs	r2, #7
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	4019      	ands	r1, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	6898      	ldr	r0, [r3, #8]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	fa00 f203 	lsl.w	r2, r0, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_ADC_ConfigChannel+0x460>)
 8001492:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b10      	cmp	r3, #16
 800149a:	d105      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800149c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d015      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014ac:	2b11      	cmp	r3, #17
 80014ae:	d105      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00b      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014c0:	2b12      	cmp	r3, #18
 80014c2:	f040 8091 	bne.w	80015e8 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80014c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f040 808a 	bne.w	80015e8 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014dc:	d108      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x468>
 80014de:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_ADC_ConfigChannel+0x464>)
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e008      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x46e>
 80014e4:	83fff000 	.word	0x83fff000
 80014e8:	50000300 	.word	0x50000300
 80014ec:	50000100 	.word	0x50000100
 80014f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014f4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d108      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x48e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x48e>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_ADC_ConfigChannel+0x490>
 8001516:	2300      	movs	r3, #0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d150      	bne.n	80015be <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800151c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800151e:	2b00      	cmp	r3, #0
 8001520:	d010      	beq.n	8001544 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d107      	bne.n	800153e <HAL_ADC_ConfigChannel+0x4b6>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_ADC_ConfigChannel+0x4b6>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_ADC_ConfigChannel+0x4b8>
 800153e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001540:	2b00      	cmp	r3, #0
 8001542:	d13c      	bne.n	80015be <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b10      	cmp	r3, #16
 800154a:	d11d      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x500>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001554:	d118      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800155e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001560:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001562:	4b27      	ldr	r3, [pc, #156]	; (8001600 <HAL_ADC_ConfigChannel+0x578>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a27      	ldr	r2, [pc, #156]	; (8001604 <HAL_ADC_ConfigChannel+0x57c>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	0c9a      	lsrs	r2, r3, #18
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001578:	e002      	b.n	8001580 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3b01      	subs	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f9      	bne.n	800157a <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001586:	e02e      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b11      	cmp	r3, #17
 800158e:	d10b      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x520>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001598:	d106      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800159a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80015a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015a4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015a6:	e01e      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b12      	cmp	r3, #18
 80015ae:	d11a      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80015b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ba:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015bc:	e013      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f043 0220 	orr.w	r2, r3, #32
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015d0:	e00a      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f043 0220 	orr.w	r2, r3, #32
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015e4:	e000      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015e6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80015f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	376c      	adds	r7, #108	; 0x6c
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	20000000 	.word	0x20000000
 8001604:	431bde83 	.word	0x431bde83

08001608 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001608:	b480      	push	{r7}
 800160a:	b099      	sub	sp, #100	; 0x64
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001620:	d102      	bne.n	8001628 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001622:	4b5a      	ldr	r3, [pc, #360]	; (800178c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	e002      	b.n	800162e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001628:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800162c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0a2      	b.n	800177e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001642:	2302      	movs	r3, #2
 8001644:	e09b      	b.n	800177e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d17f      	bne.n	800175c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d179      	bne.n	800175c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001668:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800166a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d040      	beq.n	80016f6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001674:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001686:	035b      	lsls	r3, r3, #13
 8001688:	430b      	orrs	r3, r1
 800168a:	431a      	orrs	r2, r3
 800168c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800168e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d108      	bne.n	80016b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80016b0:	2300      	movs	r3, #0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d15c      	bne.n	8001770 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d107      	bne.n	80016d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80016d2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d14b      	bne.n	8001770 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80016d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80016e0:	f023 030f 	bic.w	r3, r3, #15
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	6811      	ldr	r1, [r2, #0]
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	6892      	ldr	r2, [r2, #8]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	431a      	orrs	r2, r3
 80016f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016f2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016f4:	e03c      	b.n	8001770 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80016f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001700:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b01      	cmp	r3, #1
 800170e:	d108      	bne.n	8001722 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001722:	2300      	movs	r3, #0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d123      	bne.n	8001770 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001744:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001746:	2b00      	cmp	r3, #0
 8001748:	d112      	bne.n	8001770 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800174a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001752:	f023 030f 	bic.w	r3, r3, #15
 8001756:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001758:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800175a:	e009      	b.n	8001770 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f043 0220 	orr.w	r2, r3, #32
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800176e:	e000      	b.n	8001772 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001770:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800177a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800177e:	4618      	mov	r0, r3
 8001780:	3764      	adds	r7, #100	; 0x64
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	50000100 	.word	0x50000100
 8001790:	50000300 	.word	0x50000300

08001794 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d126      	bne.n	80017fc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d115      	bne.n	80017f4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d111      	bne.n	80017f4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d105      	bne.n	80017f4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f7fe ff6b 	bl	80006d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80017fa:	e004      	b.n	8001806 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f7fe ff4d 	bl	80006bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f043 0204 	orr.w	r2, r3, #4
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f7ff f9a3 	bl	8000b9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <ADC_Enable+0x2c>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <ADC_Enable+0x2c>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <ADC_Enable+0x2e>
 800188c:	2300      	movs	r3, #0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d143      	bne.n	800191a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <ADC_Enable+0xc4>)
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00d      	beq.n	80018bc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	f043 0210 	orr.w	r2, r3, #16
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b0:	f043 0201 	orr.w	r2, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e02f      	b.n	800191c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80018cc:	f7ff f95a 	bl	8000b84 <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018d2:	e01b      	b.n	800190c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018d4:	f7ff f956 	bl	8000b84 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d914      	bls.n	800190c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d00d      	beq.n	800190c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f043 0210 	orr.w	r2, r3, #16
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e007      	b.n	800191c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b01      	cmp	r3, #1
 8001918:	d1dc      	bne.n	80018d4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	8000003f 	.word	0x8000003f

08001928 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d108      	bne.n	8001954 <ADC_Disable+0x2c>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <ADC_Disable+0x2c>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <ADC_Disable+0x2e>
 8001954:	2300      	movs	r3, #0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d047      	beq.n	80019ea <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030d 	and.w	r3, r3, #13
 8001964:	2b01      	cmp	r3, #1
 8001966:	d10f      	bne.n	8001988 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0202 	orr.w	r2, r2, #2
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2203      	movs	r2, #3
 800197e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001980:	f7ff f900 	bl	8000b84 <HAL_GetTick>
 8001984:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001986:	e029      	b.n	80019dc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	f043 0210 	orr.w	r2, r3, #16
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001998:	f043 0201 	orr.w	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e023      	b.n	80019ec <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019a4:	f7ff f8ee 	bl	8000b84 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d914      	bls.n	80019dc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10d      	bne.n	80019dc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f043 0210 	orr.w	r2, r3, #16
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e007      	b.n	80019ec <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d0dc      	beq.n	80019a4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <__NVIC_EnableIRQ+0x38>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	; (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f7ff ff8e 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff29 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff3e 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff8e 	bl	8001ae8 <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5d 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff31 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffa2 	bl	8001b50 <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e037      	b.n	8001c9c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f988 	bl	8001f94 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}  
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_DMA_Start_IT+0x20>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e04a      	b.n	8001d5a <HAL_DMA_Start_IT+0xb6>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d13a      	bne.n	8001d4c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f91c 	bl	8001f38 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 020e 	orr.w	r2, r2, #14
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e00f      	b.n	8001d3a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 020a 	orr.w	r2, r2, #10
 8001d28:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0204 	bic.w	r2, r2, #4
 8001d38:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0201 	orr.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	e005      	b.n	8001d58 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001d54:	2302      	movs	r3, #2
 8001d56:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001d58:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2204      	movs	r2, #4
 8001d80:	409a      	lsls	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d024      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x72>
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01f      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d107      	bne.n	8001db2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0204 	bic.w	r2, r2, #4
 8001db0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dba:	2104      	movs	r1, #4
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d06a      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001dd2:	e065      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	2202      	movs	r2, #2
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d02c      	beq.n	8001e3e <HAL_DMA_IRQHandler+0xdc>
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d027      	beq.n	8001e3e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10b      	bne.n	8001e14 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 020a 	bic.w	r2, r2, #10
 8001e0a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e22:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d035      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001e3c:	e030      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	2208      	movs	r2, #8
 8001e44:	409a      	lsls	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d028      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x13e>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d023      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 020e 	bic.w	r2, r2, #14
 8001e66:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f202 	lsl.w	r2, r1, r2
 8001e76:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
    }
  }
}  
 8001e9e:	e7ff      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x13e>
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_DMA_RegisterCallback+0x20>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e031      	b.n	8001f2c <HAL_DMA_RegisterCallback+0x84>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d121      	bne.n	8001f1e <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8001eda:	7afb      	ldrb	r3, [r7, #11]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d81b      	bhi.n	8001f18 <HAL_DMA_RegisterCallback+0x70>
 8001ee0:	a201      	add	r2, pc, #4	; (adr r2, 8001ee8 <HAL_DMA_RegisterCallback+0x40>)
 8001ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee6:	bf00      	nop
 8001ee8:	08001ef9 	.word	0x08001ef9
 8001eec:	08001f01 	.word	0x08001f01
 8001ef0:	08001f09 	.word	0x08001f09
 8001ef4:	08001f11 	.word	0x08001f11
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	629a      	str	r2, [r3, #40]	; 0x28
           break;
 8001efe:	e010      	b.n	8001f22 <HAL_DMA_RegisterCallback+0x7a>
       
     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	62da      	str	r2, [r3, #44]	; 0x2c
           break;         
 8001f06:	e00c      	b.n	8001f22 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
           break;         
 8001f0e:	e008      	b.n	8001f22 <HAL_DMA_RegisterCallback+0x7a>
           
     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34
           break; 
 8001f16:	e004      	b.n	8001f22 <HAL_DMA_RegisterCallback+0x7a>
           
     default:
           status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	75fb      	strb	r3, [r7, #23]
           break;                                                            
 8001f1c:	e001      	b.n	8001f22 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	371c      	adds	r7, #28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4e:	2101      	movs	r1, #1
 8001f50:	fa01 f202 	lsl.w	r2, r1, r2
 8001f54:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b10      	cmp	r3, #16
 8001f64:	d108      	bne.n	8001f78 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f76:	e007      	b.n	8001f88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	60da      	str	r2, [r3, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <DMA_CalcBaseAndBitshift+0x34>)
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <DMA_CalcBaseAndBitshift+0x38>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	009a      	lsls	r2, r3, #2
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <DMA_CalcBaseAndBitshift+0x3c>)
 8001fb8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	bffdfff8 	.word	0xbffdfff8
 8001fcc:	cccccccd 	.word	0xcccccccd
 8001fd0:	40020000 	.word	0x40020000

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe2:	e14e      	b.n	8002282 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2101      	movs	r1, #1
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8140 	beq.w	800227c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b01      	cmp	r3, #1
 8002006:	d005      	beq.n	8002014 <HAL_GPIO_Init+0x40>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d130      	bne.n	8002076 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800204a:	2201      	movs	r2, #1
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f003 0201 	and.w	r2, r3, #1
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b03      	cmp	r3, #3
 8002080:	d017      	beq.n	80020b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d123      	bne.n	8002106 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	08da      	lsrs	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3208      	adds	r2, #8
 80020c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	220f      	movs	r2, #15
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	08da      	lsrs	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3208      	adds	r2, #8
 8002100:	6939      	ldr	r1, [r7, #16]
 8002102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0203 	and.w	r2, r3, #3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 809a 	beq.w	800227c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002148:	4b55      	ldr	r3, [pc, #340]	; (80022a0 <HAL_GPIO_Init+0x2cc>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4a54      	ldr	r2, [pc, #336]	; (80022a0 <HAL_GPIO_Init+0x2cc>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	4b52      	ldr	r3, [pc, #328]	; (80022a0 <HAL_GPIO_Init+0x2cc>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002160:	4a50      	ldr	r2, [pc, #320]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	220f      	movs	r2, #15
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800218a:	d013      	beq.n	80021b4 <HAL_GPIO_Init+0x1e0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a46      	ldr	r2, [pc, #280]	; (80022a8 <HAL_GPIO_Init+0x2d4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d00d      	beq.n	80021b0 <HAL_GPIO_Init+0x1dc>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a45      	ldr	r2, [pc, #276]	; (80022ac <HAL_GPIO_Init+0x2d8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d007      	beq.n	80021ac <HAL_GPIO_Init+0x1d8>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a44      	ldr	r2, [pc, #272]	; (80022b0 <HAL_GPIO_Init+0x2dc>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d101      	bne.n	80021a8 <HAL_GPIO_Init+0x1d4>
 80021a4:	2303      	movs	r3, #3
 80021a6:	e006      	b.n	80021b6 <HAL_GPIO_Init+0x1e2>
 80021a8:	2305      	movs	r3, #5
 80021aa:	e004      	b.n	80021b6 <HAL_GPIO_Init+0x1e2>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e002      	b.n	80021b6 <HAL_GPIO_Init+0x1e2>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <HAL_GPIO_Init+0x1e2>
 80021b4:	2300      	movs	r3, #0
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	f002 0203 	and.w	r2, r2, #3
 80021bc:	0092      	lsls	r2, r2, #2
 80021be:	4093      	lsls	r3, r2
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021c6:	4937      	ldr	r1, [pc, #220]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d4:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <HAL_GPIO_Init+0x2e0>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021f8:	4a2e      	ldr	r2, [pc, #184]	; (80022b4 <HAL_GPIO_Init+0x2e0>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021fe:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <HAL_GPIO_Init+0x2e0>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002222:	4a24      	ldr	r2, [pc, #144]	; (80022b4 <HAL_GPIO_Init+0x2e0>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <HAL_GPIO_Init+0x2e0>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800224c:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <HAL_GPIO_Init+0x2e0>)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_GPIO_Init+0x2e0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002276:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <HAL_GPIO_Init+0x2e0>)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3301      	adds	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	f47f aea9 	bne.w	8001fe4 <HAL_GPIO_Init+0x10>
  }
}
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010000 	.word	0x40010000
 80022a8:	48000400 	.word	0x48000400
 80022ac:	48000800 	.word	0x48000800
 80022b0:	48000c00 	.word	0x48000c00
 80022b4:	40010400 	.word	0x40010400

080022b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80022be:	af00      	add	r7, sp, #0
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	f001 b823 	b.w	8003324 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 817d 	beq.w	80025ee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022f4:	4bbc      	ldr	r3, [pc, #752]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d00c      	beq.n	800231a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002300:	4bb9      	ldr	r3, [pc, #740]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d15c      	bne.n	80023c6 <HAL_RCC_OscConfig+0x10e>
 800230c:	4bb6      	ldr	r3, [pc, #728]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002318:	d155      	bne.n	80023c6 <HAL_RCC_OscConfig+0x10e>
 800231a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800232e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d102      	bne.n	800234c <HAL_RCC_OscConfig+0x94>
 8002346:	4ba8      	ldr	r3, [pc, #672]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	e015      	b.n	8002378 <HAL_RCC_OscConfig+0xc0>
 800234c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002350:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002364:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002368:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002374:	4b9c      	ldr	r3, [pc, #624]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800237c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002380:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002384:	fa92 f2a2 	rbit	r2, r2
 8002388:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800238c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002390:	fab2 f282 	clz	r2, r2
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f042 0220 	orr.w	r2, r2, #32
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	f002 021f 	and.w	r2, r2, #31
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f202 	lsl.w	r2, r1, r2
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 811f 	beq.w	80025ec <HAL_RCC_OscConfig+0x334>
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f040 8116 	bne.w	80025ec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f000 bfaf 	b.w	8003324 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d6:	d106      	bne.n	80023e6 <HAL_RCC_OscConfig+0x12e>
 80023d8:	4b83      	ldr	r3, [pc, #524]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a82      	ldr	r2, [pc, #520]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 80023de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	e036      	b.n	8002454 <HAL_RCC_OscConfig+0x19c>
 80023e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x158>
 80023f6:	4b7c      	ldr	r3, [pc, #496]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7b      	ldr	r2, [pc, #492]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 80023fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b79      	ldr	r3, [pc, #484]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a78      	ldr	r2, [pc, #480]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 8002408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e021      	b.n	8002454 <HAL_RCC_OscConfig+0x19c>
 8002410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002414:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x184>
 8002422:	4b71      	ldr	r3, [pc, #452]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a70      	ldr	r2, [pc, #448]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 8002428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b6e      	ldr	r3, [pc, #440]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a6d      	ldr	r2, [pc, #436]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0x19c>
 800243c:	4b6a      	ldr	r3, [pc, #424]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a69      	ldr	r2, [pc, #420]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 8002442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b67      	ldr	r3, [pc, #412]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a66      	ldr	r2, [pc, #408]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 800244e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002452:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002454:	4b64      	ldr	r3, [pc, #400]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	f023 020f 	bic.w	r2, r3, #15
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	495f      	ldr	r1, [pc, #380]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 800246a:	4313      	orrs	r3, r2
 800246c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d059      	beq.n	8002532 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe fb81 	bl	8000b84 <HAL_GetTick>
 8002482:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	e00a      	b.n	800249e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002488:	f7fe fb7c 	bl	8000b84 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b64      	cmp	r3, #100	; 0x64
 8002496:	d902      	bls.n	800249e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	f000 bf43 	b.w	8003324 <HAL_RCC_OscConfig+0x106c>
 800249e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80024b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d102      	bne.n	80024d0 <HAL_RCC_OscConfig+0x218>
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	e015      	b.n	80024fc <HAL_RCC_OscConfig+0x244>
 80024d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80024e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80024ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80024f8:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002500:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002504:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002508:	fa92 f2a2 	rbit	r2, r2
 800250c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002510:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002514:	fab2 f282 	clz	r2, r2
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	f042 0220 	orr.w	r2, r2, #32
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f002 021f 	and.w	r2, r2, #31
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f202 	lsl.w	r2, r1, r2
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ab      	beq.n	8002488 <HAL_RCC_OscConfig+0x1d0>
 8002530:	e05d      	b.n	80025ee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7fe fb27 	bl	8000b84 <HAL_GetTick>
 8002536:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	e00a      	b.n	8002552 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe fb22 	bl	8000b84 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b64      	cmp	r3, #100	; 0x64
 800254a:	d902      	bls.n	8002552 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	f000 bee9 	b.w	8003324 <HAL_RCC_OscConfig+0x106c>
 8002552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002556:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002566:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d102      	bne.n	8002584 <HAL_RCC_OscConfig+0x2cc>
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	e015      	b.n	80025b0 <HAL_RCC_OscConfig+0x2f8>
 8002584:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002588:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800259c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80025a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_RCC_OscConfig+0x330>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025b4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80025b8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80025bc:	fa92 f2a2 	rbit	r2, r2
 80025c0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80025c4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80025c8:	fab2 f282 	clz	r2, r2
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	f042 0220 	orr.w	r2, r2, #32
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	f002 021f 	and.w	r2, r2, #31
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f202 	lsl.w	r2, r1, r2
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1ab      	bne.n	800253c <HAL_RCC_OscConfig+0x284>
 80025e4:	e003      	b.n	80025ee <HAL_RCC_OscConfig+0x336>
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 817d 	beq.w	80028fe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002604:	4ba6      	ldr	r3, [pc, #664]	; (80028a0 <HAL_RCC_OscConfig+0x5e8>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00b      	beq.n	8002628 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002610:	4ba3      	ldr	r3, [pc, #652]	; (80028a0 <HAL_RCC_OscConfig+0x5e8>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d172      	bne.n	8002702 <HAL_RCC_OscConfig+0x44a>
 800261c:	4ba0      	ldr	r3, [pc, #640]	; (80028a0 <HAL_RCC_OscConfig+0x5e8>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d16c      	bne.n	8002702 <HAL_RCC_OscConfig+0x44a>
 8002628:	2302      	movs	r3, #2
 800262a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800263a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d102      	bne.n	8002658 <HAL_RCC_OscConfig+0x3a0>
 8002652:	4b93      	ldr	r3, [pc, #588]	; (80028a0 <HAL_RCC_OscConfig+0x5e8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	e013      	b.n	8002680 <HAL_RCC_OscConfig+0x3c8>
 8002658:	2302      	movs	r3, #2
 800265a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800266a:	2302      	movs	r3, #2
 800266c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002670:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800267c:	4b88      	ldr	r3, [pc, #544]	; (80028a0 <HAL_RCC_OscConfig+0x5e8>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	2202      	movs	r2, #2
 8002682:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002686:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800268a:	fa92 f2a2 	rbit	r2, r2
 800268e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002692:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002696:	fab2 f282 	clz	r2, r2
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	f042 0220 	orr.w	r2, r2, #32
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	f002 021f 	and.w	r2, r2, #31
 80026a6:	2101      	movs	r1, #1
 80026a8:	fa01 f202 	lsl.w	r2, r1, r2
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCC_OscConfig+0x410>
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d002      	beq.n	80026c8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f000 be2e 	b.w	8003324 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b75      	ldr	r3, [pc, #468]	; (80028a0 <HAL_RCC_OscConfig+0x5e8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	21f8      	movs	r1, #248	; 0xf8
 80026de:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80026e6:	fa91 f1a1 	rbit	r1, r1
 80026ea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80026ee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80026f2:	fab1 f181 	clz	r1, r1
 80026f6:	b2c9      	uxtb	r1, r1
 80026f8:	408b      	lsls	r3, r1
 80026fa:	4969      	ldr	r1, [pc, #420]	; (80028a0 <HAL_RCC_OscConfig+0x5e8>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002700:	e0fd      	b.n	80028fe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8088 	beq.w	8002824 <HAL_RCC_OscConfig+0x56c>
 8002714:	2301      	movs	r3, #1
 8002716:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002726:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002734:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	461a      	mov	r2, r3
 800273c:	2301      	movs	r3, #1
 800273e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe fa20 	bl	8000b84 <HAL_GetTick>
 8002744:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274a:	f7fe fa1b 	bl	8000b84 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d902      	bls.n	8002760 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	f000 bde2 	b.w	8003324 <HAL_RCC_OscConfig+0x106c>
 8002760:	2302      	movs	r3, #2
 8002762:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002772:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d102      	bne.n	8002790 <HAL_RCC_OscConfig+0x4d8>
 800278a:	4b45      	ldr	r3, [pc, #276]	; (80028a0 <HAL_RCC_OscConfig+0x5e8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e013      	b.n	80027b8 <HAL_RCC_OscConfig+0x500>
 8002790:	2302      	movs	r3, #2
 8002792:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027a2:	2302      	movs	r3, #2
 80027a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80027b4:	4b3a      	ldr	r3, [pc, #232]	; (80028a0 <HAL_RCC_OscConfig+0x5e8>)
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	2202      	movs	r2, #2
 80027ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80027be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80027c2:	fa92 f2a2 	rbit	r2, r2
 80027c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80027ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80027ce:	fab2 f282 	clz	r2, r2
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f042 0220 	orr.w	r2, r2, #32
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f002 021f 	and.w	r2, r2, #31
 80027de:	2101      	movs	r1, #1
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0af      	beq.n	800274a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ea:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <HAL_RCC_OscConfig+0x5e8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	21f8      	movs	r1, #248	; 0xf8
 8002800:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002808:	fa91 f1a1 	rbit	r1, r1
 800280c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002810:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002814:	fab1 f181 	clz	r1, r1
 8002818:	b2c9      	uxtb	r1, r1
 800281a:	408b      	lsls	r3, r1
 800281c:	4920      	ldr	r1, [pc, #128]	; (80028a0 <HAL_RCC_OscConfig+0x5e8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]
 8002822:	e06c      	b.n	80028fe <HAL_RCC_OscConfig+0x646>
 8002824:	2301      	movs	r3, #1
 8002826:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002836:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002844:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	461a      	mov	r2, r3
 800284c:	2300      	movs	r3, #0
 800284e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe f998 	bl	8000b84 <HAL_GetTick>
 8002854:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285a:	f7fe f993 	bl	8000b84 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d902      	bls.n	8002870 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	f000 bd5a 	b.w	8003324 <HAL_RCC_OscConfig+0x106c>
 8002870:	2302      	movs	r3, #2
 8002872:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d104      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5ec>
 800289a:	4b01      	ldr	r3, [pc, #4]	; (80028a0 <HAL_RCC_OscConfig+0x5e8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e015      	b.n	80028cc <HAL_RCC_OscConfig+0x614>
 80028a0:	40021000 	.word	0x40021000
 80028a4:	2302      	movs	r3, #2
 80028a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80028b6:	2302      	movs	r3, #2
 80028b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80028bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80028c8:	4bc8      	ldr	r3, [pc, #800]	; (8002bec <HAL_RCC_OscConfig+0x934>)
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	2202      	movs	r2, #2
 80028ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80028d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80028d6:	fa92 f2a2 	rbit	r2, r2
 80028da:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80028de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80028e2:	fab2 f282 	clz	r2, r2
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	f042 0220 	orr.w	r2, r2, #32
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f002 021f 	and.w	r2, r2, #31
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f202 	lsl.w	r2, r1, r2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1ad      	bne.n	800285a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8110 	beq.w	8002b34 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d079      	beq.n	8002a18 <HAL_RCC_OscConfig+0x760>
 8002924:	2301      	movs	r3, #1
 8002926:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	4bab      	ldr	r3, [pc, #684]	; (8002bf0 <HAL_RCC_OscConfig+0x938>)
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	461a      	mov	r2, r3
 800294a:	2301      	movs	r3, #1
 800294c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294e:	f7fe f919 	bl	8000b84 <HAL_GetTick>
 8002952:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002956:	e00a      	b.n	800296e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002958:	f7fe f914 	bl	8000b84 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d902      	bls.n	800296e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	f000 bcdb 	b.w	8003324 <HAL_RCC_OscConfig+0x106c>
 800296e:	2302      	movs	r3, #2
 8002970:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002988:	2202      	movs	r2, #2
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002990:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	fa93 f2a3 	rbit	r2, r3
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029ac:	2202      	movs	r2, #2
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	fa93 f2a3 	rbit	r2, r3
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c8:	4b88      	ldr	r3, [pc, #544]	; (8002bec <HAL_RCC_OscConfig+0x934>)
 80029ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80029d4:	2102      	movs	r1, #2
 80029d6:	6019      	str	r1, [r3, #0]
 80029d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	fa93 f1a3 	rbit	r1, r3
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029ee:	6019      	str	r1, [r3, #0]
  return result;
 80029f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0a0      	beq.n	8002958 <HAL_RCC_OscConfig+0x6a0>
 8002a16:	e08d      	b.n	8002b34 <HAL_RCC_OscConfig+0x87c>
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	fa93 f2a3 	rbit	r2, r3
 8002a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a3a:	601a      	str	r2, [r3, #0]
  return result;
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a44:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b68      	ldr	r3, [pc, #416]	; (8002bf0 <HAL_RCC_OscConfig+0x938>)
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	461a      	mov	r2, r3
 8002a56:	2300      	movs	r3, #0
 8002a58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe f893 	bl	8000b84 <HAL_GetTick>
 8002a5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a64:	f7fe f88e 	bl	8000b84 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d902      	bls.n	8002a7a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	f000 bc55 	b.w	8003324 <HAL_RCC_OscConfig+0x106c>
 8002a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a82:	2202      	movs	r2, #2
 8002a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	fa93 f2a3 	rbit	r2, r3
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	fa93 f2a3 	rbit	r2, r3
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002aca:	2202      	movs	r2, #2
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	fa93 f2a3 	rbit	r2, r3
 8002adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ae4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae6:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_RCC_OscConfig+0x934>)
 8002ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002af2:	2102      	movs	r1, #2
 8002af4:	6019      	str	r1, [r3, #0]
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	fa93 f1a3 	rbit	r1, r3
 8002b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b08:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b0c:	6019      	str	r1, [r3, #0]
  return result;
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	2101      	movs	r1, #1
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d197      	bne.n	8002a64 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 81a1 	beq.w	8002e8c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b50:	4b26      	ldr	r3, [pc, #152]	; (8002bec <HAL_RCC_OscConfig+0x934>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d116      	bne.n	8002b8a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5c:	4b23      	ldr	r3, [pc, #140]	; (8002bec <HAL_RCC_OscConfig+0x934>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	4a22      	ldr	r2, [pc, #136]	; (8002bec <HAL_RCC_OscConfig+0x934>)
 8002b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b66:	61d3      	str	r3, [r2, #28]
 8002b68:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_RCC_OscConfig+0x934>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b74:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002b82:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_RCC_OscConfig+0x93c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d11a      	bne.n	8002bcc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_RCC_OscConfig+0x93c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a16      	ldr	r2, [pc, #88]	; (8002bf4 <HAL_RCC_OscConfig+0x93c>)
 8002b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba2:	f7fd ffef 	bl	8000b84 <HAL_GetTick>
 8002ba6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002baa:	e009      	b.n	8002bc0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bac:	f7fd ffea 	bl	8000b84 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b64      	cmp	r3, #100	; 0x64
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e3b1      	b.n	8003324 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <HAL_RCC_OscConfig+0x93c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ef      	beq.n	8002bac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d10d      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x940>
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_RCC_OscConfig+0x934>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4a02      	ldr	r2, [pc, #8]	; (8002bec <HAL_RCC_OscConfig+0x934>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6213      	str	r3, [r2, #32]
 8002be8:	e03c      	b.n	8002c64 <HAL_RCC_OscConfig+0x9ac>
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	10908120 	.word	0x10908120
 8002bf4:	40007000 	.word	0x40007000
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10c      	bne.n	8002c22 <HAL_RCC_OscConfig+0x96a>
 8002c08:	4bc1      	ldr	r3, [pc, #772]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	4ac0      	ldr	r2, [pc, #768]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	6213      	str	r3, [r2, #32]
 8002c14:	4bbe      	ldr	r3, [pc, #760]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	4abd      	ldr	r2, [pc, #756]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002c1a:	f023 0304 	bic.w	r3, r3, #4
 8002c1e:	6213      	str	r3, [r2, #32]
 8002c20:	e020      	b.n	8002c64 <HAL_RCC_OscConfig+0x9ac>
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x994>
 8002c32:	4bb7      	ldr	r3, [pc, #732]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	4ab6      	ldr	r2, [pc, #728]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	6213      	str	r3, [r2, #32]
 8002c3e:	4bb4      	ldr	r3, [pc, #720]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4ab3      	ldr	r2, [pc, #716]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6213      	str	r3, [r2, #32]
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_OscConfig+0x9ac>
 8002c4c:	4bb0      	ldr	r3, [pc, #704]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4aaf      	ldr	r2, [pc, #700]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	6213      	str	r3, [r2, #32]
 8002c58:	4bad      	ldr	r3, [pc, #692]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	4aac      	ldr	r2, [pc, #688]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002c5e:	f023 0304 	bic.w	r3, r3, #4
 8002c62:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 8081 	beq.w	8002d78 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fd ff85 	bl	8000b84 <HAL_GetTick>
 8002c7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c80:	f7fd ff80 	bl	8000b84 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e345      	b.n	8003324 <HAL_RCC_OscConfig+0x106c>
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	fa93 f2a3 	rbit	r2, r3
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f2a3 	rbit	r2, r3
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002cde:	601a      	str	r2, [r3, #0]
  return result;
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ce8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d102      	bne.n	8002d04 <HAL_RCC_OscConfig+0xa4c>
 8002cfe:	4b84      	ldr	r3, [pc, #528]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	e013      	b.n	8002d2c <HAL_RCC_OscConfig+0xa74>
 8002d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d08:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	fa93 f2a3 	rbit	r2, r3
 8002d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d22:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	4b79      	ldr	r3, [pc, #484]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d30:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d34:	2102      	movs	r1, #2
 8002d36:	6011      	str	r1, [r2, #0]
 8002d38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d3c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	fa92 f1a2 	rbit	r1, r2
 8002d46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d4a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d4e:	6011      	str	r1, [r2, #0]
  return result;
 8002d50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d54:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	fab2 f282 	clz	r2, r2
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	f002 021f 	and.w	r2, r2, #31
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d084      	beq.n	8002c80 <HAL_RCC_OscConfig+0x9c8>
 8002d76:	e07f      	b.n	8002e78 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d78:	f7fd ff04 	bl	8000b84 <HAL_GetTick>
 8002d7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	e00b      	b.n	8002d9a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fd feff 	bl	8000b84 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e2c4      	b.n	8003324 <HAL_RCC_OscConfig+0x106c>
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002da2:	2202      	movs	r2, #2
 8002da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	fa93 f2a3 	rbit	r2, r3
 8002db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	fa93 f2a3 	rbit	r2, r3
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002de0:	601a      	str	r2, [r3, #0]
  return result;
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002dea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f043 0302 	orr.w	r3, r3, #2
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d102      	bne.n	8002e06 <HAL_RCC_OscConfig+0xb4e>
 8002e00:	4b43      	ldr	r3, [pc, #268]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	e013      	b.n	8002e2e <HAL_RCC_OscConfig+0xb76>
 8002e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e0e:	2202      	movs	r2, #2
 8002e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e16:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	fa93 f2a3 	rbit	r2, r3
 8002e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e24:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	4b39      	ldr	r3, [pc, #228]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e32:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e36:	2102      	movs	r1, #2
 8002e38:	6011      	str	r1, [r2, #0]
 8002e3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e3e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	fa92 f1a2 	rbit	r1, r2
 8002e48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e4c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e50:	6011      	str	r1, [r2, #0]
  return result;
 8002e52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e56:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	fab2 f282 	clz	r2, r2
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	f002 021f 	and.w	r2, r2, #31
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d184      	bne.n	8002d82 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e78:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e80:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 8242 	beq.w	8003322 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <HAL_RCC_OscConfig+0xc58>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	f000 8213 	beq.w	80032d2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	f040 8162 	bne.w	8003182 <HAL_RCC_OscConfig+0xeca>
 8002ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ec6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	fa93 f2a3 	rbit	r2, r3
 8002eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ede:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ee2:	601a      	str	r2, [r3, #0]
  return result;
 8002ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002eec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ef8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	461a      	mov	r2, r3
 8002f00:	2300      	movs	r3, #0
 8002f02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fd fe3e 	bl	8000b84 <HAL_GetTick>
 8002f08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0c:	e00c      	b.n	8002f28 <HAL_RCC_OscConfig+0xc70>
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fd fe36 	bl	8000b84 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e1fd      	b.n	8003324 <HAL_RCC_OscConfig+0x106c>
 8002f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	fa93 f2a3 	rbit	r2, r3
 8002f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f48:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f4c:	601a      	str	r2, [r3, #0]
  return result;
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d102      	bne.n	8002f72 <HAL_RCC_OscConfig+0xcba>
 8002f6c:	4bb0      	ldr	r3, [pc, #704]	; (8003230 <HAL_RCC_OscConfig+0xf78>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	e027      	b.n	8002fc2 <HAL_RCC_OscConfig+0xd0a>
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f84:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	fa93 f2a3 	rbit	r2, r3
 8002f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f92:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	fa93 f2a3 	rbit	r2, r3
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	4b9c      	ldr	r3, [pc, #624]	; (8003230 <HAL_RCC_OscConfig+0xf78>)
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fc6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002fca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fce:	6011      	str	r1, [r2, #0]
 8002fd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fd4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	fa92 f1a2 	rbit	r1, r2
 8002fde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002fe6:	6011      	str	r1, [r2, #0]
  return result;
 8002fe8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	fab2 f282 	clz	r2, r2
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	f042 0220 	orr.w	r2, r2, #32
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	f002 021f 	and.w	r2, r2, #31
 8003002:	2101      	movs	r1, #1
 8003004:	fa01 f202 	lsl.w	r2, r1, r2
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d182      	bne.n	8002f14 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800300e:	4b88      	ldr	r3, [pc, #544]	; (8003230 <HAL_RCC_OscConfig+0xf78>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003026:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	430b      	orrs	r3, r1
 8003030:	497f      	ldr	r1, [pc, #508]	; (8003230 <HAL_RCC_OscConfig+0xf78>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800303e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	fa93 f2a3 	rbit	r2, r3
 8003052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003056:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800305a:	601a      	str	r2, [r3, #0]
  return result;
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003064:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003070:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	461a      	mov	r2, r3
 8003078:	2301      	movs	r3, #1
 800307a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fd fd82 	bl	8000b84 <HAL_GetTick>
 8003080:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003084:	e009      	b.n	800309a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003086:	f7fd fd7d 	bl	8000b84 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e144      	b.n	8003324 <HAL_RCC_OscConfig+0x106c>
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	fa93 f2a3 	rbit	r2, r3
 80030b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80030be:	601a      	str	r2, [r3, #0]
  return result;
 80030c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80030c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d102      	bne.n	80030e4 <HAL_RCC_OscConfig+0xe2c>
 80030de:	4b54      	ldr	r3, [pc, #336]	; (8003230 <HAL_RCC_OscConfig+0xf78>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	e027      	b.n	8003134 <HAL_RCC_OscConfig+0xe7c>
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80030ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	fa93 f2a3 	rbit	r2, r3
 8003100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003104:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003112:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	fa93 f2a3 	rbit	r2, r3
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <HAL_RCC_OscConfig+0xf78>)
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003138:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800313c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003140:	6011      	str	r1, [r2, #0]
 8003142:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003146:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	fa92 f1a2 	rbit	r1, r2
 8003150:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003154:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003158:	6011      	str	r1, [r2, #0]
  return result;
 800315a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800315e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	fab2 f282 	clz	r2, r2
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	f042 0220 	orr.w	r2, r2, #32
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	f002 021f 	and.w	r2, r2, #31
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f202 	lsl.w	r2, r1, r2
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d082      	beq.n	8003086 <HAL_RCC_OscConfig+0xdce>
 8003180:	e0cf      	b.n	8003322 <HAL_RCC_OscConfig+0x106a>
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800318a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800318e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	fa93 f2a3 	rbit	r2, r3
 800319e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80031a6:	601a      	str	r2, [r3, #0]
  return result;
 80031a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80031b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	461a      	mov	r2, r3
 80031c4:	2300      	movs	r3, #0
 80031c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fd fcdc 	bl	8000b84 <HAL_GetTick>
 80031cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d0:	e009      	b.n	80031e6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fd fcd7 	bl	8000b84 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e09e      	b.n	8003324 <HAL_RCC_OscConfig+0x106c>
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80031ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	fa93 f2a3 	rbit	r2, r3
 8003202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003206:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800320a:	601a      	str	r2, [r3, #0]
  return result;
 800320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003210:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003214:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d104      	bne.n	8003234 <HAL_RCC_OscConfig+0xf7c>
 800322a:	4b01      	ldr	r3, [pc, #4]	; (8003230 <HAL_RCC_OscConfig+0xf78>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	e029      	b.n	8003284 <HAL_RCC_OscConfig+0xfcc>
 8003230:	40021000 	.word	0x40021000
 8003234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003238:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800323c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003262:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	fa93 f2a3 	rbit	r2, r3
 8003276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <HAL_RCC_OscConfig+0x1078>)
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003288:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800328c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003290:	6011      	str	r1, [r2, #0]
 8003292:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003296:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	fa92 f1a2 	rbit	r1, r2
 80032a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80032a8:	6011      	str	r1, [r2, #0]
  return result;
 80032aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	fab2 f282 	clz	r2, r2
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	f042 0220 	orr.w	r2, r2, #32
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	f002 021f 	and.w	r2, r2, #31
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d180      	bne.n	80031d2 <HAL_RCC_OscConfig+0xf1a>
 80032d0:	e027      	b.n	8003322 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e01e      	b.n	8003324 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032e6:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_RCC_OscConfig+0x1078>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	429a      	cmp	r2, r3
 8003304:	d10b      	bne.n	800331e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003306:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800330a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800330e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003312:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800331a:	429a      	cmp	r2, r3
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000

08003334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b09e      	sub	sp, #120	; 0x78
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e162      	b.n	8003612 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800334c:	4b90      	ldr	r3, [pc, #576]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d910      	bls.n	800337c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b8d      	ldr	r3, [pc, #564]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 0207 	bic.w	r2, r3, #7
 8003362:	498b      	ldr	r1, [pc, #556]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b89      	ldr	r3, [pc, #548]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e14a      	b.n	8003612 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003388:	4b82      	ldr	r3, [pc, #520]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	497f      	ldr	r1, [pc, #508]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80dc 	beq.w	8003560 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d13c      	bne.n	800342a <HAL_RCC_ClockConfig+0xf6>
 80033b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c0:	fab3 f383 	clz	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d102      	bne.n	80033da <HAL_RCC_ClockConfig+0xa6>
 80033d4:	4b6f      	ldr	r3, [pc, #444]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	e00f      	b.n	80033fa <HAL_RCC_ClockConfig+0xc6>
 80033da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	667b      	str	r3, [r7, #100]	; 0x64
 80033e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ec:	663b      	str	r3, [r7, #96]	; 0x60
 80033ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033f6:	4b67      	ldr	r3, [pc, #412]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003400:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003402:	fa92 f2a2 	rbit	r2, r2
 8003406:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003408:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800340a:	fab2 f282 	clz	r2, r2
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	f042 0220 	orr.w	r2, r2, #32
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	f002 021f 	and.w	r2, r2, #31
 800341a:	2101      	movs	r1, #1
 800341c:	fa01 f202 	lsl.w	r2, r1, r2
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d17b      	bne.n	800351e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e0f3      	b.n	8003612 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d13c      	bne.n	80034ac <HAL_RCC_ClockConfig+0x178>
 8003432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003436:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d102      	bne.n	800345c <HAL_RCC_ClockConfig+0x128>
 8003456:	4b4f      	ldr	r3, [pc, #316]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	e00f      	b.n	800347c <HAL_RCC_ClockConfig+0x148>
 800345c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003460:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	647b      	str	r3, [r7, #68]	; 0x44
 800346a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800346e:	643b      	str	r3, [r7, #64]	; 0x40
 8003470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003478:	4b46      	ldr	r3, [pc, #280]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003480:	63ba      	str	r2, [r7, #56]	; 0x38
 8003482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003484:	fa92 f2a2 	rbit	r2, r2
 8003488:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800348a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800348c:	fab2 f282 	clz	r2, r2
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	f042 0220 	orr.w	r2, r2, #32
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	f002 021f 	and.w	r2, r2, #31
 800349c:	2101      	movs	r1, #1
 800349e:	fa01 f202 	lsl.w	r2, r1, r2
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d13a      	bne.n	800351e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0b2      	b.n	8003612 <HAL_RCC_ClockConfig+0x2de>
 80034ac:	2302      	movs	r3, #2
 80034ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x1a0>
 80034ce:	4b31      	ldr	r3, [pc, #196]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	e00d      	b.n	80034f0 <HAL_RCC_ClockConfig+0x1bc>
 80034d4:	2302      	movs	r3, #2
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	fa93 f3a3 	rbit	r3, r3
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
 80034e0:	2302      	movs	r3, #2
 80034e2:	623b      	str	r3, [r7, #32]
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	4b29      	ldr	r3, [pc, #164]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	2202      	movs	r2, #2
 80034f2:	61ba      	str	r2, [r7, #24]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	fa92 f2a2 	rbit	r2, r2
 80034fa:	617a      	str	r2, [r7, #20]
  return result;
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	fab2 f282 	clz	r2, r2
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	f042 0220 	orr.w	r2, r2, #32
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	f002 021f 	and.w	r2, r2, #31
 800350e:	2101      	movs	r1, #1
 8003510:	fa01 f202 	lsl.w	r2, r1, r2
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e079      	b.n	8003612 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f023 0203 	bic.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	491a      	ldr	r1, [pc, #104]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003530:	f7fd fb28 	bl	8000b84 <HAL_GetTick>
 8003534:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	e00a      	b.n	800354e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003538:	f7fd fb24 	bl	8000b84 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e061      	b.n	8003612 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_RCC_ClockConfig+0x260>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 020c 	and.w	r2, r3, #12
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	429a      	cmp	r2, r3
 800355e:	d1eb      	bne.n	8003538 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d214      	bcs.n	8003598 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 0207 	bic.w	r2, r3, #7
 8003576:	4906      	ldr	r1, [pc, #24]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b04      	ldr	r3, [pc, #16]	; (8003590 <HAL_RCC_ClockConfig+0x25c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e040      	b.n	8003612 <HAL_RCC_ClockConfig+0x2de>
 8003590:	40022000 	.word	0x40022000
 8003594:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCC_ClockConfig+0x2e8>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	491a      	ldr	r1, [pc, #104]	; (800361c <HAL_RCC_ClockConfig+0x2e8>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <HAL_RCC_ClockConfig+0x2e8>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4912      	ldr	r1, [pc, #72]	; (800361c <HAL_RCC_ClockConfig+0x2e8>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035d6:	f000 f829 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80035da:	4601      	mov	r1, r0
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <HAL_RCC_ClockConfig+0x2e8>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e4:	22f0      	movs	r2, #240	; 0xf0
 80035e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	fa92 f2a2 	rbit	r2, r2
 80035ee:	60fa      	str	r2, [r7, #12]
  return result;
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	fab2 f282 	clz	r2, r2
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	40d3      	lsrs	r3, r2
 80035fa:	4a09      	ldr	r2, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x2ec>)
 80035fc:	5cd3      	ldrb	r3, [r2, r3]
 80035fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003602:	4a08      	ldr	r2, [pc, #32]	; (8003624 <HAL_RCC_ClockConfig+0x2f0>)
 8003604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <HAL_RCC_ClockConfig+0x2f4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd fa76 	bl	8000afc <HAL_InitTick>
  
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3778      	adds	r7, #120	; 0x78
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	080050ac 	.word	0x080050ac
 8003624:	20000000 	.word	0x20000000
 8003628:	20000004 	.word	0x20000004

0800362c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800362c:	b480      	push	{r7}
 800362e:	b08b      	sub	sp, #44	; 0x2c
 8003630:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	2300      	movs	r3, #0
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003646:	4b29      	ldr	r3, [pc, #164]	; (80036ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b04      	cmp	r3, #4
 8003654:	d002      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x30>
 8003656:	2b08      	cmp	r3, #8
 8003658:	d003      	beq.n	8003662 <HAL_RCC_GetSysClockFreq+0x36>
 800365a:	e03c      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800365c:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800365e:	623b      	str	r3, [r7, #32]
      break;
 8003660:	e03c      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003668:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800366c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	fa92 f2a2 	rbit	r2, r2
 8003674:	607a      	str	r2, [r7, #4]
  return result;
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	fab2 f282 	clz	r2, r2
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	40d3      	lsrs	r3, r2
 8003680:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003682:	5cd3      	ldrb	r3, [r2, r3]
 8003684:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003686:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	220f      	movs	r2, #15
 8003690:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	fa92 f2a2 	rbit	r2, r2
 8003698:	60fa      	str	r2, [r7, #12]
  return result;
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	fab2 f282 	clz	r2, r2
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	40d3      	lsrs	r3, r2
 80036a4:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036a6:	5cd3      	ldrb	r3, [r2, r3]
 80036a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036b4:	4a0e      	ldr	r2, [pc, #56]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	fb02 f303 	mul.w	r3, r2, r3
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
 80036c4:	e004      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	4a0c      	ldr	r2, [pc, #48]	; (80036fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	623b      	str	r3, [r7, #32]
      break;
 80036d4:	e002      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036d8:	623b      	str	r3, [r7, #32]
      break;
 80036da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036dc:	6a3b      	ldr	r3, [r7, #32]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	372c      	adds	r7, #44	; 0x2c
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000
 80036f0:	007a1200 	.word	0x007a1200
 80036f4:	080050c4 	.word	0x080050c4
 80036f8:	080050d4 	.word	0x080050d4
 80036fc:	003d0900 	.word	0x003d0900

08003700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <HAL_RCC_GetHCLKFreq+0x14>)
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000000 	.word	0x20000000

08003718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800371e:	f7ff ffef 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 8003722:	4601      	mov	r1, r0
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800372c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003730:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	fa92 f2a2 	rbit	r2, r2
 8003738:	603a      	str	r2, [r7, #0]
  return result;
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	fab2 f282 	clz	r2, r2
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	40d3      	lsrs	r3, r2
 8003744:	4a04      	ldr	r2, [pc, #16]	; (8003758 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	080050bc 	.word	0x080050bc

0800375c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003762:	f7ff ffcd 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 8003766:	4601      	mov	r1, r0
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003770:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003774:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	fa92 f2a2 	rbit	r2, r2
 800377c:	603a      	str	r2, [r7, #0]
  return result;
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	fab2 f282 	clz	r2, r2
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	40d3      	lsrs	r3, r2
 8003788:	4a04      	ldr	r2, [pc, #16]	; (800379c <HAL_RCC_GetPCLK2Freq+0x40>)
 800378a:	5cd3      	ldrb	r3, [r2, r3]
 800378c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000
 800379c:	080050bc 	.word	0x080050bc

080037a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b092      	sub	sp, #72	; 0x48
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80037b0:	2300      	movs	r3, #0
 80037b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80cd 	beq.w	800395e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c4:	4b8e      	ldr	r3, [pc, #568]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10e      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d0:	4b8b      	ldr	r3, [pc, #556]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	4a8a      	ldr	r2, [pc, #552]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037da:	61d3      	str	r3, [r2, #28]
 80037dc:	4b88      	ldr	r3, [pc, #544]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	4b85      	ldr	r3, [pc, #532]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d118      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fa:	4b82      	ldr	r3, [pc, #520]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a81      	ldr	r2, [pc, #516]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003804:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003806:	f7fd f9bd 	bl	8000b84 <HAL_GetTick>
 800380a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	e008      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fd f9b9 	bl	8000b84 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b64      	cmp	r3, #100	; 0x64
 800381a:	d901      	bls.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e0ea      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003820:	4b78      	ldr	r3, [pc, #480]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800382c:	4b74      	ldr	r3, [pc, #464]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003834:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d07d      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003846:	429a      	cmp	r2, r3
 8003848:	d076      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800384a:	4b6d      	ldr	r3, [pc, #436]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003858:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	4b66      	ldr	r3, [pc, #408]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	461a      	mov	r2, r3
 8003874:	2301      	movs	r3, #1
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800387c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003888:	fab3 f383 	clz	r3, r3
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	4b5d      	ldr	r3, [pc, #372]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	461a      	mov	r2, r3
 8003898:	2300      	movs	r3, #0
 800389a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800389c:	4a58      	ldr	r2, [pc, #352]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d045      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fd f96a 	bl	8000b84 <HAL_GetTick>
 80038b0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b2:	e00a      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7fd f966 	bl	8000b84 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e095      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80038ca:	2302      	movs	r3, #2
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	2302      	movs	r3, #2
 80038d8:	623b      	str	r3, [r7, #32]
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	fa93 f3a3 	rbit	r3, r3
 80038e0:	61fb      	str	r3, [r7, #28]
  return result;
 80038e2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e4:	fab3 f383 	clz	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f043 0302 	orr.w	r3, r3, #2
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d102      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80038f8:	4b41      	ldr	r3, [pc, #260]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	e007      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80038fe:	2302      	movs	r3, #2
 8003900:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	fa93 f3a3 	rbit	r3, r3
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	4b3d      	ldr	r3, [pc, #244]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	2202      	movs	r2, #2
 8003910:	613a      	str	r2, [r7, #16]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	fa92 f2a2 	rbit	r2, r2
 8003918:	60fa      	str	r2, [r7, #12]
  return result;
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	fab2 f282 	clz	r2, r2
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	f002 021f 	and.w	r2, r2, #31
 800392c:	2101      	movs	r1, #1
 800392e:	fa01 f202 	lsl.w	r2, r1, r2
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0bd      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003938:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	492e      	ldr	r1, [pc, #184]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003946:	4313      	orrs	r3, r2
 8003948:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800394a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800394e:	2b01      	cmp	r3, #1
 8003950:	d105      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003952:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	4a2a      	ldr	r2, [pc, #168]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800395c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d008      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800396a:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	f023 0203 	bic.w	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	4922      	ldr	r1, [pc, #136]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003978:	4313      	orrs	r3, r2
 800397a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003988:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	f023 0210 	bic.w	r2, r3, #16
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	491a      	ldr	r1, [pc, #104]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003996:	4313      	orrs	r3, r2
 8003998:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039a6:	4b16      	ldr	r3, [pc, #88]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	4913      	ldr	r1, [pc, #76]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80039c4:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	490b      	ldr	r1, [pc, #44]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d008      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80039e2:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	4904      	ldr	r1, [pc, #16]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3748      	adds	r7, #72	; 0x48
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40007000 	.word	0x40007000
 8003a08:	10908100 	.word	0x10908100

08003a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e049      	b.n	8003ab2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fc fefe 	bl	8000834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f000 f9da 	bl	8003e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d001      	beq.n	8003ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e040      	b.n	8003b56 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1c      	ldr	r2, [pc, #112]	; (8003b64 <HAL_TIM_Base_Start_IT+0xa8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00e      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x58>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d009      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x58>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a18      	ldr	r2, [pc, #96]	; (8003b68 <HAL_TIM_Base_Start_IT+0xac>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x58>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a17      	ldr	r2, [pc, #92]	; (8003b6c <HAL_TIM_Base_Start_IT+0xb0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d115      	bne.n	8003b40 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b06      	cmp	r3, #6
 8003b24:	d015      	beq.n	8003b52 <HAL_TIM_Base_Start_IT+0x96>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2c:	d011      	beq.n	8003b52 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0201 	orr.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3e:	e008      	b.n	8003b52 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e000      	b.n	8003b54 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40012c00 	.word	0x40012c00
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40014000 	.word	0x40014000
 8003b70:	00010007 	.word	0x00010007

08003b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d122      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d11b      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0202 	mvn.w	r2, #2
 8003ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f905 	bl	8003dc6 <HAL_TIM_IC_CaptureCallback>
 8003bbc:	e005      	b.n	8003bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f8f7 	bl	8003db2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f908 	bl	8003dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d122      	bne.n	8003c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d11b      	bne.n	8003c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0204 	mvn.w	r2, #4
 8003bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f8db 	bl	8003dc6 <HAL_TIM_IC_CaptureCallback>
 8003c10:	e005      	b.n	8003c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f8cd 	bl	8003db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f8de 	bl	8003dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d122      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d11b      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0208 	mvn.w	r2, #8
 8003c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8b1 	bl	8003dc6 <HAL_TIM_IC_CaptureCallback>
 8003c64:	e005      	b.n	8003c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f8a3 	bl	8003db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f8b4 	bl	8003dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d122      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d11b      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0210 	mvn.w	r2, #16
 8003c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f887 	bl	8003dc6 <HAL_TIM_IC_CaptureCallback>
 8003cb8:	e005      	b.n	8003cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f879 	bl	8003db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f88a 	bl	8003dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d107      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0201 	mvn.w	r2, #1
 8003cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fc fcf6 	bl	80006e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b80      	cmp	r3, #128	; 0x80
 8003d04:	d10e      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	d107      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f960 	bl	8003fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d32:	d10e      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b80      	cmp	r3, #128	; 0x80
 8003d40:	d107      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f953 	bl	8003ff8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5c:	2b40      	cmp	r3, #64	; 0x40
 8003d5e:	d10e      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d107      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f838 	bl	8003dee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d10e      	bne.n	8003daa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d107      	bne.n	8003daa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f06f 0220 	mvn.w	r2, #32
 8003da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f913 	bl	8003fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a32      	ldr	r2, [pc, #200]	; (8003ee0 <TIM_Base_SetConfig+0xdc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d007      	beq.n	8003e2c <TIM_Base_SetConfig+0x28>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e22:	d003      	beq.n	8003e2c <TIM_Base_SetConfig+0x28>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a2f      	ldr	r2, [pc, #188]	; (8003ee4 <TIM_Base_SetConfig+0xe0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d108      	bne.n	8003e3e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a27      	ldr	r2, [pc, #156]	; (8003ee0 <TIM_Base_SetConfig+0xdc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <TIM_Base_SetConfig+0x6a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4c:	d00f      	beq.n	8003e6e <TIM_Base_SetConfig+0x6a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a24      	ldr	r2, [pc, #144]	; (8003ee4 <TIM_Base_SetConfig+0xe0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00b      	beq.n	8003e6e <TIM_Base_SetConfig+0x6a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <TIM_Base_SetConfig+0xe4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d007      	beq.n	8003e6e <TIM_Base_SetConfig+0x6a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a22      	ldr	r2, [pc, #136]	; (8003eec <TIM_Base_SetConfig+0xe8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d003      	beq.n	8003e6e <TIM_Base_SetConfig+0x6a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a21      	ldr	r2, [pc, #132]	; (8003ef0 <TIM_Base_SetConfig+0xec>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d108      	bne.n	8003e80 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <TIM_Base_SetConfig+0xdc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00b      	beq.n	8003ec4 <TIM_Base_SetConfig+0xc0>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a0e      	ldr	r2, [pc, #56]	; (8003ee8 <TIM_Base_SetConfig+0xe4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d007      	beq.n	8003ec4 <TIM_Base_SetConfig+0xc0>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <TIM_Base_SetConfig+0xe8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_Base_SetConfig+0xc0>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a0c      	ldr	r2, [pc, #48]	; (8003ef0 <TIM_Base_SetConfig+0xec>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d103      	bne.n	8003ecc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	615a      	str	r2, [r3, #20]
}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40000400 	.word	0x40000400
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40014400 	.word	0x40014400
 8003ef0:	40014800 	.word	0x40014800

08003ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e054      	b.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a24      	ldr	r2, [pc, #144]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d108      	bne.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00e      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f74:	d009      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a13      	ldr	r2, [pc, #76]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d004      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a11      	ldr	r2, [pc, #68]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d10c      	bne.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40014000 	.word	0x40014000

08003fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e040      	b.n	80040a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fc fc26 	bl	8000880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2224      	movs	r2, #36	; 0x24
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0201 	bic.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f82c 	bl	80040a8 <UART_SetConfig>
 8004050:	4603      	mov	r3, r0
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e022      	b.n	80040a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f956 	bl	8004314 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004076:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004086:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f9dd 	bl	8004458 <UART_CheckIdleState>
 800409e:	4603      	mov	r3, r0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b8a      	ldr	r3, [pc, #552]	; (80042fc <UART_SetConfig+0x254>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	6979      	ldr	r1, [r7, #20]
 80040dc:	430b      	orrs	r3, r1
 80040de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	430a      	orrs	r2, r1
 8004118:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a78      	ldr	r2, [pc, #480]	; (8004300 <UART_SetConfig+0x258>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d120      	bne.n	8004166 <UART_SetConfig+0xbe>
 8004124:	4b77      	ldr	r3, [pc, #476]	; (8004304 <UART_SetConfig+0x25c>)
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	2b03      	cmp	r3, #3
 800412e:	d817      	bhi.n	8004160 <UART_SetConfig+0xb8>
 8004130:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <UART_SetConfig+0x90>)
 8004132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004136:	bf00      	nop
 8004138:	08004149 	.word	0x08004149
 800413c:	08004155 	.word	0x08004155
 8004140:	0800415b 	.word	0x0800415b
 8004144:	0800414f 	.word	0x0800414f
 8004148:	2300      	movs	r3, #0
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e01d      	b.n	800418a <UART_SetConfig+0xe2>
 800414e:	2302      	movs	r3, #2
 8004150:	77fb      	strb	r3, [r7, #31]
 8004152:	e01a      	b.n	800418a <UART_SetConfig+0xe2>
 8004154:	2304      	movs	r3, #4
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e017      	b.n	800418a <UART_SetConfig+0xe2>
 800415a:	2308      	movs	r3, #8
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	e014      	b.n	800418a <UART_SetConfig+0xe2>
 8004160:	2310      	movs	r3, #16
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e011      	b.n	800418a <UART_SetConfig+0xe2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a67      	ldr	r2, [pc, #412]	; (8004308 <UART_SetConfig+0x260>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d102      	bne.n	8004176 <UART_SetConfig+0xce>
 8004170:	2300      	movs	r3, #0
 8004172:	77fb      	strb	r3, [r7, #31]
 8004174:	e009      	b.n	800418a <UART_SetConfig+0xe2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a64      	ldr	r2, [pc, #400]	; (800430c <UART_SetConfig+0x264>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d102      	bne.n	8004186 <UART_SetConfig+0xde>
 8004180:	2300      	movs	r3, #0
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	e001      	b.n	800418a <UART_SetConfig+0xe2>
 8004186:	2310      	movs	r3, #16
 8004188:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004192:	d15a      	bne.n	800424a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004194:	7ffb      	ldrb	r3, [r7, #31]
 8004196:	2b08      	cmp	r3, #8
 8004198:	d827      	bhi.n	80041ea <UART_SetConfig+0x142>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <UART_SetConfig+0xf8>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	080041cd 	.word	0x080041cd
 80041a8:	080041d5 	.word	0x080041d5
 80041ac:	080041eb 	.word	0x080041eb
 80041b0:	080041db 	.word	0x080041db
 80041b4:	080041eb 	.word	0x080041eb
 80041b8:	080041eb 	.word	0x080041eb
 80041bc:	080041eb 	.word	0x080041eb
 80041c0:	080041e3 	.word	0x080041e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c4:	f7ff faa8 	bl	8003718 <HAL_RCC_GetPCLK1Freq>
 80041c8:	61b8      	str	r0, [r7, #24]
        break;
 80041ca:	e013      	b.n	80041f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041cc:	f7ff fac6 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 80041d0:	61b8      	str	r0, [r7, #24]
        break;
 80041d2:	e00f      	b.n	80041f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d4:	4b4e      	ldr	r3, [pc, #312]	; (8004310 <UART_SetConfig+0x268>)
 80041d6:	61bb      	str	r3, [r7, #24]
        break;
 80041d8:	e00c      	b.n	80041f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041da:	f7ff fa27 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80041de:	61b8      	str	r0, [r7, #24]
        break;
 80041e0:	e008      	b.n	80041f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e6:	61bb      	str	r3, [r7, #24]
        break;
 80041e8:	e004      	b.n	80041f4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	77bb      	strb	r3, [r7, #30]
        break;
 80041f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d074      	beq.n	80042e4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	005a      	lsls	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	441a      	add	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	fbb2 f3f3 	udiv	r3, r2, r3
 800420e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b0f      	cmp	r3, #15
 8004214:	d916      	bls.n	8004244 <UART_SetConfig+0x19c>
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421c:	d212      	bcs.n	8004244 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	b29b      	uxth	r3, r3
 8004222:	f023 030f 	bic.w	r3, r3, #15
 8004226:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	085b      	lsrs	r3, r3, #1
 800422c:	b29b      	uxth	r3, r3
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	b29a      	uxth	r2, r3
 8004234:	89fb      	ldrh	r3, [r7, #14]
 8004236:	4313      	orrs	r3, r2
 8004238:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	89fa      	ldrh	r2, [r7, #14]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	e04f      	b.n	80042e4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	77bb      	strb	r3, [r7, #30]
 8004248:	e04c      	b.n	80042e4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800424a:	7ffb      	ldrb	r3, [r7, #31]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d828      	bhi.n	80042a2 <UART_SetConfig+0x1fa>
 8004250:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <UART_SetConfig+0x1b0>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	0800427d 	.word	0x0800427d
 800425c:	08004285 	.word	0x08004285
 8004260:	0800428d 	.word	0x0800428d
 8004264:	080042a3 	.word	0x080042a3
 8004268:	08004293 	.word	0x08004293
 800426c:	080042a3 	.word	0x080042a3
 8004270:	080042a3 	.word	0x080042a3
 8004274:	080042a3 	.word	0x080042a3
 8004278:	0800429b 	.word	0x0800429b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800427c:	f7ff fa4c 	bl	8003718 <HAL_RCC_GetPCLK1Freq>
 8004280:	61b8      	str	r0, [r7, #24]
        break;
 8004282:	e013      	b.n	80042ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004284:	f7ff fa6a 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 8004288:	61b8      	str	r0, [r7, #24]
        break;
 800428a:	e00f      	b.n	80042ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800428c:	4b20      	ldr	r3, [pc, #128]	; (8004310 <UART_SetConfig+0x268>)
 800428e:	61bb      	str	r3, [r7, #24]
        break;
 8004290:	e00c      	b.n	80042ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004292:	f7ff f9cb 	bl	800362c <HAL_RCC_GetSysClockFreq>
 8004296:	61b8      	str	r0, [r7, #24]
        break;
 8004298:	e008      	b.n	80042ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800429a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800429e:	61bb      	str	r3, [r7, #24]
        break;
 80042a0:	e004      	b.n	80042ac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	77bb      	strb	r3, [r7, #30]
        break;
 80042aa:	bf00      	nop
    }

    if (pclk != 0U)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d018      	beq.n	80042e4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	085a      	lsrs	r2, r3, #1
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	441a      	add	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b0f      	cmp	r3, #15
 80042ca:	d909      	bls.n	80042e0 <UART_SetConfig+0x238>
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d2:	d205      	bcs.n	80042e0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	e001      	b.n	80042e4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80042f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	efff69f3 	.word	0xefff69f3
 8004300:	40013800 	.word	0x40013800
 8004304:	40021000 	.word	0x40021000
 8004308:	40004400 	.word	0x40004400
 800430c:	40004800 	.word	0x40004800
 8004310:	007a1200 	.word	0x007a1200

08004314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01a      	beq.n	800442a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004412:	d10a      	bne.n	800442a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	605a      	str	r2, [r3, #4]
  }
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b098      	sub	sp, #96	; 0x60
 800445c:	af02      	add	r7, sp, #8
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004468:	f7fc fb8c 	bl	8000b84 <HAL_GetTick>
 800446c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b08      	cmp	r3, #8
 800447a:	d12e      	bne.n	80044da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800447c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004484:	2200      	movs	r2, #0
 8004486:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f88c 	bl	80045a8 <UART_WaitOnFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d021      	beq.n	80044da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044aa:	653b      	str	r3, [r7, #80]	; 0x50
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044b4:	647b      	str	r3, [r7, #68]	; 0x44
 80044b6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e6      	bne.n	8004496 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e062      	b.n	80045a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d149      	bne.n	800457c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f0:	2200      	movs	r2, #0
 80044f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f856 	bl	80045a8 <UART_WaitOnFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d03c      	beq.n	800457c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	623b      	str	r3, [r7, #32]
   return(result);
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004520:	633b      	str	r3, [r7, #48]	; 0x30
 8004522:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e6      	bne.n	8004502 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3308      	adds	r3, #8
 800453a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	60fb      	str	r3, [r7, #12]
   return(result);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	64bb      	str	r3, [r7, #72]	; 0x48
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3308      	adds	r3, #8
 8004552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004554:	61fa      	str	r2, [r7, #28]
 8004556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	69b9      	ldr	r1, [r7, #24]
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	617b      	str	r3, [r7, #20]
   return(result);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e5      	bne.n	8004534 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e011      	b.n	80045a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3758      	adds	r7, #88	; 0x58
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b8:	e049      	b.n	800464e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d045      	beq.n	800464e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c2:	f7fc fadf 	bl	8000b84 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d302      	bcc.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e048      	b.n	800466e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d031      	beq.n	800464e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d110      	bne.n	800461a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2208      	movs	r2, #8
 80045fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f838 	bl	8004676 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2208      	movs	r2, #8
 800460a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e029      	b.n	800466e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004628:	d111      	bne.n	800464e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f81e 	bl	8004676 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e00f      	b.n	800466e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4013      	ands	r3, r2
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	429a      	cmp	r2, r3
 800465c:	bf0c      	ite	eq
 800465e:	2301      	moveq	r3, #1
 8004660:	2300      	movne	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	429a      	cmp	r2, r3
 800466a:	d0a6      	beq.n	80045ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004676:	b480      	push	{r7}
 8004678:	b095      	sub	sp, #84	; 0x54
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469c:	643b      	str	r3, [r7, #64]	; 0x40
 800469e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e6      	bne.n	800467e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3308      	adds	r3, #8
 80046b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	61fb      	str	r3, [r7, #28]
   return(result);
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3308      	adds	r3, #8
 80046ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d8:	e841 2300 	strex	r3, r2, [r1]
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e5      	bne.n	80046b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d118      	bne.n	800471e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	e853 3f00 	ldrex	r3, [r3]
 80046f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f023 0310 	bic.w	r3, r3, #16
 8004700:	647b      	str	r3, [r7, #68]	; 0x44
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	6979      	ldr	r1, [r7, #20]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	613b      	str	r3, [r7, #16]
   return(result);
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e6      	bne.n	80046ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004732:	bf00      	nop
 8004734:	3754      	adds	r7, #84	; 0x54
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <__errno>:
 8004740:	4b01      	ldr	r3, [pc, #4]	; (8004748 <__errno+0x8>)
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	2000000c 	.word	0x2000000c

0800474c <__libc_init_array>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	4d0d      	ldr	r5, [pc, #52]	; (8004784 <__libc_init_array+0x38>)
 8004750:	4c0d      	ldr	r4, [pc, #52]	; (8004788 <__libc_init_array+0x3c>)
 8004752:	1b64      	subs	r4, r4, r5
 8004754:	10a4      	asrs	r4, r4, #2
 8004756:	2600      	movs	r6, #0
 8004758:	42a6      	cmp	r6, r4
 800475a:	d109      	bne.n	8004770 <__libc_init_array+0x24>
 800475c:	4d0b      	ldr	r5, [pc, #44]	; (800478c <__libc_init_array+0x40>)
 800475e:	4c0c      	ldr	r4, [pc, #48]	; (8004790 <__libc_init_array+0x44>)
 8004760:	f000 fc8e 	bl	8005080 <_init>
 8004764:	1b64      	subs	r4, r4, r5
 8004766:	10a4      	asrs	r4, r4, #2
 8004768:	2600      	movs	r6, #0
 800476a:	42a6      	cmp	r6, r4
 800476c:	d105      	bne.n	800477a <__libc_init_array+0x2e>
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	f855 3b04 	ldr.w	r3, [r5], #4
 8004774:	4798      	blx	r3
 8004776:	3601      	adds	r6, #1
 8004778:	e7ee      	b.n	8004758 <__libc_init_array+0xc>
 800477a:	f855 3b04 	ldr.w	r3, [r5], #4
 800477e:	4798      	blx	r3
 8004780:	3601      	adds	r6, #1
 8004782:	e7f2      	b.n	800476a <__libc_init_array+0x1e>
 8004784:	08005118 	.word	0x08005118
 8004788:	08005118 	.word	0x08005118
 800478c:	08005118 	.word	0x08005118
 8004790:	0800511c 	.word	0x0800511c

08004794 <memset>:
 8004794:	4402      	add	r2, r0
 8004796:	4603      	mov	r3, r0
 8004798:	4293      	cmp	r3, r2
 800479a:	d100      	bne.n	800479e <memset+0xa>
 800479c:	4770      	bx	lr
 800479e:	f803 1b01 	strb.w	r1, [r3], #1
 80047a2:	e7f9      	b.n	8004798 <memset+0x4>

080047a4 <siprintf>:
 80047a4:	b40e      	push	{r1, r2, r3}
 80047a6:	b500      	push	{lr}
 80047a8:	b09c      	sub	sp, #112	; 0x70
 80047aa:	ab1d      	add	r3, sp, #116	; 0x74
 80047ac:	9002      	str	r0, [sp, #8]
 80047ae:	9006      	str	r0, [sp, #24]
 80047b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047b4:	4809      	ldr	r0, [pc, #36]	; (80047dc <siprintf+0x38>)
 80047b6:	9107      	str	r1, [sp, #28]
 80047b8:	9104      	str	r1, [sp, #16]
 80047ba:	4909      	ldr	r1, [pc, #36]	; (80047e0 <siprintf+0x3c>)
 80047bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80047c0:	9105      	str	r1, [sp, #20]
 80047c2:	6800      	ldr	r0, [r0, #0]
 80047c4:	9301      	str	r3, [sp, #4]
 80047c6:	a902      	add	r1, sp, #8
 80047c8:	f000 f868 	bl	800489c <_svfiprintf_r>
 80047cc:	9b02      	ldr	r3, [sp, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	b01c      	add	sp, #112	; 0x70
 80047d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047d8:	b003      	add	sp, #12
 80047da:	4770      	bx	lr
 80047dc:	2000000c 	.word	0x2000000c
 80047e0:	ffff0208 	.word	0xffff0208

080047e4 <__ssputs_r>:
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	688e      	ldr	r6, [r1, #8]
 80047ea:	429e      	cmp	r6, r3
 80047ec:	4682      	mov	sl, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	4690      	mov	r8, r2
 80047f2:	461f      	mov	r7, r3
 80047f4:	d838      	bhi.n	8004868 <__ssputs_r+0x84>
 80047f6:	898a      	ldrh	r2, [r1, #12]
 80047f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047fc:	d032      	beq.n	8004864 <__ssputs_r+0x80>
 80047fe:	6825      	ldr	r5, [r4, #0]
 8004800:	6909      	ldr	r1, [r1, #16]
 8004802:	eba5 0901 	sub.w	r9, r5, r1
 8004806:	6965      	ldr	r5, [r4, #20]
 8004808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800480c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004810:	3301      	adds	r3, #1
 8004812:	444b      	add	r3, r9
 8004814:	106d      	asrs	r5, r5, #1
 8004816:	429d      	cmp	r5, r3
 8004818:	bf38      	it	cc
 800481a:	461d      	movcc	r5, r3
 800481c:	0553      	lsls	r3, r2, #21
 800481e:	d531      	bpl.n	8004884 <__ssputs_r+0xa0>
 8004820:	4629      	mov	r1, r5
 8004822:	f000 fb63 	bl	8004eec <_malloc_r>
 8004826:	4606      	mov	r6, r0
 8004828:	b950      	cbnz	r0, 8004840 <__ssputs_r+0x5c>
 800482a:	230c      	movs	r3, #12
 800482c:	f8ca 3000 	str.w	r3, [sl]
 8004830:	89a3      	ldrh	r3, [r4, #12]
 8004832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004836:	81a3      	strh	r3, [r4, #12]
 8004838:	f04f 30ff 	mov.w	r0, #4294967295
 800483c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004840:	6921      	ldr	r1, [r4, #16]
 8004842:	464a      	mov	r2, r9
 8004844:	f000 fabe 	bl	8004dc4 <memcpy>
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800484e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004852:	81a3      	strh	r3, [r4, #12]
 8004854:	6126      	str	r6, [r4, #16]
 8004856:	6165      	str	r5, [r4, #20]
 8004858:	444e      	add	r6, r9
 800485a:	eba5 0509 	sub.w	r5, r5, r9
 800485e:	6026      	str	r6, [r4, #0]
 8004860:	60a5      	str	r5, [r4, #8]
 8004862:	463e      	mov	r6, r7
 8004864:	42be      	cmp	r6, r7
 8004866:	d900      	bls.n	800486a <__ssputs_r+0x86>
 8004868:	463e      	mov	r6, r7
 800486a:	6820      	ldr	r0, [r4, #0]
 800486c:	4632      	mov	r2, r6
 800486e:	4641      	mov	r1, r8
 8004870:	f000 fab6 	bl	8004de0 <memmove>
 8004874:	68a3      	ldr	r3, [r4, #8]
 8004876:	1b9b      	subs	r3, r3, r6
 8004878:	60a3      	str	r3, [r4, #8]
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	4433      	add	r3, r6
 800487e:	6023      	str	r3, [r4, #0]
 8004880:	2000      	movs	r0, #0
 8004882:	e7db      	b.n	800483c <__ssputs_r+0x58>
 8004884:	462a      	mov	r2, r5
 8004886:	f000 fba5 	bl	8004fd4 <_realloc_r>
 800488a:	4606      	mov	r6, r0
 800488c:	2800      	cmp	r0, #0
 800488e:	d1e1      	bne.n	8004854 <__ssputs_r+0x70>
 8004890:	6921      	ldr	r1, [r4, #16]
 8004892:	4650      	mov	r0, sl
 8004894:	f000 fabe 	bl	8004e14 <_free_r>
 8004898:	e7c7      	b.n	800482a <__ssputs_r+0x46>
	...

0800489c <_svfiprintf_r>:
 800489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a0:	4698      	mov	r8, r3
 80048a2:	898b      	ldrh	r3, [r1, #12]
 80048a4:	061b      	lsls	r3, r3, #24
 80048a6:	b09d      	sub	sp, #116	; 0x74
 80048a8:	4607      	mov	r7, r0
 80048aa:	460d      	mov	r5, r1
 80048ac:	4614      	mov	r4, r2
 80048ae:	d50e      	bpl.n	80048ce <_svfiprintf_r+0x32>
 80048b0:	690b      	ldr	r3, [r1, #16]
 80048b2:	b963      	cbnz	r3, 80048ce <_svfiprintf_r+0x32>
 80048b4:	2140      	movs	r1, #64	; 0x40
 80048b6:	f000 fb19 	bl	8004eec <_malloc_r>
 80048ba:	6028      	str	r0, [r5, #0]
 80048bc:	6128      	str	r0, [r5, #16]
 80048be:	b920      	cbnz	r0, 80048ca <_svfiprintf_r+0x2e>
 80048c0:	230c      	movs	r3, #12
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295
 80048c8:	e0d1      	b.n	8004a6e <_svfiprintf_r+0x1d2>
 80048ca:	2340      	movs	r3, #64	; 0x40
 80048cc:	616b      	str	r3, [r5, #20]
 80048ce:	2300      	movs	r3, #0
 80048d0:	9309      	str	r3, [sp, #36]	; 0x24
 80048d2:	2320      	movs	r3, #32
 80048d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80048dc:	2330      	movs	r3, #48	; 0x30
 80048de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a88 <_svfiprintf_r+0x1ec>
 80048e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048e6:	f04f 0901 	mov.w	r9, #1
 80048ea:	4623      	mov	r3, r4
 80048ec:	469a      	mov	sl, r3
 80048ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048f2:	b10a      	cbz	r2, 80048f8 <_svfiprintf_r+0x5c>
 80048f4:	2a25      	cmp	r2, #37	; 0x25
 80048f6:	d1f9      	bne.n	80048ec <_svfiprintf_r+0x50>
 80048f8:	ebba 0b04 	subs.w	fp, sl, r4
 80048fc:	d00b      	beq.n	8004916 <_svfiprintf_r+0x7a>
 80048fe:	465b      	mov	r3, fp
 8004900:	4622      	mov	r2, r4
 8004902:	4629      	mov	r1, r5
 8004904:	4638      	mov	r0, r7
 8004906:	f7ff ff6d 	bl	80047e4 <__ssputs_r>
 800490a:	3001      	adds	r0, #1
 800490c:	f000 80aa 	beq.w	8004a64 <_svfiprintf_r+0x1c8>
 8004910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004912:	445a      	add	r2, fp
 8004914:	9209      	str	r2, [sp, #36]	; 0x24
 8004916:	f89a 3000 	ldrb.w	r3, [sl]
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80a2 	beq.w	8004a64 <_svfiprintf_r+0x1c8>
 8004920:	2300      	movs	r3, #0
 8004922:	f04f 32ff 	mov.w	r2, #4294967295
 8004926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800492a:	f10a 0a01 	add.w	sl, sl, #1
 800492e:	9304      	str	r3, [sp, #16]
 8004930:	9307      	str	r3, [sp, #28]
 8004932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004936:	931a      	str	r3, [sp, #104]	; 0x68
 8004938:	4654      	mov	r4, sl
 800493a:	2205      	movs	r2, #5
 800493c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004940:	4851      	ldr	r0, [pc, #324]	; (8004a88 <_svfiprintf_r+0x1ec>)
 8004942:	f7fb fc4d 	bl	80001e0 <memchr>
 8004946:	9a04      	ldr	r2, [sp, #16]
 8004948:	b9d8      	cbnz	r0, 8004982 <_svfiprintf_r+0xe6>
 800494a:	06d0      	lsls	r0, r2, #27
 800494c:	bf44      	itt	mi
 800494e:	2320      	movmi	r3, #32
 8004950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004954:	0711      	lsls	r1, r2, #28
 8004956:	bf44      	itt	mi
 8004958:	232b      	movmi	r3, #43	; 0x2b
 800495a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800495e:	f89a 3000 	ldrb.w	r3, [sl]
 8004962:	2b2a      	cmp	r3, #42	; 0x2a
 8004964:	d015      	beq.n	8004992 <_svfiprintf_r+0xf6>
 8004966:	9a07      	ldr	r2, [sp, #28]
 8004968:	4654      	mov	r4, sl
 800496a:	2000      	movs	r0, #0
 800496c:	f04f 0c0a 	mov.w	ip, #10
 8004970:	4621      	mov	r1, r4
 8004972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004976:	3b30      	subs	r3, #48	; 0x30
 8004978:	2b09      	cmp	r3, #9
 800497a:	d94e      	bls.n	8004a1a <_svfiprintf_r+0x17e>
 800497c:	b1b0      	cbz	r0, 80049ac <_svfiprintf_r+0x110>
 800497e:	9207      	str	r2, [sp, #28]
 8004980:	e014      	b.n	80049ac <_svfiprintf_r+0x110>
 8004982:	eba0 0308 	sub.w	r3, r0, r8
 8004986:	fa09 f303 	lsl.w	r3, r9, r3
 800498a:	4313      	orrs	r3, r2
 800498c:	9304      	str	r3, [sp, #16]
 800498e:	46a2      	mov	sl, r4
 8004990:	e7d2      	b.n	8004938 <_svfiprintf_r+0x9c>
 8004992:	9b03      	ldr	r3, [sp, #12]
 8004994:	1d19      	adds	r1, r3, #4
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	9103      	str	r1, [sp, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	bfbb      	ittet	lt
 800499e:	425b      	neglt	r3, r3
 80049a0:	f042 0202 	orrlt.w	r2, r2, #2
 80049a4:	9307      	strge	r3, [sp, #28]
 80049a6:	9307      	strlt	r3, [sp, #28]
 80049a8:	bfb8      	it	lt
 80049aa:	9204      	strlt	r2, [sp, #16]
 80049ac:	7823      	ldrb	r3, [r4, #0]
 80049ae:	2b2e      	cmp	r3, #46	; 0x2e
 80049b0:	d10c      	bne.n	80049cc <_svfiprintf_r+0x130>
 80049b2:	7863      	ldrb	r3, [r4, #1]
 80049b4:	2b2a      	cmp	r3, #42	; 0x2a
 80049b6:	d135      	bne.n	8004a24 <_svfiprintf_r+0x188>
 80049b8:	9b03      	ldr	r3, [sp, #12]
 80049ba:	1d1a      	adds	r2, r3, #4
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	9203      	str	r2, [sp, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bfb8      	it	lt
 80049c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80049c8:	3402      	adds	r4, #2
 80049ca:	9305      	str	r3, [sp, #20]
 80049cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a98 <_svfiprintf_r+0x1fc>
 80049d0:	7821      	ldrb	r1, [r4, #0]
 80049d2:	2203      	movs	r2, #3
 80049d4:	4650      	mov	r0, sl
 80049d6:	f7fb fc03 	bl	80001e0 <memchr>
 80049da:	b140      	cbz	r0, 80049ee <_svfiprintf_r+0x152>
 80049dc:	2340      	movs	r3, #64	; 0x40
 80049de:	eba0 000a 	sub.w	r0, r0, sl
 80049e2:	fa03 f000 	lsl.w	r0, r3, r0
 80049e6:	9b04      	ldr	r3, [sp, #16]
 80049e8:	4303      	orrs	r3, r0
 80049ea:	3401      	adds	r4, #1
 80049ec:	9304      	str	r3, [sp, #16]
 80049ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049f2:	4826      	ldr	r0, [pc, #152]	; (8004a8c <_svfiprintf_r+0x1f0>)
 80049f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049f8:	2206      	movs	r2, #6
 80049fa:	f7fb fbf1 	bl	80001e0 <memchr>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d038      	beq.n	8004a74 <_svfiprintf_r+0x1d8>
 8004a02:	4b23      	ldr	r3, [pc, #140]	; (8004a90 <_svfiprintf_r+0x1f4>)
 8004a04:	bb1b      	cbnz	r3, 8004a4e <_svfiprintf_r+0x1b2>
 8004a06:	9b03      	ldr	r3, [sp, #12]
 8004a08:	3307      	adds	r3, #7
 8004a0a:	f023 0307 	bic.w	r3, r3, #7
 8004a0e:	3308      	adds	r3, #8
 8004a10:	9303      	str	r3, [sp, #12]
 8004a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a14:	4433      	add	r3, r6
 8004a16:	9309      	str	r3, [sp, #36]	; 0x24
 8004a18:	e767      	b.n	80048ea <_svfiprintf_r+0x4e>
 8004a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a1e:	460c      	mov	r4, r1
 8004a20:	2001      	movs	r0, #1
 8004a22:	e7a5      	b.n	8004970 <_svfiprintf_r+0xd4>
 8004a24:	2300      	movs	r3, #0
 8004a26:	3401      	adds	r4, #1
 8004a28:	9305      	str	r3, [sp, #20]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	f04f 0c0a 	mov.w	ip, #10
 8004a30:	4620      	mov	r0, r4
 8004a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a36:	3a30      	subs	r2, #48	; 0x30
 8004a38:	2a09      	cmp	r2, #9
 8004a3a:	d903      	bls.n	8004a44 <_svfiprintf_r+0x1a8>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0c5      	beq.n	80049cc <_svfiprintf_r+0x130>
 8004a40:	9105      	str	r1, [sp, #20]
 8004a42:	e7c3      	b.n	80049cc <_svfiprintf_r+0x130>
 8004a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a48:	4604      	mov	r4, r0
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e7f0      	b.n	8004a30 <_svfiprintf_r+0x194>
 8004a4e:	ab03      	add	r3, sp, #12
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	462a      	mov	r2, r5
 8004a54:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <_svfiprintf_r+0x1f8>)
 8004a56:	a904      	add	r1, sp, #16
 8004a58:	4638      	mov	r0, r7
 8004a5a:	f3af 8000 	nop.w
 8004a5e:	1c42      	adds	r2, r0, #1
 8004a60:	4606      	mov	r6, r0
 8004a62:	d1d6      	bne.n	8004a12 <_svfiprintf_r+0x176>
 8004a64:	89ab      	ldrh	r3, [r5, #12]
 8004a66:	065b      	lsls	r3, r3, #25
 8004a68:	f53f af2c 	bmi.w	80048c4 <_svfiprintf_r+0x28>
 8004a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a6e:	b01d      	add	sp, #116	; 0x74
 8004a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a74:	ab03      	add	r3, sp, #12
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	462a      	mov	r2, r5
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <_svfiprintf_r+0x1f8>)
 8004a7c:	a904      	add	r1, sp, #16
 8004a7e:	4638      	mov	r0, r7
 8004a80:	f000 f87a 	bl	8004b78 <_printf_i>
 8004a84:	e7eb      	b.n	8004a5e <_svfiprintf_r+0x1c2>
 8004a86:	bf00      	nop
 8004a88:	080050e4 	.word	0x080050e4
 8004a8c:	080050ee 	.word	0x080050ee
 8004a90:	00000000 	.word	0x00000000
 8004a94:	080047e5 	.word	0x080047e5
 8004a98:	080050ea 	.word	0x080050ea

08004a9c <_printf_common>:
 8004a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	4616      	mov	r6, r2
 8004aa2:	4699      	mov	r9, r3
 8004aa4:	688a      	ldr	r2, [r1, #8]
 8004aa6:	690b      	ldr	r3, [r1, #16]
 8004aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aac:	4293      	cmp	r3, r2
 8004aae:	bfb8      	it	lt
 8004ab0:	4613      	movlt	r3, r2
 8004ab2:	6033      	str	r3, [r6, #0]
 8004ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ab8:	4607      	mov	r7, r0
 8004aba:	460c      	mov	r4, r1
 8004abc:	b10a      	cbz	r2, 8004ac2 <_printf_common+0x26>
 8004abe:	3301      	adds	r3, #1
 8004ac0:	6033      	str	r3, [r6, #0]
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	0699      	lsls	r1, r3, #26
 8004ac6:	bf42      	ittt	mi
 8004ac8:	6833      	ldrmi	r3, [r6, #0]
 8004aca:	3302      	addmi	r3, #2
 8004acc:	6033      	strmi	r3, [r6, #0]
 8004ace:	6825      	ldr	r5, [r4, #0]
 8004ad0:	f015 0506 	ands.w	r5, r5, #6
 8004ad4:	d106      	bne.n	8004ae4 <_printf_common+0x48>
 8004ad6:	f104 0a19 	add.w	sl, r4, #25
 8004ada:	68e3      	ldr	r3, [r4, #12]
 8004adc:	6832      	ldr	r2, [r6, #0]
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	42ab      	cmp	r3, r5
 8004ae2:	dc26      	bgt.n	8004b32 <_printf_common+0x96>
 8004ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ae8:	1e13      	subs	r3, r2, #0
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	bf18      	it	ne
 8004aee:	2301      	movne	r3, #1
 8004af0:	0692      	lsls	r2, r2, #26
 8004af2:	d42b      	bmi.n	8004b4c <_printf_common+0xb0>
 8004af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004af8:	4649      	mov	r1, r9
 8004afa:	4638      	mov	r0, r7
 8004afc:	47c0      	blx	r8
 8004afe:	3001      	adds	r0, #1
 8004b00:	d01e      	beq.n	8004b40 <_printf_common+0xa4>
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	68e5      	ldr	r5, [r4, #12]
 8004b06:	6832      	ldr	r2, [r6, #0]
 8004b08:	f003 0306 	and.w	r3, r3, #6
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	bf08      	it	eq
 8004b10:	1aad      	subeq	r5, r5, r2
 8004b12:	68a3      	ldr	r3, [r4, #8]
 8004b14:	6922      	ldr	r2, [r4, #16]
 8004b16:	bf0c      	ite	eq
 8004b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b1c:	2500      	movne	r5, #0
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	bfc4      	itt	gt
 8004b22:	1a9b      	subgt	r3, r3, r2
 8004b24:	18ed      	addgt	r5, r5, r3
 8004b26:	2600      	movs	r6, #0
 8004b28:	341a      	adds	r4, #26
 8004b2a:	42b5      	cmp	r5, r6
 8004b2c:	d11a      	bne.n	8004b64 <_printf_common+0xc8>
 8004b2e:	2000      	movs	r0, #0
 8004b30:	e008      	b.n	8004b44 <_printf_common+0xa8>
 8004b32:	2301      	movs	r3, #1
 8004b34:	4652      	mov	r2, sl
 8004b36:	4649      	mov	r1, r9
 8004b38:	4638      	mov	r0, r7
 8004b3a:	47c0      	blx	r8
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d103      	bne.n	8004b48 <_printf_common+0xac>
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295
 8004b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b48:	3501      	adds	r5, #1
 8004b4a:	e7c6      	b.n	8004ada <_printf_common+0x3e>
 8004b4c:	18e1      	adds	r1, r4, r3
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	2030      	movs	r0, #48	; 0x30
 8004b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b56:	4422      	add	r2, r4
 8004b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b60:	3302      	adds	r3, #2
 8004b62:	e7c7      	b.n	8004af4 <_printf_common+0x58>
 8004b64:	2301      	movs	r3, #1
 8004b66:	4622      	mov	r2, r4
 8004b68:	4649      	mov	r1, r9
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	47c0      	blx	r8
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d0e6      	beq.n	8004b40 <_printf_common+0xa4>
 8004b72:	3601      	adds	r6, #1
 8004b74:	e7d9      	b.n	8004b2a <_printf_common+0x8e>
	...

08004b78 <_printf_i>:
 8004b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	7e0f      	ldrb	r7, [r1, #24]
 8004b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b80:	2f78      	cmp	r7, #120	; 0x78
 8004b82:	4691      	mov	r9, r2
 8004b84:	4680      	mov	r8, r0
 8004b86:	460c      	mov	r4, r1
 8004b88:	469a      	mov	sl, r3
 8004b8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b8e:	d807      	bhi.n	8004ba0 <_printf_i+0x28>
 8004b90:	2f62      	cmp	r7, #98	; 0x62
 8004b92:	d80a      	bhi.n	8004baa <_printf_i+0x32>
 8004b94:	2f00      	cmp	r7, #0
 8004b96:	f000 80d8 	beq.w	8004d4a <_printf_i+0x1d2>
 8004b9a:	2f58      	cmp	r7, #88	; 0x58
 8004b9c:	f000 80a3 	beq.w	8004ce6 <_printf_i+0x16e>
 8004ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ba8:	e03a      	b.n	8004c20 <_printf_i+0xa8>
 8004baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bae:	2b15      	cmp	r3, #21
 8004bb0:	d8f6      	bhi.n	8004ba0 <_printf_i+0x28>
 8004bb2:	a101      	add	r1, pc, #4	; (adr r1, 8004bb8 <_printf_i+0x40>)
 8004bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bb8:	08004c11 	.word	0x08004c11
 8004bbc:	08004c25 	.word	0x08004c25
 8004bc0:	08004ba1 	.word	0x08004ba1
 8004bc4:	08004ba1 	.word	0x08004ba1
 8004bc8:	08004ba1 	.word	0x08004ba1
 8004bcc:	08004ba1 	.word	0x08004ba1
 8004bd0:	08004c25 	.word	0x08004c25
 8004bd4:	08004ba1 	.word	0x08004ba1
 8004bd8:	08004ba1 	.word	0x08004ba1
 8004bdc:	08004ba1 	.word	0x08004ba1
 8004be0:	08004ba1 	.word	0x08004ba1
 8004be4:	08004d31 	.word	0x08004d31
 8004be8:	08004c55 	.word	0x08004c55
 8004bec:	08004d13 	.word	0x08004d13
 8004bf0:	08004ba1 	.word	0x08004ba1
 8004bf4:	08004ba1 	.word	0x08004ba1
 8004bf8:	08004d53 	.word	0x08004d53
 8004bfc:	08004ba1 	.word	0x08004ba1
 8004c00:	08004c55 	.word	0x08004c55
 8004c04:	08004ba1 	.word	0x08004ba1
 8004c08:	08004ba1 	.word	0x08004ba1
 8004c0c:	08004d1b 	.word	0x08004d1b
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	1d1a      	adds	r2, r3, #4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	602a      	str	r2, [r5, #0]
 8004c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0a3      	b.n	8004d6c <_printf_i+0x1f4>
 8004c24:	6820      	ldr	r0, [r4, #0]
 8004c26:	6829      	ldr	r1, [r5, #0]
 8004c28:	0606      	lsls	r6, r0, #24
 8004c2a:	f101 0304 	add.w	r3, r1, #4
 8004c2e:	d50a      	bpl.n	8004c46 <_printf_i+0xce>
 8004c30:	680e      	ldr	r6, [r1, #0]
 8004c32:	602b      	str	r3, [r5, #0]
 8004c34:	2e00      	cmp	r6, #0
 8004c36:	da03      	bge.n	8004c40 <_printf_i+0xc8>
 8004c38:	232d      	movs	r3, #45	; 0x2d
 8004c3a:	4276      	negs	r6, r6
 8004c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c40:	485e      	ldr	r0, [pc, #376]	; (8004dbc <_printf_i+0x244>)
 8004c42:	230a      	movs	r3, #10
 8004c44:	e019      	b.n	8004c7a <_printf_i+0x102>
 8004c46:	680e      	ldr	r6, [r1, #0]
 8004c48:	602b      	str	r3, [r5, #0]
 8004c4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c4e:	bf18      	it	ne
 8004c50:	b236      	sxthne	r6, r6
 8004c52:	e7ef      	b.n	8004c34 <_printf_i+0xbc>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	6820      	ldr	r0, [r4, #0]
 8004c58:	1d19      	adds	r1, r3, #4
 8004c5a:	6029      	str	r1, [r5, #0]
 8004c5c:	0601      	lsls	r1, r0, #24
 8004c5e:	d501      	bpl.n	8004c64 <_printf_i+0xec>
 8004c60:	681e      	ldr	r6, [r3, #0]
 8004c62:	e002      	b.n	8004c6a <_printf_i+0xf2>
 8004c64:	0646      	lsls	r6, r0, #25
 8004c66:	d5fb      	bpl.n	8004c60 <_printf_i+0xe8>
 8004c68:	881e      	ldrh	r6, [r3, #0]
 8004c6a:	4854      	ldr	r0, [pc, #336]	; (8004dbc <_printf_i+0x244>)
 8004c6c:	2f6f      	cmp	r7, #111	; 0x6f
 8004c6e:	bf0c      	ite	eq
 8004c70:	2308      	moveq	r3, #8
 8004c72:	230a      	movne	r3, #10
 8004c74:	2100      	movs	r1, #0
 8004c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c7a:	6865      	ldr	r5, [r4, #4]
 8004c7c:	60a5      	str	r5, [r4, #8]
 8004c7e:	2d00      	cmp	r5, #0
 8004c80:	bfa2      	ittt	ge
 8004c82:	6821      	ldrge	r1, [r4, #0]
 8004c84:	f021 0104 	bicge.w	r1, r1, #4
 8004c88:	6021      	strge	r1, [r4, #0]
 8004c8a:	b90e      	cbnz	r6, 8004c90 <_printf_i+0x118>
 8004c8c:	2d00      	cmp	r5, #0
 8004c8e:	d04d      	beq.n	8004d2c <_printf_i+0x1b4>
 8004c90:	4615      	mov	r5, r2
 8004c92:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c96:	fb03 6711 	mls	r7, r3, r1, r6
 8004c9a:	5dc7      	ldrb	r7, [r0, r7]
 8004c9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ca0:	4637      	mov	r7, r6
 8004ca2:	42bb      	cmp	r3, r7
 8004ca4:	460e      	mov	r6, r1
 8004ca6:	d9f4      	bls.n	8004c92 <_printf_i+0x11a>
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d10b      	bne.n	8004cc4 <_printf_i+0x14c>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	07de      	lsls	r6, r3, #31
 8004cb0:	d508      	bpl.n	8004cc4 <_printf_i+0x14c>
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	6861      	ldr	r1, [r4, #4]
 8004cb6:	4299      	cmp	r1, r3
 8004cb8:	bfde      	ittt	le
 8004cba:	2330      	movle	r3, #48	; 0x30
 8004cbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cc4:	1b52      	subs	r2, r2, r5
 8004cc6:	6122      	str	r2, [r4, #16]
 8004cc8:	f8cd a000 	str.w	sl, [sp]
 8004ccc:	464b      	mov	r3, r9
 8004cce:	aa03      	add	r2, sp, #12
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	f7ff fee2 	bl	8004a9c <_printf_common>
 8004cd8:	3001      	adds	r0, #1
 8004cda:	d14c      	bne.n	8004d76 <_printf_i+0x1fe>
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce0:	b004      	add	sp, #16
 8004ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce6:	4835      	ldr	r0, [pc, #212]	; (8004dbc <_printf_i+0x244>)
 8004ce8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cec:	6829      	ldr	r1, [r5, #0]
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cf4:	6029      	str	r1, [r5, #0]
 8004cf6:	061d      	lsls	r5, r3, #24
 8004cf8:	d514      	bpl.n	8004d24 <_printf_i+0x1ac>
 8004cfa:	07df      	lsls	r7, r3, #31
 8004cfc:	bf44      	itt	mi
 8004cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8004d02:	6023      	strmi	r3, [r4, #0]
 8004d04:	b91e      	cbnz	r6, 8004d0e <_printf_i+0x196>
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	f023 0320 	bic.w	r3, r3, #32
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	2310      	movs	r3, #16
 8004d10:	e7b0      	b.n	8004c74 <_printf_i+0xfc>
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	f043 0320 	orr.w	r3, r3, #32
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	2378      	movs	r3, #120	; 0x78
 8004d1c:	4828      	ldr	r0, [pc, #160]	; (8004dc0 <_printf_i+0x248>)
 8004d1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d22:	e7e3      	b.n	8004cec <_printf_i+0x174>
 8004d24:	0659      	lsls	r1, r3, #25
 8004d26:	bf48      	it	mi
 8004d28:	b2b6      	uxthmi	r6, r6
 8004d2a:	e7e6      	b.n	8004cfa <_printf_i+0x182>
 8004d2c:	4615      	mov	r5, r2
 8004d2e:	e7bb      	b.n	8004ca8 <_printf_i+0x130>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	6826      	ldr	r6, [r4, #0]
 8004d34:	6961      	ldr	r1, [r4, #20]
 8004d36:	1d18      	adds	r0, r3, #4
 8004d38:	6028      	str	r0, [r5, #0]
 8004d3a:	0635      	lsls	r5, r6, #24
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	d501      	bpl.n	8004d44 <_printf_i+0x1cc>
 8004d40:	6019      	str	r1, [r3, #0]
 8004d42:	e002      	b.n	8004d4a <_printf_i+0x1d2>
 8004d44:	0670      	lsls	r0, r6, #25
 8004d46:	d5fb      	bpl.n	8004d40 <_printf_i+0x1c8>
 8004d48:	8019      	strh	r1, [r3, #0]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6123      	str	r3, [r4, #16]
 8004d4e:	4615      	mov	r5, r2
 8004d50:	e7ba      	b.n	8004cc8 <_printf_i+0x150>
 8004d52:	682b      	ldr	r3, [r5, #0]
 8004d54:	1d1a      	adds	r2, r3, #4
 8004d56:	602a      	str	r2, [r5, #0]
 8004d58:	681d      	ldr	r5, [r3, #0]
 8004d5a:	6862      	ldr	r2, [r4, #4]
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f7fb fa3e 	bl	80001e0 <memchr>
 8004d64:	b108      	cbz	r0, 8004d6a <_printf_i+0x1f2>
 8004d66:	1b40      	subs	r0, r0, r5
 8004d68:	6060      	str	r0, [r4, #4]
 8004d6a:	6863      	ldr	r3, [r4, #4]
 8004d6c:	6123      	str	r3, [r4, #16]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d74:	e7a8      	b.n	8004cc8 <_printf_i+0x150>
 8004d76:	6923      	ldr	r3, [r4, #16]
 8004d78:	462a      	mov	r2, r5
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	4640      	mov	r0, r8
 8004d7e:	47d0      	blx	sl
 8004d80:	3001      	adds	r0, #1
 8004d82:	d0ab      	beq.n	8004cdc <_printf_i+0x164>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	079b      	lsls	r3, r3, #30
 8004d88:	d413      	bmi.n	8004db2 <_printf_i+0x23a>
 8004d8a:	68e0      	ldr	r0, [r4, #12]
 8004d8c:	9b03      	ldr	r3, [sp, #12]
 8004d8e:	4298      	cmp	r0, r3
 8004d90:	bfb8      	it	lt
 8004d92:	4618      	movlt	r0, r3
 8004d94:	e7a4      	b.n	8004ce0 <_printf_i+0x168>
 8004d96:	2301      	movs	r3, #1
 8004d98:	4632      	mov	r2, r6
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	4640      	mov	r0, r8
 8004d9e:	47d0      	blx	sl
 8004da0:	3001      	adds	r0, #1
 8004da2:	d09b      	beq.n	8004cdc <_printf_i+0x164>
 8004da4:	3501      	adds	r5, #1
 8004da6:	68e3      	ldr	r3, [r4, #12]
 8004da8:	9903      	ldr	r1, [sp, #12]
 8004daa:	1a5b      	subs	r3, r3, r1
 8004dac:	42ab      	cmp	r3, r5
 8004dae:	dcf2      	bgt.n	8004d96 <_printf_i+0x21e>
 8004db0:	e7eb      	b.n	8004d8a <_printf_i+0x212>
 8004db2:	2500      	movs	r5, #0
 8004db4:	f104 0619 	add.w	r6, r4, #25
 8004db8:	e7f5      	b.n	8004da6 <_printf_i+0x22e>
 8004dba:	bf00      	nop
 8004dbc:	080050f5 	.word	0x080050f5
 8004dc0:	08005106 	.word	0x08005106

08004dc4 <memcpy>:
 8004dc4:	440a      	add	r2, r1
 8004dc6:	4291      	cmp	r1, r2
 8004dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dcc:	d100      	bne.n	8004dd0 <memcpy+0xc>
 8004dce:	4770      	bx	lr
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dda:	4291      	cmp	r1, r2
 8004ddc:	d1f9      	bne.n	8004dd2 <memcpy+0xe>
 8004dde:	bd10      	pop	{r4, pc}

08004de0 <memmove>:
 8004de0:	4288      	cmp	r0, r1
 8004de2:	b510      	push	{r4, lr}
 8004de4:	eb01 0402 	add.w	r4, r1, r2
 8004de8:	d902      	bls.n	8004df0 <memmove+0x10>
 8004dea:	4284      	cmp	r4, r0
 8004dec:	4623      	mov	r3, r4
 8004dee:	d807      	bhi.n	8004e00 <memmove+0x20>
 8004df0:	1e43      	subs	r3, r0, #1
 8004df2:	42a1      	cmp	r1, r4
 8004df4:	d008      	beq.n	8004e08 <memmove+0x28>
 8004df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dfe:	e7f8      	b.n	8004df2 <memmove+0x12>
 8004e00:	4402      	add	r2, r0
 8004e02:	4601      	mov	r1, r0
 8004e04:	428a      	cmp	r2, r1
 8004e06:	d100      	bne.n	8004e0a <memmove+0x2a>
 8004e08:	bd10      	pop	{r4, pc}
 8004e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e12:	e7f7      	b.n	8004e04 <memmove+0x24>

08004e14 <_free_r>:
 8004e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e16:	2900      	cmp	r1, #0
 8004e18:	d044      	beq.n	8004ea4 <_free_r+0x90>
 8004e1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e1e:	9001      	str	r0, [sp, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f1a1 0404 	sub.w	r4, r1, #4
 8004e26:	bfb8      	it	lt
 8004e28:	18e4      	addlt	r4, r4, r3
 8004e2a:	f000 f913 	bl	8005054 <__malloc_lock>
 8004e2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ea8 <_free_r+0x94>)
 8004e30:	9801      	ldr	r0, [sp, #4]
 8004e32:	6813      	ldr	r3, [r2, #0]
 8004e34:	b933      	cbnz	r3, 8004e44 <_free_r+0x30>
 8004e36:	6063      	str	r3, [r4, #4]
 8004e38:	6014      	str	r4, [r2, #0]
 8004e3a:	b003      	add	sp, #12
 8004e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e40:	f000 b90e 	b.w	8005060 <__malloc_unlock>
 8004e44:	42a3      	cmp	r3, r4
 8004e46:	d908      	bls.n	8004e5a <_free_r+0x46>
 8004e48:	6825      	ldr	r5, [r4, #0]
 8004e4a:	1961      	adds	r1, r4, r5
 8004e4c:	428b      	cmp	r3, r1
 8004e4e:	bf01      	itttt	eq
 8004e50:	6819      	ldreq	r1, [r3, #0]
 8004e52:	685b      	ldreq	r3, [r3, #4]
 8004e54:	1949      	addeq	r1, r1, r5
 8004e56:	6021      	streq	r1, [r4, #0]
 8004e58:	e7ed      	b.n	8004e36 <_free_r+0x22>
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	b10b      	cbz	r3, 8004e64 <_free_r+0x50>
 8004e60:	42a3      	cmp	r3, r4
 8004e62:	d9fa      	bls.n	8004e5a <_free_r+0x46>
 8004e64:	6811      	ldr	r1, [r2, #0]
 8004e66:	1855      	adds	r5, r2, r1
 8004e68:	42a5      	cmp	r5, r4
 8004e6a:	d10b      	bne.n	8004e84 <_free_r+0x70>
 8004e6c:	6824      	ldr	r4, [r4, #0]
 8004e6e:	4421      	add	r1, r4
 8004e70:	1854      	adds	r4, r2, r1
 8004e72:	42a3      	cmp	r3, r4
 8004e74:	6011      	str	r1, [r2, #0]
 8004e76:	d1e0      	bne.n	8004e3a <_free_r+0x26>
 8004e78:	681c      	ldr	r4, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	6053      	str	r3, [r2, #4]
 8004e7e:	4421      	add	r1, r4
 8004e80:	6011      	str	r1, [r2, #0]
 8004e82:	e7da      	b.n	8004e3a <_free_r+0x26>
 8004e84:	d902      	bls.n	8004e8c <_free_r+0x78>
 8004e86:	230c      	movs	r3, #12
 8004e88:	6003      	str	r3, [r0, #0]
 8004e8a:	e7d6      	b.n	8004e3a <_free_r+0x26>
 8004e8c:	6825      	ldr	r5, [r4, #0]
 8004e8e:	1961      	adds	r1, r4, r5
 8004e90:	428b      	cmp	r3, r1
 8004e92:	bf04      	itt	eq
 8004e94:	6819      	ldreq	r1, [r3, #0]
 8004e96:	685b      	ldreq	r3, [r3, #4]
 8004e98:	6063      	str	r3, [r4, #4]
 8004e9a:	bf04      	itt	eq
 8004e9c:	1949      	addeq	r1, r1, r5
 8004e9e:	6021      	streq	r1, [r4, #0]
 8004ea0:	6054      	str	r4, [r2, #4]
 8004ea2:	e7ca      	b.n	8004e3a <_free_r+0x26>
 8004ea4:	b003      	add	sp, #12
 8004ea6:	bd30      	pop	{r4, r5, pc}
 8004ea8:	20000644 	.word	0x20000644

08004eac <sbrk_aligned>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	4e0e      	ldr	r6, [pc, #56]	; (8004ee8 <sbrk_aligned+0x3c>)
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	6831      	ldr	r1, [r6, #0]
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	b911      	cbnz	r1, 8004ebe <sbrk_aligned+0x12>
 8004eb8:	f000 f8bc 	bl	8005034 <_sbrk_r>
 8004ebc:	6030      	str	r0, [r6, #0]
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f000 f8b7 	bl	8005034 <_sbrk_r>
 8004ec6:	1c43      	adds	r3, r0, #1
 8004ec8:	d00a      	beq.n	8004ee0 <sbrk_aligned+0x34>
 8004eca:	1cc4      	adds	r4, r0, #3
 8004ecc:	f024 0403 	bic.w	r4, r4, #3
 8004ed0:	42a0      	cmp	r0, r4
 8004ed2:	d007      	beq.n	8004ee4 <sbrk_aligned+0x38>
 8004ed4:	1a21      	subs	r1, r4, r0
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f000 f8ac 	bl	8005034 <_sbrk_r>
 8004edc:	3001      	adds	r0, #1
 8004ede:	d101      	bne.n	8004ee4 <sbrk_aligned+0x38>
 8004ee0:	f04f 34ff 	mov.w	r4, #4294967295
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	20000648 	.word	0x20000648

08004eec <_malloc_r>:
 8004eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef0:	1ccd      	adds	r5, r1, #3
 8004ef2:	f025 0503 	bic.w	r5, r5, #3
 8004ef6:	3508      	adds	r5, #8
 8004ef8:	2d0c      	cmp	r5, #12
 8004efa:	bf38      	it	cc
 8004efc:	250c      	movcc	r5, #12
 8004efe:	2d00      	cmp	r5, #0
 8004f00:	4607      	mov	r7, r0
 8004f02:	db01      	blt.n	8004f08 <_malloc_r+0x1c>
 8004f04:	42a9      	cmp	r1, r5
 8004f06:	d905      	bls.n	8004f14 <_malloc_r+0x28>
 8004f08:	230c      	movs	r3, #12
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	2600      	movs	r6, #0
 8004f0e:	4630      	mov	r0, r6
 8004f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f14:	4e2e      	ldr	r6, [pc, #184]	; (8004fd0 <_malloc_r+0xe4>)
 8004f16:	f000 f89d 	bl	8005054 <__malloc_lock>
 8004f1a:	6833      	ldr	r3, [r6, #0]
 8004f1c:	461c      	mov	r4, r3
 8004f1e:	bb34      	cbnz	r4, 8004f6e <_malloc_r+0x82>
 8004f20:	4629      	mov	r1, r5
 8004f22:	4638      	mov	r0, r7
 8004f24:	f7ff ffc2 	bl	8004eac <sbrk_aligned>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	d14d      	bne.n	8004fca <_malloc_r+0xde>
 8004f2e:	6834      	ldr	r4, [r6, #0]
 8004f30:	4626      	mov	r6, r4
 8004f32:	2e00      	cmp	r6, #0
 8004f34:	d140      	bne.n	8004fb8 <_malloc_r+0xcc>
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	4631      	mov	r1, r6
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	eb04 0803 	add.w	r8, r4, r3
 8004f40:	f000 f878 	bl	8005034 <_sbrk_r>
 8004f44:	4580      	cmp	r8, r0
 8004f46:	d13a      	bne.n	8004fbe <_malloc_r+0xd2>
 8004f48:	6821      	ldr	r1, [r4, #0]
 8004f4a:	3503      	adds	r5, #3
 8004f4c:	1a6d      	subs	r5, r5, r1
 8004f4e:	f025 0503 	bic.w	r5, r5, #3
 8004f52:	3508      	adds	r5, #8
 8004f54:	2d0c      	cmp	r5, #12
 8004f56:	bf38      	it	cc
 8004f58:	250c      	movcc	r5, #12
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	f7ff ffa5 	bl	8004eac <sbrk_aligned>
 8004f62:	3001      	adds	r0, #1
 8004f64:	d02b      	beq.n	8004fbe <_malloc_r+0xd2>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	442b      	add	r3, r5
 8004f6a:	6023      	str	r3, [r4, #0]
 8004f6c:	e00e      	b.n	8004f8c <_malloc_r+0xa0>
 8004f6e:	6822      	ldr	r2, [r4, #0]
 8004f70:	1b52      	subs	r2, r2, r5
 8004f72:	d41e      	bmi.n	8004fb2 <_malloc_r+0xc6>
 8004f74:	2a0b      	cmp	r2, #11
 8004f76:	d916      	bls.n	8004fa6 <_malloc_r+0xba>
 8004f78:	1961      	adds	r1, r4, r5
 8004f7a:	42a3      	cmp	r3, r4
 8004f7c:	6025      	str	r5, [r4, #0]
 8004f7e:	bf18      	it	ne
 8004f80:	6059      	strne	r1, [r3, #4]
 8004f82:	6863      	ldr	r3, [r4, #4]
 8004f84:	bf08      	it	eq
 8004f86:	6031      	streq	r1, [r6, #0]
 8004f88:	5162      	str	r2, [r4, r5]
 8004f8a:	604b      	str	r3, [r1, #4]
 8004f8c:	4638      	mov	r0, r7
 8004f8e:	f104 060b 	add.w	r6, r4, #11
 8004f92:	f000 f865 	bl	8005060 <__malloc_unlock>
 8004f96:	f026 0607 	bic.w	r6, r6, #7
 8004f9a:	1d23      	adds	r3, r4, #4
 8004f9c:	1af2      	subs	r2, r6, r3
 8004f9e:	d0b6      	beq.n	8004f0e <_malloc_r+0x22>
 8004fa0:	1b9b      	subs	r3, r3, r6
 8004fa2:	50a3      	str	r3, [r4, r2]
 8004fa4:	e7b3      	b.n	8004f0e <_malloc_r+0x22>
 8004fa6:	6862      	ldr	r2, [r4, #4]
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	bf0c      	ite	eq
 8004fac:	6032      	streq	r2, [r6, #0]
 8004fae:	605a      	strne	r2, [r3, #4]
 8004fb0:	e7ec      	b.n	8004f8c <_malloc_r+0xa0>
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	6864      	ldr	r4, [r4, #4]
 8004fb6:	e7b2      	b.n	8004f1e <_malloc_r+0x32>
 8004fb8:	4634      	mov	r4, r6
 8004fba:	6876      	ldr	r6, [r6, #4]
 8004fbc:	e7b9      	b.n	8004f32 <_malloc_r+0x46>
 8004fbe:	230c      	movs	r3, #12
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	f000 f84c 	bl	8005060 <__malloc_unlock>
 8004fc8:	e7a1      	b.n	8004f0e <_malloc_r+0x22>
 8004fca:	6025      	str	r5, [r4, #0]
 8004fcc:	e7de      	b.n	8004f8c <_malloc_r+0xa0>
 8004fce:	bf00      	nop
 8004fd0:	20000644 	.word	0x20000644

08004fd4 <_realloc_r>:
 8004fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd8:	4680      	mov	r8, r0
 8004fda:	4614      	mov	r4, r2
 8004fdc:	460e      	mov	r6, r1
 8004fde:	b921      	cbnz	r1, 8004fea <_realloc_r+0x16>
 8004fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	f7ff bf81 	b.w	8004eec <_malloc_r>
 8004fea:	b92a      	cbnz	r2, 8004ff8 <_realloc_r+0x24>
 8004fec:	f7ff ff12 	bl	8004e14 <_free_r>
 8004ff0:	4625      	mov	r5, r4
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff8:	f000 f838 	bl	800506c <_malloc_usable_size_r>
 8004ffc:	4284      	cmp	r4, r0
 8004ffe:	4607      	mov	r7, r0
 8005000:	d802      	bhi.n	8005008 <_realloc_r+0x34>
 8005002:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005006:	d812      	bhi.n	800502e <_realloc_r+0x5a>
 8005008:	4621      	mov	r1, r4
 800500a:	4640      	mov	r0, r8
 800500c:	f7ff ff6e 	bl	8004eec <_malloc_r>
 8005010:	4605      	mov	r5, r0
 8005012:	2800      	cmp	r0, #0
 8005014:	d0ed      	beq.n	8004ff2 <_realloc_r+0x1e>
 8005016:	42bc      	cmp	r4, r7
 8005018:	4622      	mov	r2, r4
 800501a:	4631      	mov	r1, r6
 800501c:	bf28      	it	cs
 800501e:	463a      	movcs	r2, r7
 8005020:	f7ff fed0 	bl	8004dc4 <memcpy>
 8005024:	4631      	mov	r1, r6
 8005026:	4640      	mov	r0, r8
 8005028:	f7ff fef4 	bl	8004e14 <_free_r>
 800502c:	e7e1      	b.n	8004ff2 <_realloc_r+0x1e>
 800502e:	4635      	mov	r5, r6
 8005030:	e7df      	b.n	8004ff2 <_realloc_r+0x1e>
	...

08005034 <_sbrk_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4d06      	ldr	r5, [pc, #24]	; (8005050 <_sbrk_r+0x1c>)
 8005038:	2300      	movs	r3, #0
 800503a:	4604      	mov	r4, r0
 800503c:	4608      	mov	r0, r1
 800503e:	602b      	str	r3, [r5, #0]
 8005040:	f7fb fcd4 	bl	80009ec <_sbrk>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d102      	bne.n	800504e <_sbrk_r+0x1a>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	b103      	cbz	r3, 800504e <_sbrk_r+0x1a>
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	2000064c 	.word	0x2000064c

08005054 <__malloc_lock>:
 8005054:	4801      	ldr	r0, [pc, #4]	; (800505c <__malloc_lock+0x8>)
 8005056:	f000 b811 	b.w	800507c <__retarget_lock_acquire_recursive>
 800505a:	bf00      	nop
 800505c:	20000650 	.word	0x20000650

08005060 <__malloc_unlock>:
 8005060:	4801      	ldr	r0, [pc, #4]	; (8005068 <__malloc_unlock+0x8>)
 8005062:	f000 b80c 	b.w	800507e <__retarget_lock_release_recursive>
 8005066:	bf00      	nop
 8005068:	20000650 	.word	0x20000650

0800506c <_malloc_usable_size_r>:
 800506c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005070:	1f18      	subs	r0, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	bfbc      	itt	lt
 8005076:	580b      	ldrlt	r3, [r1, r0]
 8005078:	18c0      	addlt	r0, r0, r3
 800507a:	4770      	bx	lr

0800507c <__retarget_lock_acquire_recursive>:
 800507c:	4770      	bx	lr

0800507e <__retarget_lock_release_recursive>:
 800507e:	4770      	bx	lr

08005080 <_init>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr

0800508c <_fini>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	bf00      	nop
 8005090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005092:	bc08      	pop	{r3}
 8005094:	469e      	mov	lr, r3
 8005096:	4770      	bx	lr
