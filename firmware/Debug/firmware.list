
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005d00  08005d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d4c  08005d4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d4c  08005d4c  00015d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d54  08005d54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d54  08005d54  00015d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000144  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010695  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d0e  00000000  00000000  000306d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da8  00000000  00000000  000323e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d30  00000000  00000000  00033188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e17  00000000  00000000  00033eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000115ce  00000000  00000000  00054ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caf83  00000000  00000000  0006629d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131220  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ae0  00000000  00000000  00131270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ce8 	.word	0x08005ce8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005ce8 	.word	0x08005ce8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_d2f>:
 80001d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80001dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80001e0:	bf24      	itt	cs
 80001e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80001e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80001ea:	d90d      	bls.n	8000208 <__aeabi_d2f+0x30>
 80001ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80001f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80001f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80001f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80001fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000200:	bf08      	it	eq
 8000202:	f020 0001 	biceq.w	r0, r0, #1
 8000206:	4770      	bx	lr
 8000208:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800020c:	d121      	bne.n	8000252 <__aeabi_d2f+0x7a>
 800020e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000212:	bfbc      	itt	lt
 8000214:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000218:	4770      	bxlt	lr
 800021a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000222:	f1c2 0218 	rsb	r2, r2, #24
 8000226:	f1c2 0c20 	rsb	ip, r2, #32
 800022a:	fa10 f30c 	lsls.w	r3, r0, ip
 800022e:	fa20 f002 	lsr.w	r0, r0, r2
 8000232:	bf18      	it	ne
 8000234:	f040 0001 	orrne.w	r0, r0, #1
 8000238:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800023c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000240:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000244:	ea40 000c 	orr.w	r0, r0, ip
 8000248:	fa23 f302 	lsr.w	r3, r3, r2
 800024c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000250:	e7cc      	b.n	80001ec <__aeabi_d2f+0x14>
 8000252:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000256:	d107      	bne.n	8000268 <__aeabi_d2f+0x90>
 8000258:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800025c:	bf1e      	ittt	ne
 800025e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000262:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000266:	4770      	bxne	lr
 8000268:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800026c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000270:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b974 	b.w	8000578 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ac:	9d08      	ldr	r5, [sp, #32]
 80002ae:	4604      	mov	r4, r0
 80002b0:	468e      	mov	lr, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d14d      	bne.n	8000352 <__udivmoddi4+0xaa>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d969      	bls.n	8000390 <__udivmoddi4+0xe8>
 80002bc:	fab2 f282 	clz	r2, r2
 80002c0:	b152      	cbz	r2, 80002d8 <__udivmoddi4+0x30>
 80002c2:	fa01 f302 	lsl.w	r3, r1, r2
 80002c6:	f1c2 0120 	rsb	r1, r2, #32
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d2:	ea41 0e03 	orr.w	lr, r1, r3
 80002d6:	4094      	lsls	r4, r2
 80002d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002dc:	0c21      	lsrs	r1, r4, #16
 80002de:	fbbe f6f8 	udiv	r6, lr, r8
 80002e2:	fa1f f78c 	uxth.w	r7, ip
 80002e6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ee:	fb06 f107 	mul.w	r1, r6, r7
 80002f2:	4299      	cmp	r1, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x64>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fe:	f080 811f 	bcs.w	8000540 <__udivmoddi4+0x298>
 8000302:	4299      	cmp	r1, r3
 8000304:	f240 811c 	bls.w	8000540 <__udivmoddi4+0x298>
 8000308:	3e02      	subs	r6, #2
 800030a:	4463      	add	r3, ip
 800030c:	1a5b      	subs	r3, r3, r1
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb3 f0f8 	udiv	r0, r3, r8
 8000314:	fb08 3310 	mls	r3, r8, r0, r3
 8000318:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800031c:	fb00 f707 	mul.w	r7, r0, r7
 8000320:	42a7      	cmp	r7, r4
 8000322:	d90a      	bls.n	800033a <__udivmoddi4+0x92>
 8000324:	eb1c 0404 	adds.w	r4, ip, r4
 8000328:	f100 33ff 	add.w	r3, r0, #4294967295
 800032c:	f080 810a 	bcs.w	8000544 <__udivmoddi4+0x29c>
 8000330:	42a7      	cmp	r7, r4
 8000332:	f240 8107 	bls.w	8000544 <__udivmoddi4+0x29c>
 8000336:	4464      	add	r4, ip
 8000338:	3802      	subs	r0, #2
 800033a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033e:	1be4      	subs	r4, r4, r7
 8000340:	2600      	movs	r6, #0
 8000342:	b11d      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000344:	40d4      	lsrs	r4, r2
 8000346:	2300      	movs	r3, #0
 8000348:	e9c5 4300 	strd	r4, r3, [r5]
 800034c:	4631      	mov	r1, r6
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	428b      	cmp	r3, r1
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0xc2>
 8000356:	2d00      	cmp	r5, #0
 8000358:	f000 80ef 	beq.w	800053a <__udivmoddi4+0x292>
 800035c:	2600      	movs	r6, #0
 800035e:	e9c5 0100 	strd	r0, r1, [r5]
 8000362:	4630      	mov	r0, r6
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	fab3 f683 	clz	r6, r3
 800036e:	2e00      	cmp	r6, #0
 8000370:	d14a      	bne.n	8000408 <__udivmoddi4+0x160>
 8000372:	428b      	cmp	r3, r1
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xd4>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80f9 	bhi.w	800056e <__udivmoddi4+0x2c6>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb61 0303 	sbc.w	r3, r1, r3
 8000382:	2001      	movs	r0, #1
 8000384:	469e      	mov	lr, r3
 8000386:	2d00      	cmp	r5, #0
 8000388:	d0e0      	beq.n	800034c <__udivmoddi4+0xa4>
 800038a:	e9c5 4e00 	strd	r4, lr, [r5]
 800038e:	e7dd      	b.n	800034c <__udivmoddi4+0xa4>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xec>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f282 	clz	r2, r2
 8000398:	2a00      	cmp	r2, #0
 800039a:	f040 8092 	bne.w	80004c2 <__udivmoddi4+0x21a>
 800039e:	eba1 010c 	sub.w	r1, r1, ip
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2601      	movs	r6, #1
 80003ac:	0c20      	lsrs	r0, r4, #16
 80003ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80003b2:	fb07 1113 	mls	r1, r7, r3, r1
 80003b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ba:	fb0e f003 	mul.w	r0, lr, r3
 80003be:	4288      	cmp	r0, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x12c>
 80003c2:	eb1c 0101 	adds.w	r1, ip, r1
 80003c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x12a>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 80003d2:	4643      	mov	r3, r8
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003dc:	fb07 1110 	mls	r1, r7, r0, r1
 80003e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x156>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x154>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2ca>
 80003fc:	4608      	mov	r0, r1
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000406:	e79c      	b.n	8000342 <__udivmoddi4+0x9a>
 8000408:	f1c6 0720 	rsb	r7, r6, #32
 800040c:	40b3      	lsls	r3, r6
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f407 	lsr.w	r4, r0, r7
 800041a:	fa01 f306 	lsl.w	r3, r1, r6
 800041e:	431c      	orrs	r4, r3
 8000420:	40f9      	lsrs	r1, r7
 8000422:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000426:	fa00 f306 	lsl.w	r3, r0, r6
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	0c20      	lsrs	r0, r4, #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fb09 1118 	mls	r1, r9, r8, r1
 8000438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043c:	fb08 f00e 	mul.w	r0, r8, lr
 8000440:	4288      	cmp	r0, r1
 8000442:	fa02 f206 	lsl.w	r2, r2, r6
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2bc>
 8000454:	4288      	cmp	r0, r1
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2bc>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4461      	add	r1, ip
 8000460:	1a09      	subs	r1, r1, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb1 f0f9 	udiv	r0, r1, r9
 8000468:	fb09 1110 	mls	r1, r9, r0, r1
 800046c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000470:	fb00 fe0e 	mul.w	lr, r0, lr
 8000474:	458e      	cmp	lr, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1e2>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2b4>
 8000482:	458e      	cmp	lr, r1
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2b4>
 8000486:	3802      	subs	r0, #2
 8000488:	4461      	add	r1, ip
 800048a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048e:	fba0 9402 	umull	r9, r4, r0, r2
 8000492:	eba1 010e 	sub.w	r1, r1, lr
 8000496:	42a1      	cmp	r1, r4
 8000498:	46c8      	mov	r8, r9
 800049a:	46a6      	mov	lr, r4
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x2a4>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x2a0>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x212>
 80004a2:	ebb3 0208 	subs.w	r2, r3, r8
 80004a6:	eb61 010e 	sbc.w	r1, r1, lr
 80004aa:	fa01 f707 	lsl.w	r7, r1, r7
 80004ae:	fa22 f306 	lsr.w	r3, r2, r6
 80004b2:	40f1      	lsrs	r1, r6
 80004b4:	431f      	orrs	r7, r3
 80004b6:	e9c5 7100 	strd	r7, r1, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	f1c2 0320 	rsb	r3, r2, #32
 80004c6:	40d8      	lsrs	r0, r3
 80004c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004cc:	fa21 f303 	lsr.w	r3, r1, r3
 80004d0:	4091      	lsls	r1, r2
 80004d2:	4301      	orrs	r1, r0
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e0:	fb07 3610 	mls	r6, r7, r0, r3
 80004e4:	0c0b      	lsrs	r3, r1, #16
 80004e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ea:	fb00 f60e 	mul.w	r6, r0, lr
 80004ee:	429e      	cmp	r6, r3
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x260>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b8>
 8000500:	429e      	cmp	r6, r3
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b8>
 8000504:	3802      	subs	r0, #2
 8000506:	4463      	add	r3, ip
 8000508:	1b9b      	subs	r3, r3, r6
 800050a:	b289      	uxth	r1, r1
 800050c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000510:	fb07 3316 	mls	r3, r7, r6, r3
 8000514:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000518:	fb06 f30e 	mul.w	r3, r6, lr
 800051c:	428b      	cmp	r3, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x28a>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f106 38ff 	add.w	r8, r6, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2b0>
 800052a:	428b      	cmp	r3, r1
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2b0>
 800052e:	3e02      	subs	r6, #2
 8000530:	4461      	add	r1, ip
 8000532:	1ac9      	subs	r1, r1, r3
 8000534:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0x104>
 800053a:	462e      	mov	r6, r5
 800053c:	4628      	mov	r0, r5
 800053e:	e705      	b.n	800034c <__udivmoddi4+0xa4>
 8000540:	4606      	mov	r6, r0
 8000542:	e6e3      	b.n	800030c <__udivmoddi4+0x64>
 8000544:	4618      	mov	r0, r3
 8000546:	e6f8      	b.n	800033a <__udivmoddi4+0x92>
 8000548:	454b      	cmp	r3, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f8>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000554:	3801      	subs	r0, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f8>
 8000558:	4646      	mov	r6, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x28a>
 800055c:	4620      	mov	r0, r4
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1e2>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x260>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b8>
 8000568:	3b02      	subs	r3, #2
 800056a:	4461      	add	r1, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x12c>
 800056e:	4630      	mov	r0, r6
 8000570:	e709      	b.n	8000386 <__udivmoddi4+0xde>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x156>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <npf_max>:

#ifdef _MSC_VER
  #include <intrin.h>
#endif

static int npf_max(int x, int y) { return (x > y) ? x : y; }
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	683a      	ldr	r2, [r7, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4293      	cmp	r3, r2
 800058c:	bfb8      	it	lt
 800058e:	4613      	movlt	r3, r2
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <npf_parse_format_spec>:

int npf_parse_format_spec(char const *format, npf_format_spec_t *out_spec) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  char const *cur = format;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	60fb      	str	r3, [r7, #12]

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
  out_spec->left_justified = 0;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2200      	movs	r2, #0
 80005ae:	721a      	strb	r2, [r3, #8]
  out_spec->leading_zero_pad = 0;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	2200      	movs	r2, #0
 80005b4:	725a      	strb	r2, [r3, #9]
#endif
  out_spec->case_adjust = 'a'-'A'; // lowercase
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	2220      	movs	r2, #32
 80005ba:	749a      	strb	r2, [r3, #18]
  out_spec->prepend = 0;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
  out_spec->alt_form = 0;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	2200      	movs	r2, #0
 80005c6:	705a      	strb	r2, [r3, #1]

  while (*++cur) { // cur points at the leading '%' character
 80005c8:	e04c      	b.n	8000664 <npf_parse_format_spec+0xc8>
    switch (*cur) { // Optional flags
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	3b20      	subs	r3, #32
 80005d0:	2b10      	cmp	r3, #16
 80005d2:	d84f      	bhi.n	8000674 <npf_parse_format_spec+0xd8>
 80005d4:	a201      	add	r2, pc, #4	; (adr r2, 80005dc <npf_parse_format_spec+0x40>)
 80005d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005da:	bf00      	nop
 80005dc:	0800064d 	.word	0x0800064d
 80005e0:	08000675 	.word	0x08000675
 80005e4:	08000675 	.word	0x08000675
 80005e8:	0800065d 	.word	0x0800065d
 80005ec:	08000675 	.word	0x08000675
 80005f0:	08000675 	.word	0x08000675
 80005f4:	08000675 	.word	0x08000675
 80005f8:	08000675 	.word	0x08000675
 80005fc:	08000675 	.word	0x08000675
 8000600:	08000675 	.word	0x08000675
 8000604:	08000675 	.word	0x08000675
 8000608:	08000645 	.word	0x08000645
 800060c:	08000675 	.word	0x08000675
 8000610:	08000621 	.word	0x08000621
 8000614:	08000675 	.word	0x08000675
 8000618:	08000675 	.word	0x08000675
 800061c:	0800062f 	.word	0x0800062f
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
      case '-': out_spec->left_justified = '-'; out_spec->leading_zero_pad = 0; continue;
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	222d      	movs	r2, #45	; 0x2d
 8000624:	721a      	strb	r2, [r3, #8]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	2200      	movs	r2, #0
 800062a:	725a      	strb	r2, [r3, #9]
 800062c:	e01a      	b.n	8000664 <npf_parse_format_spec+0xc8>
      case '0': out_spec->leading_zero_pad = !out_spec->left_justified; continue;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	7a1b      	ldrb	r3, [r3, #8]
 8000632:	2b00      	cmp	r3, #0
 8000634:	bf0c      	ite	eq
 8000636:	2301      	moveq	r3, #1
 8000638:	2300      	movne	r3, #0
 800063a:	b2db      	uxtb	r3, r3
 800063c:	461a      	mov	r2, r3
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	725a      	strb	r2, [r3, #9]
 8000642:	e00f      	b.n	8000664 <npf_parse_format_spec+0xc8>
#endif
      case '+': out_spec->prepend = '+'; continue;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	222b      	movs	r2, #43	; 0x2b
 8000648:	701a      	strb	r2, [r3, #0]
 800064a:	e00b      	b.n	8000664 <npf_parse_format_spec+0xc8>
      case ' ': if (out_spec->prepend == 0) { out_spec->prepend = ' '; } continue;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d107      	bne.n	8000664 <npf_parse_format_spec+0xc8>
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	2220      	movs	r2, #32
 8000658:	701a      	strb	r2, [r3, #0]
 800065a:	e003      	b.n	8000664 <npf_parse_format_spec+0xc8>
      case '#': out_spec->alt_form = '#'; continue;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	2223      	movs	r2, #35	; 0x23
 8000660:	705a      	strb	r2, [r3, #1]
 8000662:	bf00      	nop
  while (*++cur) { // cur points at the leading '%' character
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	3301      	adds	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1ab      	bne.n	80005ca <npf_parse_format_spec+0x2e>
 8000672:	e000      	b.n	8000676 <npf_parse_format_spec+0xda>
      default: break;
    }
    break;
 8000674:	bf00      	nop
  }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
  out_spec->field_width_opt = NPF_FMT_SPEC_OPT_NONE;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	2200      	movs	r2, #0
 800067a:	709a      	strb	r2, [r3, #2]
  if (*cur == '*') {
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b2a      	cmp	r3, #42	; 0x2a
 8000682:	d106      	bne.n	8000692 <npf_parse_format_spec+0xf6>
    out_spec->field_width_opt = NPF_FMT_SPEC_OPT_STAR;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	2202      	movs	r2, #2
 8000688:	709a      	strb	r2, [r3, #2]
    ++cur;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	3301      	adds	r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	e01d      	b.n	80006ce <npf_parse_format_spec+0x132>
  } else {
    out_spec->field_width = 0;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
    while ((*cur >= '0') && (*cur <= '9')) {
 8000698:	e011      	b.n	80006be <npf_parse_format_spec+0x122>
      out_spec->field_width_opt = NPF_FMT_SPEC_OPT_LITERAL;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2201      	movs	r2, #1
 800069e:	709a      	strb	r2, [r3, #2]
      out_spec->field_width = (out_spec->field_width * 10) + (*cur++ - '0');
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	4613      	mov	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4619      	mov	r1, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	60fa      	str	r2, [r7, #12]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	3b30      	subs	r3, #48	; 0x30
 80006b8:	18ca      	adds	r2, r1, r3
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	605a      	str	r2, [r3, #4]
    while ((*cur >= '0') && (*cur <= '9')) {
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b2f      	cmp	r3, #47	; 0x2f
 80006c4:	d903      	bls.n	80006ce <npf_parse_format_spec+0x132>
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b39      	cmp	r3, #57	; 0x39
 80006cc:	d9e5      	bls.n	800069a <npf_parse_format_spec+0xfe>
    }
  }
#endif

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
  out_spec->prec = 0;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	729a      	strb	r2, [r3, #10]
  if (*cur == '.') {
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b2e      	cmp	r3, #46	; 0x2e
 80006e0:	d133      	bne.n	800074a <npf_parse_format_spec+0x1ae>
    ++cur;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
    if (*cur == '*') {
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b2a      	cmp	r3, #42	; 0x2a
 80006ee:	d106      	bne.n	80006fe <npf_parse_format_spec+0x162>
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_STAR;
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	2202      	movs	r2, #2
 80006f4:	729a      	strb	r2, [r3, #10]
      ++cur;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3301      	adds	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	e025      	b.n	800074a <npf_parse_format_spec+0x1ae>
    } else {
      if (*cur == '-') {
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b2d      	cmp	r3, #45	; 0x2d
 8000704:	d106      	bne.n	8000714 <npf_parse_format_spec+0x178>
        ++cur;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3301      	adds	r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
        out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	2200      	movs	r2, #0
 8000710:	729a      	strb	r2, [r3, #10]
 8000712:	e012      	b.n	800073a <npf_parse_format_spec+0x19e>
      } else {
        out_spec->prec_opt = NPF_FMT_SPEC_OPT_LITERAL;
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	2201      	movs	r2, #1
 8000718:	729a      	strb	r2, [r3, #10]
      }
      while ((*cur >= '0') && (*cur <= '9')) {
 800071a:	e00e      	b.n	800073a <npf_parse_format_spec+0x19e>
        out_spec->prec = (out_spec->prec * 10) + (*cur++ - '0');
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	68da      	ldr	r2, [r3, #12]
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4619      	mov	r1, r3
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	1c5a      	adds	r2, r3, #1
 800072e:	60fa      	str	r2, [r7, #12]
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	3b30      	subs	r3, #48	; 0x30
 8000734:	18ca      	adds	r2, r1, r3
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	60da      	str	r2, [r3, #12]
      while ((*cur >= '0') && (*cur <= '9')) {
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b2f      	cmp	r3, #47	; 0x2f
 8000740:	d903      	bls.n	800074a <npf_parse_format_spec+0x1ae>
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b39      	cmp	r3, #57	; 0x39
 8000748:	d9e8      	bls.n	800071c <npf_parse_format_spec+0x180>
      }
    }
  }
#endif

  int tmp_conv = -1;
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	60bb      	str	r3, [r7, #8]
  out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_NONE;
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	2200      	movs	r2, #0
 8000754:	741a      	strb	r2, [r3, #16]
  switch (*cur++) { // Length modifier
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	1c5a      	adds	r2, r3, #1
 800075a:	60fa      	str	r2, [r7, #12]
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b6c      	cmp	r3, #108	; 0x6c
 8000760:	d013      	beq.n	800078a <npf_parse_format_spec+0x1ee>
 8000762:	2b6c      	cmp	r3, #108	; 0x6c
 8000764:	dc19      	bgt.n	800079a <npf_parse_format_spec+0x1fe>
 8000766:	2b4c      	cmp	r3, #76	; 0x4c
 8000768:	d013      	beq.n	8000792 <npf_parse_format_spec+0x1f6>
 800076a:	2b68      	cmp	r3, #104	; 0x68
 800076c:	d115      	bne.n	800079a <npf_parse_format_spec+0x1fe>
    case 'h':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_SHORT;
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	2201      	movs	r2, #1
 8000772:	741a      	strb	r2, [r3, #16]
      if (*cur == 'h') {
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b68      	cmp	r3, #104	; 0x68
 800077a:	d112      	bne.n	80007a2 <npf_parse_format_spec+0x206>
        out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_CHAR;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	2203      	movs	r2, #3
 8000780:	741a      	strb	r2, [r3, #16]
        ++cur;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3301      	adds	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
      }
      break;
 8000788:	e00b      	b.n	80007a2 <npf_parse_format_spec+0x206>
    case 'l':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LONG;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	2204      	movs	r2, #4
 800078e:	741a      	strb	r2, [r3, #16]
      if (*cur == 'l') {
        out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_LONG_LONG;
        ++cur;
      }
#endif
      break;
 8000790:	e008      	b.n	80007a4 <npf_parse_format_spec+0x208>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    case 'L': out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LONG_DOUBLE; break;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	2202      	movs	r2, #2
 8000796:	741a      	strb	r2, [r3, #16]
 8000798:	e004      	b.n	80007a4 <npf_parse_format_spec+0x208>
#if NANOPRINTF_USE_LARGE_FORMAT_SPECIFIERS == 1
    case 'j': out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_INTMAX; break;
    case 'z': out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_SIZET; break;
    case 't': out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_PTRDIFFT; break;
#endif
    default: --cur; break;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	3b01      	subs	r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	e000      	b.n	80007a4 <npf_parse_format_spec+0x208>
      break;
 80007a2:	bf00      	nop
  }

  switch (*cur++) { // Conversion specifier
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	60fa      	str	r2, [r7, #12]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	3b25      	subs	r3, #37	; 0x25
 80007ae:	2b53      	cmp	r3, #83	; 0x53
 80007b0:	f200 8127 	bhi.w	8000a02 <npf_parse_format_spec+0x466>
 80007b4:	a201      	add	r2, pc, #4	; (adr r2, 80007bc <npf_parse_format_spec+0x220>)
 80007b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ba:	bf00      	nop
 80007bc:	0800090d 	.word	0x0800090d
 80007c0:	08000a03 	.word	0x08000a03
 80007c4:	08000a03 	.word	0x08000a03
 80007c8:	08000a03 	.word	0x08000a03
 80007cc:	08000a03 	.word	0x08000a03
 80007d0:	08000a03 	.word	0x08000a03
 80007d4:	08000a03 	.word	0x08000a03
 80007d8:	08000a03 	.word	0x08000a03
 80007dc:	08000a03 	.word	0x08000a03
 80007e0:	08000a03 	.word	0x08000a03
 80007e4:	08000a03 	.word	0x08000a03
 80007e8:	08000a03 	.word	0x08000a03
 80007ec:	08000a03 	.word	0x08000a03
 80007f0:	08000a03 	.word	0x08000a03
 80007f4:	08000a03 	.word	0x08000a03
 80007f8:	08000a03 	.word	0x08000a03
 80007fc:	08000a03 	.word	0x08000a03
 8000800:	08000a03 	.word	0x08000a03
 8000804:	08000a03 	.word	0x08000a03
 8000808:	08000a03 	.word	0x08000a03
 800080c:	08000a03 	.word	0x08000a03
 8000810:	08000a03 	.word	0x08000a03
 8000814:	08000a03 	.word	0x08000a03
 8000818:	08000a03 	.word	0x08000a03
 800081c:	08000a03 	.word	0x08000a03
 8000820:	08000a03 	.word	0x08000a03
 8000824:	08000a03 	.word	0x08000a03
 8000828:	08000a03 	.word	0x08000a03
 800082c:	080009d9 	.word	0x080009d9
 8000830:	08000a03 	.word	0x08000a03
 8000834:	08000a03 	.word	0x08000a03
 8000838:	08000a03 	.word	0x08000a03
 800083c:	080009a1 	.word	0x080009a1
 8000840:	08000985 	.word	0x08000985
 8000844:	080009bd 	.word	0x080009bd
 8000848:	08000a03 	.word	0x08000a03
 800084c:	08000a03 	.word	0x08000a03
 8000850:	08000a03 	.word	0x08000a03
 8000854:	08000a03 	.word	0x08000a03
 8000858:	08000a03 	.word	0x08000a03
 800085c:	08000a03 	.word	0x08000a03
 8000860:	08000a03 	.word	0x08000a03
 8000864:	08000a03 	.word	0x08000a03
 8000868:	08000a03 	.word	0x08000a03
 800086c:	08000a03 	.word	0x08000a03
 8000870:	08000a03 	.word	0x08000a03
 8000874:	08000a03 	.word	0x08000a03
 8000878:	08000a03 	.word	0x08000a03
 800087c:	08000a03 	.word	0x08000a03
 8000880:	08000a03 	.word	0x08000a03
 8000884:	08000a03 	.word	0x08000a03
 8000888:	08000953 	.word	0x08000953
 800088c:	08000a03 	.word	0x08000a03
 8000890:	08000a03 	.word	0x08000a03
 8000894:	08000a03 	.word	0x08000a03
 8000898:	08000a03 	.word	0x08000a03
 800089c:	08000a03 	.word	0x08000a03
 80008a0:	08000a03 	.word	0x08000a03
 80008a4:	08000a03 	.word	0x08000a03
 80008a8:	08000a03 	.word	0x08000a03
 80008ac:	080009df 	.word	0x080009df
 80008b0:	08000a03 	.word	0x08000a03
 80008b4:	0800091b 	.word	0x0800091b
 80008b8:	08000937 	.word	0x08000937
 80008bc:	080009a7 	.word	0x080009a7
 80008c0:	0800098b 	.word	0x0800098b
 80008c4:	080009c3 	.word	0x080009c3
 80008c8:	08000a03 	.word	0x08000a03
 80008cc:	08000937 	.word	0x08000937
 80008d0:	08000a03 	.word	0x08000a03
 80008d4:	08000a03 	.word	0x08000a03
 80008d8:	08000a03 	.word	0x08000a03
 80008dc:	08000a03 	.word	0x08000a03
 80008e0:	08000a03 	.word	0x08000a03
 80008e4:	0800093b 	.word	0x0800093b
 80008e8:	080009f5 	.word	0x080009f5
 80008ec:	08000a03 	.word	0x08000a03
 80008f0:	08000a03 	.word	0x08000a03
 80008f4:	08000929 	.word	0x08000929
 80008f8:	08000a03 	.word	0x08000a03
 80008fc:	08000947 	.word	0x08000947
 8000900:	08000a03 	.word	0x08000a03
 8000904:	08000a03 	.word	0x08000a03
 8000908:	08000961 	.word	0x08000961
    case '%': out_spec->conv_spec = NPF_FMT_SPEC_CONV_PERCENT;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	2200      	movs	r2, #0
 8000910:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	2200      	movs	r2, #0
 8000916:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8000918:	e07e      	b.n	8000a18 <npf_parse_format_spec+0x47c>

    case 'c': out_spec->conv_spec = NPF_FMT_SPEC_CONV_CHAR;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2201      	movs	r2, #1
 800091e:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	2200      	movs	r2, #0
 8000924:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8000926:	e077      	b.n	8000a18 <npf_parse_format_spec+0x47c>

    case 's': out_spec->conv_spec = NPF_FMT_SPEC_CONV_STRING;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	2202      	movs	r2, #2
 800092c:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
      out_spec->leading_zero_pad = 0;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	725a      	strb	r2, [r3, #9]
#endif
      break;
 8000934:	e070      	b.n	8000a18 <npf_parse_format_spec+0x47c>

    case 'i':
    case 'd': tmp_conv = NPF_FMT_SPEC_CONV_SIGNED_INT;
 8000936:	2303      	movs	r3, #3
 8000938:	60bb      	str	r3, [r7, #8]
    case 'o': if (tmp_conv == -1) { tmp_conv = NPF_FMT_SPEC_CONV_OCTAL; }
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000940:	d101      	bne.n	8000946 <npf_parse_format_spec+0x3aa>
 8000942:	2304      	movs	r3, #4
 8000944:	60bb      	str	r3, [r7, #8]
    case 'u': if (tmp_conv == -1) { tmp_conv = NPF_FMT_SPEC_CONV_UNSIGNED_INT; }
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800094c:	d101      	bne.n	8000952 <npf_parse_format_spec+0x3b6>
 800094e:	2306      	movs	r3, #6
 8000950:	60bb      	str	r3, [r7, #8]
    case 'X': if (tmp_conv == -1) { out_spec->case_adjust = 0; }
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000958:	d102      	bne.n	8000960 <npf_parse_format_spec+0x3c4>
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	2200      	movs	r2, #0
 800095e:	749a      	strb	r2, [r3, #18]
    case 'x': if (tmp_conv == -1) { tmp_conv = NPF_FMT_SPEC_CONV_HEX_INT; }
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000966:	d101      	bne.n	800096c <npf_parse_format_spec+0x3d0>
 8000968:	2305      	movs	r3, #5
 800096a:	60bb      	str	r3, [r7, #8]
      out_spec->conv_spec = (npf_format_spec_conversion_t)tmp_conv;
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	745a      	strb	r2, [r3, #17]
#if (NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1) && \
    (NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1)
      if (out_spec->prec_opt != NPF_FMT_SPEC_OPT_NONE) { out_spec->leading_zero_pad = 0; }
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	7a9b      	ldrb	r3, [r3, #10]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d044      	beq.n	8000a06 <npf_parse_format_spec+0x46a>
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	2200      	movs	r2, #0
 8000980:	725a      	strb	r2, [r3, #9]
#endif
      break;
 8000982:	e040      	b.n	8000a06 <npf_parse_format_spec+0x46a>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    case 'F': out_spec->case_adjust = 0;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	2200      	movs	r2, #0
 8000988:	749a      	strb	r2, [r3, #18]
    case 'f':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_FLOAT_DEC;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	2208      	movs	r2, #8
 800098e:	745a      	strb	r2, [r3, #17]
      if (out_spec->prec_opt == NPF_FMT_SPEC_OPT_NONE) { out_spec->prec = 6; }
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	7a9b      	ldrb	r3, [r3, #10]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d138      	bne.n	8000a0a <npf_parse_format_spec+0x46e>
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	2206      	movs	r2, #6
 800099c:	60da      	str	r2, [r3, #12]
      break;
 800099e:	e034      	b.n	8000a0a <npf_parse_format_spec+0x46e>

    case 'E': out_spec->case_adjust = 0;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	2200      	movs	r2, #0
 80009a4:	749a      	strb	r2, [r3, #18]
    case 'e':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_FLOAT_SCI;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	2209      	movs	r2, #9
 80009aa:	745a      	strb	r2, [r3, #17]
      if (out_spec->prec_opt == NPF_FMT_SPEC_OPT_NONE) { out_spec->prec = 6; }
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	7a9b      	ldrb	r3, [r3, #10]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d12c      	bne.n	8000a0e <npf_parse_format_spec+0x472>
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	2206      	movs	r2, #6
 80009b8:	60da      	str	r2, [r3, #12]
      break;
 80009ba:	e028      	b.n	8000a0e <npf_parse_format_spec+0x472>

    case 'G': out_spec->case_adjust = 0;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	2200      	movs	r2, #0
 80009c0:	749a      	strb	r2, [r3, #18]
    case 'g':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_FLOAT_SHORTEST;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	220a      	movs	r2, #10
 80009c6:	745a      	strb	r2, [r3, #17]
      if (out_spec->prec_opt == NPF_FMT_SPEC_OPT_NONE) { out_spec->prec = 6; }
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	7a9b      	ldrb	r3, [r3, #10]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d120      	bne.n	8000a12 <npf_parse_format_spec+0x476>
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	2206      	movs	r2, #6
 80009d4:	60da      	str	r2, [r3, #12]
      break;
 80009d6:	e01c      	b.n	8000a12 <npf_parse_format_spec+0x476>

    case 'A': out_spec->case_adjust = 0;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	2200      	movs	r2, #0
 80009dc:	749a      	strb	r2, [r3, #18]
    case 'a':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_FLOAT_HEX;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	220b      	movs	r2, #11
 80009e2:	745a      	strb	r2, [r3, #17]
      if (out_spec->prec_opt == NPF_FMT_SPEC_OPT_NONE) { out_spec->prec = 6; }
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	7a9b      	ldrb	r3, [r3, #10]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d114      	bne.n	8000a16 <npf_parse_format_spec+0x47a>
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2206      	movs	r2, #6
 80009f0:	60da      	str	r2, [r3, #12]
      break;
 80009f2:	e010      	b.n	8000a16 <npf_parse_format_spec+0x47a>
#endif
      break;
#endif

    case 'p':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_POINTER;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	2207      	movs	r2, #7
 80009f8:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	2200      	movs	r2, #0
 80009fe:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8000a00:	e00a      	b.n	8000a18 <npf_parse_format_spec+0x47c>
    case 'b':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_BINARY;
      break;
#endif

    default: return 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e00b      	b.n	8000a1e <npf_parse_format_spec+0x482>
      break;
 8000a06:	bf00      	nop
 8000a08:	e006      	b.n	8000a18 <npf_parse_format_spec+0x47c>
      break;
 8000a0a:	bf00      	nop
 8000a0c:	e004      	b.n	8000a18 <npf_parse_format_spec+0x47c>
      break;
 8000a0e:	bf00      	nop
 8000a10:	e002      	b.n	8000a18 <npf_parse_format_spec+0x47c>
      break;
 8000a12:	bf00      	nop
 8000a14:	e000      	b.n	8000a18 <npf_parse_format_spec+0x47c>
      break;
 8000a16:	bf00      	nop
  }

  return (int)(cur - format);
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	1ad3      	subs	r3, r2, r3
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <npf_itoa_rev>:

int npf_itoa_rev(char *buf, npf_int_t i) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  int n = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  int const sign = (i >= 0) ? 1 : -1;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db01      	blt.n	8000a44 <npf_itoa_rev+0x18>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e001      	b.n	8000a48 <npf_itoa_rev+0x1c>
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	60bb      	str	r3, [r7, #8]
  do { *buf++ = (char)('0' + (sign * (i % 10))); i /= 10; ++n; } while (i);
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	b2d8      	uxtb	r0, r3
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <npf_itoa_rev+0x78>)
 8000a52:	fb83 1302 	smull	r1, r3, r3, r2
 8000a56:	1099      	asrs	r1, r3, #2
 8000a58:	17d3      	asrs	r3, r2, #31
 8000a5a:	1ac9      	subs	r1, r1, r3
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	440b      	add	r3, r1
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	1ad1      	subs	r1, r2, r3
 8000a66:	b2cb      	uxtb	r3, r1
 8000a68:	fb10 f303 	smulbb	r3, r0, r3
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	1c59      	adds	r1, r3, #1
 8000a72:	6079      	str	r1, [r7, #4]
 8000a74:	3230      	adds	r2, #48	; 0x30
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	701a      	strb	r2, [r3, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <npf_itoa_rev+0x78>)
 8000a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a82:	1092      	asrs	r2, r2, #2
 8000a84:	17db      	asrs	r3, r3, #31
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1d9      	bne.n	8000a4a <npf_itoa_rev+0x1e>
  return n;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	66666667 	.word	0x66666667

08000aa8 <npf_utoa_rev>:

int npf_utoa_rev(char *buf, npf_uint_t i, unsigned base, unsigned case_adj) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	603b      	str	r3, [r7, #0]
  int n = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  do {
    unsigned const d = (unsigned)(i % base);
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	fb01 f202 	mul.w	r2, r1, r2
 8000ac8:	1a9b      	subs	r3, r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
    *buf++ = (char)((d < 10) ? ('0' + d) : ('A' + case_adj + (d - 10)));
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	2b09      	cmp	r3, #9
 8000ad0:	d804      	bhi.n	8000adc <npf_utoa_rev+0x34>
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	3330      	adds	r3, #48	; 0x30
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	e007      	b.n	8000aec <npf_utoa_rev+0x44>
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	4413      	add	r3, r2
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	3337      	adds	r3, #55	; 0x37
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	1c59      	adds	r1, r3, #1
 8000af0:	60f9      	str	r1, [r7, #12]
 8000af2:	701a      	strb	r2, [r3, #0]
    i /= base;
 8000af4:	68ba      	ldr	r2, [r7, #8]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afc:	60bb      	str	r3, [r7, #8]
    ++n;
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3301      	adds	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
  } while (i);
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1d7      	bne.n	8000aba <npf_utoa_rev+0x12>
  return n;
 8000b0a:	697b      	ldr	r3, [r7, #20]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	371c      	adds	r7, #28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <npf_fsplit_abs>:
  NPF_FRACTION_BIN_DIGITS = 64,
  NPF_MAX_FRACTION_DEC_DIGITS = 8
};

int npf_fsplit_abs(float f, uint64_t *out_int_part, uint64_t *out_frac_part,
                   int *out_frac_base10_neg_exp) {
 8000b18:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000b1c:	b0b5      	sub	sp, #212	; 0xd4
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
 8000b24:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8000b28:	67f9      	str	r1, [r7, #124]	; 0x7c
 8000b2a:	67ba      	str	r2, [r7, #120]	; 0x78
     http://0x80.pl/notesen/2015-12-29-float-to-string.html
     grisu2 (https://bit.ly/2JgMggX) and ryu (https://bit.ly/2RLXSg0)
     are fast + precise + round, but require large lookup tables. */

  uint32_t f_bits; { // union-cast is UB, let compiler optimize byte-copy loop.
    char const *src = (char const *)&f;
 8000b2c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    char *dst = (char *)&f_bits;
 8000b34:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    for (unsigned i = 0; i < sizeof(f_bits); ++i) { dst[i] = src[i]; }
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000b42:	e010      	b.n	8000b66 <npf_fsplit_abs+0x4e>
 8000b44:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000b48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000b4c:	18d1      	adds	r1, r2, r3
 8000b4e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000b52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000b56:	441a      	add	r2, r3
 8000b58:	780b      	ldrb	r3, [r1, #0]
 8000b5a:	7013      	strb	r3, [r2, #0]
 8000b5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000b60:	3301      	adds	r3, #1
 8000b62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000b66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d9ea      	bls.n	8000b44 <npf_fsplit_abs+0x2c>
  }

  int const exponent =
    ((int)((f_bits >> NPF_MANTISSA_BITS) & ((1u << NPF_EXPONENT_BITS) - 1u)) -
 8000b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b72:	0ddb      	lsrs	r3, r3, #23
 8000b74:	b2db      	uxtb	r3, r3
  int const exponent =
 8000b76:	3b96      	subs	r3, #150	; 0x96
 8000b78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      NPF_EXPONENT_BIAS) - NPF_MANTISSA_BITS;

  if (exponent >= (64 - NPF_MANTISSA_BITS)) { return 0; } // value is out of range
 8000b7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000b80:	2b28      	cmp	r3, #40	; 0x28
 8000b82:	dd01      	ble.n	8000b88 <npf_fsplit_abs+0x70>
 8000b84:	2300      	movs	r3, #0
 8000b86:	e17c      	b.n	8000e82 <npf_fsplit_abs+0x36a>

  uint32_t const implicit_one = 1u << NPF_MANTISSA_BITS;
 8000b88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t const mantissa = f_bits & (implicit_one - 1);
 8000b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000b94:	1e5a      	subs	r2, r3, #1
 8000b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  uint32_t const mantissa_norm = mantissa | implicit_one;
 8000ba0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  if (exponent > 0) {
 8000bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	dd19      	ble.n	8000bea <npf_fsplit_abs+0xd2>
    *out_int_part = (uint64_t)mantissa_norm << exponent;
 8000bb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000bba:	2200      	movs	r2, #0
 8000bbc:	469a      	mov	sl, r3
 8000bbe:	4693      	mov	fp, r2
 8000bc0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000bc4:	f1a1 0320 	sub.w	r3, r1, #32
 8000bc8:	f1c1 0220 	rsb	r2, r1, #32
 8000bcc:	fa0b f501 	lsl.w	r5, fp, r1
 8000bd0:	fa0a f303 	lsl.w	r3, sl, r3
 8000bd4:	431d      	orrs	r5, r3
 8000bd6:	fa2a f202 	lsr.w	r2, sl, r2
 8000bda:	4315      	orrs	r5, r2
 8000bdc:	fa0a f401 	lsl.w	r4, sl, r1
 8000be0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000be4:	e9c3 4500 	strd	r4, r5, [r3]
 8000be8:	e02c      	b.n	8000c44 <npf_fsplit_abs+0x12c>
  } else if (exponent < 0) {
 8000bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	da1d      	bge.n	8000c2e <npf_fsplit_abs+0x116>
    if (-exponent > NPF_MANTISSA_BITS) {
 8000bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000bf6:	f113 0f17 	cmn.w	r3, #23
 8000bfa:	da08      	bge.n	8000c0e <npf_fsplit_abs+0xf6>
      *out_int_part = 0;
 8000bfc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000c00:	f04f 0200 	mov.w	r2, #0
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	e9c1 2300 	strd	r2, r3, [r1]
 8000c0c:	e01a      	b.n	8000c44 <npf_fsplit_abs+0x12c>
    } else {
      *out_int_part = mantissa_norm >> -exponent;
 8000c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c12:	425a      	negs	r2, r3
 8000c14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c18:	40d3      	lsrs	r3, r2
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	653b      	str	r3, [r7, #80]	; 0x50
 8000c1e:	657a      	str	r2, [r7, #84]	; 0x54
 8000c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c24:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8000c28:	e9c3 1200 	strd	r1, r2, [r3]
 8000c2c:	e00a      	b.n	8000c44 <npf_fsplit_abs+0x12c>
    }
  } else {
    *out_int_part = mantissa_norm;
 8000c2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c32:	2200      	movs	r2, #0
 8000c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c36:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c3c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8000c40:	e9c3 1200 	strd	r1, r2, [r3]
  }

  uint64_t frac; {
    int const shift = NPF_FRACTION_BIN_DIGITS + exponent - 4;
 8000c44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c48:	333c      	adds	r3, #60	; 0x3c
 8000c4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if ((shift >= (NPF_FRACTION_BIN_DIGITS - 4)) || (shift < 0)) {
 8000c4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c52:	2b3b      	cmp	r3, #59	; 0x3b
 8000c54:	dc03      	bgt.n	8000c5e <npf_fsplit_abs+0x146>
 8000c56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	da06      	bge.n	8000c6c <npf_fsplit_abs+0x154>
      frac = 0;
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	f04f 0300 	mov.w	r3, #0
 8000c66:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 8000c6a:	e022      	b.n	8000cb2 <npf_fsplit_abs+0x19a>
    } else {
      frac = ((uint64_t)mantissa_norm) << shift;
 8000c6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c70:	2200      	movs	r2, #0
 8000c72:	643b      	str	r3, [r7, #64]	; 0x40
 8000c74:	647a      	str	r2, [r7, #68]	; 0x44
 8000c76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000c7a:	f1a1 0320 	sub.w	r3, r1, #32
 8000c7e:	f1c1 0220 	rsb	r2, r1, #32
 8000c82:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8000c86:	4628      	mov	r0, r5
 8000c88:	4088      	lsls	r0, r1
 8000c8a:	6778      	str	r0, [r7, #116]	; 0x74
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	fa00 f303 	lsl.w	r3, r0, r3
 8000c92:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000c94:	4318      	orrs	r0, r3
 8000c96:	6778      	str	r0, [r7, #116]	; 0x74
 8000c98:	4623      	mov	r3, r4
 8000c9a:	fa23 f202 	lsr.w	r2, r3, r2
 8000c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	677b      	str	r3, [r7, #116]	; 0x74
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	408b      	lsls	r3, r1
 8000ca8:	673b      	str	r3, [r7, #112]	; 0x70
 8000caa:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8000cae:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
    }
    // multiply off the leading one's digit
    frac &= 0x0fffffffffffffffllu;
 8000cb2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000cb6:	63ba      	str	r2, [r7, #56]	; 0x38
 8000cb8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cbe:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000cc2:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
    frac *= 10;
 8000cc6:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8000cca:	4622      	mov	r2, r4
 8000ccc:	462b      	mov	r3, r5
 8000cce:	f04f 0000 	mov.w	r0, #0
 8000cd2:	f04f 0100 	mov.w	r1, #0
 8000cd6:	0099      	lsls	r1, r3, #2
 8000cd8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000cdc:	0090      	lsls	r0, r2, #2
 8000cde:	4602      	mov	r2, r0
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	eb12 0804 	adds.w	r8, r2, r4
 8000ce6:	eb43 0905 	adc.w	r9, r3, r5
 8000cea:	eb18 0308 	adds.w	r3, r8, r8
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
 8000cf0:	eb49 0309 	adc.w	r3, r9, r9
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8000cf6:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8000cfa:	e9c7 8930 	strd	r8, r9, [r7, #192]	; 0xc0
  }

  { // Count the number of 0s at the beginning of the fractional part.
    int frac_base10_neg_exp = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    while (frac && ((frac >> (NPF_FRACTION_BIN_DIGITS - 4))) == 0) {
 8000d04:	e02f      	b.n	8000d66 <npf_fsplit_abs+0x24e>
      ++frac_base10_neg_exp;
 8000d06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      frac &= 0x0fffffffffffffffllu;
 8000d10:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000d14:	62ba      	str	r2, [r7, #40]	; 0x28
 8000d16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d1c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000d20:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
      frac *= 10;
 8000d24:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8000d28:	4622      	mov	r2, r4
 8000d2a:	462b      	mov	r3, r5
 8000d2c:	f04f 0000 	mov.w	r0, #0
 8000d30:	f04f 0100 	mov.w	r1, #0
 8000d34:	0099      	lsls	r1, r3, #2
 8000d36:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000d3a:	0090      	lsls	r0, r2, #2
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	1911      	adds	r1, r2, r4
 8000d42:	66b9      	str	r1, [r7, #104]	; 0x68
 8000d44:	416b      	adcs	r3, r5
 8000d46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000d48:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	18db      	adds	r3, r3, r3
 8000d50:	623b      	str	r3, [r7, #32]
 8000d52:	4613      	mov	r3, r2
 8000d54:	eb42 0303 	adc.w	r3, r2, r3
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000d5e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8000d62:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
    while (frac && ((frac >> (NPF_FRACTION_BIN_DIGITS - 4))) == 0) {
 8000d66:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	d00a      	beq.n	8000d84 <npf_fsplit_abs+0x26c>
 8000d6e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	f04f 0100 	mov.w	r1, #0
 8000d7a:	0f18      	lsrs	r0, r3, #28
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	ea50 0301 	orrs.w	r3, r0, r1
 8000d82:	d0c0      	beq.n	8000d06 <npf_fsplit_abs+0x1ee>
    }
    *out_frac_base10_neg_exp = frac_base10_neg_exp;
 8000d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000d8a:	601a      	str	r2, [r3, #0]
  }

  { // Convert the fractional part to base 10.
    uint64_t frac_part = 0;
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    for (int i = 0; frac && (i < NPF_MAX_FRACTION_DEC_DIGITS); ++i) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000d9e:	e062      	b.n	8000e66 <npf_fsplit_abs+0x34e>
      frac_part *= 10;
 8000da0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000da4:	4622      	mov	r2, r4
 8000da6:	462b      	mov	r3, r5
 8000da8:	f04f 0000 	mov.w	r0, #0
 8000dac:	f04f 0100 	mov.w	r1, #0
 8000db0:	0099      	lsls	r1, r3, #2
 8000db2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000db6:	0090      	lsls	r0, r2, #2
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	1911      	adds	r1, r2, r4
 8000dbe:	6639      	str	r1, [r7, #96]	; 0x60
 8000dc0:	416b      	adcs	r3, r5
 8000dc2:	667b      	str	r3, [r7, #100]	; 0x64
 8000dc4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8000dc8:	460b      	mov	r3, r1
 8000dca:	18db      	adds	r3, r3, r3
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	eb42 0303 	adc.w	r3, r2, r3
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000dda:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
 8000dde:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
      frac_part += (uint64_t)(frac >> (NPF_FRACTION_BIN_DIGITS - 4));
 8000de2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	f04f 0100 	mov.w	r1, #0
 8000dee:	0f18      	lsrs	r0, r3, #28
 8000df0:	2100      	movs	r1, #0
 8000df2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8000df6:	1814      	adds	r4, r2, r0
 8000df8:	613c      	str	r4, [r7, #16]
 8000dfa:	414b      	adcs	r3, r1
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000e02:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
      frac &= 0x0fffffffffffffffllu;
 8000e06:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000e0a:	60ba      	str	r2, [r7, #8]
 8000e0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000e16:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
      frac *= 10;
 8000e1a:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8000e1e:	4622      	mov	r2, r4
 8000e20:	462b      	mov	r3, r5
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	f04f 0100 	mov.w	r1, #0
 8000e2a:	0099      	lsls	r1, r3, #2
 8000e2c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e30:	0090      	lsls	r0, r2, #2
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	1911      	adds	r1, r2, r4
 8000e38:	65b9      	str	r1, [r7, #88]	; 0x58
 8000e3a:	416b      	adcs	r3, r5
 8000e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8000e42:	460b      	mov	r3, r1
 8000e44:	18db      	adds	r3, r3, r3
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	eb42 0303 	adc.w	r3, r2, r3
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000e54:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8000e58:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
    for (int i = 0; frac && (i < NPF_MAX_FRACTION_DEC_DIGITS); ++i) {
 8000e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e60:	3301      	adds	r3, #1
 8000e62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000e66:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	d003      	beq.n	8000e76 <npf_fsplit_abs+0x35e>
 8000e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e72:	2b07      	cmp	r3, #7
 8000e74:	dd94      	ble.n	8000da0 <npf_fsplit_abs+0x288>
    }
    *out_frac_part = frac_part;
 8000e76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000e78:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8000e7c:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return 1;
 8000e80:	2301      	movs	r3, #1
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	37d4      	adds	r7, #212	; 0xd4
 8000e86:	46bd      	mov	sp, r7
 8000e88:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000e8c:	4770      	bx	lr
	...

08000e90 <npf_ftoa_rev>:

int npf_ftoa_rev(char *buf, float f, char case_adj, int *out_frac_chars) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b092      	sub	sp, #72	; 0x48
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	603a      	str	r2, [r7, #0]
 8000ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t f_bits; { // union-cast is UB, let compiler optimize byte-copy loop.
    char const *src = (char const *)&f;
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
    char *dst = (char *)&f_bits;
 8000ea8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (unsigned i = 0; i < sizeof(f_bits); ++i) { dst[i] = src[i]; }
 8000eae:	2300      	movs	r3, #0
 8000eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8000eb2:	e00a      	b.n	8000eca <npf_ftoa_rev+0x3a>
 8000eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eb8:	441a      	add	r2, r3
 8000eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ebe:	440b      	add	r3, r1
 8000ec0:	7812      	ldrb	r2, [r2, #0]
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8000eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d9f1      	bls.n	8000eb4 <npf_ftoa_rev+0x24>
  }

  if ((uint8_t)(f_bits >> 23) == 0xFF) {
 8000ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed2:	0ddb      	lsrs	r3, r3, #23
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2bff      	cmp	r3, #255	; 0xff
 8000ed8:	d130      	bne.n	8000f3c <npf_ftoa_rev+0xac>
    if (f_bits & 0x7fffff) {
 8000eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000edc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d014      	beq.n	8000f0e <npf_ftoa_rev+0x7e>
      for (int i = 0; i < 3; ++i) { *buf++ = (char)("NAN"[i] + case_adj); }
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8000ee8:	e00d      	b.n	8000f06 <npf_ftoa_rev+0x76>
 8000eea:	4a56      	ldr	r2, [pc, #344]	; (8001044 <npf_ftoa_rev+0x1b4>)
 8000eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eee:	4413      	add	r3, r2
 8000ef0:	7819      	ldrb	r1, [r3, #0]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	60fa      	str	r2, [r7, #12]
 8000ef8:	79fa      	ldrb	r2, [r7, #7]
 8000efa:	440a      	add	r2, r1
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f02:	3301      	adds	r3, #1
 8000f04:	643b      	str	r3, [r7, #64]	; 0x40
 8000f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	ddee      	ble.n	8000eea <npf_ftoa_rev+0x5a>
 8000f0c:	e013      	b.n	8000f36 <npf_ftoa_rev+0xa6>
    } else {
      for (int i = 0; i < 3; ++i) { *buf++ = (char)("FNI"[i] + case_adj); }
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f12:	e00d      	b.n	8000f30 <npf_ftoa_rev+0xa0>
 8000f14:	4a4c      	ldr	r2, [pc, #304]	; (8001048 <npf_ftoa_rev+0x1b8>)
 8000f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f18:	4413      	add	r3, r2
 8000f1a:	7819      	ldrb	r1, [r3, #0]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	60fa      	str	r2, [r7, #12]
 8000f22:	79fa      	ldrb	r2, [r7, #7]
 8000f24:	440a      	add	r2, r1
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	ddee      	ble.n	8000f14 <npf_ftoa_rev+0x84>
    }
    return -3;
 8000f36:	f06f 0302 	mvn.w	r3, #2
 8000f3a:	e07f      	b.n	800103c <npf_ftoa_rev+0x1ac>
  }

  uint64_t int_part, frac_part;
  int frac_base10_neg_exp;
  if (npf_fsplit_abs(f, &int_part, &frac_part, &frac_base10_neg_exp) == 0) {
 8000f3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f40:	f107 0214 	add.w	r2, r7, #20
 8000f44:	f107 0118 	add.w	r1, r7, #24
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f52:	f7ff fde1 	bl	8000b18 <npf_fsplit_abs>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d116      	bne.n	8000f8a <npf_ftoa_rev+0xfa>
    for (int i = 0; i < 3; ++i) { *buf++ = (char)("ROO"[i] + case_adj); }
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f60:	e00d      	b.n	8000f7e <npf_ftoa_rev+0xee>
 8000f62:	4a3a      	ldr	r2, [pc, #232]	; (800104c <npf_ftoa_rev+0x1bc>)
 8000f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f66:	4413      	add	r3, r2
 8000f68:	7819      	ldrb	r1, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	60fa      	str	r2, [r7, #12]
 8000f70:	79fa      	ldrb	r2, [r7, #7]
 8000f72:	440a      	add	r2, r1
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	ddee      	ble.n	8000f62 <npf_ftoa_rev+0xd2>
    return -3;
 8000f84:	f06f 0302 	mvn.w	r3, #2
 8000f88:	e058      	b.n	800103c <npf_ftoa_rev+0x1ac>
  }

  char *dst = buf;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34

  while (frac_part) { // write the fractional digits
 8000f8e:	e01a      	b.n	8000fc6 <npf_ftoa_rev+0x136>
    *dst++ = (char)('0' + (frac_part % 10));
 8000f90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f94:	f04f 020a 	mov.w	r2, #10
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	f7ff f96c 	bl	8000278 <__aeabi_uldivmod>
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fa4:	1c59      	adds	r1, r3, #1
 8000fa6:	6379      	str	r1, [r7, #52]	; 0x34
 8000fa8:	3230      	adds	r2, #48	; 0x30
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	701a      	strb	r2, [r3, #0]
    frac_part /= 10;
 8000fae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fb2:	f04f 020a 	mov.w	r2, #10
 8000fb6:	f04f 0300 	mov.w	r3, #0
 8000fba:	f7ff f95d 	bl	8000278 <__aeabi_uldivmod>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  while (frac_part) { // write the fractional digits
 8000fc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	d1e0      	bne.n	8000f90 <npf_ftoa_rev+0x100>
  }

  // write the 0 digits between the . and the first fractional digit
  while (frac_base10_neg_exp-- > 0) { *dst++ = '0'; }
 8000fce:	e004      	b.n	8000fda <npf_ftoa_rev+0x14a>
 8000fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	637a      	str	r2, [r7, #52]	; 0x34
 8000fd6:	2230      	movs	r2, #48	; 0x30
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	1e5a      	subs	r2, r3, #1
 8000fde:	617a      	str	r2, [r7, #20]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dcf5      	bgt.n	8000fd0 <npf_ftoa_rev+0x140>
  *out_frac_chars = (int)(dst - buf);
 8000fe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1ad2      	subs	r2, r2, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	601a      	str	r2, [r3, #0]
  *dst++ = '.';
 8000fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	637a      	str	r2, [r7, #52]	; 0x34
 8000ff4:	222e      	movs	r2, #46	; 0x2e
 8000ff6:	701a      	strb	r2, [r3, #0]

  // write the integer digits
  do { *dst++ = (char)('0' + (int_part % 10)); int_part /= 10; } while (int_part);
 8000ff8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ffc:	f04f 020a 	mov.w	r2, #10
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	f7ff f938 	bl	8000278 <__aeabi_uldivmod>
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100c:	1c59      	adds	r1, r3, #1
 800100e:	6379      	str	r1, [r7, #52]	; 0x34
 8001010:	3230      	adds	r2, #48	; 0x30
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	701a      	strb	r2, [r3, #0]
 8001016:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800101a:	f04f 020a 	mov.w	r2, #10
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	f7ff f929 	bl	8000278 <__aeabi_uldivmod>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800102e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001032:	4313      	orrs	r3, r2
 8001034:	d1e0      	bne.n	8000ff8 <npf_ftoa_rev+0x168>
  return (int)(dst - buf);
 8001036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	1ad3      	subs	r3, r2, r3
}
 800103c:	4618      	mov	r0, r3
 800103e:	3748      	adds	r7, #72	; 0x48
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	08005d00 	.word	0x08005d00
 8001048:	08005d04 	.word	0x08005d04
 800104c:	08005d08 	.word	0x08005d08

08001050 <npf_bufputc>:
  #undef NPF_CLZ
#endif
}
#endif

void npf_bufputc(int c, void *ctx) {
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  npf_bufputc_ctx_t *bpc = (npf_bufputc_ctx_t *)ctx;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	60fb      	str	r3, [r7, #12]
  if (bpc->cur < bpc->len) { bpc->dst[bpc->cur++] = (char)c; }
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	429a      	cmp	r2, r3
 8001068:	d20a      	bcs.n	8001080 <npf_bufputc+0x30>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	1c58      	adds	r0, r3, #1
 8001074:	68f9      	ldr	r1, [r7, #12]
 8001076:	6088      	str	r0, [r1, #8]
 8001078:	4413      	add	r3, r2
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	701a      	strb	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <npf_bufputc_nop>:

void npf_bufputc_nop(int c, void *ctx) { (void)c; (void)ctx; }
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <npf_putc_cnt>:
  npf_putc pc;
  void *ctx;
  int n;
} npf_cnt_putc_ctx_t;

static void npf_putc_cnt(int c, void *ctx) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
  npf_cnt_putc_ctx_t *pc_cnt = (npf_cnt_putc_ctx_t *)ctx;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	60fb      	str	r3, [r7, #12]
  ++pc_cnt->n;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	609a      	str	r2, [r3, #8]
  pc_cnt->pc(c, pc_cnt->ctx); // sibling-call optimization
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	6852      	ldr	r2, [r2, #4]
 80010c2:	4611      	mov	r1, r2
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	4798      	blx	r3
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <npf_vpprintf>:
  case NPF_FMT_SPEC_LEN_MOD_##MOD: val = (CAST_TO)va_arg(args, EXTRACT_AS); break

#define NPF_WRITEBACK(MOD, TYPE) \
  case NPF_FMT_SPEC_LEN_MOD_##MOD: *(va_arg(args, TYPE *)) = (TYPE)pc_cnt.n; break

int npf_vpprintf(npf_putc pc, void *pc_ctx, char const *format, va_list args) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0a8      	sub	sp, #160	; 0xa0
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
  npf_format_spec_t fs;
  char const *cur = format;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  npf_cnt_putc_ctx_t pc_cnt;
  pc_cnt.pc = pc;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  pc_cnt.ctx = pc_ctx;
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	63bb      	str	r3, [r7, #56]	; 0x38
  pc_cnt.n = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c

  while (*cur) {
 80010f0:	e3a0      	b.n	8001834 <npf_vpprintf+0x764>
    int const fs_len = (*cur != '%') ? 0 : npf_parse_format_spec(cur, &fs);
 80010f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b25      	cmp	r3, #37	; 0x25
 80010fa:	d108      	bne.n	800110e <npf_vpprintf+0x3e>
 80010fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001100:	4619      	mov	r1, r3
 8001102:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001106:	f7ff fa49 	bl	800059c <npf_parse_format_spec>
 800110a:	4603      	mov	r3, r0
 800110c:	e000      	b.n	8001110 <npf_vpprintf+0x40>
 800110e:	2300      	movs	r3, #0
 8001110:	663b      	str	r3, [r7, #96]	; 0x60
    if (!fs_len) { NPF_PUTC(*cur++); continue; }
 8001112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10d      	bne.n	8001134 <npf_vpprintf+0x64>
 8001118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800112a:	4619      	mov	r1, r3
 800112c:	4610      	mov	r0, r2
 800112e:	f7ff ffb8 	bl	80010a2 <npf_putc_cnt>
 8001132:	e37f      	b.n	8001834 <npf_vpprintf+0x764>
    cur += fs_len;
 8001134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001136:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800113a:	4413      	add	r3, r2
 800113c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    // Extract star-args immediately
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    if (fs.field_width_opt == NPF_FMT_SPEC_OPT_STAR) {
 8001140:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001144:	2b02      	cmp	r3, #2
 8001146:	d110      	bne.n	800116a <npf_vpprintf+0x9a>
      fs.field_width_opt = NPF_FMT_SPEC_OPT_LITERAL;
 8001148:	2301      	movs	r3, #1
 800114a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      fs.field_width = va_arg(args, int);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	1d1a      	adds	r2, r3, #4
 8001152:	603a      	str	r2, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	647b      	str	r3, [r7, #68]	; 0x44
      if (fs.field_width < 0) {
 8001158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800115a:	2b00      	cmp	r3, #0
 800115c:	da05      	bge.n	800116a <npf_vpprintf+0x9a>
        fs.field_width = -fs.field_width;
 800115e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001160:	425b      	negs	r3, r3
 8001162:	647b      	str	r3, [r7, #68]	; 0x44
        fs.left_justified = 1;
 8001164:	2301      	movs	r3, #1
 8001166:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
      }
    }
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    if (fs.prec_opt == NPF_FMT_SPEC_OPT_STAR) {
 800116a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800116e:	2b02      	cmp	r3, #2
 8001170:	d10d      	bne.n	800118e <npf_vpprintf+0xbe>
      fs.prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8001172:	2300      	movs	r3, #0
 8001174:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      fs.prec = va_arg(args, int);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	1d1a      	adds	r2, r3, #4
 800117c:	603a      	str	r2, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (fs.prec >= 0) { fs.prec_opt = NPF_FMT_SPEC_OPT_LITERAL; }
 8001182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001184:	2b00      	cmp	r3, #0
 8001186:	db02      	blt.n	800118e <npf_vpprintf+0xbe>
 8001188:	2301      	movs	r3, #1
 800118a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    }
#endif

    union { char cbuf_mem[32]; npf_uint_t binval; } u;
    char *cbuf = u.cbuf_mem, sign_c = 0;
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001196:	2300      	movs	r3, #0
 8001198:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    int cbuf_len = 0, need_0x = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    int field_pad = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    char pad_c = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    int prec_pad = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    int zero = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
#endif
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    int frac_chars = 0, inf_or_nan = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
 80011c2:	2300      	movs	r3, #0
 80011c4:	67bb      	str	r3, [r7, #120]	; 0x78
#endif

    // Extract and convert the argument to string, point cbuf at the text.
    switch (fs.conv_spec) {
 80011c6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80011ca:	2b0b      	cmp	r3, #11
 80011cc:	f200 81c3 	bhi.w	8001556 <npf_vpprintf+0x486>
 80011d0:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <npf_vpprintf+0x108>)
 80011d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d6:	bf00      	nop
 80011d8:	08001209 	.word	0x08001209
 80011dc:	08001219 	.word	0x08001219
 80011e0:	08001231 	.word	0x08001231
 80011e4:	08001273 	.word	0x08001273
 80011e8:	08001327 	.word	0x08001327
 80011ec:	08001327 	.word	0x08001327
 80011f0:	08001327 	.word	0x08001327
 80011f4:	08001463 	.word	0x08001463
 80011f8:	08001485 	.word	0x08001485
 80011fc:	08001485 	.word	0x08001485
 8001200:	08001485 	.word	0x08001485
 8001204:	08001485 	.word	0x08001485
      case NPF_FMT_SPEC_CONV_PERCENT:
        *cbuf = '%';
 8001208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800120c:	2225      	movs	r2, #37	; 0x25
 800120e:	701a      	strb	r2, [r3, #0]
        cbuf_len = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 8001216:	e1a3      	b.n	8001560 <npf_vpprintf+0x490>

      case NPF_FMT_SPEC_CONV_CHAR:
        *cbuf = (char)va_arg(args, int);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	1d1a      	adds	r2, r3, #4
 800121c:	603a      	str	r2, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001226:	701a      	strb	r2, [r3, #0]
        cbuf_len = 1;
 8001228:	2301      	movs	r3, #1
 800122a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 800122e:	e197      	b.n	8001560 <npf_vpprintf+0x490>

      case NPF_FMT_SPEC_CONV_STRING: {
        cbuf = va_arg(args, char *);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	1d1a      	adds	r2, r3, #4
 8001234:	603a      	str	r2, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
        for (char const *s = cbuf;
 800123c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001240:	677b      	str	r3, [r7, #116]	; 0x74
 8001242:	e007      	b.n	8001254 <npf_vpprintf+0x184>
             *s && ((fs.prec_opt == NPF_FMT_SPEC_OPT_NONE) || (cbuf_len < fs.prec));
             ++s, ++cbuf_len);
 8001244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001246:	3301      	adds	r3, #1
 8001248:	677b      	str	r3, [r7, #116]	; 0x74
 800124a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800124e:	3301      	adds	r3, #1
 8001250:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
             *s && ((fs.prec_opt == NPF_FMT_SPEC_OPT_NONE) || (cbuf_len < fs.prec));
 8001254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001256:	781b      	ldrb	r3, [r3, #0]
        for (char const *s = cbuf;
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 817e 	beq.w	800155a <npf_vpprintf+0x48a>
             *s && ((fs.prec_opt == NPF_FMT_SPEC_OPT_NONE) || (cbuf_len < fs.prec));
 800125e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0ee      	beq.n	8001244 <npf_vpprintf+0x174>
 8001266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001268:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800126c:	429a      	cmp	r2, r3
 800126e:	dbe9      	blt.n	8001244 <npf_vpprintf+0x174>
#else
        for (char const *s = cbuf; *s; ++s, ++cbuf_len); // strlen
#endif
      } break;
 8001270:	e173      	b.n	800155a <npf_vpprintf+0x48a>

      case NPF_FMT_SPEC_CONV_SIGNED_INT: {
        npf_int_t val = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	673b      	str	r3, [r7, #112]	; 0x70
        switch (fs.length_modifier) {
 8001276:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800127a:	2b04      	cmp	r3, #4
 800127c:	d82c      	bhi.n	80012d8 <npf_vpprintf+0x208>
 800127e:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <npf_vpprintf+0x1b4>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	08001299 	.word	0x08001299
 8001288:	080012a5 	.word	0x080012a5
 800128c:	080012b3 	.word	0x080012b3
 8001290:	080012bf 	.word	0x080012bf
 8001294:	080012cd 	.word	0x080012cd
          NPF_EXTRACT(NONE, int, int);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	1d1a      	adds	r2, r3, #4
 800129c:	603a      	str	r2, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	673b      	str	r3, [r7, #112]	; 0x70
 80012a2:	e01a      	b.n	80012da <npf_vpprintf+0x20a>
          NPF_EXTRACT(SHORT, short, int);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	1d1a      	adds	r2, r3, #4
 80012a8:	603a      	str	r2, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	673b      	str	r3, [r7, #112]	; 0x70
 80012b0:	e013      	b.n	80012da <npf_vpprintf+0x20a>
          NPF_EXTRACT(LONG_DOUBLE, int, int);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	1d1a      	adds	r2, r3, #4
 80012b6:	603a      	str	r2, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	673b      	str	r3, [r7, #112]	; 0x70
 80012bc:	e00d      	b.n	80012da <npf_vpprintf+0x20a>
          NPF_EXTRACT(CHAR, char, int);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	1d1a      	adds	r2, r3, #4
 80012c2:	603a      	str	r2, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	673b      	str	r3, [r7, #112]	; 0x70
 80012ca:	e006      	b.n	80012da <npf_vpprintf+0x20a>
          NPF_EXTRACT(LONG, long, long);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	1d1a      	adds	r2, r3, #4
 80012d0:	603a      	str	r2, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	673b      	str	r3, [r7, #112]	; 0x70
 80012d6:	e000      	b.n	80012da <npf_vpprintf+0x20a>
          NPF_EXTRACT(LARGE_LONG_LONG, long long, long long);
          NPF_EXTRACT(LARGE_INTMAX, intmax_t, intmax_t);
          NPF_EXTRACT(LARGE_SIZET, ssize_t, ssize_t);
          NPF_EXTRACT(LARGE_PTRDIFFT, ptrdiff_t, ptrdiff_t);
#endif
          default: break;
 80012d8:	bf00      	nop
        }

        sign_c = (val < 0) ? '-' : fs.prepend;
 80012da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db02      	blt.n	80012e6 <npf_vpprintf+0x216>
 80012e0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80012e4:	e000      	b.n	80012e8 <npf_vpprintf+0x218>
 80012e6:	232d      	movs	r3, #45	; 0x2d
 80012e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = !val;
 80012ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bf0c      	ite	eq
 80012f2:	2301      	moveq	r3, #1
 80012f4:	2300      	movne	r3, #0
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        // special case, if prec and value are 0, skip
        if (!val && (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec) {
 80012fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10a      	bne.n	8001316 <npf_vpprintf+0x246>
 8001300:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001304:	2b01      	cmp	r3, #1
 8001306:	d106      	bne.n	8001316 <npf_vpprintf+0x246>
 8001308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800130a:	2b00      	cmp	r3, #0
 800130c:	d103      	bne.n	8001316 <npf_vpprintf+0x246>
          cbuf_len = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        } else
#endif
        { cbuf_len = npf_itoa_rev(cbuf, val); }
      } break;
 8001314:	e124      	b.n	8001560 <npf_vpprintf+0x490>
        { cbuf_len = npf_itoa_rev(cbuf, val); }
 8001316:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001318:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800131c:	f7ff fb86 	bl	8000a2c <npf_itoa_rev>
 8001320:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
      } break;
 8001324:	e11c      	b.n	8001560 <npf_vpprintf+0x490>
      case NPF_FMT_SPEC_CONV_BINARY:
#endif
      case NPF_FMT_SPEC_CONV_OCTAL:
      case NPF_FMT_SPEC_CONV_HEX_INT:
      case NPF_FMT_SPEC_CONV_UNSIGNED_INT: {
        npf_uint_t val = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	66fb      	str	r3, [r7, #108]	; 0x6c

        switch (fs.length_modifier) {
 800132a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800132e:	2b04      	cmp	r3, #4
 8001330:	d82c      	bhi.n	800138c <npf_vpprintf+0x2bc>
 8001332:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <npf_vpprintf+0x268>)
 8001334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001338:	0800134d 	.word	0x0800134d
 800133c:	08001359 	.word	0x08001359
 8001340:	08001367 	.word	0x08001367
 8001344:	08001373 	.word	0x08001373
 8001348:	08001381 	.word	0x08001381
          NPF_EXTRACT(NONE, unsigned, unsigned);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	1d1a      	adds	r2, r3, #4
 8001350:	603a      	str	r2, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001356:	e01a      	b.n	800138e <npf_vpprintf+0x2be>
          NPF_EXTRACT(SHORT, unsigned short, unsigned);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	1d1a      	adds	r2, r3, #4
 800135c:	603a      	str	r2, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	b29b      	uxth	r3, r3
 8001362:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001364:	e013      	b.n	800138e <npf_vpprintf+0x2be>
          NPF_EXTRACT(LONG_DOUBLE, unsigned, unsigned);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	1d1a      	adds	r2, r3, #4
 800136a:	603a      	str	r2, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001370:	e00d      	b.n	800138e <npf_vpprintf+0x2be>
          NPF_EXTRACT(CHAR, unsigned char, unsigned);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	1d1a      	adds	r2, r3, #4
 8001376:	603a      	str	r2, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800137e:	e006      	b.n	800138e <npf_vpprintf+0x2be>
          NPF_EXTRACT(LONG, unsigned long, unsigned long);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	1d1a      	adds	r2, r3, #4
 8001384:	603a      	str	r2, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800138a:	e000      	b.n	800138e <npf_vpprintf+0x2be>
          NPF_EXTRACT(LARGE_LONG_LONG, unsigned long long, unsigned long long);
          NPF_EXTRACT(LARGE_INTMAX, uintmax_t, uintmax_t);
          NPF_EXTRACT(LARGE_SIZET, size_t, size_t);
          NPF_EXTRACT(LARGE_PTRDIFFT, size_t, size_t);
#endif
          default: break;
 800138c:	bf00      	nop
        }

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = !val;
 800138e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001390:	2b00      	cmp	r3, #0
 8001392:	bf0c      	ite	eq
 8001394:	2301      	moveq	r3, #1
 8001396:	2300      	movne	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        if (!val && (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec) {
 800139c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d111      	bne.n	80013c6 <npf_vpprintf+0x2f6>
 80013a2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d10d      	bne.n	80013c6 <npf_vpprintf+0x2f6>
 80013aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10a      	bne.n	80013c6 <npf_vpprintf+0x2f6>
          // Zero value and explicitly-requested zero precision means "print nothing".
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 80013b0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d11f      	bne.n	80013f8 <npf_vpprintf+0x328>
 80013b8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d01b      	beq.n	80013f8 <npf_vpprintf+0x328>
            fs.prec = 1; // octal special case, print a single '0'
 80013c0:	2301      	movs	r3, #1
 80013c2:	64fb      	str	r3, [r7, #76]	; 0x4c
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 80013c4:	e018      	b.n	80013f8 <npf_vpprintf+0x328>
        if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) {
          cbuf_len = npf_bin_len(val); u.binval = val;
        } else
#endif
        {
          unsigned const base = (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) ?
 80013c6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
            8u : ((fs.conv_spec == NPF_FMT_SPEC_CONV_HEX_INT) ? 16u : 10u);
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d007      	beq.n	80013de <npf_vpprintf+0x30e>
 80013ce:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80013d2:	2b05      	cmp	r3, #5
 80013d4:	d101      	bne.n	80013da <npf_vpprintf+0x30a>
 80013d6:	2310      	movs	r3, #16
 80013d8:	e002      	b.n	80013e0 <npf_vpprintf+0x310>
 80013da:	230a      	movs	r3, #10
 80013dc:	e000      	b.n	80013e0 <npf_vpprintf+0x310>
 80013de:	2308      	movs	r3, #8
          unsigned const base = (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) ?
 80013e0:	65bb      	str	r3, [r7, #88]	; 0x58
          cbuf_len = npf_utoa_rev(cbuf, val, base, (unsigned)fs.case_adjust);
 80013e2:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80013e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80013e8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80013ea:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80013ee:	f7ff fb5b 	bl	8000aa8 <npf_utoa_rev>
 80013f2:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 80013f6:	e000      	b.n	80013fa <npf_vpprintf+0x32a>
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 80013f8:	bf00      	nop
        }

        if (val && fs.alt_form && (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL)) {
 80013fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d012      	beq.n	8001426 <npf_vpprintf+0x356>
 8001400:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00e      	beq.n	8001426 <npf_vpprintf+0x356>
 8001408:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800140c:	2b04      	cmp	r3, #4
 800140e:	d10a      	bne.n	8001426 <npf_vpprintf+0x356>
          cbuf[cbuf_len++] = '0'; // OK to add leading octal '0' immediately.
 8001410:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001414:	1c5a      	adds	r2, r3, #1
 8001416:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800141a:	461a      	mov	r2, r3
 800141c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001420:	4413      	add	r3, r2
 8001422:	2230      	movs	r2, #48	; 0x30
 8001424:	701a      	strb	r2, [r3, #0]
        }

        if (val && fs.alt_form) { // 0x or 0b but can't write it yet.
 8001426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 8098 	beq.w	800155e <npf_vpprintf+0x48e>
 800142e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8093 	beq.w	800155e <npf_vpprintf+0x48e>
          if (fs.conv_spec == NPF_FMT_SPEC_CONV_HEX_INT) { need_0x = 'X'; }
 8001438:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800143c:	2b05      	cmp	r3, #5
 800143e:	d102      	bne.n	8001446 <npf_vpprintf+0x376>
 8001440:	2358      	movs	r3, #88	; 0x58
 8001442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#if NANOPRINTF_USE_BINARY_FORMAT_SPECIFIERS == 1
          else if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) { need_0x = 'B'; }
#endif
          if (need_0x) { need_0x += fs.case_adjust; }
 8001446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 8087 	beq.w	800155e <npf_vpprintf+0x48e>
 8001450:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001454:	461a      	mov	r2, r3
 8001456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800145a:	4413      	add	r3, r2
 800145c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
      } break;
 8001460:	e07d      	b.n	800155e <npf_vpprintf+0x48e>

      case NPF_FMT_SPEC_CONV_POINTER: {
        cbuf_len =
          npf_utoa_rev(cbuf, (npf_uint_t)(uintptr_t)va_arg(args, void *), 16, 'a'-'A');
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	1d1a      	adds	r2, r3, #4
 8001466:	603a      	str	r2, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	2320      	movs	r3, #32
 800146e:	2210      	movs	r2, #16
 8001470:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001474:	f7ff fb18 	bl	8000aa8 <npf_utoa_rev>
 8001478:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        need_0x = 'x';
 800147c:	2378      	movs	r3, #120	; 0x78
 800147e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      } break;
 8001482:	e06d      	b.n	8001560 <npf_vpprintf+0x490>
      case NPF_FMT_SPEC_CONV_FLOAT_DEC:
      case NPF_FMT_SPEC_CONV_FLOAT_SCI:
      case NPF_FMT_SPEC_CONV_FLOAT_SHORTEST:
      case NPF_FMT_SPEC_CONV_FLOAT_HEX: {
        float val;
        if (fs.length_modifier == NPF_FMT_SPEC_LEN_MOD_LONG_DOUBLE) {
 8001484:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001488:	2b02      	cmp	r3, #2
 800148a:	d10f      	bne.n	80014ac <npf_vpprintf+0x3dc>
          val = (float)va_arg(args, long double);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	3307      	adds	r3, #7
 8001490:	f023 0307 	bic.w	r3, r3, #7
 8001494:	f103 0208 	add.w	r2, r3, #8
 8001498:	603a      	str	r2, [r7, #0]
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7fe fe99 	bl	80001d8 <__aeabi_d2f>
 80014a6:	4603      	mov	r3, r0
 80014a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80014aa:	e00e      	b.n	80014ca <npf_vpprintf+0x3fa>
        } else {
          val = (float)va_arg(args, double);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	3307      	adds	r3, #7
 80014b0:	f023 0307 	bic.w	r3, r3, #7
 80014b4:	f103 0208 	add.w	r2, r3, #8
 80014b8:	603a      	str	r2, [r7, #0]
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7fe fe89 	bl	80001d8 <__aeabi_d2f>
 80014c6:	4603      	mov	r3, r0
 80014c8:	66bb      	str	r3, [r7, #104]	; 0x68
        }

        sign_c = (val < 0.f) ? '-' : fs.prepend;
 80014ca:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80014ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	d501      	bpl.n	80014dc <npf_vpprintf+0x40c>
 80014d8:	232d      	movs	r3, #45	; 0x2d
 80014da:	e001      	b.n	80014e0 <npf_vpprintf+0x410>
 80014dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80014e0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = (val == 0.f);
 80014e4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80014e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f0:	bf0c      	ite	eq
 80014f2:	2301      	moveq	r3, #1
 80014f4:	2300      	movne	r3, #0
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        cbuf_len = npf_ftoa_rev(cbuf, val, fs.case_adjust, &frac_chars);
 80014fa:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80014fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001502:	4619      	mov	r1, r3
 8001504:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8001508:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800150c:	f7ff fcc0 	bl	8000e90 <npf_ftoa_rev>
 8001510:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if (cbuf_len < 0) {
 8001514:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001518:	2b00      	cmp	r3, #0
 800151a:	da07      	bge.n	800152c <npf_vpprintf+0x45c>
          cbuf_len = -cbuf_len;
 800151c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001520:	425b      	negs	r3, r3
 8001522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
          inf_or_nan = 1;
 8001526:	2301      	movs	r3, #1
 8001528:	67bb      	str	r3, [r7, #120]	; 0x78
        } else {
          int const prec_adj = npf_max(0, frac_chars - fs.prec);
          cbuf += prec_adj;
          cbuf_len -= prec_adj;
        }
      } break;
 800152a:	e019      	b.n	8001560 <npf_vpprintf+0x490>
          int const prec_adj = npf_max(0, frac_chars - fs.prec);
 800152c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800152e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	4619      	mov	r1, r3
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff f821 	bl	800057c <npf_max>
 800153a:	65f8      	str	r0, [r7, #92]	; 0x5c
          cbuf += prec_adj;
 800153c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800153e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001542:	4413      	add	r3, r2
 8001544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
          cbuf_len -= prec_adj;
 8001548:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800154c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      } break;
 8001554:	e004      	b.n	8001560 <npf_vpprintf+0x490>
#endif
      default: break;
 8001556:	bf00      	nop
 8001558:	e002      	b.n	8001560 <npf_vpprintf+0x490>
      } break;
 800155a:	bf00      	nop
 800155c:	e000      	b.n	8001560 <npf_vpprintf+0x490>
      } break;
 800155e:	bf00      	nop
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Compute the field width pad character
    if (fs.field_width_opt == NPF_FMT_SPEC_OPT_LITERAL) {
 8001560:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001564:	2b01      	cmp	r3, #1
 8001566:	d124      	bne.n	80015b2 <npf_vpprintf+0x4e2>
      if (fs.leading_zero_pad) { // '0' flag is only legal with numeric types
 8001568:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01d      	beq.n	80015ac <npf_vpprintf+0x4dc>
        if ((fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) &&
 8001570:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001574:	2b02      	cmp	r3, #2
 8001576:	d01c      	beq.n	80015b2 <npf_vpprintf+0x4e2>
            (fs.conv_spec != NPF_FMT_SPEC_CONV_CHAR) &&
 8001578:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
        if ((fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) &&
 800157c:	2b01      	cmp	r3, #1
 800157e:	d018      	beq.n	80015b2 <npf_vpprintf+0x4e2>
            (fs.conv_spec != NPF_FMT_SPEC_CONV_PERCENT)) {
 8001580:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
            (fs.conv_spec != NPF_FMT_SPEC_CONV_CHAR) &&
 8001584:	2b00      	cmp	r3, #0
 8001586:	d014      	beq.n	80015b2 <npf_vpprintf+0x4e2>
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
          if ((fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec && zero) {
 8001588:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800158c:	2b01      	cmp	r3, #1
 800158e:	d109      	bne.n	80015a4 <npf_vpprintf+0x4d4>
 8001590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001592:	2b00      	cmp	r3, #0
 8001594:	d106      	bne.n	80015a4 <npf_vpprintf+0x4d4>
 8001596:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <npf_vpprintf+0x4d4>
            pad_c = ' ';
 800159c:	2320      	movs	r3, #32
 800159e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80015a2:	e006      	b.n	80015b2 <npf_vpprintf+0x4e2>
          } else
#endif
          { pad_c = '0'; }
 80015a4:	2330      	movs	r3, #48	; 0x30
 80015a6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80015aa:	e002      	b.n	80015b2 <npf_vpprintf+0x4e2>
        }
      } else { pad_c = ' '; }
 80015ac:	2320      	movs	r3, #32
 80015ae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }
#endif

    // Compute the number of bytes to truncate or '0'-pad.
    if (fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) {
 80015b2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d014      	beq.n	80015e4 <npf_vpprintf+0x514>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      if (!inf_or_nan) { // float precision is after the decimal point
 80015ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d111      	bne.n	80015e4 <npf_vpprintf+0x514>
        int const prec_start =
          (fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DEC) ? frac_chars : cbuf_len;
 80015c0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d101      	bne.n	80015cc <npf_vpprintf+0x4fc>
 80015c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ca:	e001      	b.n	80015d0 <npf_vpprintf+0x500>
 80015cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        int const prec_start =
 80015d0:	657b      	str	r3, [r7, #84]	; 0x54
        prec_pad = npf_max(0, fs.prec - prec_start);
 80015d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4619      	mov	r1, r3
 80015da:	2000      	movs	r0, #0
 80015dc:	f7fe ffce 	bl	800057c <npf_max>
 80015e0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
#endif
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Given the full converted length, how many pad bytes?
    field_pad = fs.field_width - cbuf_len - !!sign_c;
 80015e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 80015f0:	2a00      	cmp	r2, #0
 80015f2:	bf14      	ite	ne
 80015f4:	2201      	movne	r2, #1
 80015f6:	2200      	moveq	r2, #0
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (need_0x) { field_pad -= 2; }
 8001600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <npf_vpprintf+0x542>
 8001608:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800160c:	3b02      	subs	r3, #2
 800160e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    if ((fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DEC) && !fs.prec && !fs.alt_form) {
 8001612:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001616:	2b08      	cmp	r3, #8
 8001618:	d10b      	bne.n	8001632 <npf_vpprintf+0x562>
 800161a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <npf_vpprintf+0x562>
 8001620:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001624:	2b00      	cmp	r3, #0
 8001626:	d104      	bne.n	8001632 <npf_vpprintf+0x562>
      ++field_pad; // 0-pad, no decimal point.
 8001628:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800162c:	3301      	adds	r3, #1
 800162e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    field_pad -= prec_pad;
 8001632:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001636:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#endif
    field_pad = npf_max(0, field_pad);
 8001640:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001644:	2000      	movs	r0, #0
 8001646:	f7fe ff99 	bl	800057c <npf_max>
 800164a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
#endif // NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Apply right-justified field width if requested
    if (!fs.left_justified && pad_c) { // If leading zeros pad, sign goes first.
 800164e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001652:	2b00      	cmp	r3, #0
 8001654:	d14d      	bne.n	80016f2 <npf_vpprintf+0x622>
 8001656:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800165a:	2b00      	cmp	r3, #0
 800165c:	d049      	beq.n	80016f2 <npf_vpprintf+0x622>
      if (pad_c == '0') {
 800165e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001662:	2b30      	cmp	r3, #48	; 0x30
 8001664:	d128      	bne.n	80016b8 <npf_vpprintf+0x5e8>
        if (sign_c) { NPF_PUTC(sign_c); sign_c = 0; }
 8001666:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00a      	beq.n	8001684 <npf_vpprintf+0x5b4>
 800166e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001672:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fd12 	bl	80010a2 <npf_putc_cnt>
 800167e:	2300      	movs	r3, #0
 8001680:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        // Pad byte is '0', write '0x' before '0' pad chars.
        if (need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 8001684:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001688:	2b00      	cmp	r3, #0
 800168a:	d015      	beq.n	80016b8 <npf_vpprintf+0x5e8>
 800168c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001690:	4619      	mov	r1, r3
 8001692:	2030      	movs	r0, #48	; 0x30
 8001694:	f7ff fd05 	bl	80010a2 <npf_putc_cnt>
 8001698:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800169c:	4619      	mov	r1, r3
 800169e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80016a2:	f7ff fcfe 	bl	80010a2 <npf_putc_cnt>
      }
      while (field_pad-- > 0) { NPF_PUTC(pad_c); }
 80016a6:	e007      	b.n	80016b8 <npf_vpprintf+0x5e8>
 80016a8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fcf5 	bl	80010a2 <npf_putc_cnt>
 80016b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016bc:	1e5a      	subs	r2, r3, #1
 80016be:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	dcf0      	bgt.n	80016a8 <npf_vpprintf+0x5d8>
      // Pad byte is ' ', write '0x' after ' ' pad chars but before number.
      if ((pad_c != '0') && need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 80016c6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016ca:	2b30      	cmp	r3, #48	; 0x30
 80016cc:	d023      	beq.n	8001716 <npf_vpprintf+0x646>
 80016ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d01f      	beq.n	8001716 <npf_vpprintf+0x646>
 80016d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016da:	4619      	mov	r1, r3
 80016dc:	2030      	movs	r0, #48	; 0x30
 80016de:	f7ff fce0 	bl	80010a2 <npf_putc_cnt>
 80016e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016e6:	4619      	mov	r1, r3
 80016e8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80016ec:	f7ff fcd9 	bl	80010a2 <npf_putc_cnt>
 80016f0:	e011      	b.n	8001716 <npf_vpprintf+0x646>
    } else
#endif
    { if (need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); } } // no pad, '0x' requested.
 80016f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00e      	beq.n	8001718 <npf_vpprintf+0x648>
 80016fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016fe:	4619      	mov	r1, r3
 8001700:	2030      	movs	r0, #48	; 0x30
 8001702:	f7ff fcce 	bl	80010a2 <npf_putc_cnt>
 8001706:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800170a:	4619      	mov	r1, r3
 800170c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001710:	f7ff fcc7 	bl	80010a2 <npf_putc_cnt>
 8001714:	e000      	b.n	8001718 <npf_vpprintf+0x648>
      if ((pad_c != '0') && need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 8001716:	bf00      	nop

    // Write the converted payload
    if (fs.conv_spec == NPF_FMT_SPEC_CONV_STRING) {
 8001718:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800171c:	2b02      	cmp	r3, #2
 800171e:	d117      	bne.n	8001750 <npf_vpprintf+0x680>
      for (int i = 0; i < cbuf_len; ++i) { NPF_PUTC(cbuf[i]); }
 8001720:	2300      	movs	r3, #0
 8001722:	667b      	str	r3, [r7, #100]	; 0x64
 8001724:	e00e      	b.n	8001744 <npf_vpprintf+0x674>
 8001726:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001728:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800172c:	4413      	add	r3, r2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001736:	4619      	mov	r1, r3
 8001738:	4610      	mov	r0, r2
 800173a:	f7ff fcb2 	bl	80010a2 <npf_putc_cnt>
 800173e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001740:	3301      	adds	r3, #1
 8001742:	667b      	str	r3, [r7, #100]	; 0x64
 8001744:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001746:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800174a:	429a      	cmp	r2, r3
 800174c:	dbeb      	blt.n	8001726 <npf_vpprintf+0x656>
 800174e:	e059      	b.n	8001804 <npf_vpprintf+0x734>
    } else {
      if (sign_c) { NPF_PUTC(sign_c); }
 8001750:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001754:	2b00      	cmp	r3, #0
 8001756:	d007      	beq.n	8001768 <npf_vpprintf+0x698>
 8001758:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800175c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fc9d 	bl	80010a2 <npf_putc_cnt>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      if (fs.conv_spec != NPF_FMT_SPEC_CONV_FLOAT_DEC) {
 8001768:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800176c:	2b08      	cmp	r3, #8
 800176e:	d00e      	beq.n	800178e <npf_vpprintf+0x6be>
#endif

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
        while (prec_pad-- > 0) { NPF_PUTC('0'); } // int precision leads.
 8001770:	e005      	b.n	800177e <npf_vpprintf+0x6ae>
 8001772:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001776:	4619      	mov	r1, r3
 8001778:	2030      	movs	r0, #48	; 0x30
 800177a:	f7ff fc92 	bl	80010a2 <npf_putc_cnt>
 800177e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001782:	1e5a      	subs	r2, r3, #1
 8001784:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001788:	2b00      	cmp	r3, #0
 800178a:	dcf2      	bgt.n	8001772 <npf_vpprintf+0x6a2>
 800178c:	e01e      	b.n	80017cc <npf_vpprintf+0x6fc>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      } else {
        // if 0 precision, skip the fractional part and '.'
        // if 0 prec + alternative form, keep the '.'
        if (!fs.prec && !fs.alt_form) { ++cbuf; --cbuf_len; }
 800178e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001790:	2b00      	cmp	r3, #0
 8001792:	d11b      	bne.n	80017cc <npf_vpprintf+0x6fc>
 8001794:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001798:	2b00      	cmp	r3, #0
 800179a:	d117      	bne.n	80017cc <npf_vpprintf+0x6fc>
 800179c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017a0:	3301      	adds	r3, #1
 80017a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80017a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#if NANOPRINTF_USE_BINARY_FORMAT_SPECIFIERS == 1
      if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) {
        while (cbuf_len) { NPF_PUTC('0' + ((u.binval >> --cbuf_len) & 1)); }
      } else
#endif
      { while (cbuf_len-- > 0) { NPF_PUTC(cbuf[cbuf_len]); } } // payload is reversed
 80017b0:	e00c      	b.n	80017cc <npf_vpprintf+0x6fc>
 80017b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80017ba:	4413      	add	r3, r2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017c4:	4619      	mov	r1, r3
 80017c6:	4610      	mov	r0, r2
 80017c8:	f7ff fc6b 	bl	80010a2 <npf_putc_cnt>
 80017cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017d0:	1e5a      	subs	r2, r3, #1
 80017d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	dceb      	bgt.n	80017b2 <npf_vpprintf+0x6e2>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      // real precision comes after the number.
      if ((fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DEC) && !inf_or_nan) {
 80017da:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d110      	bne.n	8001804 <npf_vpprintf+0x734>
 80017e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10d      	bne.n	8001804 <npf_vpprintf+0x734>
        while (prec_pad-- > 0) { NPF_PUTC('0'); }
 80017e8:	e005      	b.n	80017f6 <npf_vpprintf+0x726>
 80017ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017ee:	4619      	mov	r1, r3
 80017f0:	2030      	movs	r0, #48	; 0x30
 80017f2:	f7ff fc56 	bl	80010a2 <npf_putc_cnt>
 80017f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017fa:	1e5a      	subs	r2, r3, #1
 80017fc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001800:	2b00      	cmp	r3, #0
 8001802:	dcf2      	bgt.n	80017ea <npf_vpprintf+0x71a>
      }
#endif
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    if (fs.left_justified && pad_c) { // Apply left-justified field width
 8001804:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001808:	2b00      	cmp	r3, #0
 800180a:	d013      	beq.n	8001834 <npf_vpprintf+0x764>
 800180c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00f      	beq.n	8001834 <npf_vpprintf+0x764>
      while (field_pad-- > 0) { NPF_PUTC(pad_c); }
 8001814:	e007      	b.n	8001826 <npf_vpprintf+0x756>
 8001816:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800181a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fc3e 	bl	80010a2 <npf_putc_cnt>
 8001826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800182a:	1e5a      	subs	r2, r3, #1
 800182c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001830:	2b00      	cmp	r3, #0
 8001832:	dcf0      	bgt.n	8001816 <npf_vpprintf+0x746>
  while (*cur) {
 8001834:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	f47f ac59 	bne.w	80010f2 <npf_vpprintf+0x22>
    }
#endif
  }

  return pc_cnt.n;
 8001840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001842:	4618      	mov	r0, r3
 8001844:	37a0      	adds	r7, #160	; 0xa0
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop

0800184c <npf_snprintf>:
  int const rv = npf_vpprintf(pc, pc_ctx, format, val);
  va_end(val);
  return rv;
}

int npf_snprintf(char *buffer, size_t bufsz, const char *format, ...) {
 800184c:	b40c      	push	{r2, r3}
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
  va_list val;
  va_start(val, format);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	60bb      	str	r3, [r7, #8]
  int const rv = npf_vsnprintf(buffer, bufsz, format, val);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	6839      	ldr	r1, [r7, #0]
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f809 	bl	800187c <npf_vsnprintf>
 800186a:	60f8      	str	r0, [r7, #12]
  va_end(val);
  return rv;
 800186c:	68fb      	ldr	r3, [r7, #12]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001878:	b002      	add	sp, #8
 800187a:	4770      	bx	lr

0800187c <npf_vsnprintf>:

int npf_vsnprintf(char *buffer, size_t bufsz, char const *format, va_list vlist) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	603b      	str	r3, [r7, #0]
  npf_bufputc_ctx_t bufputc_ctx;
  bufputc_ctx.dst = buffer;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	617b      	str	r3, [r7, #20]
  bufputc_ctx.len = bufsz;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	61bb      	str	r3, [r7, #24]
  bufputc_ctx.cur = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]

  npf_putc const pc = buffer ? npf_bufputc : npf_bufputc_nop;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <npf_vsnprintf+0x24>
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <npf_vsnprintf+0x50>)
 800189e:	e000      	b.n	80018a2 <npf_vsnprintf+0x26>
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <npf_vsnprintf+0x54>)
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  int const n = npf_vpprintf(pc, &bufputc_ctx, format, vlist);
 80018a4:	f107 0114 	add.w	r1, r7, #20
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018ae:	f7ff fc0f 	bl	80010d0 <npf_vpprintf>
 80018b2:	6238      	str	r0, [r7, #32]
  pc('\0', &bufputc_ctx);
 80018b4:	f107 0214 	add.w	r2, r7, #20
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	4611      	mov	r1, r2
 80018bc:	2000      	movs	r0, #0
 80018be:	4798      	blx	r3
  if (bufsz && (n >= (int)bufsz)) { buffer[0] = '\0'; }
#elif defined(NANOPRINTF_SNPRINTF_SAFE_TRIM_STRING_ON_OVERFLOW)
  if (bufsz && (n >= (int)bufsz)) { buffer[bufsz - 1] = '\0'; }
#endif

  return n;
 80018c0:	6a3b      	ldr	r3, [r7, #32]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	08001051 	.word	0x08001051
 80018d0:	0800108d 	.word	0x0800108d

080018d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	f5ad 5db5 	sub.w	sp, sp, #5792	; 0x16a0
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
    float x[BUFF_SIZE],
		  x_bar[BUFF_SIZE],
		  y[BUFF_SIZE],
		  t[BUFF_SIZE],
		  x_val,
		  x_bar_val = 0,
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 80018e6:	f102 0208 	add.w	r2, r2, #8
 80018ea:	6013      	str	r3, [r2, #0]
		  y_hat_val = 0,
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	f507 52b4 	add.w	r2, r7, #5760	; 0x1680
 80018f4:	f102 021c 	add.w	r2, r2, #28
 80018f8:	6013      	str	r3, [r2, #0]
		  y_val = 0,
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	f507 52b4 	add.w	r2, r7, #5760	; 0x1680
 8001902:	f102 0218 	add.w	r2, r2, #24
 8001906:	6013      	str	r3, [r2, #0]
		  t_val = 0;
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	f507 52b4 	add.w	r2, r7, #5760	; 0x1680
 8001910:	f102 0214 	add.w	r2, r2, #20
 8001914:	6013      	str	r3, [r2, #0]
    short i,
		  i_x = 0,
 8001916:	2300      	movs	r3, #0
 8001918:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 800191c:	f102 0204 	add.w	r2, r2, #4
 8001920:	8013      	strh	r3, [r2, #0]
		  i_x_bar = i_x - (N + 1),
 8001922:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001926:	f103 0304 	add.w	r3, r3, #4
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	3b1a      	subs	r3, #26
 800192e:	b29b      	uxth	r3, r3
 8001930:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001934:	f102 0202 	add.w	r2, r2, #2
 8001938:	8013      	strh	r3, [r2, #0]
		  i_t = i_x_bar - (S + 1);
 800193a:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 800193e:	f103 0302 	add.w	r3, r3, #2
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	3b08      	subs	r3, #8
 8001946:	b29b      	uxth	r3, r3
 8001948:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 800194c:	8013      	strh	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800194e:	f000 fdf5 	bl	800253c <HAL_Init>

  /* USER CODE BEGIN Init */
  for (i = 0; i < BUFF_SIZE; i++) {
 8001952:	2300      	movs	r3, #0
 8001954:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001958:	f102 0206 	add.w	r2, r2, #6
 800195c:	8013      	strh	r3, [r2, #0]
 800195e:	e04d      	b.n	80019fc <main+0x128>
	  x[i] = 0;
 8001960:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001964:	f103 0306 	add.w	r3, r3, #6
 8001968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196c:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001970:	f102 0210 	add.w	r2, r2, #16
 8001974:	f2a2 52cc 	subw	r2, r2, #1484	; 0x5cc
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
	  x_bar[i] = 0;
 8001982:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001986:	f103 0306 	add.w	r3, r3, #6
 800198a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198e:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001992:	f102 0210 	add.w	r2, r2, #16
 8001996:	f6a2 326c 	subw	r2, r2, #2924	; 0xb6c
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
	  y[i] = 0;
 80019a4:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 80019a8:	f103 0306 	add.w	r3, r3, #6
 80019ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b0:	f507 62d6 	add.w	r2, r7, #1712	; 0x6b0
 80019b4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
	  t[i] = 0;
 80019c2:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 80019c6:	f103 0306 	add.w	r3, r3, #6
 80019ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ce:	f507 62d6 	add.w	r2, r7, #1712	; 0x6b0
 80019d2:	f2a2 62ac 	subw	r2, r2, #1708	; 0x6ac
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
  for (i = 0; i < BUFF_SIZE; i++) {
 80019e0:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 80019e4:	f103 0306 	add.w	r3, r3, #6
 80019e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 80019f6:	f102 0206 	add.w	r2, r2, #6
 80019fa:	8013      	strh	r3, [r2, #0]
 80019fc:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001a00:	f103 0306 	add.w	r3, r3, #6
 8001a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a08:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001a0c:	dba8      	blt.n	8001960 <main+0x8c>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a0e:	f000 fa0d 	bl	8001e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a12:	f000 fb3b 	bl	800208c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a16:	f000 fa63 	bl	8001ee0 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001a1a:	f000 fad1 	bl	8001fc0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8001a1e:	f000 fb05 	bl	800202c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8001a22:	48a7      	ldr	r0, [pc, #668]	; (8001cc0 <main+0x3ec>)
 8001a24:	f003 fbd6 	bl	80051d4 <HAL_TIM_Base_Start>
  tim6_val = __HAL_TIM_GET_COUNTER(&htim6);
 8001a28:	4ba5      	ldr	r3, [pc, #660]	; (8001cc0 <main+0x3ec>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001a32:	f102 020e 	add.w	r2, r2, #14
 8001a36:	8013      	strh	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (__HAL_TIM_GET_COUNTER(&htim6) - tim6_val >= MAIN_TRIGGER / 3) {
 8001a38:	4ba1      	ldr	r3, [pc, #644]	; (8001cc0 <main+0x3ec>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a3e:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001a42:	f103 030e 	add.w	r3, r3, #14
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f240 329d 	movw	r2, #925	; 0x39d
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d9f2      	bls.n	8001a38 <main+0x164>
		  if (i_x == BUFF_SIZE) {
 8001a52:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001a56:	f103 0304 	add.w	r3, r3, #4
 8001a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001a62:	f040 80b9 	bne.w	8001bd8 <main+0x304>
			  for (i = 0; i < BUFF_SIZE - 1; i++) {
 8001a66:	2300      	movs	r3, #0
 8001a68:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001a6c:	f102 0206 	add.w	r2, r2, #6
 8001a70:	8013      	strh	r3, [r2, #0]
 8001a72:	e081      	b.n	8001b78 <main+0x2a4>
				  x[i] = x[i + 1];
 8001a74:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001a78:	f103 0306 	add.w	r3, r3, #6
 8001a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001a86:	f103 0306 	add.w	r3, r3, #6
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	f507 51b5 	add.w	r1, r7, #5792	; 0x16a0
 8001a92:	f101 0110 	add.w	r1, r1, #16
 8001a96:	f2a1 51cc 	subw	r1, r1, #1484	; 0x5cc
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	440a      	add	r2, r1
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	f507 51b5 	add.w	r1, r7, #5792	; 0x16a0
 8001aa4:	f101 0110 	add.w	r1, r1, #16
 8001aa8:	f2a1 51cc 	subw	r1, r1, #1484	; 0x5cc
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	601a      	str	r2, [r3, #0]
				  x_bar[i] = x_bar[i + 1];
 8001ab2:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001ab6:	f103 0306 	add.w	r3, r3, #6
 8001aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001ac4:	f103 0306 	add.w	r3, r3, #6
 8001ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001acc:	f507 51b5 	add.w	r1, r7, #5792	; 0x16a0
 8001ad0:	f101 0110 	add.w	r1, r1, #16
 8001ad4:	f6a1 316c 	subw	r1, r1, #2924	; 0xb6c
 8001ad8:	0092      	lsls	r2, r2, #2
 8001ada:	440a      	add	r2, r1
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	f507 51b5 	add.w	r1, r7, #5792	; 0x16a0
 8001ae2:	f101 0110 	add.w	r1, r1, #16
 8001ae6:	f6a1 316c 	subw	r1, r1, #2924	; 0xb6c
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	601a      	str	r2, [r3, #0]
				  y[i] = y[i + 1];
 8001af0:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001af4:	f103 0306 	add.w	r3, r3, #6
 8001af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001b02:	f103 0306 	add.w	r3, r3, #6
 8001b06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0a:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8001b0e:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	440a      	add	r2, r1
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8001b1c:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	601a      	str	r2, [r3, #0]
				  t[i] = t[i + 1];
 8001b26:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001b2a:	f103 0306 	add.w	r3, r3, #6
 8001b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001b38:	f103 0306 	add.w	r3, r3, #6
 8001b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b40:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8001b44:	f2a1 61ac 	subw	r1, r1, #1708	; 0x6ac
 8001b48:	0092      	lsls	r2, r2, #2
 8001b4a:	440a      	add	r2, r1
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8001b52:	f2a1 61ac 	subw	r1, r1, #1708	; 0x6ac
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	601a      	str	r2, [r3, #0]
			  for (i = 0; i < BUFF_SIZE - 1; i++) {
 8001b5c:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001b60:	f103 0306 	add.w	r3, r3, #6
 8001b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001b72:	f102 0206 	add.w	r2, r2, #6
 8001b76:	8013      	strh	r3, [r2, #0]
 8001b78:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001b7c:	f103 0306 	add.w	r3, r3, #6
 8001b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b84:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8001b88:	f77f af74 	ble.w	8001a74 <main+0x1a0>
			  }
			  i_x--;
 8001b8c:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001b90:	f103 0304 	add.w	r3, r3, #4
 8001b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001ba2:	f102 0204 	add.w	r2, r2, #4
 8001ba6:	8013      	strh	r3, [r2, #0]
			  i_x_bar--;
 8001ba8:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001bac:	f103 0302 	add.w	r3, r3, #2
 8001bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001bbe:	f102 0202 	add.w	r2, r2, #2
 8001bc2:	8013      	strh	r3, [r2, #0]
			  i_t--;
 8001bc4:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001bd6:	8013      	strh	r3, [r2, #0]
		  }
		  HAL_ADC_Start(&hadc1);
 8001bd8:	483a      	ldr	r0, [pc, #232]	; (8001cc4 <main+0x3f0>)
 8001bda:	f000 fea7 	bl	800292c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001bde:	f04f 31ff 	mov.w	r1, #4294967295
 8001be2:	4838      	ldr	r0, [pc, #224]	; (8001cc4 <main+0x3f0>)
 8001be4:	f000 ff58 	bl	8002a98 <HAL_ADC_PollForConversion>
		  x_val = HAL_ADC_GetValue(&hadc1);
 8001be8:	4836      	ldr	r0, [pc, #216]	; (8001cc4 <main+0x3f0>)
 8001bea:	f001 f823 	bl	8002c34 <HAL_ADC_GetValue>
 8001bee:	ee07 0a90 	vmov	s15, r0
 8001bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf6:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8001bfa:	f103 0310 	add.w	r3, r3, #16
 8001bfe:	edc3 7a00 	vstr	s15, [r3]
		  x[i_x] = x_val;
 8001c02:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001c06:	f103 0304 	add.w	r3, r3, #4
 8001c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c0e:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001c12:	f102 0210 	add.w	r2, r2, #16
 8001c16:	f2a2 52cc 	subw	r2, r2, #1484	; 0x5cc
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f507 52b4 	add.w	r2, r7, #5760	; 0x1680
 8001c22:	f102 0210 	add.w	r2, r2, #16
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	601a      	str	r2, [r3, #0]

		  x_bar_val = movavg(x_bar_val, x, i_x, N);
 8001c2a:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001c2e:	f103 0304 	add.w	r3, r3, #4
 8001c32:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001c36:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001c3a:	f103 0304 	add.w	r3, r3, #4
 8001c3e:	2219      	movs	r2, #25
 8001c40:	4618      	mov	r0, r3
 8001c42:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001c46:	f103 0308 	add.w	r3, r3, #8
 8001c4a:	ed93 0a00 	vldr	s0, [r3]
 8001c4e:	f000 fa83 	bl	8002158 <movavg>
 8001c52:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001c56:	f103 0308 	add.w	r3, r3, #8
 8001c5a:	ed83 0a00 	vstr	s0, [r3]
		  if (i_x_bar >= N) {
 8001c5e:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001c62:	f103 0302 	add.w	r3, r3, #2
 8001c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6a:	2b18      	cmp	r3, #24
 8001c6c:	dd5e      	ble.n	8001d2c <main+0x458>
			  y_hat_val = x_val - x_bar_val;
 8001c6e:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8001c72:	f103 0310 	add.w	r3, r3, #16
 8001c76:	ed93 7a00 	vldr	s14, [r3]
 8001c7a:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001c7e:	f103 0308 	add.w	r3, r3, #8
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c8a:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8001c8e:	f103 031c 	add.w	r3, r3, #28
 8001c92:	edc3 7a00 	vstr	s15, [r3]
			  y_val = ABS(y_hat_val);
 8001c96:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8001c9a:	f103 031c 	add.w	r3, r3, #28
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001caa:	d50d      	bpl.n	8001cc8 <main+0x3f4>
 8001cac:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8001cb0:	f103 031c 	add.w	r3, r3, #28
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	eef1 7a67 	vneg.f32	s15, s15
 8001cbc:	e00a      	b.n	8001cd4 <main+0x400>
 8001cbe:	bf00      	nop
 8001cc0:	20000078 	.word	0x20000078
 8001cc4:	20000028 	.word	0x20000028
 8001cc8:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8001ccc:	f103 031c 	add.w	r3, r3, #28
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8001cd8:	f103 0318 	add.w	r3, r3, #24
 8001cdc:	edc3 7a00 	vstr	s15, [r3]
		      x_bar[i_x_bar] = x_bar_val;
 8001ce0:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001ce4:	f103 0302 	add.w	r3, r3, #2
 8001ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cec:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001cf0:	f102 0210 	add.w	r2, r2, #16
 8001cf4:	f6a2 326c 	subw	r2, r2, #2924	; 0xb6c
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001d00:	f102 0208 	add.w	r2, r2, #8
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	601a      	str	r2, [r3, #0]
		      y[i_x_bar] = y_val;
 8001d08:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001d0c:	f103 0302 	add.w	r3, r3, #2
 8001d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d14:	f507 62d6 	add.w	r2, r7, #1712	; 0x6b0
 8001d18:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	f507 52b4 	add.w	r2, r7, #5760	; 0x1680
 8001d24:	f102 0218 	add.w	r2, r2, #24
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	601a      	str	r2, [r3, #0]
		  }

		  t_val = triangle(y, i_t, S);
 8001d2c:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001d30:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001d34:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8001d38:	3b0c      	subs	r3, #12
 8001d3a:	2207      	movs	r2, #7
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fa6b 	bl	8002218 <triangle>
 8001d42:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8001d46:	f103 0314 	add.w	r3, r3, #20
 8001d4a:	ed83 0a00 	vstr	s0, [r3]
		  if (i_t >= 0) {
 8001d4e:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0f      	blt.n	8001d7a <main+0x4a6>
			  t[i_t] = t_val;
 8001d5a:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d62:	f507 62d6 	add.w	r2, r7, #1712	; 0x6b0
 8001d66:	f2a2 62ac 	subw	r2, r2, #1708	; 0x6ac
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f507 52b4 	add.w	r2, r7, #5760	; 0x1680
 8001d72:	f102 0214 	add.w	r2, r2, #20
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	601a      	str	r2, [r3, #0]
		  }

		  npf_snprintf(msg, sizeof(msg), "%i\r\n", (int) t_val);
 8001d7a:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8001d7e:	f103 0314 	add.w	r3, r3, #20
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d8a:	f507 50b4 	add.w	r0, r7, #5760	; 0x1680
 8001d8e:	f100 0004 	add.w	r0, r0, #4
 8001d92:	ee17 3a90 	vmov	r3, s15
 8001d96:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <main+0x54c>)
 8001d98:	210a      	movs	r1, #10
 8001d9a:	f7ff fd57 	bl	800184c <npf_snprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001d9e:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8001da2:	f103 0304 	add.w	r3, r3, #4
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fa0e 	bl	80001c8 <strlen>
 8001dac:	4603      	mov	r3, r0
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	f507 51b4 	add.w	r1, r7, #5760	; 0x1680
 8001db4:	f101 0104 	add.w	r1, r1, #4
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbc:	4819      	ldr	r0, [pc, #100]	; (8001e24 <main+0x550>)
 8001dbe:	f003 fb91 	bl	80054e4 <HAL_UART_Transmit>

		  i_x++;
 8001dc2:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001dc6:	f103 0304 	add.w	r3, r3, #4
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001dd8:	f102 0204 	add.w	r2, r2, #4
 8001ddc:	8013      	strh	r3, [r2, #0]
		  i_x_bar++;
 8001dde:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001de2:	f103 0302 	add.w	r3, r3, #2
 8001de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001df4:	f102 0202 	add.w	r2, r2, #2
 8001df8:	8013      	strh	r3, [r2, #0]
		  i_t++;
 8001dfa:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8001dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001e0c:	8013      	strh	r3, [r2, #0]

		  tim6_val = __HAL_TIM_GET_COUNTER(&htim6);
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <main+0x554>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 8001e18:	f102 020e 	add.w	r2, r2, #14
 8001e1c:	8013      	strh	r3, [r2, #0]
	  if (__HAL_TIM_GET_COUNTER(&htim6) - tim6_val >= MAIN_TRIGGER / 3) {
 8001e1e:	e60b      	b.n	8001a38 <main+0x164>
 8001e20:	08005d0c 	.word	0x08005d0c
 8001e24:	200000c4 	.word	0x200000c4
 8001e28:	20000078 	.word	0x20000078

08001e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b096      	sub	sp, #88	; 0x58
 8001e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e36:	2228      	movs	r2, #40	; 0x28
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f003 ff4c 	bl	8005cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e50:	463b      	mov	r3, r7
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]
 8001e5e:	615a      	str	r2, [r3, #20]
 8001e60:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e62:	2302      	movs	r3, #2
 8001e64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e66:	2301      	movs	r3, #1
 8001e68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e72:	2300      	movs	r3, #0
 8001e74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001e76:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001e7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e80:	4618      	mov	r0, r3
 8001e82:	f001 fda5 	bl	80039d0 <HAL_RCC_OscConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001e8c:	f000 fa28 	bl	80022e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e90:	230f      	movs	r3, #15
 8001e92:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e94:	2302      	movs	r3, #2
 8001e96:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	2102      	movs	r1, #2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fdcd 	bl	8004a4c <HAL_RCC_ClockConfig>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001eb8:	f000 fa12 	bl	80022e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f002 fff5 	bl	8004eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001ed4:	f000 fa04 	bl	80022e0 <Error_Handler>
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3758      	adds	r7, #88	; 0x58
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
 8001f00:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f02:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f16:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f5c:	4817      	ldr	r0, [pc, #92]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f5e:	f000 fb53 	bl	8002608 <HAL_ADC_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001f68:	f000 f9ba 	bl	80022e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	4811      	ldr	r0, [pc, #68]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001f78:	f001 f92a 	bl	80031d0 <HAL_ADCEx_MultiModeConfigChannel>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001f82:	f000 f9ad 	bl	80022e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f86:	2301      	movs	r3, #1
 8001f88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4806      	ldr	r0, [pc, #24]	; (8001fbc <MX_ADC1_Init+0xdc>)
 8001fa4:	f000 fe54 	bl	8002c50 <HAL_ADC_ConfigChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001fae:	f000 f997 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	; 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000028 	.word	0x20000028

08001fc0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001fd0:	4b14      	ldr	r3, [pc, #80]	; (8002024 <MX_TIM6_Init+0x64>)
 8001fd2:	4a15      	ldr	r2, [pc, #84]	; (8002028 <MX_TIM6_Init+0x68>)
 8001fd4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64-1;
 8001fd6:	4b13      	ldr	r3, [pc, #76]	; (8002024 <MX_TIM6_Init+0x64>)
 8001fd8:	223f      	movs	r2, #63	; 0x3f
 8001fda:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <MX_TIM6_Init+0x64>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <MX_TIM6_Init+0x64>)
 8001fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <MX_TIM6_Init+0x64>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <MX_TIM6_Init+0x64>)
 8001ff2:	f003 f897 	bl	8005124 <HAL_TIM_Base_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ffc:	f000 f970 	bl	80022e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	4619      	mov	r1, r3
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_TIM6_Init+0x64>)
 800200e:	f003 f9ad 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002018:	f000 f962 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000078 	.word	0x20000078
 8002028:	40001000 	.word	0x40001000

0800202c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002032:	4a15      	ldr	r2, [pc, #84]	; (8002088 <MX_USART2_UART_Init+0x5c>)
 8002034:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800203c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <MX_USART2_UART_Init+0x58>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002052:	220c      	movs	r2, #12
 8002054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MX_USART2_UART_Init+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002064:	2200      	movs	r2, #0
 8002066:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <MX_USART2_UART_Init+0x58>)
 800206a:	2200      	movs	r2, #0
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800206e:	4805      	ldr	r0, [pc, #20]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002070:	f003 f9ea 	bl	8005448 <HAL_UART_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800207a:	f000 f931 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200000c4 	.word	0x200000c4
 8002088:	40004400 	.word	0x40004400

0800208c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a2:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <MX_GPIO_Init+0xc4>)
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	4a2a      	ldr	r2, [pc, #168]	; (8002150 <MX_GPIO_Init+0xc4>)
 80020a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020ac:	6153      	str	r3, [r2, #20]
 80020ae:	4b28      	ldr	r3, [pc, #160]	; (8002150 <MX_GPIO_Init+0xc4>)
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ba:	4b25      	ldr	r3, [pc, #148]	; (8002150 <MX_GPIO_Init+0xc4>)
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	4a24      	ldr	r2, [pc, #144]	; (8002150 <MX_GPIO_Init+0xc4>)
 80020c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c4:	6153      	str	r3, [r2, #20]
 80020c6:	4b22      	ldr	r3, [pc, #136]	; (8002150 <MX_GPIO_Init+0xc4>)
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <MX_GPIO_Init+0xc4>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	4a1e      	ldr	r2, [pc, #120]	; (8002150 <MX_GPIO_Init+0xc4>)
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020dc:	6153      	str	r3, [r2, #20]
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <MX_GPIO_Init+0xc4>)
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <MX_GPIO_Init+0xc4>)
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <MX_GPIO_Init+0xc4>)
 80020f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f4:	6153      	str	r3, [r2, #20]
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <MX_GPIO_Init+0xc4>)
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	2120      	movs	r1, #32
 8002106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210a:	f001 fc49 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800210e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002114:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	480b      	ldr	r0, [pc, #44]	; (8002154 <MX_GPIO_Init+0xc8>)
 8002126:	f001 fac9 	bl	80036bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800212a:	2320      	movs	r3, #32
 800212c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4619      	mov	r1, r3
 8002140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002144:	f001 faba 	bl	80036bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002148:	bf00      	nop
 800214a:	3728      	adds	r7, #40	; 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	48000800 	.word	0x48000800

08002158 <movavg>:

/* USER CODE BEGIN 4 */
float movavg(float curr_val, float x[], const short x_idx, const unsigned short window_radius) {
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002162:	60b8      	str	r0, [r7, #8]
 8002164:	460b      	mov	r3, r1
 8002166:	80fb      	strh	r3, [r7, #6]
 8002168:	4613      	mov	r3, r2
 800216a:	80bb      	strh	r3, [r7, #4]
    const unsigned short R = window_radius, W = 2*R + 1;
 800216c:	88bb      	ldrh	r3, [r7, #4]
 800216e:	82fb      	strh	r3, [r7, #22]
 8002170:	8afb      	ldrh	r3, [r7, #22]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	b29b      	uxth	r3, r3
 8002176:	3301      	adds	r3, #1
 8002178:	82bb      	strh	r3, [r7, #20]
    const short i = x_idx, j = x_idx - (R + 1);
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	827b      	strh	r3, [r7, #18]
 800217e:	88fa      	ldrh	r2, [r7, #6]
 8002180:	8afb      	ldrh	r3, [r7, #22]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29b      	uxth	r3, r3
 800218a:	823b      	strh	r3, [r7, #16]

    if (i <= W) {
 800218c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002190:	8abb      	ldrh	r3, [r7, #20]
 8002192:	429a      	cmp	r2, r3
 8002194:	dc14      	bgt.n	80021c0 <movavg+0x68>
        curr_val += x[i] / W;
 8002196:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	4413      	add	r3, r2
 80021a0:	edd3 6a00 	vldr	s13, [r3]
 80021a4:	8abb      	ldrh	r3, [r7, #20]
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80021b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ba:	edc7 7a03 	vstr	s15, [r7, #12]
 80021be:	e021      	b.n	8002204 <movavg+0xac>
    } else {
        curr_val = curr_val + (x[j + R] - x[j - (R + 1)]) / W;
 80021c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80021c4:	8afb      	ldrh	r3, [r7, #22]
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	4413      	add	r3, r2
 80021ce:	ed93 7a00 	vldr	s14, [r3]
 80021d2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80021d6:	8afb      	ldrh	r3, [r7, #22]
 80021d8:	3301      	adds	r3, #1
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4413      	add	r3, r2
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021ea:	8abb      	ldrh	r3, [r7, #20]
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80021fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002200:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    return curr_val;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	ee07 3a90 	vmov	s15, r3
}
 800220a:	eeb0 0a67 	vmov.f32	s0, s15
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <triangle>:

float triangle(float x[], const short y_idx, const unsigned short window_radius) {
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
 8002224:	4613      	mov	r3, r2
 8002226:	803b      	strh	r3, [r7, #0]
    const short j = y_idx;
 8002228:	887b      	ldrh	r3, [r7, #2]
 800222a:	81fb      	strh	r3, [r7, #14]
    const unsigned short R = window_radius;
 800222c:	883b      	ldrh	r3, [r7, #0]
 800222e:	81bb      	strh	r3, [r7, #12]

    if (j < 0) {
 8002230:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002234:	2b00      	cmp	r3, #0
 8002236:	da02      	bge.n	800223e <triangle+0x26>
        return 0;
 8002238:	eddf 7a28 	vldr	s15, [pc, #160]	; 80022dc <triangle+0xc4>
 800223c:	e046      	b.n	80022cc <triangle+0xb4>
    } else if (j < R) {
 800223e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002242:	89bb      	ldrh	r3, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	da1b      	bge.n	8002280 <triangle+0x68>
        return x[j] * (x[j] - x[j + R]);
 8002248:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	ed93 7a00 	vldr	s14, [r3]
 8002256:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	4413      	add	r3, r2
 8002260:	edd3 6a00 	vldr	s13, [r3]
 8002264:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002268:	89bb      	ldrh	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800227a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227e:	e025      	b.n	80022cc <triangle+0xb4>
    } else {
        return (x[j] - x[j - R]) * (x[j] - x[j + R]);
 8002280:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	ed93 7a00 	vldr	s14, [r3]
 800228e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002292:	89bb      	ldrh	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	edd3 6a00 	vldr	s13, [r3]
 80022b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80022b6:	89bb      	ldrh	r3, [r7, #12]
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	edd3 7a00 	vldr	s15, [r3]
 80022c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022c8:	ee67 7a27 	vmul.f32	s15, s14, s15
    }
}
 80022cc:	eeb0 0a67 	vmov.f32	s0, s15
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	00000000 	.word	0x00000000

080022e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e4:	b672      	cpsid	i
}
 80022e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <Error_Handler+0x8>
	...

080022ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <HAL_MspInit+0x44>)
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <HAL_MspInit+0x44>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6193      	str	r3, [r2, #24]
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_MspInit+0x44>)
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_MspInit+0x44>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <HAL_MspInit+0x44>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	61d3      	str	r3, [r2, #28]
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_MspInit+0x44>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002322:	2007      	movs	r0, #7
 8002324:	f001 f996 	bl	8003654 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000

08002334 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002354:	d124      	bne.n	80023a0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <HAL_ADC_MspInit+0x74>)
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <HAL_ADC_MspInit+0x74>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	6153      	str	r3, [r2, #20]
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_ADC_MspInit+0x74>)
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_ADC_MspInit+0x74>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <HAL_ADC_MspInit+0x74>)
 8002374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002378:	6153      	str	r3, [r2, #20]
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_ADC_MspInit+0x74>)
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002386:	2301      	movs	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800238a:	2303      	movs	r3, #3
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800239c:	f001 f98e 	bl	80036bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023a0:	bf00      	nop
 80023a2:	3728      	adds	r7, #40	; 0x28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000

080023ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <HAL_TIM_Base_MspInit+0x38>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10b      	bne.n	80023d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_TIM_Base_MspInit+0x3c>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <HAL_TIM_Base_MspInit+0x3c>)
 80023c4:	f043 0310 	orr.w	r3, r3, #16
 80023c8:	61d3      	str	r3, [r2, #28]
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_TIM_Base_MspInit+0x3c>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40001000 	.word	0x40001000
 80023e8:	40021000 	.word	0x40021000

080023ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a17      	ldr	r2, [pc, #92]	; (8002468 <HAL_UART_MspInit+0x7c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d128      	bne.n	8002460 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_UART_MspInit+0x80>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <HAL_UART_MspInit+0x80>)
 8002414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002418:	61d3      	str	r3, [r2, #28]
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_UART_MspInit+0x80>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_UART_MspInit+0x80>)
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	4a10      	ldr	r2, [pc, #64]	; (800246c <HAL_UART_MspInit+0x80>)
 800242c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002430:	6153      	str	r3, [r2, #20]
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_UART_MspInit+0x80>)
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800243e:	230c      	movs	r3, #12
 8002440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800244a:	2303      	movs	r3, #3
 800244c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800244e:	2307      	movs	r3, #7
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4619      	mov	r1, r3
 8002458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800245c:	f001 f92e 	bl	80036bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002460:	bf00      	nop
 8002462:	3728      	adds	r7, #40	; 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40004400 	.word	0x40004400
 800246c:	40021000 	.word	0x40021000

08002470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <NMI_Handler+0x4>

08002476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247a:	e7fe      	b.n	800247a <HardFault_Handler+0x4>

0800247c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002480:	e7fe      	b.n	8002480 <MemManage_Handler+0x4>

08002482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002486:	e7fe      	b.n	8002486 <BusFault_Handler+0x4>

08002488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800248c:	e7fe      	b.n	800248c <UsageFault_Handler+0x4>

0800248e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024bc:	f000 f884 	bl	80025c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <SystemInit+0x20>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <SystemInit+0x20>)
 80024d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002520 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024ec:	f7ff ffea 	bl	80024c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f0:	480c      	ldr	r0, [pc, #48]	; (8002524 <LoopForever+0x6>)
  ldr r1, =_edata
 80024f2:	490d      	ldr	r1, [pc, #52]	; (8002528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <LoopForever+0xe>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f8:	e002      	b.n	8002500 <LoopCopyDataInit>

080024fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fe:	3304      	adds	r3, #4

08002500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002504:	d3f9      	bcc.n	80024fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002508:	4c0a      	ldr	r4, [pc, #40]	; (8002534 <LoopForever+0x16>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800250c:	e001      	b.n	8002512 <LoopFillZerobss>

0800250e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002510:	3204      	adds	r2, #4

08002512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002514:	d3fb      	bcc.n	800250e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002516:	f003 fbbb 	bl	8005c90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800251a:	f7ff f9db 	bl	80018d4 <main>

0800251e <LoopForever>:

LoopForever:
    b LoopForever
 800251e:	e7fe      	b.n	800251e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002520:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002528:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800252c:	08005d5c 	.word	0x08005d5c
  ldr r2, =_sbss
 8002530:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002534:	20000150 	.word	0x20000150

08002538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002538:	e7fe      	b.n	8002538 <ADC1_2_IRQHandler>
	...

0800253c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <HAL_Init+0x28>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a07      	ldr	r2, [pc, #28]	; (8002564 <HAL_Init+0x28>)
 8002546:	f043 0310 	orr.w	r3, r3, #16
 800254a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800254c:	2003      	movs	r0, #3
 800254e:	f001 f881 	bl	8003654 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002552:	2000      	movs	r0, #0
 8002554:	f000 f808 	bl	8002568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002558:	f7ff fec8 	bl	80022ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40022000 	.word	0x40022000

08002568 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_InitTick+0x54>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_InitTick+0x58>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002582:	fbb2 f3f3 	udiv	r3, r2, r3
 8002586:	4618      	mov	r0, r3
 8002588:	f001 f88b 	bl	80036a2 <HAL_SYSTICK_Config>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e00e      	b.n	80025b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b0f      	cmp	r3, #15
 800259a:	d80a      	bhi.n	80025b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800259c:	2200      	movs	r2, #0
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	f001 f861 	bl	800366a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a8:	4a06      	ldr	r2, [pc, #24]	; (80025c4 <HAL_InitTick+0x5c>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000000 	.word	0x20000000
 80025c0:	20000008 	.word	0x20000008
 80025c4:	20000004 	.word	0x20000004

080025c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_IncTick+0x20>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_IncTick+0x24>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_IncTick+0x24>)
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000008 	.word	0x20000008
 80025ec:	2000014c 	.word	0x2000014c

080025f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_GetTick+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	2000014c 	.word	0x2000014c

08002608 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b09a      	sub	sp, #104	; 0x68
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e172      	b.n	800290e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	d176      	bne.n	8002728 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d152      	bne.n	80026e8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff fe69 	bl	8002334 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d13b      	bne.n	80026e8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fed7 	bl	8003424 <ADC_Disable>
 8002676:	4603      	mov	r3, r0
 8002678:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	d12f      	bne.n	80026e8 <HAL_ADC_Init+0xe0>
 8002688:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800268c:	2b00      	cmp	r3, #0
 800268e:	d12b      	bne.n	80026e8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002698:	f023 0302 	bic.w	r3, r3, #2
 800269c:	f043 0202 	orr.w	r2, r3, #2
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026b2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026c2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026c4:	4b94      	ldr	r3, [pc, #592]	; (8002918 <HAL_ADC_Init+0x310>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a94      	ldr	r2, [pc, #592]	; (800291c <HAL_ADC_Init+0x314>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0c9a      	lsrs	r2, r3, #18
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026da:	e002      	b.n	80026e2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	3b01      	subs	r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f9      	bne.n	80026dc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002704:	d110      	bne.n	8002728 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f023 0312 	bic.w	r3, r3, #18
 800270e:	f043 0210 	orr.w	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f043 0201 	orr.w	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	f040 80df 	bne.w	80028f4 <HAL_ADC_Init+0x2ec>
 8002736:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800273a:	2b00      	cmp	r3, #0
 800273c:	f040 80da 	bne.w	80028f4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 80d2 	bne.w	80028f4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002758:	f043 0202 	orr.w	r2, r3, #2
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002760:	4b6f      	ldr	r3, [pc, #444]	; (8002920 <HAL_ADC_Init+0x318>)
 8002762:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800276c:	d102      	bne.n	8002774 <HAL_ADC_Init+0x16c>
 800276e:	4b6d      	ldr	r3, [pc, #436]	; (8002924 <HAL_ADC_Init+0x31c>)
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	e002      	b.n	800277a <HAL_ADC_Init+0x172>
 8002774:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002778:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d108      	bne.n	800279a <HAL_ADC_Init+0x192>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_ADC_Init+0x192>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_ADC_Init+0x194>
 800279a:	2300      	movs	r3, #0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d11c      	bne.n	80027da <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027a0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d010      	beq.n	80027c8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d107      	bne.n	80027c2 <HAL_ADC_Init+0x1ba>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_Init+0x1ba>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_ADC_Init+0x1bc>
 80027c2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d108      	bne.n	80027da <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80027c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7e5b      	ldrb	r3, [r3, #25]
 80027de:	035b      	lsls	r3, r3, #13
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027e4:	2a01      	cmp	r2, #1
 80027e6:	d002      	beq.n	80027ee <HAL_ADC_Init+0x1e6>
 80027e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027ec:	e000      	b.n	80027f0 <HAL_ADC_Init+0x1e8>
 80027ee:	2200      	movs	r2, #0
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002800:	4313      	orrs	r3, r2
 8002802:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d11b      	bne.n	8002846 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7e5b      	ldrb	r3, [r3, #25]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	3b01      	subs	r3, #1
 800281c:	045a      	lsls	r2, r3, #17
 800281e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002820:	4313      	orrs	r3, r2
 8002822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002826:	663b      	str	r3, [r7, #96]	; 0x60
 8002828:	e00d      	b.n	8002846 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002832:	f043 0220 	orr.w	r2, r3, #32
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f043 0201 	orr.w	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	2b01      	cmp	r3, #1
 800284c:	d007      	beq.n	800285e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	4313      	orrs	r3, r2
 8002858:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800285a:	4313      	orrs	r3, r2
 800285c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b00      	cmp	r3, #0
 800286a:	d114      	bne.n	8002896 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800287a:	f023 0302 	bic.w	r3, r3, #2
 800287e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7e1b      	ldrb	r3, [r3, #24]
 8002884:	039a      	lsls	r2, r3, #14
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4313      	orrs	r3, r2
 8002890:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002892:	4313      	orrs	r3, r2
 8002894:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	4b22      	ldr	r3, [pc, #136]	; (8002928 <HAL_ADC_Init+0x320>)
 800289e:	4013      	ands	r3, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80028a6:	430b      	orrs	r3, r1
 80028a8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10c      	bne.n	80028cc <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	f023 010f 	bic.w	r1, r3, #15
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	1e5a      	subs	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
 80028ca:	e007      	b.n	80028dc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 020f 	bic.w	r2, r2, #15
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f023 0303 	bic.w	r3, r3, #3
 80028ea:	f043 0201 	orr.w	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
 80028f2:	e00a      	b.n	800290a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f023 0312 	bic.w	r3, r3, #18
 80028fc:	f043 0210 	orr.w	r2, r3, #16
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002904:	2301      	movs	r3, #1
 8002906:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800290a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800290e:	4618      	mov	r0, r3
 8002910:	3768      	adds	r7, #104	; 0x68
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000000 	.word	0x20000000
 800291c:	431bde83 	.word	0x431bde83
 8002920:	50000300 	.word	0x50000300
 8002924:	50000100 	.word	0x50000100
 8002928:	fff0c007 	.word	0xfff0c007

0800292c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 809c 	bne.w	8002a80 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_ADC_Start+0x2a>
 8002952:	2302      	movs	r3, #2
 8002954:	e097      	b.n	8002a86 <HAL_ADC_Start+0x15a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fcfc 	bl	800335c <ADC_Enable>
 8002964:	4603      	mov	r3, r0
 8002966:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 8083 	bne.w	8002a76 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002984:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <HAL_ADC_Start+0x164>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <HAL_ADC_Start+0x6e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002998:	d115      	bne.n	80029c6 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d027      	beq.n	8002a04 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80029c4:	e01e      	b.n	8002a04 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029da:	d004      	beq.n	80029e6 <HAL_ADC_Start+0xba>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a2c      	ldr	r2, [pc, #176]	; (8002a94 <HAL_ADC_Start+0x168>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10e      	bne.n	8002a04 <HAL_ADC_Start+0xd8>
 80029e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a10:	d106      	bne.n	8002a20 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f023 0206 	bic.w	r2, r3, #6
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	645a      	str	r2, [r3, #68]	; 0x44
 8002a1e:	e002      	b.n	8002a26 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	221c      	movs	r2, #28
 8002a34:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_ADC_Start+0x164>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d010      	beq.n	8002a64 <HAL_ADC_Start+0x138>
 8002a42:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <HAL_ADC_Start+0x164>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d00a      	beq.n	8002a64 <HAL_ADC_Start+0x138>
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_ADC_Start+0x164>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	2b09      	cmp	r3, #9
 8002a58:	d004      	beq.n	8002a64 <HAL_ADC_Start+0x138>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a62:	d10f      	bne.n	8002a84 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0204 	orr.w	r2, r2, #4
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	e006      	b.n	8002a84 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a7e:	e001      	b.n	8002a84 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
 8002a82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	50000300 	.word	0x50000300
 8002a94:	50000100 	.word	0x50000100

08002a98 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d102      	bne.n	8002ab4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002aae:	2308      	movs	r3, #8
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	e02e      	b.n	8002b12 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ab4:	4b5e      	ldr	r3, [pc, #376]	; (8002c30 <HAL_ADC_PollForConversion+0x198>)
 8002ab6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d112      	bne.n	8002aea <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d11d      	bne.n	8002b0e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e09d      	b.n	8002c26 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f043 0220 	orr.w	r2, r3, #32
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e08b      	b.n	8002c26 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002b0e:	230c      	movs	r3, #12
 8002b10:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b12:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <HAL_ADC_PollForConversion+0x198>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d004      	beq.n	8002b28 <HAL_ADC_PollForConversion+0x90>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b26:	d104      	bne.n	8002b32 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	e003      	b.n	8002b3a <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002b32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002b3a:	f7ff fd59 	bl	80025f0 <HAL_GetTick>
 8002b3e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b40:	e021      	b.n	8002b86 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d01d      	beq.n	8002b86 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_ADC_PollForConversion+0xc8>
 8002b50:	f7ff fd4e 	bl	80025f0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d212      	bcs.n	8002b86 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10b      	bne.n	8002b86 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f043 0204 	orr.w	r2, r3, #4
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e04f      	b.n	8002c26 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0d6      	beq.n	8002b42 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d131      	bne.n	8002c12 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d12c      	bne.n	8002c12 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d125      	bne.n	8002c12 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d112      	bne.n	8002bfa <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d112      	bne.n	8002c12 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f043 0201 	orr.w	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
 8002bf8:	e00b      	b.n	8002c12 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f043 0220 	orr.w	r2, r3, #32
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f043 0201 	orr.w	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d103      	bne.n	8002c24 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	50000300 	.word	0x50000300

08002c34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b09b      	sub	sp, #108	; 0x6c
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x22>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e2a4      	b.n	80031bc <HAL_ADC_ConfigChannel+0x56c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f040 8288 	bne.w	800319a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d81c      	bhi.n	8002ccc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	231f      	movs	r3, #31
 8002ca8:	4093      	lsls	r3, r2
 8002caa:	43db      	mvns	r3, r3
 8002cac:	4019      	ands	r1, r3
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cca:	e063      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b09      	cmp	r3, #9
 8002cd2:	d81e      	bhi.n	8002d12 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	3b1e      	subs	r3, #30
 8002ce8:	221f      	movs	r2, #31
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	4019      	ands	r1, r3
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	3b1e      	subs	r3, #30
 8002d04:	fa00 f203 	lsl.w	r2, r0, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d10:	e040      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b0e      	cmp	r3, #14
 8002d18:	d81e      	bhi.n	8002d58 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4413      	add	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	3b3c      	subs	r3, #60	; 0x3c
 8002d2e:	221f      	movs	r2, #31
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	4019      	ands	r1, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	3b3c      	subs	r3, #60	; 0x3c
 8002d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	639a      	str	r2, [r3, #56]	; 0x38
 8002d56:	e01d      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4413      	add	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	3b5a      	subs	r3, #90	; 0x5a
 8002d6c:	221f      	movs	r2, #31
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	4019      	ands	r1, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4413      	add	r3, r2
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	3b5a      	subs	r3, #90	; 0x5a
 8002d88:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 80e5 	bne.w	8002f6e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b09      	cmp	r3, #9
 8002daa:	d91c      	bls.n	8002de6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6999      	ldr	r1, [r3, #24]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	3b1e      	subs	r3, #30
 8002dbe:	2207      	movs	r2, #7
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	4019      	ands	r1, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6898      	ldr	r0, [r3, #8]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b1e      	subs	r3, #30
 8002dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	619a      	str	r2, [r3, #24]
 8002de4:	e019      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6959      	ldr	r1, [r3, #20]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	2207      	movs	r2, #7
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	4019      	ands	r1, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6898      	ldr	r0, [r3, #8]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	08db      	lsrs	r3, r3, #3
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d84f      	bhi.n	8002edc <HAL_ADC_ConfigChannel+0x28c>
 8002e3c:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <HAL_ADC_ConfigChannel+0x1f4>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002e55 	.word	0x08002e55
 8002e48:	08002e77 	.word	0x08002e77
 8002e4c:	08002e99 	.word	0x08002e99
 8002e50:	08002ebb 	.word	0x08002ebb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e5a:	4b94      	ldr	r3, [pc, #592]	; (80030ac <HAL_ADC_ConfigChannel+0x45c>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	0691      	lsls	r1, r2, #26
 8002e64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e66:	430a      	orrs	r2, r1
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e72:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e74:	e07e      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e7c:	4b8b      	ldr	r3, [pc, #556]	; (80030ac <HAL_ADC_ConfigChannel+0x45c>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	0691      	lsls	r1, r2, #26
 8002e86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e94:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e96:	e06d      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e9e:	4b83      	ldr	r3, [pc, #524]	; (80030ac <HAL_ADC_ConfigChannel+0x45c>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	0691      	lsls	r1, r2, #26
 8002ea8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002eb6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002eb8:	e05c      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ec0:	4b7a      	ldr	r3, [pc, #488]	; (80030ac <HAL_ADC_ConfigChannel+0x45c>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	0691      	lsls	r1, r2, #26
 8002eca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ed8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002eda:	e04b      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	069b      	lsls	r3, r3, #26
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d107      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002efe:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	069b      	lsls	r3, r3, #26
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d107      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f22:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	069b      	lsls	r3, r3, #26
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d107      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f46:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	069b      	lsls	r3, r3, #26
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d10a      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f6a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002f6c:	e001      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002f6e:	bf00      	nop
 8002f70:	e000      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002f72:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d108      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x344>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x344>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x346>
 8002f94:	2300      	movs	r3, #0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 810a 	bne.w	80031b0 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d00f      	beq.n	8002fc4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	400a      	ands	r2, r1
 8002fbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002fc2:	e049      	b.n	8003058 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b09      	cmp	r3, #9
 8002fe4:	d91c      	bls.n	8003020 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6999      	ldr	r1, [r3, #24]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b1b      	subs	r3, #27
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	4019      	ands	r1, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	6898      	ldr	r0, [r3, #8]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4413      	add	r3, r2
 8003010:	3b1b      	subs	r3, #27
 8003012:	fa00 f203 	lsl.w	r2, r0, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	619a      	str	r2, [r3, #24]
 800301e:	e01b      	b.n	8003058 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6959      	ldr	r1, [r3, #20]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	2207      	movs	r2, #7
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	4019      	ands	r1, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6898      	ldr	r0, [r3, #8]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	fa00 f203 	lsl.w	r2, r0, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003058:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_ADC_ConfigChannel+0x460>)
 800305a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b10      	cmp	r3, #16
 8003062:	d105      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800306c:	2b00      	cmp	r3, #0
 800306e:	d015      	beq.n	800309c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003074:	2b11      	cmp	r3, #17
 8003076:	d105      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003088:	2b12      	cmp	r3, #18
 800308a:	f040 8091 	bne.w	80031b0 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800308e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 808a 	bne.w	80031b0 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030a4:	d108      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x468>
 80030a6:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <HAL_ADC_ConfigChannel+0x464>)
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	e008      	b.n	80030be <HAL_ADC_ConfigChannel+0x46e>
 80030ac:	83fff000 	.word	0x83fff000
 80030b0:	50000300 	.word	0x50000300
 80030b4:	50000100 	.word	0x50000100
 80030b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030bc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d108      	bne.n	80030de <HAL_ADC_ConfigChannel+0x48e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_ADC_ConfigChannel+0x48e>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x490>
 80030de:	2300      	movs	r3, #0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d150      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d010      	beq.n	800310c <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d107      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x4b6>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x4b6>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_ADC_ConfigChannel+0x4b8>
 8003106:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003108:	2b00      	cmp	r3, #0
 800310a:	d13c      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b10      	cmp	r3, #16
 8003112:	d11d      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x500>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800311c:	d118      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800311e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003128:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800312a:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <HAL_ADC_ConfigChannel+0x578>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a27      	ldr	r2, [pc, #156]	; (80031cc <HAL_ADC_ConfigChannel+0x57c>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	0c9a      	lsrs	r2, r3, #18
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003140:	e002      	b.n	8003148 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3b01      	subs	r3, #1
 8003146:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f9      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800314e:	e02e      	b.n	80031ae <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b11      	cmp	r3, #17
 8003156:	d10b      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x520>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003160:	d106      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800316a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800316c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800316e:	e01e      	b.n	80031ae <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b12      	cmp	r3, #18
 8003176:	d11a      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003182:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003184:	e013      	b.n	80031ae <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f043 0220 	orr.w	r2, r3, #32
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003198:	e00a      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f043 0220 	orr.w	r2, r3, #32
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80031ac:	e000      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031ae:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80031b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80031bc:	4618      	mov	r0, r3
 80031be:	376c      	adds	r7, #108	; 0x6c
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	20000000 	.word	0x20000000
 80031cc:	431bde83 	.word	0x431bde83

080031d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b099      	sub	sp, #100	; 0x64
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031e8:	d102      	bne.n	80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80031ea:	4b5a      	ldr	r3, [pc, #360]	; (8003354 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	e002      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80031f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031f4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0a2      	b.n	8003346 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800320a:	2302      	movs	r3, #2
 800320c:	e09b      	b.n	8003346 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d17f      	bne.n	8003324 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d179      	bne.n	8003324 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003230:	4b49      	ldr	r3, [pc, #292]	; (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8003232:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d040      	beq.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800323c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800324e:	035b      	lsls	r3, r3, #13
 8003250:	430b      	orrs	r3, r1
 8003252:	431a      	orrs	r2, r3
 8003254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003256:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d108      	bne.n	8003278 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003278:	2300      	movs	r3, #0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d15c      	bne.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800329a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800329c:	2b00      	cmp	r3, #0
 800329e:	d14b      	bne.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80032a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032a8:	f023 030f 	bic.w	r3, r3, #15
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	6811      	ldr	r1, [r2, #0]
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	6892      	ldr	r2, [r2, #8]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	431a      	orrs	r2, r3
 80032b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ba:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032bc:	e03c      	b.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d108      	bne.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80032ea:	2300      	movs	r3, #0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d123      	bne.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d107      	bne.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800330c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800330e:	2b00      	cmp	r3, #0
 8003310:	d112      	bne.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003312:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800331a:	f023 030f 	bic.w	r3, r3, #15
 800331e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003320:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003322:	e009      	b.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003336:	e000      	b.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003338:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003342:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003346:	4618      	mov	r0, r3
 8003348:	3764      	adds	r7, #100	; 0x64
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	50000100 	.word	0x50000100
 8003358:	50000300 	.word	0x50000300

0800335c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d108      	bne.n	8003388 <ADC_Enable+0x2c>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <ADC_Enable+0x2c>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <ADC_Enable+0x2e>
 8003388:	2300      	movs	r3, #0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d143      	bne.n	8003416 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	4b22      	ldr	r3, [pc, #136]	; (8003420 <ADC_Enable+0xc4>)
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00d      	beq.n	80033b8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	f043 0210 	orr.w	r2, r3, #16
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e02f      	b.n	8003418 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80033c8:	f7ff f912 	bl	80025f0 <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033ce:	e01b      	b.n	8003408 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033d0:	f7ff f90e 	bl	80025f0 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d914      	bls.n	8003408 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d00d      	beq.n	8003408 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f043 0210 	orr.w	r2, r3, #16
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e007      	b.n	8003418 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b01      	cmp	r3, #1
 8003414:	d1dc      	bne.n	80033d0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	8000003f 	.word	0x8000003f

08003424 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d108      	bne.n	8003450 <ADC_Disable+0x2c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <ADC_Disable+0x2c>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <ADC_Disable+0x2e>
 8003450:	2300      	movs	r3, #0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d047      	beq.n	80034e6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 030d 	and.w	r3, r3, #13
 8003460:	2b01      	cmp	r3, #1
 8003462:	d10f      	bne.n	8003484 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0202 	orr.w	r2, r2, #2
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2203      	movs	r2, #3
 800347a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800347c:	f7ff f8b8 	bl	80025f0 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003482:	e029      	b.n	80034d8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f043 0210 	orr.w	r2, r3, #16
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e023      	b.n	80034e8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034a0:	f7ff f8a6 	bl	80025f0 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d914      	bls.n	80034d8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d10d      	bne.n	80034d8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	f043 0210 	orr.w	r2, r3, #16
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e007      	b.n	80034e8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d0dc      	beq.n	80034a0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800350c:	4013      	ands	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800351c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003522:	4a04      	ldr	r2, [pc, #16]	; (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	60d3      	str	r3, [r2, #12]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <__NVIC_GetPriorityGrouping+0x18>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	f003 0307 	and.w	r3, r3, #7
}
 8003546:	4618      	mov	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	6039      	str	r1, [r7, #0]
 800355e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003564:	2b00      	cmp	r3, #0
 8003566:	db0a      	blt.n	800357e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	b2da      	uxtb	r2, r3
 800356c:	490c      	ldr	r1, [pc, #48]	; (80035a0 <__NVIC_SetPriority+0x4c>)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	0112      	lsls	r2, r2, #4
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	440b      	add	r3, r1
 8003578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800357c:	e00a      	b.n	8003594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4908      	ldr	r1, [pc, #32]	; (80035a4 <__NVIC_SetPriority+0x50>)
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	3b04      	subs	r3, #4
 800358c:	0112      	lsls	r2, r2, #4
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	440b      	add	r3, r1
 8003592:	761a      	strb	r2, [r3, #24]
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000e100 	.word	0xe000e100
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	; 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f1c3 0307 	rsb	r3, r3, #7
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	bf28      	it	cs
 80035c6:	2304      	movcs	r3, #4
 80035c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3304      	adds	r3, #4
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d902      	bls.n	80035d8 <NVIC_EncodePriority+0x30>
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3b03      	subs	r3, #3
 80035d6:	e000      	b.n	80035da <NVIC_EncodePriority+0x32>
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035dc:	f04f 32ff 	mov.w	r2, #4294967295
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43da      	mvns	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	401a      	ands	r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f0:	f04f 31ff 	mov.w	r1, #4294967295
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	fa01 f303 	lsl.w	r3, r1, r3
 80035fa:	43d9      	mvns	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003600:	4313      	orrs	r3, r2
         );
}
 8003602:	4618      	mov	r0, r3
 8003604:	3724      	adds	r7, #36	; 0x24
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3b01      	subs	r3, #1
 800361c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003620:	d301      	bcc.n	8003626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003622:	2301      	movs	r3, #1
 8003624:	e00f      	b.n	8003646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003626:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <SysTick_Config+0x40>)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3b01      	subs	r3, #1
 800362c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800362e:	210f      	movs	r1, #15
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	f7ff ff8e 	bl	8003554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <SysTick_Config+0x40>)
 800363a:	2200      	movs	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800363e:	4b04      	ldr	r3, [pc, #16]	; (8003650 <SysTick_Config+0x40>)
 8003640:	2207      	movs	r2, #7
 8003642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	e000e010 	.word	0xe000e010

08003654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff ff47 	bl	80034f0 <__NVIC_SetPriorityGrouping>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b086      	sub	sp, #24
 800366e:	af00      	add	r7, sp, #0
 8003670:	4603      	mov	r3, r0
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800367c:	f7ff ff5c 	bl	8003538 <__NVIC_GetPriorityGrouping>
 8003680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	6978      	ldr	r0, [r7, #20]
 8003688:	f7ff ff8e 	bl	80035a8 <NVIC_EncodePriority>
 800368c:	4602      	mov	r2, r0
 800368e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff ff5d 	bl	8003554 <__NVIC_SetPriority>
}
 800369a:	bf00      	nop
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff ffb0 	bl	8003610 <SysTick_Config>
 80036b0:	4603      	mov	r3, r0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ca:	e14e      	b.n	800396a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	2101      	movs	r1, #1
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	fa01 f303 	lsl.w	r3, r1, r3
 80036d8:	4013      	ands	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8140 	beq.w	8003964 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d005      	beq.n	80036fc <HAL_GPIO_Init+0x40>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d130      	bne.n	800375e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	2203      	movs	r2, #3
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003732:	2201      	movs	r2, #1
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	f003 0201 	and.w	r2, r3, #1
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b03      	cmp	r3, #3
 8003768:	d017      	beq.n	800379a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	2203      	movs	r2, #3
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d123      	bne.n	80037ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	08da      	lsrs	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3208      	adds	r2, #8
 80037ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	220f      	movs	r2, #15
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4013      	ands	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	08da      	lsrs	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3208      	adds	r2, #8
 80037e8:	6939      	ldr	r1, [r7, #16]
 80037ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	2203      	movs	r2, #3
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4013      	ands	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0203 	and.w	r2, r3, #3
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 809a 	beq.w	8003964 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003830:	4b55      	ldr	r3, [pc, #340]	; (8003988 <HAL_GPIO_Init+0x2cc>)
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	4a54      	ldr	r2, [pc, #336]	; (8003988 <HAL_GPIO_Init+0x2cc>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6193      	str	r3, [r2, #24]
 800383c:	4b52      	ldr	r3, [pc, #328]	; (8003988 <HAL_GPIO_Init+0x2cc>)
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003848:	4a50      	ldr	r2, [pc, #320]	; (800398c <HAL_GPIO_Init+0x2d0>)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	089b      	lsrs	r3, r3, #2
 800384e:	3302      	adds	r3, #2
 8003850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003854:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	220f      	movs	r2, #15
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4013      	ands	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003872:	d013      	beq.n	800389c <HAL_GPIO_Init+0x1e0>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a46      	ldr	r2, [pc, #280]	; (8003990 <HAL_GPIO_Init+0x2d4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00d      	beq.n	8003898 <HAL_GPIO_Init+0x1dc>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a45      	ldr	r2, [pc, #276]	; (8003994 <HAL_GPIO_Init+0x2d8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d007      	beq.n	8003894 <HAL_GPIO_Init+0x1d8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a44      	ldr	r2, [pc, #272]	; (8003998 <HAL_GPIO_Init+0x2dc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <HAL_GPIO_Init+0x1d4>
 800388c:	2303      	movs	r3, #3
 800388e:	e006      	b.n	800389e <HAL_GPIO_Init+0x1e2>
 8003890:	2305      	movs	r3, #5
 8003892:	e004      	b.n	800389e <HAL_GPIO_Init+0x1e2>
 8003894:	2302      	movs	r3, #2
 8003896:	e002      	b.n	800389e <HAL_GPIO_Init+0x1e2>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <HAL_GPIO_Init+0x1e2>
 800389c:	2300      	movs	r3, #0
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	f002 0203 	and.w	r2, r2, #3
 80038a4:	0092      	lsls	r2, r2, #2
 80038a6:	4093      	lsls	r3, r2
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038ae:	4937      	ldr	r1, [pc, #220]	; (800398c <HAL_GPIO_Init+0x2d0>)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3302      	adds	r3, #2
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038bc:	4b37      	ldr	r3, [pc, #220]	; (800399c <HAL_GPIO_Init+0x2e0>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	43db      	mvns	r3, r3
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038e0:	4a2e      	ldr	r2, [pc, #184]	; (800399c <HAL_GPIO_Init+0x2e0>)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038e6:	4b2d      	ldr	r3, [pc, #180]	; (800399c <HAL_GPIO_Init+0x2e0>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4013      	ands	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800390a:	4a24      	ldr	r2, [pc, #144]	; (800399c <HAL_GPIO_Init+0x2e0>)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003910:	4b22      	ldr	r3, [pc, #136]	; (800399c <HAL_GPIO_Init+0x2e0>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	43db      	mvns	r3, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4013      	ands	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003934:	4a19      	ldr	r2, [pc, #100]	; (800399c <HAL_GPIO_Init+0x2e0>)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800393a:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_GPIO_Init+0x2e0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	43db      	mvns	r3, r3
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800395e:	4a0f      	ldr	r2, [pc, #60]	; (800399c <HAL_GPIO_Init+0x2e0>)
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	3301      	adds	r3, #1
 8003968:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	f47f aea9 	bne.w	80036cc <HAL_GPIO_Init+0x10>
  }
}
 800397a:	bf00      	nop
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	40021000 	.word	0x40021000
 800398c:	40010000 	.word	0x40010000
 8003990:	48000400 	.word	0x48000400
 8003994:	48000800 	.word	0x48000800
 8003998:	48000c00 	.word	0x48000c00
 800399c:	40010400 	.word	0x40010400

080039a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	807b      	strh	r3, [r7, #2]
 80039ac:	4613      	mov	r3, r2
 80039ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b0:	787b      	ldrb	r3, [r7, #1]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039b6:	887a      	ldrh	r2, [r7, #2]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039bc:	e002      	b.n	80039c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039be:	887a      	ldrh	r2, [r7, #2]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d102      	bne.n	80039f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f001 b823 	b.w	8004a3c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 817d 	beq.w	8003d06 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a0c:	4bbc      	ldr	r3, [pc, #752]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d00c      	beq.n	8003a32 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a18:	4bb9      	ldr	r3, [pc, #740]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d15c      	bne.n	8003ade <HAL_RCC_OscConfig+0x10e>
 8003a24:	4bb6      	ldr	r3, [pc, #728]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a30:	d155      	bne.n	8003ade <HAL_RCC_OscConfig+0x10e>
 8003a32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a36:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003a3e:	fa93 f3a3 	rbit	r3, r3
 8003a42:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d102      	bne.n	8003a64 <HAL_RCC_OscConfig+0x94>
 8003a5e:	4ba8      	ldr	r3, [pc, #672]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	e015      	b.n	8003a90 <HAL_RCC_OscConfig+0xc0>
 8003a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a68:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003a70:	fa93 f3a3 	rbit	r3, r3
 8003a74:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a7c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003a80:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003a84:	fa93 f3a3 	rbit	r3, r3
 8003a88:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003a8c:	4b9c      	ldr	r3, [pc, #624]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a94:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003a98:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003a9c:	fa92 f2a2 	rbit	r2, r2
 8003aa0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003aa4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003aa8:	fab2 f282 	clz	r2, r2
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	f042 0220 	orr.w	r2, r2, #32
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	f002 021f 	and.w	r2, r2, #31
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f202 	lsl.w	r2, r1, r2
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 811f 	beq.w	8003d04 <HAL_RCC_OscConfig+0x334>
 8003ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f040 8116 	bne.w	8003d04 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f000 bfaf 	b.w	8004a3c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aee:	d106      	bne.n	8003afe <HAL_RCC_OscConfig+0x12e>
 8003af0:	4b83      	ldr	r3, [pc, #524]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a82      	ldr	r2, [pc, #520]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	e036      	b.n	8003b6c <HAL_RCC_OscConfig+0x19c>
 8003afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCC_OscConfig+0x158>
 8003b0e:	4b7c      	ldr	r3, [pc, #496]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a7b      	ldr	r2, [pc, #492]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	4b79      	ldr	r3, [pc, #484]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a78      	ldr	r2, [pc, #480]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	e021      	b.n	8003b6c <HAL_RCC_OscConfig+0x19c>
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x184>
 8003b3a:	4b71      	ldr	r3, [pc, #452]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a70      	ldr	r2, [pc, #448]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	4b6e      	ldr	r3, [pc, #440]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6d      	ldr	r2, [pc, #436]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e00b      	b.n	8003b6c <HAL_RCC_OscConfig+0x19c>
 8003b54:	4b6a      	ldr	r3, [pc, #424]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a69      	ldr	r2, [pc, #420]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b67      	ldr	r3, [pc, #412]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a66      	ldr	r2, [pc, #408]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b6c:	4b64      	ldr	r3, [pc, #400]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	f023 020f 	bic.w	r2, r3, #15
 8003b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	495f      	ldr	r1, [pc, #380]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d059      	beq.n	8003c4a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b96:	f7fe fd2b 	bl	80025f0 <HAL_GetTick>
 8003b9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba0:	f7fe fd26 	bl	80025f0 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b64      	cmp	r3, #100	; 0x64
 8003bae:	d902      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	f000 bf43 	b.w	8004a3c <HAL_RCC_OscConfig+0x106c>
 8003bb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003bca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	fab3 f383 	clz	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d102      	bne.n	8003be8 <HAL_RCC_OscConfig+0x218>
 8003be2:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	e015      	b.n	8003c14 <HAL_RCC_OscConfig+0x244>
 8003be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bec:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003bf4:	fa93 f3a3 	rbit	r3, r3
 8003bf8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003bfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c00:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003c04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003c08:	fa93 f3a3 	rbit	r3, r3
 8003c0c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003c10:	4b3b      	ldr	r3, [pc, #236]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c18:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003c1c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003c20:	fa92 f2a2 	rbit	r2, r2
 8003c24:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003c28:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003c2c:	fab2 f282 	clz	r2, r2
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	f042 0220 	orr.w	r2, r2, #32
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	f002 021f 	and.w	r2, r2, #31
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0ab      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x1d0>
 8003c48:	e05d      	b.n	8003d06 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4a:	f7fe fcd1 	bl	80025f0 <HAL_GetTick>
 8003c4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fe fccc 	bl	80025f0 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b64      	cmp	r3, #100	; 0x64
 8003c62:	d902      	bls.n	8003c6a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	f000 bee9 	b.w	8004a3c <HAL_RCC_OscConfig+0x106c>
 8003c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c6e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003c76:	fa93 f3a3 	rbit	r3, r3
 8003c7a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003c7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c82:	fab3 f383 	clz	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d102      	bne.n	8003c9c <HAL_RCC_OscConfig+0x2cc>
 8003c96:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	e015      	b.n	8003cc8 <HAL_RCC_OscConfig+0x2f8>
 8003c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ca0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cb4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003cb8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003cbc:	fa93 f3a3 	rbit	r3, r3
 8003cc0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ccc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003cd0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003cd4:	fa92 f2a2 	rbit	r2, r2
 8003cd8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003cdc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003ce0:	fab2 f282 	clz	r2, r2
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	f042 0220 	orr.w	r2, r2, #32
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	f002 021f 	and.w	r2, r2, #31
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1ab      	bne.n	8003c54 <HAL_RCC_OscConfig+0x284>
 8003cfc:	e003      	b.n	8003d06 <HAL_RCC_OscConfig+0x336>
 8003cfe:	bf00      	nop
 8003d00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 817d 	beq.w	8004016 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d1c:	4ba6      	ldr	r3, [pc, #664]	; (8003fb8 <HAL_RCC_OscConfig+0x5e8>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00b      	beq.n	8003d40 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d28:	4ba3      	ldr	r3, [pc, #652]	; (8003fb8 <HAL_RCC_OscConfig+0x5e8>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d172      	bne.n	8003e1a <HAL_RCC_OscConfig+0x44a>
 8003d34:	4ba0      	ldr	r3, [pc, #640]	; (8003fb8 <HAL_RCC_OscConfig+0x5e8>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d16c      	bne.n	8003e1a <HAL_RCC_OscConfig+0x44a>
 8003d40:	2302      	movs	r3, #2
 8003d42:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d46:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003d4a:	fa93 f3a3 	rbit	r3, r3
 8003d4e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003d52:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d102      	bne.n	8003d70 <HAL_RCC_OscConfig+0x3a0>
 8003d6a:	4b93      	ldr	r3, [pc, #588]	; (8003fb8 <HAL_RCC_OscConfig+0x5e8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	e013      	b.n	8003d98 <HAL_RCC_OscConfig+0x3c8>
 8003d70:	2302      	movs	r3, #2
 8003d72:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003d7a:	fa93 f3a3 	rbit	r3, r3
 8003d7e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003d82:	2302      	movs	r3, #2
 8003d84:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003d88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003d94:	4b88      	ldr	r3, [pc, #544]	; (8003fb8 <HAL_RCC_OscConfig+0x5e8>)
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	2202      	movs	r2, #2
 8003d9a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003d9e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003da2:	fa92 f2a2 	rbit	r2, r2
 8003da6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003daa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003dae:	fab2 f282 	clz	r2, r2
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	f042 0220 	orr.w	r2, r2, #32
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	f002 021f 	and.w	r2, r2, #31
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCC_OscConfig+0x410>
 8003dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d002      	beq.n	8003de0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f000 be2e 	b.w	8004a3c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de0:	4b75      	ldr	r3, [pc, #468]	; (8003fb8 <HAL_RCC_OscConfig+0x5e8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	21f8      	movs	r1, #248	; 0xf8
 8003df6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003dfe:	fa91 f1a1 	rbit	r1, r1
 8003e02:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003e06:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003e0a:	fab1 f181 	clz	r1, r1
 8003e0e:	b2c9      	uxtb	r1, r1
 8003e10:	408b      	lsls	r3, r1
 8003e12:	4969      	ldr	r1, [pc, #420]	; (8003fb8 <HAL_RCC_OscConfig+0x5e8>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e18:	e0fd      	b.n	8004016 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 8088 	beq.w	8003f3c <HAL_RCC_OscConfig+0x56c>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003e36:	fa93 f3a3 	rbit	r3, r3
 8003e3a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003e3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	461a      	mov	r2, r3
 8003e54:	2301      	movs	r3, #1
 8003e56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e58:	f7fe fbca 	bl	80025f0 <HAL_GetTick>
 8003e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e60:	e00a      	b.n	8003e78 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e62:	f7fe fbc5 	bl	80025f0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d902      	bls.n	8003e78 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	f000 bde2 	b.w	8004a3c <HAL_RCC_OscConfig+0x106c>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003e82:	fa93 f3a3 	rbit	r3, r3
 8003e86:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003e8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8e:	fab3 f383 	clz	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d102      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4d8>
 8003ea2:	4b45      	ldr	r3, [pc, #276]	; (8003fb8 <HAL_RCC_OscConfig+0x5e8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	e013      	b.n	8003ed0 <HAL_RCC_OscConfig+0x500>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003eba:	2302      	movs	r3, #2
 8003ebc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003ec0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003ecc:	4b3a      	ldr	r3, [pc, #232]	; (8003fb8 <HAL_RCC_OscConfig+0x5e8>)
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003ed6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003eda:	fa92 f2a2 	rbit	r2, r2
 8003ede:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003ee2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003ee6:	fab2 f282 	clz	r2, r2
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	f042 0220 	orr.w	r2, r2, #32
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	f002 021f 	and.w	r2, r2, #31
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0af      	beq.n	8003e62 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f02:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <HAL_RCC_OscConfig+0x5e8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	21f8      	movs	r1, #248	; 0xf8
 8003f18:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003f20:	fa91 f1a1 	rbit	r1, r1
 8003f24:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003f28:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003f2c:	fab1 f181 	clz	r1, r1
 8003f30:	b2c9      	uxtb	r1, r1
 8003f32:	408b      	lsls	r3, r1
 8003f34:	4920      	ldr	r1, [pc, #128]	; (8003fb8 <HAL_RCC_OscConfig+0x5e8>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
 8003f3a:	e06c      	b.n	8004016 <HAL_RCC_OscConfig+0x646>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003f4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	461a      	mov	r2, r3
 8003f64:	2300      	movs	r3, #0
 8003f66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe fb42 	bl	80025f0 <HAL_GetTick>
 8003f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f72:	f7fe fb3d 	bl	80025f0 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d902      	bls.n	8003f88 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	f000 bd5a 	b.w	8004a3c <HAL_RCC_OscConfig+0x106c>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d104      	bne.n	8003fbc <HAL_RCC_OscConfig+0x5ec>
 8003fb2:	4b01      	ldr	r3, [pc, #4]	; (8003fb8 <HAL_RCC_OscConfig+0x5e8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	e015      	b.n	8003fe4 <HAL_RCC_OscConfig+0x614>
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fc6:	fa93 f3a3 	rbit	r3, r3
 8003fca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003fce:	2302      	movs	r3, #2
 8003fd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003fd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003fd8:	fa93 f3a3 	rbit	r3, r3
 8003fdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fe0:	4bc8      	ldr	r3, [pc, #800]	; (8004304 <HAL_RCC_OscConfig+0x934>)
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003fea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003fee:	fa92 f2a2 	rbit	r2, r2
 8003ff2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003ff6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ffa:	fab2 f282 	clz	r2, r2
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	f042 0220 	orr.w	r2, r2, #32
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	f002 021f 	and.w	r2, r2, #31
 800400a:	2101      	movs	r1, #1
 800400c:	fa01 f202 	lsl.w	r2, r1, r2
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1ad      	bne.n	8003f72 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 8110 	beq.w	800424c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800402c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004030:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d079      	beq.n	8004130 <HAL_RCC_OscConfig+0x760>
 800403c:	2301      	movs	r3, #1
 800403e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004046:	fa93 f3a3 	rbit	r3, r3
 800404a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800404e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004052:	fab3 f383 	clz	r3, r3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	4bab      	ldr	r3, [pc, #684]	; (8004308 <HAL_RCC_OscConfig+0x938>)
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	461a      	mov	r2, r3
 8004062:	2301      	movs	r3, #1
 8004064:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004066:	f7fe fac3 	bl	80025f0 <HAL_GetTick>
 800406a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406e:	e00a      	b.n	8004086 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004070:	f7fe fabe 	bl	80025f0 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d902      	bls.n	8004086 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	f000 bcdb 	b.w	8004a3c <HAL_RCC_OscConfig+0x106c>
 8004086:	2302      	movs	r3, #2
 8004088:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80040a0:	2202      	movs	r2, #2
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	fa93 f2a3 	rbit	r2, r3
 80040b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040c4:	2202      	movs	r2, #2
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	fa93 f2a3 	rbit	r2, r3
 80040d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80040de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e0:	4b88      	ldr	r3, [pc, #544]	; (8004304 <HAL_RCC_OscConfig+0x934>)
 80040e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80040ec:	2102      	movs	r1, #2
 80040ee:	6019      	str	r1, [r3, #0]
 80040f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	fa93 f1a3 	rbit	r1, r3
 80040fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004102:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004106:	6019      	str	r1, [r3, #0]
  return result;
 8004108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	2101      	movs	r1, #1
 8004124:	fa01 f303 	lsl.w	r3, r1, r3
 8004128:	4013      	ands	r3, r2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0a0      	beq.n	8004070 <HAL_RCC_OscConfig+0x6a0>
 800412e:	e08d      	b.n	800424c <HAL_RCC_OscConfig+0x87c>
 8004130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004134:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004138:	2201      	movs	r2, #1
 800413a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004140:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	fa93 f2a3 	rbit	r2, r3
 800414a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004152:	601a      	str	r2, [r3, #0]
  return result;
 8004154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004158:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800415c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	4b68      	ldr	r3, [pc, #416]	; (8004308 <HAL_RCC_OscConfig+0x938>)
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	461a      	mov	r2, r3
 800416e:	2300      	movs	r3, #0
 8004170:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004172:	f7fe fa3d 	bl	80025f0 <HAL_GetTick>
 8004176:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417a:	e00a      	b.n	8004192 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417c:	f7fe fa38 	bl	80025f0 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d902      	bls.n	8004192 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	f000 bc55 	b.w	8004a3c <HAL_RCC_OscConfig+0x106c>
 8004192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004196:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800419a:	2202      	movs	r2, #2
 800419c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	fa93 f2a3 	rbit	r2, r3
 80041ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80041be:	2202      	movs	r2, #2
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	fa93 f2a3 	rbit	r2, r3
 80041d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041e2:	2202      	movs	r2, #2
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	fa93 f2a3 	rbit	r2, r3
 80041f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80041fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041fe:	4b41      	ldr	r3, [pc, #260]	; (8004304 <HAL_RCC_OscConfig+0x934>)
 8004200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004206:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800420a:	2102      	movs	r1, #2
 800420c:	6019      	str	r1, [r3, #0]
 800420e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004212:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	fa93 f1a3 	rbit	r1, r3
 800421c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004220:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004224:	6019      	str	r1, [r3, #0]
  return result;
 8004226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	fab3 f383 	clz	r3, r3
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2101      	movs	r1, #1
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d197      	bne.n	800417c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800424c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004250:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 81a1 	beq.w	80045a4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004262:	2300      	movs	r3, #0
 8004264:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004268:	4b26      	ldr	r3, [pc, #152]	; (8004304 <HAL_RCC_OscConfig+0x934>)
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d116      	bne.n	80042a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004274:	4b23      	ldr	r3, [pc, #140]	; (8004304 <HAL_RCC_OscConfig+0x934>)
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	4a22      	ldr	r2, [pc, #136]	; (8004304 <HAL_RCC_OscConfig+0x934>)
 800427a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427e:	61d3      	str	r3, [r2, #28]
 8004280:	4b20      	ldr	r3, [pc, #128]	; (8004304 <HAL_RCC_OscConfig+0x934>)
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800428c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004296:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800429a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a2:	4b1a      	ldr	r3, [pc, #104]	; (800430c <HAL_RCC_OscConfig+0x93c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11a      	bne.n	80042e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ae:	4b17      	ldr	r3, [pc, #92]	; (800430c <HAL_RCC_OscConfig+0x93c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a16      	ldr	r2, [pc, #88]	; (800430c <HAL_RCC_OscConfig+0x93c>)
 80042b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ba:	f7fe f999 	bl	80025f0 <HAL_GetTick>
 80042be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c2:	e009      	b.n	80042d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c4:	f7fe f994 	bl	80025f0 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b64      	cmp	r3, #100	; 0x64
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e3b1      	b.n	8004a3c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <HAL_RCC_OscConfig+0x93c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0ef      	beq.n	80042c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d10d      	bne.n	8004310 <HAL_RCC_OscConfig+0x940>
 80042f4:	4b03      	ldr	r3, [pc, #12]	; (8004304 <HAL_RCC_OscConfig+0x934>)
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	4a02      	ldr	r2, [pc, #8]	; (8004304 <HAL_RCC_OscConfig+0x934>)
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6213      	str	r3, [r2, #32]
 8004300:	e03c      	b.n	800437c <HAL_RCC_OscConfig+0x9ac>
 8004302:	bf00      	nop
 8004304:	40021000 	.word	0x40021000
 8004308:	10908120 	.word	0x10908120
 800430c:	40007000 	.word	0x40007000
 8004310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004314:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10c      	bne.n	800433a <HAL_RCC_OscConfig+0x96a>
 8004320:	4bc1      	ldr	r3, [pc, #772]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	4ac0      	ldr	r2, [pc, #768]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	6213      	str	r3, [r2, #32]
 800432c:	4bbe      	ldr	r3, [pc, #760]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	4abd      	ldr	r2, [pc, #756]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 8004332:	f023 0304 	bic.w	r3, r3, #4
 8004336:	6213      	str	r3, [r2, #32]
 8004338:	e020      	b.n	800437c <HAL_RCC_OscConfig+0x9ac>
 800433a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b05      	cmp	r3, #5
 8004348:	d10c      	bne.n	8004364 <HAL_RCC_OscConfig+0x994>
 800434a:	4bb7      	ldr	r3, [pc, #732]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	4ab6      	ldr	r2, [pc, #728]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 8004350:	f043 0304 	orr.w	r3, r3, #4
 8004354:	6213      	str	r3, [r2, #32]
 8004356:	4bb4      	ldr	r3, [pc, #720]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	4ab3      	ldr	r2, [pc, #716]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	6213      	str	r3, [r2, #32]
 8004362:	e00b      	b.n	800437c <HAL_RCC_OscConfig+0x9ac>
 8004364:	4bb0      	ldr	r3, [pc, #704]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4aaf      	ldr	r2, [pc, #700]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	6213      	str	r3, [r2, #32]
 8004370:	4bad      	ldr	r3, [pc, #692]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	4aac      	ldr	r2, [pc, #688]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 8004376:	f023 0304 	bic.w	r3, r3, #4
 800437a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800437c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8081 	beq.w	8004490 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438e:	f7fe f92f 	bl	80025f0 <HAL_GetTick>
 8004392:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004396:	e00b      	b.n	80043b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004398:	f7fe f92a 	bl	80025f0 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e345      	b.n	8004a3c <HAL_RCC_OscConfig+0x106c>
 80043b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80043b8:	2202      	movs	r2, #2
 80043ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	fa93 f2a3 	rbit	r2, r3
 80043ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80043dc:	2202      	movs	r2, #2
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	fa93 f2a3 	rbit	r2, r3
 80043ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80043f6:	601a      	str	r2, [r3, #0]
  return result;
 80043f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004400:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004402:	fab3 f383 	clz	r3, r3
 8004406:	b2db      	uxtb	r3, r3
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f043 0302 	orr.w	r3, r3, #2
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d102      	bne.n	800441c <HAL_RCC_OscConfig+0xa4c>
 8004416:	4b84      	ldr	r3, [pc, #528]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	e013      	b.n	8004444 <HAL_RCC_OscConfig+0xa74>
 800441c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004420:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004424:	2202      	movs	r2, #2
 8004426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	fa93 f2a3 	rbit	r2, r3
 8004436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	4b79      	ldr	r3, [pc, #484]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004448:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800444c:	2102      	movs	r1, #2
 800444e:	6011      	str	r1, [r2, #0]
 8004450:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004454:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	fa92 f1a2 	rbit	r1, r2
 800445e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004462:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004466:	6011      	str	r1, [r2, #0]
  return result;
 8004468:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800446c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	fab2 f282 	clz	r2, r2
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	f002 021f 	and.w	r2, r2, #31
 8004482:	2101      	movs	r1, #1
 8004484:	fa01 f202 	lsl.w	r2, r1, r2
 8004488:	4013      	ands	r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d084      	beq.n	8004398 <HAL_RCC_OscConfig+0x9c8>
 800448e:	e07f      	b.n	8004590 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004490:	f7fe f8ae 	bl	80025f0 <HAL_GetTick>
 8004494:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004498:	e00b      	b.n	80044b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800449a:	f7fe f8a9 	bl	80025f0 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e2c4      	b.n	8004a3c <HAL_RCC_OscConfig+0x106c>
 80044b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80044ba:	2202      	movs	r2, #2
 80044bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	fa93 f2a3 	rbit	r2, r3
 80044cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80044de:	2202      	movs	r2, #2
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	fa93 f2a3 	rbit	r2, r3
 80044f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80044f8:	601a      	str	r2, [r3, #0]
  return result;
 80044fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004502:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004504:	fab3 f383 	clz	r3, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f043 0302 	orr.w	r3, r3, #2
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d102      	bne.n	800451e <HAL_RCC_OscConfig+0xb4e>
 8004518:	4b43      	ldr	r3, [pc, #268]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	e013      	b.n	8004546 <HAL_RCC_OscConfig+0xb76>
 800451e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004522:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004526:	2202      	movs	r2, #2
 8004528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	fa93 f2a3 	rbit	r2, r3
 8004538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800453c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	4b39      	ldr	r3, [pc, #228]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800454a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800454e:	2102      	movs	r1, #2
 8004550:	6011      	str	r1, [r2, #0]
 8004552:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004556:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	fa92 f1a2 	rbit	r1, r2
 8004560:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004564:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004568:	6011      	str	r1, [r2, #0]
  return result;
 800456a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800456e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	fab2 f282 	clz	r2, r2
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	f002 021f 	and.w	r2, r2, #31
 8004584:	2101      	movs	r1, #1
 8004586:	fa01 f202 	lsl.w	r2, r1, r2
 800458a:	4013      	ands	r3, r2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d184      	bne.n	800449a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004590:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004594:	2b01      	cmp	r3, #1
 8004596:	d105      	bne.n	80045a4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004598:	4b23      	ldr	r3, [pc, #140]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	4a22      	ldr	r2, [pc, #136]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 800459e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 8242 	beq.w	8004a3a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045b6:	4b1c      	ldr	r3, [pc, #112]	; (8004628 <HAL_RCC_OscConfig+0xc58>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b08      	cmp	r3, #8
 80045c0:	f000 8213 	beq.w	80049ea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	f040 8162 	bne.w	800489a <HAL_RCC_OscConfig+0xeca>
 80045d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045da:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80045de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	fa93 f2a3 	rbit	r2, r3
 80045f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80045fa:	601a      	str	r2, [r3, #0]
  return result;
 80045fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004600:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004604:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004606:	fab3 f383 	clz	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004610:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	461a      	mov	r2, r3
 8004618:	2300      	movs	r3, #0
 800461a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fd ffe8 	bl	80025f0 <HAL_GetTick>
 8004620:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004624:	e00c      	b.n	8004640 <HAL_RCC_OscConfig+0xc70>
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800462c:	f7fd ffe0 	bl	80025f0 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e1fd      	b.n	8004a3c <HAL_RCC_OscConfig+0x106c>
 8004640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004644:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800464c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004652:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	fa93 f2a3 	rbit	r2, r3
 800465c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004660:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004664:	601a      	str	r2, [r3, #0]
  return result;
 8004666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800466e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004670:	fab3 f383 	clz	r3, r3
 8004674:	b2db      	uxtb	r3, r3
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d102      	bne.n	800468a <HAL_RCC_OscConfig+0xcba>
 8004684:	4bb0      	ldr	r3, [pc, #704]	; (8004948 <HAL_RCC_OscConfig+0xf78>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	e027      	b.n	80046da <HAL_RCC_OscConfig+0xd0a>
 800468a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	fa93 f2a3 	rbit	r2, r3
 80046a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046aa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80046b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	fa93 f2a3 	rbit	r2, r3
 80046cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	4b9c      	ldr	r3, [pc, #624]	; (8004948 <HAL_RCC_OscConfig+0xf78>)
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046de:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80046e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046e6:	6011      	str	r1, [r2, #0]
 80046e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046ec:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	fa92 f1a2 	rbit	r1, r2
 80046f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046fa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80046fe:	6011      	str	r1, [r2, #0]
  return result;
 8004700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004704:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	fab2 f282 	clz	r2, r2
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	f042 0220 	orr.w	r2, r2, #32
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	f002 021f 	and.w	r2, r2, #31
 800471a:	2101      	movs	r1, #1
 800471c:	fa01 f202 	lsl.w	r2, r1, r2
 8004720:	4013      	ands	r3, r2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d182      	bne.n	800462c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004726:	4b88      	ldr	r3, [pc, #544]	; (8004948 <HAL_RCC_OscConfig+0xf78>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800472e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800473a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	430b      	orrs	r3, r1
 8004748:	497f      	ldr	r1, [pc, #508]	; (8004948 <HAL_RCC_OscConfig+0xf78>)
 800474a:	4313      	orrs	r3, r2
 800474c:	604b      	str	r3, [r1, #4]
 800474e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004752:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004756:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800475a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004760:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	fa93 f2a3 	rbit	r2, r3
 800476a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004772:	601a      	str	r2, [r3, #0]
  return result;
 8004774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004778:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800477c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800477e:	fab3 f383 	clz	r3, r3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004788:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	461a      	mov	r2, r3
 8004790:	2301      	movs	r3, #1
 8004792:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fd ff2c 	bl	80025f0 <HAL_GetTick>
 8004798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800479c:	e009      	b.n	80047b2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800479e:	f7fd ff27 	bl	80025f0 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e144      	b.n	8004a3c <HAL_RCC_OscConfig+0x106c>
 80047b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80047ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	fa93 f2a3 	rbit	r2, r3
 80047ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80047d6:	601a      	str	r2, [r3, #0]
  return result;
 80047d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047dc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80047e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047e2:	fab3 f383 	clz	r3, r3
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d102      	bne.n	80047fc <HAL_RCC_OscConfig+0xe2c>
 80047f6:	4b54      	ldr	r3, [pc, #336]	; (8004948 <HAL_RCC_OscConfig+0xf78>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	e027      	b.n	800484c <HAL_RCC_OscConfig+0xe7c>
 80047fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004800:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800480e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	fa93 f2a3 	rbit	r2, r3
 8004818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004826:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800482a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004834:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	fa93 f2a3 	rbit	r2, r3
 800483e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004842:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	4b3f      	ldr	r3, [pc, #252]	; (8004948 <HAL_RCC_OscConfig+0xf78>)
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004850:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004854:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004858:	6011      	str	r1, [r2, #0]
 800485a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800485e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	fa92 f1a2 	rbit	r1, r2
 8004868:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800486c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004870:	6011      	str	r1, [r2, #0]
  return result;
 8004872:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004876:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	fab2 f282 	clz	r2, r2
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	f042 0220 	orr.w	r2, r2, #32
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	f002 021f 	and.w	r2, r2, #31
 800488c:	2101      	movs	r1, #1
 800488e:	fa01 f202 	lsl.w	r2, r1, r2
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d082      	beq.n	800479e <HAL_RCC_OscConfig+0xdce>
 8004898:	e0cf      	b.n	8004a3a <HAL_RCC_OscConfig+0x106a>
 800489a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800489e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80048a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	fa93 f2a3 	rbit	r2, r3
 80048b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80048be:	601a      	str	r2, [r3, #0]
  return result;
 80048c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80048c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ca:	fab3 f383 	clz	r3, r3
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	461a      	mov	r2, r3
 80048dc:	2300      	movs	r3, #0
 80048de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fd fe86 	bl	80025f0 <HAL_GetTick>
 80048e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e8:	e009      	b.n	80048fe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ea:	f7fd fe81 	bl	80025f0 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e09e      	b.n	8004a3c <HAL_RCC_OscConfig+0x106c>
 80048fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004902:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004906:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800490a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004910:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	fa93 f2a3 	rbit	r2, r3
 800491a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004922:	601a      	str	r2, [r3, #0]
  return result;
 8004924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004928:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800492c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800492e:	fab3 f383 	clz	r3, r3
 8004932:	b2db      	uxtb	r3, r3
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b01      	cmp	r3, #1
 8004940:	d104      	bne.n	800494c <HAL_RCC_OscConfig+0xf7c>
 8004942:	4b01      	ldr	r3, [pc, #4]	; (8004948 <HAL_RCC_OscConfig+0xf78>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	e029      	b.n	800499c <HAL_RCC_OscConfig+0xfcc>
 8004948:	40021000 	.word	0x40021000
 800494c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004950:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	fa93 f2a3 	rbit	r2, r3
 8004968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004976:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800497a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004984:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	fa93 f2a3 	rbit	r2, r3
 800498e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004992:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	4b2b      	ldr	r3, [pc, #172]	; (8004a48 <HAL_RCC_OscConfig+0x1078>)
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049a0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80049a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80049a8:	6011      	str	r1, [r2, #0]
 80049aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049ae:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	fa92 f1a2 	rbit	r1, r2
 80049b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049bc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80049c0:	6011      	str	r1, [r2, #0]
  return result;
 80049c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049c6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	fab2 f282 	clz	r2, r2
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	f042 0220 	orr.w	r2, r2, #32
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	f002 021f 	and.w	r2, r2, #31
 80049dc:	2101      	movs	r1, #1
 80049de:	fa01 f202 	lsl.w	r2, r1, r2
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d180      	bne.n	80048ea <HAL_RCC_OscConfig+0xf1a>
 80049e8:	e027      	b.n	8004a3a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e01e      	b.n	8004a3c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049fe:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <HAL_RCC_OscConfig+0x1078>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004a06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004a0a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d10b      	bne.n	8004a36 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004a1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004a22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d001      	beq.n	8004a3a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40021000 	.word	0x40021000

08004a4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b09e      	sub	sp, #120	; 0x78
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e162      	b.n	8004d2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a64:	4b90      	ldr	r3, [pc, #576]	; (8004ca8 <HAL_RCC_ClockConfig+0x25c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d910      	bls.n	8004a94 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a72:	4b8d      	ldr	r3, [pc, #564]	; (8004ca8 <HAL_RCC_ClockConfig+0x25c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f023 0207 	bic.w	r2, r3, #7
 8004a7a:	498b      	ldr	r1, [pc, #556]	; (8004ca8 <HAL_RCC_ClockConfig+0x25c>)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a82:	4b89      	ldr	r3, [pc, #548]	; (8004ca8 <HAL_RCC_ClockConfig+0x25c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e14a      	b.n	8004d2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa0:	4b82      	ldr	r3, [pc, #520]	; (8004cac <HAL_RCC_ClockConfig+0x260>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	497f      	ldr	r1, [pc, #508]	; (8004cac <HAL_RCC_ClockConfig+0x260>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80dc 	beq.w	8004c78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d13c      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xf6>
 8004ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004acc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ad0:	fa93 f3a3 	rbit	r3, r3
 8004ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad8:	fab3 f383 	clz	r3, r3
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d102      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xa6>
 8004aec:	4b6f      	ldr	r3, [pc, #444]	; (8004cac <HAL_RCC_ClockConfig+0x260>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	e00f      	b.n	8004b12 <HAL_RCC_ClockConfig+0xc6>
 8004af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004af6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004afa:	fa93 f3a3 	rbit	r3, r3
 8004afe:	667b      	str	r3, [r7, #100]	; 0x64
 8004b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b04:	663b      	str	r3, [r7, #96]	; 0x60
 8004b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b08:	fa93 f3a3 	rbit	r3, r3
 8004b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b0e:	4b67      	ldr	r3, [pc, #412]	; (8004cac <HAL_RCC_ClockConfig+0x260>)
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b16:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b1a:	fa92 f2a2 	rbit	r2, r2
 8004b1e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004b20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b22:	fab2 f282 	clz	r2, r2
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	f042 0220 	orr.w	r2, r2, #32
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	f002 021f 	and.w	r2, r2, #31
 8004b32:	2101      	movs	r1, #1
 8004b34:	fa01 f202 	lsl.w	r2, r1, r2
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d17b      	bne.n	8004c36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e0f3      	b.n	8004d2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d13c      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x178>
 8004b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b52:	fa93 f3a3 	rbit	r3, r3
 8004b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5a:	fab3 f383 	clz	r3, r3
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d102      	bne.n	8004b74 <HAL_RCC_ClockConfig+0x128>
 8004b6e:	4b4f      	ldr	r3, [pc, #316]	; (8004cac <HAL_RCC_ClockConfig+0x260>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	e00f      	b.n	8004b94 <HAL_RCC_ClockConfig+0x148>
 8004b74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7c:	fa93 f3a3 	rbit	r3, r3
 8004b80:	647b      	str	r3, [r7, #68]	; 0x44
 8004b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b86:	643b      	str	r3, [r7, #64]	; 0x40
 8004b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8a:	fa93 f3a3 	rbit	r3, r3
 8004b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b90:	4b46      	ldr	r3, [pc, #280]	; (8004cac <HAL_RCC_ClockConfig+0x260>)
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b98:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b9c:	fa92 f2a2 	rbit	r2, r2
 8004ba0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba4:	fab2 f282 	clz	r2, r2
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	f042 0220 	orr.w	r2, r2, #32
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	f002 021f 	and.w	r2, r2, #31
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d13a      	bne.n	8004c36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0b2      	b.n	8004d2a <HAL_RCC_ClockConfig+0x2de>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	fa93 f3a3 	rbit	r3, r3
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd2:	fab3 f383 	clz	r3, r3
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d102      	bne.n	8004bec <HAL_RCC_ClockConfig+0x1a0>
 8004be6:	4b31      	ldr	r3, [pc, #196]	; (8004cac <HAL_RCC_ClockConfig+0x260>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	e00d      	b.n	8004c08 <HAL_RCC_ClockConfig+0x1bc>
 8004bec:	2302      	movs	r3, #2
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	fa93 f3a3 	rbit	r3, r3
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	4b29      	ldr	r3, [pc, #164]	; (8004cac <HAL_RCC_ClockConfig+0x260>)
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	2202      	movs	r2, #2
 8004c0a:	61ba      	str	r2, [r7, #24]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	fa92 f2a2 	rbit	r2, r2
 8004c12:	617a      	str	r2, [r7, #20]
  return result;
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	fab2 f282 	clz	r2, r2
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	f042 0220 	orr.w	r2, r2, #32
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	f002 021f 	and.w	r2, r2, #31
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e079      	b.n	8004d2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c36:	4b1d      	ldr	r3, [pc, #116]	; (8004cac <HAL_RCC_ClockConfig+0x260>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f023 0203 	bic.w	r2, r3, #3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	491a      	ldr	r1, [pc, #104]	; (8004cac <HAL_RCC_ClockConfig+0x260>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c48:	f7fd fcd2 	bl	80025f0 <HAL_GetTick>
 8004c4c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4e:	e00a      	b.n	8004c66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c50:	f7fd fcce 	bl	80025f0 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e061      	b.n	8004d2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c66:	4b11      	ldr	r3, [pc, #68]	; (8004cac <HAL_RCC_ClockConfig+0x260>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f003 020c 	and.w	r2, r3, #12
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d1eb      	bne.n	8004c50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <HAL_RCC_ClockConfig+0x25c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d214      	bcs.n	8004cb0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c86:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <HAL_RCC_ClockConfig+0x25c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f023 0207 	bic.w	r2, r3, #7
 8004c8e:	4906      	ldr	r1, [pc, #24]	; (8004ca8 <HAL_RCC_ClockConfig+0x25c>)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c96:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <HAL_RCC_ClockConfig+0x25c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e040      	b.n	8004d2a <HAL_RCC_ClockConfig+0x2de>
 8004ca8:	40022000 	.word	0x40022000
 8004cac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <HAL_RCC_ClockConfig+0x2e8>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	491a      	ldr	r1, [pc, #104]	; (8004d34 <HAL_RCC_ClockConfig+0x2e8>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cda:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <HAL_RCC_ClockConfig+0x2e8>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4912      	ldr	r1, [pc, #72]	; (8004d34 <HAL_RCC_ClockConfig+0x2e8>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004cee:	f000 f829 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 8004cf2:	4601      	mov	r1, r0
 8004cf4:	4b0f      	ldr	r3, [pc, #60]	; (8004d34 <HAL_RCC_ClockConfig+0x2e8>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cfc:	22f0      	movs	r2, #240	; 0xf0
 8004cfe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	fa92 f2a2 	rbit	r2, r2
 8004d06:	60fa      	str	r2, [r7, #12]
  return result;
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	fab2 f282 	clz	r2, r2
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	40d3      	lsrs	r3, r2
 8004d12:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <HAL_RCC_ClockConfig+0x2ec>)
 8004d14:	5cd3      	ldrb	r3, [r2, r3]
 8004d16:	fa21 f303 	lsr.w	r3, r1, r3
 8004d1a:	4a08      	ldr	r2, [pc, #32]	; (8004d3c <HAL_RCC_ClockConfig+0x2f0>)
 8004d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004d1e:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <HAL_RCC_ClockConfig+0x2f4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fd fc20 	bl	8002568 <HAL_InitTick>
  
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3778      	adds	r7, #120	; 0x78
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000
 8004d38:	08005d14 	.word	0x08005d14
 8004d3c:	20000000 	.word	0x20000000
 8004d40:	20000004 	.word	0x20000004

08004d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b08b      	sub	sp, #44	; 0x2c
 8004d48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	2300      	movs	r3, #0
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004d5e:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f003 030c 	and.w	r3, r3, #12
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d002      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0x30>
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d003      	beq.n	8004d7a <HAL_RCC_GetSysClockFreq+0x36>
 8004d72:	e03c      	b.n	8004dee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d74:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d76:	623b      	str	r3, [r7, #32]
      break;
 8004d78:	e03c      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004d80:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004d84:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	fa92 f2a2 	rbit	r2, r2
 8004d8c:	607a      	str	r2, [r7, #4]
  return result;
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	fab2 f282 	clz	r2, r2
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	40d3      	lsrs	r3, r2
 8004d98:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d9a:	5cd3      	ldrb	r3, [r2, r3]
 8004d9c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004d9e:	4b19      	ldr	r3, [pc, #100]	; (8004e04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	220f      	movs	r2, #15
 8004da8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	fa92 f2a2 	rbit	r2, r2
 8004db0:	60fa      	str	r2, [r7, #12]
  return result;
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	fab2 f282 	clz	r2, r2
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	40d3      	lsrs	r3, r2
 8004dbc:	4a14      	ldr	r2, [pc, #80]	; (8004e10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004dbe:	5cd3      	ldrb	r3, [r2, r3]
 8004dc0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004dcc:	4a0e      	ldr	r2, [pc, #56]	; (8004e08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
 8004ddc:	e004      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	4a0c      	ldr	r2, [pc, #48]	; (8004e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004de2:	fb02 f303 	mul.w	r3, r2, r3
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	623b      	str	r3, [r7, #32]
      break;
 8004dec:	e002      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004dee:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004df0:	623b      	str	r3, [r7, #32]
      break;
 8004df2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004df4:	6a3b      	ldr	r3, [r7, #32]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	372c      	adds	r7, #44	; 0x2c
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40021000 	.word	0x40021000
 8004e08:	007a1200 	.word	0x007a1200
 8004e0c:	08005d2c 	.word	0x08005d2c
 8004e10:	08005d3c 	.word	0x08005d3c
 8004e14:	003d0900 	.word	0x003d0900

08004e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e1c:	4b03      	ldr	r3, [pc, #12]	; (8004e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20000000 	.word	0x20000000

08004e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004e36:	f7ff ffef 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e3a:	4601      	mov	r1, r0
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e44:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004e48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	fa92 f2a2 	rbit	r2, r2
 8004e50:	603a      	str	r2, [r7, #0]
  return result;
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	fab2 f282 	clz	r2, r2
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	40d3      	lsrs	r3, r2
 8004e5c:	4a04      	ldr	r2, [pc, #16]	; (8004e70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004e5e:	5cd3      	ldrb	r3, [r2, r3]
 8004e60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	08005d24 	.word	0x08005d24

08004e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004e7a:	f7ff ffcd 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e7e:	4601      	mov	r1, r0
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004e88:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004e8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	fa92 f2a2 	rbit	r2, r2
 8004e94:	603a      	str	r2, [r7, #0]
  return result;
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	fab2 f282 	clz	r2, r2
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	40d3      	lsrs	r3, r2
 8004ea0:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004ea2:	5cd3      	ldrb	r3, [r2, r3]
 8004ea4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	08005d24 	.word	0x08005d24

08004eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b092      	sub	sp, #72	; 0x48
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 80cd 	beq.w	8005076 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004edc:	4b8e      	ldr	r3, [pc, #568]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10e      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee8:	4b8b      	ldr	r3, [pc, #556]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	4a8a      	ldr	r2, [pc, #552]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	61d3      	str	r3, [r2, #28]
 8004ef4:	4b88      	ldr	r3, [pc, #544]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f06:	4b85      	ldr	r3, [pc, #532]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d118      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f12:	4b82      	ldr	r3, [pc, #520]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a81      	ldr	r2, [pc, #516]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f1e:	f7fd fb67 	bl	80025f0 <HAL_GetTick>
 8004f22:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f24:	e008      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f26:	f7fd fb63 	bl	80025f0 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b64      	cmp	r3, #100	; 0x64
 8004f32:	d901      	bls.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e0ea      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f38:	4b78      	ldr	r3, [pc, #480]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f44:	4b74      	ldr	r3, [pc, #464]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d07d      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d076      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f62:	4b6d      	ldr	r3, [pc, #436]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f70:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	fa93 f3a3 	rbit	r3, r3
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f7c:	fab3 f383 	clz	r3, r3
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	4b66      	ldr	r3, [pc, #408]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f98:	fa93 f3a3 	rbit	r3, r3
 8004f9c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa0:	fab3 f383 	clz	r3, r3
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4b5d      	ldr	r3, [pc, #372]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004fb4:	4a58      	ldr	r2, [pc, #352]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d045      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7fd fb14 	bl	80025f0 <HAL_GetTick>
 8004fc8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fca:	e00a      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fcc:	f7fd fb10 	bl	80025f0 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e095      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	fa93 f3a3 	rbit	r3, r3
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
 8004fee:	2302      	movs	r3, #2
 8004ff0:	623b      	str	r3, [r7, #32]
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	fa93 f3a3 	rbit	r3, r3
 8004ff8:	61fb      	str	r3, [r7, #28]
  return result;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffc:	fab3 f383 	clz	r3, r3
 8005000:	b2db      	uxtb	r3, r3
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	b2db      	uxtb	r3, r3
 8005006:	f043 0302 	orr.w	r3, r3, #2
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d102      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005010:	4b41      	ldr	r3, [pc, #260]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	e007      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005016:	2302      	movs	r3, #2
 8005018:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	fa93 f3a3 	rbit	r3, r3
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	4b3d      	ldr	r3, [pc, #244]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2202      	movs	r2, #2
 8005028:	613a      	str	r2, [r7, #16]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	fa92 f2a2 	rbit	r2, r2
 8005030:	60fa      	str	r2, [r7, #12]
  return result;
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	fab2 f282 	clz	r2, r2
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	f002 021f 	and.w	r2, r2, #31
 8005044:	2101      	movs	r1, #1
 8005046:	fa01 f202 	lsl.w	r2, r1, r2
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0bd      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005050:	4b31      	ldr	r3, [pc, #196]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	492e      	ldr	r1, [pc, #184]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800505e:	4313      	orrs	r3, r2
 8005060:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005062:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005066:	2b01      	cmp	r3, #1
 8005068:	d105      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800506a:	4b2b      	ldr	r3, [pc, #172]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	4a2a      	ldr	r2, [pc, #168]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005074:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005082:	4b25      	ldr	r3, [pc, #148]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	f023 0203 	bic.w	r2, r3, #3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	4922      	ldr	r1, [pc, #136]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005090:	4313      	orrs	r3, r2
 8005092:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050a0:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	f023 0210 	bic.w	r2, r3, #16
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	491a      	ldr	r1, [pc, #104]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d008      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80050be:	4b16      	ldr	r3, [pc, #88]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	4913      	ldr	r1, [pc, #76]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d008      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80050dc:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	490b      	ldr	r1, [pc, #44]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80050fa:	4b07      	ldr	r3, [pc, #28]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	4904      	ldr	r1, [pc, #16]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005108:	4313      	orrs	r3, r2
 800510a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3748      	adds	r7, #72	; 0x48
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40021000 	.word	0x40021000
 800511c:	40007000 	.word	0x40007000
 8005120:	10908100 	.word	0x10908100

08005124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e049      	b.n	80051ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fd f92e 	bl	80023ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3304      	adds	r3, #4
 8005160:	4619      	mov	r1, r3
 8005162:	4610      	mov	r0, r2
 8005164:	f000 f88a 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d001      	beq.n	80051ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e038      	b.n	800525e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1c      	ldr	r2, [pc, #112]	; (800526c <HAL_TIM_Base_Start+0x98>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00e      	beq.n	800521c <HAL_TIM_Base_Start+0x48>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005206:	d009      	beq.n	800521c <HAL_TIM_Base_Start+0x48>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a18      	ldr	r2, [pc, #96]	; (8005270 <HAL_TIM_Base_Start+0x9c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_TIM_Base_Start+0x48>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a17      	ldr	r2, [pc, #92]	; (8005274 <HAL_TIM_Base_Start+0xa0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d115      	bne.n	8005248 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	4b15      	ldr	r3, [pc, #84]	; (8005278 <HAL_TIM_Base_Start+0xa4>)
 8005224:	4013      	ands	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b06      	cmp	r3, #6
 800522c:	d015      	beq.n	800525a <HAL_TIM_Base_Start+0x86>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005234:	d011      	beq.n	800525a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0201 	orr.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005246:	e008      	b.n	800525a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	e000      	b.n	800525c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40000400 	.word	0x40000400
 8005274:	40014000 	.word	0x40014000
 8005278:	00010007 	.word	0x00010007

0800527c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a32      	ldr	r2, [pc, #200]	; (8005358 <TIM_Base_SetConfig+0xdc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d007      	beq.n	80052a4 <TIM_Base_SetConfig+0x28>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529a:	d003      	beq.n	80052a4 <TIM_Base_SetConfig+0x28>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a2f      	ldr	r2, [pc, #188]	; (800535c <TIM_Base_SetConfig+0xe0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d108      	bne.n	80052b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a27      	ldr	r2, [pc, #156]	; (8005358 <TIM_Base_SetConfig+0xdc>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <TIM_Base_SetConfig+0x6a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c4:	d00f      	beq.n	80052e6 <TIM_Base_SetConfig+0x6a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a24      	ldr	r2, [pc, #144]	; (800535c <TIM_Base_SetConfig+0xe0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00b      	beq.n	80052e6 <TIM_Base_SetConfig+0x6a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a23      	ldr	r2, [pc, #140]	; (8005360 <TIM_Base_SetConfig+0xe4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d007      	beq.n	80052e6 <TIM_Base_SetConfig+0x6a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a22      	ldr	r2, [pc, #136]	; (8005364 <TIM_Base_SetConfig+0xe8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_Base_SetConfig+0x6a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a21      	ldr	r2, [pc, #132]	; (8005368 <TIM_Base_SetConfig+0xec>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d108      	bne.n	80052f8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a0e      	ldr	r2, [pc, #56]	; (8005358 <TIM_Base_SetConfig+0xdc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00b      	beq.n	800533c <TIM_Base_SetConfig+0xc0>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a0e      	ldr	r2, [pc, #56]	; (8005360 <TIM_Base_SetConfig+0xe4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d007      	beq.n	800533c <TIM_Base_SetConfig+0xc0>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a0d      	ldr	r2, [pc, #52]	; (8005364 <TIM_Base_SetConfig+0xe8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_Base_SetConfig+0xc0>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a0c      	ldr	r2, [pc, #48]	; (8005368 <TIM_Base_SetConfig+0xec>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d103      	bne.n	8005344 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	615a      	str	r2, [r3, #20]
}
 800534a:	bf00      	nop
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40000400 	.word	0x40000400
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800

0800536c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005380:	2302      	movs	r3, #2
 8005382:	e054      	b.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a24      	ldr	r2, [pc, #144]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d108      	bne.n	80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a17      	ldr	r2, [pc, #92]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00e      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ec:	d009      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a13      	ldr	r2, [pc, #76]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a11      	ldr	r2, [pc, #68]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d10c      	bne.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005408:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	4313      	orrs	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40000400 	.word	0x40000400
 8005444:	40014000 	.word	0x40014000

08005448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e040      	b.n	80054dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fc ffbe 	bl	80023ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2224      	movs	r2, #36	; 0x24
 8005474:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0201 	bic.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f8b6 	bl	80055f8 <UART_SetConfig>
 800548c:	4603      	mov	r3, r0
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e022      	b.n	80054dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f9e0 	bl	8005864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa67 	bl	80059a8 <UART_CheckIdleState>
 80054da:	4603      	mov	r3, r0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08a      	sub	sp, #40	; 0x28
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	4613      	mov	r3, r2
 80054f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d178      	bne.n	80055ee <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <HAL_UART_Transmit+0x24>
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e071      	b.n	80055f0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2221      	movs	r2, #33	; 0x21
 8005518:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800551a:	f7fd f869 	bl	80025f0 <HAL_GetTick>
 800551e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	88fa      	ldrh	r2, [r7, #6]
 8005524:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005538:	d108      	bne.n	800554c <HAL_UART_Transmit+0x68>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d104      	bne.n	800554c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	e003      	b.n	8005554 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005550:	2300      	movs	r3, #0
 8005552:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005554:	e030      	b.n	80055b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2200      	movs	r2, #0
 800555e:	2180      	movs	r1, #128	; 0x80
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 fac9 	bl	8005af8 <UART_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d004      	beq.n	8005576 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e03c      	b.n	80055f0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10b      	bne.n	8005594 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	881a      	ldrh	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005588:	b292      	uxth	r2, r2
 800558a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	3302      	adds	r3, #2
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	e008      	b.n	80055a6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	781a      	ldrb	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	b292      	uxth	r2, r2
 800559e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	3301      	adds	r3, #1
 80055a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1c8      	bne.n	8005556 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2200      	movs	r2, #0
 80055cc:	2140      	movs	r1, #64	; 0x40
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fa92 	bl	8005af8 <UART_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d004      	beq.n	80055e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e005      	b.n	80055f0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e000      	b.n	80055f0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80055ee:	2302      	movs	r3, #2
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3720      	adds	r7, #32
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b8a      	ldr	r3, [pc, #552]	; (800584c <UART_SetConfig+0x254>)
 8005624:	4013      	ands	r3, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	6979      	ldr	r1, [r7, #20]
 800562c:	430b      	orrs	r3, r1
 800562e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	430a      	orrs	r2, r1
 8005668:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a78      	ldr	r2, [pc, #480]	; (8005850 <UART_SetConfig+0x258>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d120      	bne.n	80056b6 <UART_SetConfig+0xbe>
 8005674:	4b77      	ldr	r3, [pc, #476]	; (8005854 <UART_SetConfig+0x25c>)
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	2b03      	cmp	r3, #3
 800567e:	d817      	bhi.n	80056b0 <UART_SetConfig+0xb8>
 8005680:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <UART_SetConfig+0x90>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	08005699 	.word	0x08005699
 800568c:	080056a5 	.word	0x080056a5
 8005690:	080056ab 	.word	0x080056ab
 8005694:	0800569f 	.word	0x0800569f
 8005698:	2300      	movs	r3, #0
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	e01d      	b.n	80056da <UART_SetConfig+0xe2>
 800569e:	2302      	movs	r3, #2
 80056a0:	77fb      	strb	r3, [r7, #31]
 80056a2:	e01a      	b.n	80056da <UART_SetConfig+0xe2>
 80056a4:	2304      	movs	r3, #4
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e017      	b.n	80056da <UART_SetConfig+0xe2>
 80056aa:	2308      	movs	r3, #8
 80056ac:	77fb      	strb	r3, [r7, #31]
 80056ae:	e014      	b.n	80056da <UART_SetConfig+0xe2>
 80056b0:	2310      	movs	r3, #16
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e011      	b.n	80056da <UART_SetConfig+0xe2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a67      	ldr	r2, [pc, #412]	; (8005858 <UART_SetConfig+0x260>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d102      	bne.n	80056c6 <UART_SetConfig+0xce>
 80056c0:	2300      	movs	r3, #0
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	e009      	b.n	80056da <UART_SetConfig+0xe2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a64      	ldr	r2, [pc, #400]	; (800585c <UART_SetConfig+0x264>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d102      	bne.n	80056d6 <UART_SetConfig+0xde>
 80056d0:	2300      	movs	r3, #0
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e001      	b.n	80056da <UART_SetConfig+0xe2>
 80056d6:	2310      	movs	r3, #16
 80056d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e2:	d15a      	bne.n	800579a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80056e4:	7ffb      	ldrb	r3, [r7, #31]
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d827      	bhi.n	800573a <UART_SetConfig+0x142>
 80056ea:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <UART_SetConfig+0xf8>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	08005715 	.word	0x08005715
 80056f4:	0800571d 	.word	0x0800571d
 80056f8:	08005725 	.word	0x08005725
 80056fc:	0800573b 	.word	0x0800573b
 8005700:	0800572b 	.word	0x0800572b
 8005704:	0800573b 	.word	0x0800573b
 8005708:	0800573b 	.word	0x0800573b
 800570c:	0800573b 	.word	0x0800573b
 8005710:	08005733 	.word	0x08005733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005714:	f7ff fb8c 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 8005718:	61b8      	str	r0, [r7, #24]
        break;
 800571a:	e013      	b.n	8005744 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800571c:	f7ff fbaa 	bl	8004e74 <HAL_RCC_GetPCLK2Freq>
 8005720:	61b8      	str	r0, [r7, #24]
        break;
 8005722:	e00f      	b.n	8005744 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005724:	4b4e      	ldr	r3, [pc, #312]	; (8005860 <UART_SetConfig+0x268>)
 8005726:	61bb      	str	r3, [r7, #24]
        break;
 8005728:	e00c      	b.n	8005744 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800572a:	f7ff fb0b 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 800572e:	61b8      	str	r0, [r7, #24]
        break;
 8005730:	e008      	b.n	8005744 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005736:	61bb      	str	r3, [r7, #24]
        break;
 8005738:	e004      	b.n	8005744 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	77bb      	strb	r3, [r7, #30]
        break;
 8005742:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d074      	beq.n	8005834 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	005a      	lsls	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	441a      	add	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	fbb2 f3f3 	udiv	r3, r2, r3
 800575e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b0f      	cmp	r3, #15
 8005764:	d916      	bls.n	8005794 <UART_SetConfig+0x19c>
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800576c:	d212      	bcs.n	8005794 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	b29b      	uxth	r3, r3
 8005772:	f023 030f 	bic.w	r3, r3, #15
 8005776:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	085b      	lsrs	r3, r3, #1
 800577c:	b29b      	uxth	r3, r3
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	b29a      	uxth	r2, r3
 8005784:	89fb      	ldrh	r3, [r7, #14]
 8005786:	4313      	orrs	r3, r2
 8005788:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	89fa      	ldrh	r2, [r7, #14]
 8005790:	60da      	str	r2, [r3, #12]
 8005792:	e04f      	b.n	8005834 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	77bb      	strb	r3, [r7, #30]
 8005798:	e04c      	b.n	8005834 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800579a:	7ffb      	ldrb	r3, [r7, #31]
 800579c:	2b08      	cmp	r3, #8
 800579e:	d828      	bhi.n	80057f2 <UART_SetConfig+0x1fa>
 80057a0:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <UART_SetConfig+0x1b0>)
 80057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a6:	bf00      	nop
 80057a8:	080057cd 	.word	0x080057cd
 80057ac:	080057d5 	.word	0x080057d5
 80057b0:	080057dd 	.word	0x080057dd
 80057b4:	080057f3 	.word	0x080057f3
 80057b8:	080057e3 	.word	0x080057e3
 80057bc:	080057f3 	.word	0x080057f3
 80057c0:	080057f3 	.word	0x080057f3
 80057c4:	080057f3 	.word	0x080057f3
 80057c8:	080057eb 	.word	0x080057eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057cc:	f7ff fb30 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 80057d0:	61b8      	str	r0, [r7, #24]
        break;
 80057d2:	e013      	b.n	80057fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057d4:	f7ff fb4e 	bl	8004e74 <HAL_RCC_GetPCLK2Freq>
 80057d8:	61b8      	str	r0, [r7, #24]
        break;
 80057da:	e00f      	b.n	80057fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057dc:	4b20      	ldr	r3, [pc, #128]	; (8005860 <UART_SetConfig+0x268>)
 80057de:	61bb      	str	r3, [r7, #24]
        break;
 80057e0:	e00c      	b.n	80057fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057e2:	f7ff faaf 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 80057e6:	61b8      	str	r0, [r7, #24]
        break;
 80057e8:	e008      	b.n	80057fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ee:	61bb      	str	r3, [r7, #24]
        break;
 80057f0:	e004      	b.n	80057fc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	77bb      	strb	r3, [r7, #30]
        break;
 80057fa:	bf00      	nop
    }

    if (pclk != 0U)
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d018      	beq.n	8005834 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	085a      	lsrs	r2, r3, #1
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	441a      	add	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	fbb2 f3f3 	udiv	r3, r2, r3
 8005814:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b0f      	cmp	r3, #15
 800581a:	d909      	bls.n	8005830 <UART_SetConfig+0x238>
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005822:	d205      	bcs.n	8005830 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	b29a      	uxth	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60da      	str	r2, [r3, #12]
 800582e:	e001      	b.n	8005834 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005840:	7fbb      	ldrb	r3, [r7, #30]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3720      	adds	r7, #32
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	efff69f3 	.word	0xefff69f3
 8005850:	40013800 	.word	0x40013800
 8005854:	40021000 	.word	0x40021000
 8005858:	40004400 	.word	0x40004400
 800585c:	40004800 	.word	0x40004800
 8005860:	007a1200 	.word	0x007a1200

08005864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01a      	beq.n	800597a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005962:	d10a      	bne.n	800597a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b098      	sub	sp, #96	; 0x60
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059b8:	f7fc fe1a 	bl	80025f0 <HAL_GetTick>
 80059bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d12e      	bne.n	8005a2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d4:	2200      	movs	r2, #0
 80059d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f88c 	bl	8005af8 <UART_WaitOnFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d021      	beq.n	8005a2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ee:	e853 3f00 	ldrex	r3, [r3]
 80059f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059fa:	653b      	str	r3, [r7, #80]	; 0x50
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a04:	647b      	str	r3, [r7, #68]	; 0x44
 8005a06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e6      	bne.n	80059e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e062      	b.n	8005af0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d149      	bne.n	8005acc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a40:	2200      	movs	r2, #0
 8005a42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f856 	bl	8005af8 <UART_WaitOnFlagUntilTimeout>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d03c      	beq.n	8005acc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a70:	633b      	str	r3, [r7, #48]	; 0x30
 8005a72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e6      	bne.n	8005a52 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3308      	adds	r3, #8
 8005a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aa4:	61fa      	str	r2, [r7, #28]
 8005aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	69b9      	ldr	r1, [r7, #24]
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e5      	bne.n	8005a84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e011      	b.n	8005af0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3758      	adds	r7, #88	; 0x58
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	4613      	mov	r3, r2
 8005b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b08:	e049      	b.n	8005b9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b10:	d045      	beq.n	8005b9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b12:	f7fc fd6d 	bl	80025f0 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d302      	bcc.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e048      	b.n	8005bbe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d031      	beq.n	8005b9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d110      	bne.n	8005b6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2208      	movs	r2, #8
 8005b4e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 f838 	bl	8005bc6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2208      	movs	r2, #8
 8005b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e029      	b.n	8005bbe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b78:	d111      	bne.n	8005b9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f81e 	bl	8005bc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e00f      	b.n	8005bbe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69da      	ldr	r2, [r3, #28]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	bf0c      	ite	eq
 8005bae:	2301      	moveq	r3, #1
 8005bb0:	2300      	movne	r3, #0
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	79fb      	ldrb	r3, [r7, #7]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d0a6      	beq.n	8005b0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b095      	sub	sp, #84	; 0x54
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bec:	643b      	str	r3, [r7, #64]	; 0x40
 8005bee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e6      	bne.n	8005bce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3308      	adds	r3, #8
 8005c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f023 0301 	bic.w	r3, r3, #1
 8005c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c28:	e841 2300 	strex	r3, r2, [r1]
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e5      	bne.n	8005c00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d118      	bne.n	8005c6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f023 0310 	bic.w	r3, r3, #16
 8005c50:	647b      	str	r3, [r7, #68]	; 0x44
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	6979      	ldr	r1, [r7, #20]
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	613b      	str	r3, [r7, #16]
   return(result);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e6      	bne.n	8005c3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c82:	bf00      	nop
 8005c84:	3754      	adds	r7, #84	; 0x54
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <__libc_init_array>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	4d0d      	ldr	r5, [pc, #52]	; (8005cc8 <__libc_init_array+0x38>)
 8005c94:	4c0d      	ldr	r4, [pc, #52]	; (8005ccc <__libc_init_array+0x3c>)
 8005c96:	1b64      	subs	r4, r4, r5
 8005c98:	10a4      	asrs	r4, r4, #2
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	42a6      	cmp	r6, r4
 8005c9e:	d109      	bne.n	8005cb4 <__libc_init_array+0x24>
 8005ca0:	4d0b      	ldr	r5, [pc, #44]	; (8005cd0 <__libc_init_array+0x40>)
 8005ca2:	4c0c      	ldr	r4, [pc, #48]	; (8005cd4 <__libc_init_array+0x44>)
 8005ca4:	f000 f820 	bl	8005ce8 <_init>
 8005ca8:	1b64      	subs	r4, r4, r5
 8005caa:	10a4      	asrs	r4, r4, #2
 8005cac:	2600      	movs	r6, #0
 8005cae:	42a6      	cmp	r6, r4
 8005cb0:	d105      	bne.n	8005cbe <__libc_init_array+0x2e>
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb8:	4798      	blx	r3
 8005cba:	3601      	adds	r6, #1
 8005cbc:	e7ee      	b.n	8005c9c <__libc_init_array+0xc>
 8005cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc2:	4798      	blx	r3
 8005cc4:	3601      	adds	r6, #1
 8005cc6:	e7f2      	b.n	8005cae <__libc_init_array+0x1e>
 8005cc8:	08005d54 	.word	0x08005d54
 8005ccc:	08005d54 	.word	0x08005d54
 8005cd0:	08005d54 	.word	0x08005d54
 8005cd4:	08005d58 	.word	0x08005d58

08005cd8 <memset>:
 8005cd8:	4402      	add	r2, r0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d100      	bne.n	8005ce2 <memset+0xa>
 8005ce0:	4770      	bx	lr
 8005ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce6:	e7f9      	b.n	8005cdc <memset+0x4>

08005ce8 <_init>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	bf00      	nop
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr

08005cf4 <_fini>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	bf00      	nop
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr
